// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: monitor.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HostStatusListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HostStatusListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostStatusListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostStatusListDataMultiError, or nil if none found.
func (m *HostStatusListData) ValidateAll() error {
	return m.validate(true)
}

func (m *HostStatusListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostIP

	// no validation rules for StatusLevel

	// no validation rules for AbnormalMsg

	if len(errors) > 0 {
		return HostStatusListDataMultiError(errors)
	}

	return nil
}

// HostStatusListDataMultiError is an error wrapping multiple validation errors
// returned by HostStatusListData.ValidateAll() if the designated constraints
// aren't met.
type HostStatusListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostStatusListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostStatusListDataMultiError) AllErrors() []error { return m }

// HostStatusListDataValidationError is the validation error returned by
// HostStatusListData.Validate if the designated constraints aren't met.
type HostStatusListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostStatusListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostStatusListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostStatusListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostStatusListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostStatusListDataValidationError) ErrorName() string {
	return "HostStatusListDataValidationError"
}

// Error satisfies the builtin error interface
func (e HostStatusListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostStatusListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostStatusListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostStatusListDataValidationError{}

// Validate checks the field values on HostStatusListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HostStatusListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostStatusListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostStatusListRequestMultiError, or nil if none found.
func (m *HostStatusListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HostStatusListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgName

	if len(errors) > 0 {
		return HostStatusListRequestMultiError(errors)
	}

	return nil
}

// HostStatusListRequestMultiError is an error wrapping multiple validation
// errors returned by HostStatusListRequest.ValidateAll() if the designated
// constraints aren't met.
type HostStatusListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostStatusListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostStatusListRequestMultiError) AllErrors() []error { return m }

// HostStatusListRequestValidationError is the validation error returned by
// HostStatusListRequest.Validate if the designated constraints aren't met.
type HostStatusListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostStatusListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostStatusListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostStatusListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostStatusListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostStatusListRequestValidationError) ErrorName() string {
	return "HostStatusListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HostStatusListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostStatusListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostStatusListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostStatusListRequestValidationError{}

// Validate checks the field values on HostStatusListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HostStatusListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostStatusListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostStatusListResponseMultiError, or nil if none found.
func (m *HostStatusListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HostStatusListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostStatusListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostStatusListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostStatusListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HostStatusListResponseMultiError(errors)
	}

	return nil
}

// HostStatusListResponseMultiError is an error wrapping multiple validation
// errors returned by HostStatusListResponse.ValidateAll() if the designated
// constraints aren't met.
type HostStatusListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostStatusListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostStatusListResponseMultiError) AllErrors() []error { return m }

// HostStatusListResponseValidationError is the validation error returned by
// HostStatusListResponse.Validate if the designated constraints aren't met.
type HostStatusListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostStatusListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostStatusListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostStatusListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostStatusListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostStatusListResponseValidationError) ErrorName() string {
	return "HostStatusListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HostStatusListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostStatusListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostStatusListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostStatusListResponseValidationError{}

// Validate checks the field values on MONITOR_ADDON_LOGS_SEARCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ADDON_LOGS_SEARCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ADDON_LOGS_SEARCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ADDON_LOGS_SEARCH_RequestMultiError, or nil if none found.
func (m *MONITOR_ADDON_LOGS_SEARCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ADDON_LOGS_SEARCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addon

	if len(errors) > 0 {
		return MONITOR_ADDON_LOGS_SEARCH_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ADDON_LOGS_SEARCH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ADDON_LOGS_SEARCH_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ADDON_LOGS_SEARCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ADDON_LOGS_SEARCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ADDON_LOGS_SEARCH_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ADDON_LOGS_SEARCH_RequestValidationError is the validation error
// returned by MONITOR_ADDON_LOGS_SEARCH_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ADDON_LOGS_SEARCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) ErrorName() string {
	return "MONITOR_ADDON_LOGS_SEARCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ADDON_LOGS_SEARCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ADDON_LOGS_SEARCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ADDON_LOGS_SEARCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ADDON_LOGS_SEARCH_RequestValidationError{}

// Validate checks the field values on MONITOR_ADDON_LOGS_TAGS_TREE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ADDON_LOGS_TAGS_TREE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ADDON_LOGS_TAGS_TREE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError, or nil if none found.
func (m *MONITOR_ADDON_LOGS_TAGS_TREE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ADDON_LOGS_TAGS_TREE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ADDON_LOGS_TAGS_TREE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ADDON_LOGS_TAGS_TREE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError is the validation error
// returned by MONITOR_ADDON_LOGS_TAGS_TREE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) ErrorName() string {
	return "MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ADDON_LOGS_TAGS_TREE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ADDON_LOGS_TAGS_TREE_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_ID_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_ALERT_ID_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_ID_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_ID_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_ID_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_ID_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_ID_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_ID_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_ALERT_ID_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_ID_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_ID_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_ID_DELETE_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_ID_DELETE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_ID_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_ID_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_ID_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_ID_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_ID_DELETE_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_ID_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_ALERT_ID_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_ID_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_ID_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_ID_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_ID_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_ID_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_ID_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_ALERT_ID_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_ID_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_ID_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_ID_GET_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_ID_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_ID_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_ID_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_ID_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_ID_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_ID_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_ID_PUT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_ALERT_ID_PUT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_ID_PUT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_ID_PUT_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_ID_PUT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_ID_PUT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_ID_PUT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_ID_PUT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_ALERT_ID_PUT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_PUT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_ID_PUT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_ID_PUT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_ID_PUT_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_ID_PUT_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_PUT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_ID_PUT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_ID_PUT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_ID_PUT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_ID_PUT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_ID_PUT_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_ID_SWITCH_PUT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_ALERT_ID_SWITCH_PUT_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_ALERT_ID_SWITCH_PUT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError is the validation
// error returned by MONITOR_APM_ALERT_ID_SWITCH_PUT_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_ID_SWITCH_PUT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_ID_SWITCH_PUT_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_ALERT_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_APM_ALERT_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_APM_ALERT_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_LIST_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_LIST_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_LIST_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_POST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_ALERT_POST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_POST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_POST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_POST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_POST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_POST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_POST_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_APM_ALERT_POST_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_APM_ALERT_POST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_POST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_POST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_POST_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_POST_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_POST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_POST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_POST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_POST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_POST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_POST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_POST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_POST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_POST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_POST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_POST_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_ALERT_RULE_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_ALERT_RULE_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_ALERT_RULE_LIST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_ALERT_RULE_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_ALERT_RULE_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_ALERT_RULE_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_ALERT_RULE_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_ALERT_RULE_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_ALERT_RULE_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_RULE_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_ALERT_RULE_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_ALERT_RULE_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_ALERT_RULE_LIST_RequestValidationError is the validation error
// returned by MONITOR_APM_ALERT_RULE_LIST_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_ALERT_RULE_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_ALERT_RULE_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_ALERT_RULE_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_ALERT_RULE_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_ALERT_RULE_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_ALERT_RULE_LIST_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError is the
// validation error returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError is the validation
// error returned by MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError is the validation
// error returned by MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError is the
// validation error returned by
// MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError is the validation
// error returned by MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_LIST_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError, or nil
// if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError is an
// error wrapping multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request.ValidateAll() if
// the designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestMultiError) AllErrors() []error {
	return m
}

// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError is
// the validation error returned by
// MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_CUSTOMIZE_ALERT_POST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_CUSTOMIZE_ALERT_POST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_CUSTOMIZE_ALERT_POST_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError is the validation
// error returned by MONITOR_APM_CUSTOMIZE_ALERT_POST_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_CUSTOMIZE_ALERT_POST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_CUSTOMIZE_ALERT_POST_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_INSTANCE_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_INSTANCE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_INSTANCE_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_INSTANCE_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_INSTANCE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_INSTANCE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_INSTANCE_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_INSTANCE_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_INSTANCE_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_INSTANCE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_INSTANCE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_INSTANCE_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_INSTANCE_GET_RequestValidationError is the validation error
// returned by MONITOR_APM_INSTANCE_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_INSTANCE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_INSTANCE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_INSTANCE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_INSTANCE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_INSTANCE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_INSTANCE_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_RUNTIME_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_RUNTIME_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_RUNTIME_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_RUNTIME_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_RUNTIME_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_RUNTIME_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_RUNTIME_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_RUNTIME_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_APM_RUNTIME_GET_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_APM_RUNTIME_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_RUNTIME_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_RUNTIME_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_RUNTIME_GET_RequestValidationError is the validation error
// returned by MONITOR_APM_RUNTIME_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_RUNTIME_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_RUNTIME_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_RUNTIME_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_RUNTIME_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_RUNTIME_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_RUNTIME_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError, or nil if
// none found.
func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_TOPOLOGY_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_TOPOLOGY_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_TOPOLOGY_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_TOPOLOGY_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_GET_RequestValidationError is the validation error
// returned by MONITOR_APM_TOPOLOGY_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError is the validation
// error returned by MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError, or nil if
// none found.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestMultiError) AllErrors() []error {
	return m
}

// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError is the validation
// error returned by MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_PROCESS_NETIO_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError is the validation
// error returned by MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SERVICES_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SERVICES_LIST_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError, or nil if
// none found.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError is the validation
// error returned by MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request.Validate if
// the designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_TRANSLATION_DB_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_TOPOLOGY_TRANSLATION_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_TRANSLATION_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_TRANSLATION_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError is the validation
// error returned by MONITOR_APM_TOPOLOGY_TRANSLATION_Request.Validate if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_TRANSLATION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_TRANSLATION_RequestValidationError{}

// Validate checks the field values on
// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError is the
// validation error returned by
// MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_TRACE_ID_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_APM_TRACE_ID_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_TRACE_ID_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_TRACE_ID_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TRACE_ID_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TRACE_ID_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_APM_TRACE_ID_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TRACE_ID_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_APM_TRACE_ID_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_APM_TRACE_ID_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TRACE_ID_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TRACE_ID_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TRACE_ID_GET_RequestValidationError is the validation error
// returned by MONITOR_APM_TRACE_ID_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TRACE_ID_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TRACE_ID_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TRACE_ID_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TRACE_ID_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TRACE_ID_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TRACE_ID_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_APM_TRACE_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_APM_TRACE_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_APM_TRACE_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_APM_TRACE_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_APM_TRACE_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_APM_TRACE_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_APM_TRACE_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_APM_TRACE_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_APM_TRACE_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_APM_TRACE_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_APM_TRACE_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_APM_TRACE_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_APM_TRACE_LIST_RequestValidationError is the validation error
// returned by MONITOR_APM_TRACE_LIST_Request.Validate if the designated
// constraints aren't met.
type MONITOR_APM_TRACE_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_APM_TRACE_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_APM_TRACE_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_APM_TRACE_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_APM_TRACE_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_APM_TRACE_LIST_RequestValidationError{}

// Validate checks the field values on MONITOR_CLUSTER_STATUS_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_CLUSTER_STATUS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_CLUSTER_STATUS_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_CLUSTER_STATUS_GET_RequestMultiError, or nil if none found.
func (m *MONITOR_CLUSTER_STATUS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_CLUSTER_STATUS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_CLUSTER_STATUS_GET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_CLUSTER_STATUS_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_CLUSTER_STATUS_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_CLUSTER_STATUS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_CLUSTER_STATUS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_CLUSTER_STATUS_GET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_CLUSTER_STATUS_GET_RequestValidationError is the validation error
// returned by MONITOR_CLUSTER_STATUS_GET_Request.Validate if the designated
// constraints aren't met.
type MONITOR_CLUSTER_STATUS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) ErrorName() string {
	return "MONITOR_CLUSTER_STATUS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_CLUSTER_STATUS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_CLUSTER_STATUS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_CLUSTER_STATUS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_CLUSTER_STATUS_GET_RequestValidationError{}

// Validate checks the field values on MONITOR_DASHBOARD_EXPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_DASHBOARD_EXPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_DASHBOARD_EXPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_DASHBOARD_EXPORT_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_EXPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_EXPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_EXPORT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_EXPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_DASHBOARD_EXPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_EXPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_EXPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_EXPORT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_EXPORT_RequestValidationError is the validation error
// returned by MONITOR_DASHBOARD_EXPORT_Request.Validate if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_EXPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_EXPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_EXPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_EXPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_EXPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_EXPORT_RequestValidationError{}

// Validate checks the field values on MONITOR_DASHBOARD_IMPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_DASHBOARD_IMPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_DASHBOARD_IMPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_DASHBOARD_IMPORT_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_IMPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_IMPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_IMPORT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_IMPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_DASHBOARD_IMPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_IMPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_IMPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_IMPORT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_IMPORT_RequestValidationError is the validation error
// returned by MONITOR_DASHBOARD_IMPORT_Request.Validate if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_IMPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_IMPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_IMPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_IMPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_IMPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_IMPORT_RequestValidationError{}

// Validate checks the field values on MONITOR_DASHBOARD_PARSE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_DASHBOARD_PARSE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_DASHBOARD_PARSE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_DASHBOARD_PARSE_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_PARSE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_PARSE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_PARSE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_PARSE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_DASHBOARD_PARSE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_DASHBOARD_PARSE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_PARSE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_PARSE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_PARSE_RequestValidationError is the validation error
// returned by MONITOR_DASHBOARD_PARSE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_PARSE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_PARSE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_PARSE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_PARSE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_PARSE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_PARSE_RequestValidationError{}

// Validate checks the field values on MONITOR_DASHBOARD_TEMPLATES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_DASHBOARD_TEMPLATES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_DASHBOARD_TEMPLATES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_DASHBOARD_TEMPLATES_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_TEMPLATES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_TEMPLATES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_TEMPLATES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_TEMPLATES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_DASHBOARD_TEMPLATES_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_TEMPLATES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_TEMPLATES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_TEMPLATES_RequestValidationError is the validation error
// returned by MONITOR_DASHBOARD_TEMPLATES_Request.Validate if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_TEMPLATES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_TEMPLATES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_TEMPLATES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_TEMPLATES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_TEMPLATES_RequestValidationError{}

// Validate checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_DASHBOARD_TEMPLATE_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError is the validation
// error returned by MONITOR_DASHBOARD_TEMPLATE_CREATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_TEMPLATE_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_TEMPLATE_CREATE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_DASHBOARD_TEMPLATE_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError is the validation
// error returned by MONITOR_DASHBOARD_TEMPLATE_DELETE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_TEMPLATE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_TEMPLATE_DELETE_RequestValidationError{}

// Validate checks the field values on MONITOR_DASHBOARD_TEMPLATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_DASHBOARD_TEMPLATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_DASHBOARD_TEMPLATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_DASHBOARD_TEMPLATE_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_TEMPLATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_TEMPLATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_TEMPLATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_TEMPLATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_DASHBOARD_TEMPLATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_TEMPLATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_TEMPLATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_TEMPLATE_RequestValidationError is the validation error
// returned by MONITOR_DASHBOARD_TEMPLATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_TEMPLATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_TEMPLATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_TEMPLATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_TEMPLATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_TEMPLATE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError is the validation
// error returned by MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_DASHBOARD_TEMPLATE_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_DASHBOARD_TEMPLATE_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_FILEMANAGER_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_FILEMANAGER_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_FILEMANAGER_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *MONITOR_FILEMANAGER_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_FILEMANAGER_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerID

	if len(errors) > 0 {
		return MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_FILEMANAGER_DOWNLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_FILEMANAGER_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError is the validation error
// returned by MONITOR_FILEMANAGER_DOWNLOAD_Request.Validate if the designated
// constraints aren't met.
type MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_FILEMANAGER_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_FILEMANAGER_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on MONITOR_FILEMANAGER_UPLOAD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_FILEMANAGER_UPLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_FILEMANAGER_UPLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_FILEMANAGER_UPLOAD_RequestMultiError, or nil if none found.
func (m *MONITOR_FILEMANAGER_UPLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_FILEMANAGER_UPLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerID

	if len(errors) > 0 {
		return MONITOR_FILEMANAGER_UPLOAD_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_FILEMANAGER_UPLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_FILEMANAGER_UPLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_FILEMANAGER_UPLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_FILEMANAGER_UPLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_FILEMANAGER_UPLOAD_RequestMultiError) AllErrors() []error { return m }

// MONITOR_FILEMANAGER_UPLOAD_RequestValidationError is the validation error
// returned by MONITOR_FILEMANAGER_UPLOAD_Request.Validate if the designated
// constraints aren't met.
type MONITOR_FILEMANAGER_UPLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) ErrorName() string {
	return "MONITOR_FILEMANAGER_UPLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_FILEMANAGER_UPLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_FILEMANAGER_UPLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_FILEMANAGER_UPLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_FILEMANAGER_UPLOAD_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_CREATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_NOTIFY_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_NOTIFY_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_NOTIFY_CREATE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_NOTIFY_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_CREATE_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_CREATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_CREATE_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_CUSTOMIZE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_NOTIFY_CUSTOMIZE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_CUSTOMIZE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_CUSTOMIZE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_CUSTOMIZE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_NOTIFY_CUSTOMIZE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_CUSTOMIZE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_CUSTOMIZE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_CUSTOMIZE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_CUSTOMIZE_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_NOTIFY_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_NOTIFY_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_NOTIFY_DELETE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_NOTIFY_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_DELETE_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_DELETE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_DELETE_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_ENABLE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_NOTIFY_ENABLE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_ENABLE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_ENABLE_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_ENABLE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_ENABLE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_NOTIFY_ENABLE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_ENABLE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_NOTIFY_ENABLE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_NOTIFY_ENABLE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_ENABLE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_ENABLE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_ENABLE_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_ENABLE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_ENABLE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_ENABLE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_ENABLE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_ENABLE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_ENABLE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_ENABLE_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_NOTIFY_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_LIST_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_NOTIFY_LIST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_NOTIFY_LIST_Request.ValidateAll() if
// the designated constraints aren't met.
type MONITOR_NOTIFY_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_LIST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_LIST_RequestValidationError is the validation error returned
// by MONITOR_NOTIFY_LIST_Request.Validate if the designated constraints
// aren't met.
type MONITOR_NOTIFY_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_LIST_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_LIST_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_TEMPALTES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_NOTIFY_TEMPALTES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_TEMPALTES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_TEMPALTES_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_TEMPALTES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_TEMPALTES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_NOTIFY_TEMPALTES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_TEMPALTES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_NOTIFY_TEMPALTES_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_NOTIFY_TEMPALTES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_TEMPALTES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_TEMPALTES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_TEMPALTES_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_TEMPALTES_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_TEMPALTES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_TEMPALTES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_TEMPALTES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_TEMPALTES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_TEMPALTES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_TEMPALTES_RequestValidationError{}

// Validate checks the field values on MONITOR_NOTIFY_UPDATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_NOTIFY_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_NOTIFY_UPDATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_NOTIFY_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_NOTIFY_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_NOTIFY_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_NOTIFY_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_NOTIFY_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_NOTIFY_UPDATE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_NOTIFY_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_NOTIFY_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_NOTIFY_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_NOTIFY_UPDATE_RequestValidationError is the validation error
// returned by MONITOR_NOTIFY_UPDATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_NOTIFY_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_NOTIFY_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_NOTIFY_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_NOTIFY_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_NOTIFY_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_NOTIFY_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERTS_RULES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORGS_ALERTS_RULES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERTS_RULES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERTS_RULES_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERTS_RULES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERTS_RULES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERTS_RULES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERTS_RULES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_ALERTS_RULES_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERTS_RULES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERTS_RULES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERTS_RULES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERTS_RULES_RequestValidationError is the validation error
// returned by MONITOR_ORGS_ALERTS_RULES_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERTS_RULES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERTS_RULES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERTS_RULES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERTS_RULES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERTS_RULES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERTS_RULES_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERTS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_ALERTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERTS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERTS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERTS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERTS_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORGS_ALERTS_Request.ValidateAll() if
// the designated constraints aren't met.
type MONITOR_ORGS_ALERTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERTS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERTS_RequestValidationError is the validation error returned
// by MONITOR_ORGS_ALERTS_Request.Validate if the designated constraints
// aren't met.
type MONITOR_ORGS_ALERTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERTS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERTS_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERT_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORGS_ALERT_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERT_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERT_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERT_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERT_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERT_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERT_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_ALERT_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERT_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERT_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERT_CREATE_RequestValidationError is the validation error
// returned by MONITOR_ORGS_ALERT_CREATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERT_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERT_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERT_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERT_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERT_CREATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERT_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORGS_ALERT_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERT_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERT_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERT_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERT_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERT_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERT_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_ALERT_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERT_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERT_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERT_DELETE_RequestValidationError is the validation error
// returned by MONITOR_ORGS_ALERT_DELETE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERT_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERT_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERT_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERT_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERT_DELETE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_ALERT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERT_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERT_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORGS_ALERT_Request.ValidateAll() if
// the designated constraints aren't met.
type MONITOR_ORGS_ALERT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERT_RequestValidationError is the validation error returned
// by MONITOR_ORGS_ALERT_Request.Validate if the designated constraints aren't met.
type MONITOR_ORGS_ALERT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERT_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERT_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERT_SWITCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORGS_ALERT_SWITCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERT_SWITCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERT_SWITCH_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERT_SWITCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERT_SWITCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERT_SWITCH_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERT_SWITCH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_ALERT_SWITCH_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_SWITCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERT_SWITCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERT_SWITCH_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERT_SWITCH_RequestValidationError is the validation error
// returned by MONITOR_ORGS_ALERT_SWITCH_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_SWITCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERT_SWITCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERT_SWITCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERT_SWITCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERT_SWITCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERT_SWITCH_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_ALERT_UPDATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORGS_ALERT_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_ALERT_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_ALERT_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_ALERT_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_ALERT_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_ALERT_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_ALERT_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_ALERT_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_ALERT_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_ALERT_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_ALERT_UPDATE_RequestValidationError is the validation error
// returned by MONITOR_ORGS_ALERT_UPDATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_ALERT_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_ALERT_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_ALERT_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_ALERT_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_ALERT_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_ALERT_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_CUSTOMIZE_ALERTS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_CUSTOMIZE_ALERTS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERTS_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError is the validation error
// returned by MONITOR_ORGS_CUSTOMIZE_ALERTS_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERTS_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError is the validation
// error returned by MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request.Validate if
// the designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError is the
// validation error returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError is the validation
// error returned by MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request.Validate if
// the designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError is the
// validation error returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError, or nil if
// none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError is an error
// wrapping multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError is the
// validation error returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError{}

// Validate checks the field values on MONITOR_ORGS_CUSTOMIZE_ALERT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORGS_CUSTOMIZE_ALERT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError is the validation error
// returned by MONITOR_ORGS_CUSTOMIZE_ALERT_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError is the validation
// error returned by MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request.Validate if
// the designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError is the validation
// error returned by MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request.Validate if
// the designated constraints aren't met.
type MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_ALERT_RECORDS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_ALERT_RECORDS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_ALERT_RECORDS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORDS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORDS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORDS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORDS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORDS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_ALERT_RECORDS_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORDS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORDS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORDS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORDS_RequestValidationError is the validation error
// returned by MONITOR_ORG_ALERT_RECORDS_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORDS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORDS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORDS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORDS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORDS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORDS_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_ALERT_RECORD_ATTRS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_ALERT_RECORD_ATTRS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_ALERT_RECORD_ATTRS_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORD_ATTRS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError is the validation
// error returned by MONITOR_ORG_ALERT_RECORD_ATTRS_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORD_ATTRS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORD_ATTRS_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORG_ALERT_RECORD_HISTORIES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_ALERT_RECORD_HISTORIES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_ALERT_RECORD_HISTORIES_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError is the validation
// error returned by MONITOR_ORG_ALERT_RECORD_HISTORIES_Request.Validate if
// the designated constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORD_HISTORIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORD_HISTORIES_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError is the
// validation error returned by
// MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for IssueId

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request.ValidateAll() if the
// designated constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError is the
// validation error returned by
// MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_ALERT_RECORD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_ALERT_RECORD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_ALERT_RECORD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_ALERT_RECORD_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_ALERT_RECORD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_ALERT_RECORD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return MONITOR_ORG_ALERT_RECORD_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_ALERT_RECORD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_ALERT_RECORD_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_ALERT_RECORD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_ALERT_RECORD_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_ALERT_RECORD_RequestValidationError is the validation error
// returned by MONITOR_ORG_ALERT_RECORD_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_ALERT_RECORD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_ALERT_RECORD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_ALERT_RECORD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_ALERT_RECORD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_ALERT_RECORD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_ALERT_RECORD_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_HOSTS_ALERT_RECORDS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_HOSTS_ALERT_RECORDS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_HOSTS_ALERT_RECORDS_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError is the validation
// error returned by MONITOR_ORG_HOSTS_ALERT_RECORDS_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_HOSTS_ALERT_RECORDS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_HOSTS_ALERT_RECORDS_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_CREATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_CREATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_DELETE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_DELETE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_DELETE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_ENABLE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_ENABLE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_ENABLE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_ENABLE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_ENABLE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_ENABLE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_ENABLE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_ENABLE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_ENABLE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_ENABLE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORG_LOGS_RULES_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_TEMPLATES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_LOGS_RULES_TEMPLATES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_TEMPLATES_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError is the validation
// error returned by MONITOR_ORG_LOGS_RULES_TEMPLATES_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_TEMPLATES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_TEMPLATES_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_TEMPLATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_LOGS_RULES_TEMPLATE_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_TEMPLATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError is the validation
// error returned by MONITOR_ORG_LOGS_RULES_TEMPLATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_TEMPLATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_TEMPLATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_TEST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_LOGS_RULES_TEST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_TEST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_TEST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_TEST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_LOGS_RULES_TEST_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_TEST_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_TEST_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_TEST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_TEST_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULES_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_LOGS_RULES_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULES_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULES_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULES_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_LOGS_RULES_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULES_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULES_UPDATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULES_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULES_UPDATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_RULE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_LOGS_RULE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_RULE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_RULE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_RULE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_RULE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_RULE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_RULE_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORG_LOGS_RULE_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_ORG_LOGS_RULE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_RULE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_RULE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_RULE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_RULE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_RULE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_RULE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_RULE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_RULE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_RULE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_RULE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_SEARCH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_LOGS_SEARCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_SEARCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_SEARCH_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_SEARCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_SEARCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_SEARCH_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_SEARCH_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORG_LOGS_SEARCH_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_ORG_LOGS_SEARCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_SEARCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_SEARCH_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_SEARCH_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_SEARCH_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_SEARCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_SEARCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_SEARCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_SEARCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_SEARCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_SEARCH_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_STATISTIC_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_LOGS_STATISTIC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_STATISTIC_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_STATISTIC_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_STATISTIC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_STATISTIC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_STATISTIC_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_STATISTIC_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_LOGS_STATISTIC_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_STATISTIC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_STATISTIC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_STATISTIC_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_STATISTIC_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_STATISTIC_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_STATISTIC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_STATISTIC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_STATISTIC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_STATISTIC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_STATISTIC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_STATISTIC_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_LOGS_TAGS_TREE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_LOGS_TAGS_TREE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_LOGS_TAGS_TREE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_LOGS_TAGS_TREE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_LOGS_TAGS_TREE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_LOGS_TAGS_TREE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_LOGS_TAGS_TREE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError is the validation error
// returned by MONITOR_ORG_LOGS_TAGS_TREE_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_LOGS_TAGS_TREE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_LOGS_TAGS_TREE_RequestValidationError{}

// Validate checks the field values on
// MONITOR_ORG_REPORT_HISTORY_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_REPORT_HISTORY_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_REPORT_HISTORY_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_REPORT_HISTORY_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError is the validation
// error returned by MONITOR_ORG_REPORT_HISTORY_CREATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_REPORT_HISTORY_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_REPORT_HISTORY_CREATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_REPORT_HISTORY_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MONITOR_ORG_REPORT_HISTORY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_REPORT_HISTORY_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_REPORT_HISTORY_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_REPORT_HISTORY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_REPORT_HISTORY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_REPORT_HISTORY_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_REPORT_HISTORY_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MONITOR_ORG_REPORT_HISTORY_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_REPORT_HISTORY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_REPORT_HISTORY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_REPORT_HISTORY_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_REPORT_HISTORY_RequestValidationError is the validation error
// returned by MONITOR_ORG_REPORT_HISTORY_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_REPORT_HISTORY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_REPORT_HISTORY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_REPORT_HISTORY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_REPORT_HISTORY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_REPORT_HISTORY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_REPORT_HISTORY_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_REPORT_TASK_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MONITOR_ORG_REPORT_TASK_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MONITOR_ORG_REPORT_TASK_CREATE_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_REPORT_TASK_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_REPORT_TASK_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MONITOR_ORG_REPORT_TASK_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_REPORT_TASK_CREATE_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError is the validation
// error returned by MONITOR_ORG_REPORT_TASK_CREATE_Request.Validate if the
// designated constraints aren't met.
type MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_REPORT_TASK_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_REPORT_TASK_CREATE_RequestValidationError{}

// Validate checks the field values on MONITOR_ORG_REPORT_TASK_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MONITOR_ORG_REPORT_TASK_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MONITOR_ORG_REPORT_TASK_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MONITOR_ORG_REPORT_TASK_RequestMultiError, or nil if none found.
func (m *MONITOR_ORG_REPORT_TASK_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MONITOR_ORG_REPORT_TASK_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MONITOR_ORG_REPORT_TASK_RequestMultiError(errors)
	}

	return nil
}

// MONITOR_ORG_REPORT_TASK_RequestMultiError is an error wrapping multiple
// validation errors returned by MONITOR_ORG_REPORT_TASK_Request.ValidateAll()
// if the designated constraints aren't met.
type MONITOR_ORG_REPORT_TASK_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MONITOR_ORG_REPORT_TASK_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MONITOR_ORG_REPORT_TASK_RequestMultiError) AllErrors() []error { return m }

// MONITOR_ORG_REPORT_TASK_RequestValidationError is the validation error
// returned by MONITOR_ORG_REPORT_TASK_Request.Validate if the designated
// constraints aren't met.
type MONITOR_ORG_REPORT_TASK_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) ErrorName() string {
	return "MONITOR_ORG_REPORT_TASK_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MONITOR_ORG_REPORT_TASK_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMONITOR_ORG_REPORT_TASK_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MONITOR_ORG_REPORT_TASK_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MONITOR_ORG_REPORT_TASK_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MSP_ADDON_LOGS_RULES_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MSP_ADDON_LOGS_RULES_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_CREATE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_CREATE_Request.Validate if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_CREATE_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MSP_ADDON_LOGS_RULES_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MSP_ADDON_LOGS_RULES_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_DELETE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_DELETE_Request.Validate if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_DELETE_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_ENABLE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MSP_ADDON_LOGS_RULES_ENABLE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_ENABLE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_ENABLE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_ENABLE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MSP_ADDON_LOGS_RULES_ENABLE_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_ENABLE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_ENABLE_Request.Validate if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_ENABLE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_ENABLE_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MSP_ADDON_LOGS_RULES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_RequestMultiError is an error wrapping multiple
// validation errors returned by MSP_ADDON_LOGS_RULES_Request.ValidateAll() if
// the designated constraints aren't met.
type MSP_ADDON_LOGS_RULES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_RequestValidationError is the validation error returned
// by MSP_ADDON_LOGS_RULES_Request.Validate if the designated constraints
// aren't met.
type MSP_ADDON_LOGS_RULES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_TEMPLATES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MSP_ADDON_LOGS_RULES_TEMPLATES_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MSP_ADDON_LOGS_RULES_TEMPLATES_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_TEMPLATES_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError is the validation
// error returned by MSP_ADDON_LOGS_RULES_TEMPLATES_Request.Validate if the
// designated constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_TEMPLATES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_TEMPLATES_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_TEMPLATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_TEMPLATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// MSP_ADDON_LOGS_RULES_TEMPLATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_TEMPLATE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_TEMPLATE_Request.Validate if the
// designated constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_TEMPLATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_TEMPLATE_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_TEST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MSP_ADDON_LOGS_RULES_TEST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_TEST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_TEST_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_TEST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_TEST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_TEST_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_TEST_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MSP_ADDON_LOGS_RULES_TEST_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_TEST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_TEST_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_TEST_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_TEST_Request.Validate if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_TEST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_TEST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_TEST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_TEST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_TEST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_TEST_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULES_UPDATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MSP_ADDON_LOGS_RULES_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULES_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULES_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULES_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// MSP_ADDON_LOGS_RULES_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULES_UPDATE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError is the validation error
// returned by MSP_ADDON_LOGS_RULES_UPDATE_Request.Validate if the designated
// constraints aren't met.
type MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULES_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULES_UPDATE_RequestValidationError{}

// Validate checks the field values on MSP_ADDON_LOGS_RULE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MSP_ADDON_LOGS_RULE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP_ADDON_LOGS_RULE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MSP_ADDON_LOGS_RULE_RequestMultiError, or nil if none found.
func (m *MSP_ADDON_LOGS_RULE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP_ADDON_LOGS_RULE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MSP_ADDON_LOGS_RULE_RequestMultiError(errors)
	}

	return nil
}

// MSP_ADDON_LOGS_RULE_RequestMultiError is an error wrapping multiple
// validation errors returned by MSP_ADDON_LOGS_RULE_Request.ValidateAll() if
// the designated constraints aren't met.
type MSP_ADDON_LOGS_RULE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSP_ADDON_LOGS_RULE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSP_ADDON_LOGS_RULE_RequestMultiError) AllErrors() []error { return m }

// MSP_ADDON_LOGS_RULE_RequestValidationError is the validation error returned
// by MSP_ADDON_LOGS_RULE_Request.Validate if the designated constraints
// aren't met.
type MSP_ADDON_LOGS_RULE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) ErrorName() string {
	return "MSP_ADDON_LOGS_RULE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MSP_ADDON_LOGS_RULE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP_ADDON_LOGS_RULE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSP_ADDON_LOGS_RULE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSP_ADDON_LOGS_RULE_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request.Validate if
// the designated constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_ALARM_NOTIFIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_DASHBOARD_ALARM_NOTIFIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError is the validation error
// returned by SPOT_DASHBOARD_ALARM_NOTIFIES_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_NOTIFIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_NOTIFIES_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_ALARM_TYPES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_DASHBOARD_ALARM_TYPES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_DASHBOARD_ALARM_TYPES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALARM_TYPES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALARM_TYPES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_DASHBOARD_ALARM_TYPES_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALARM_TYPES_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError is the validation error
// returned by SPOT_DASHBOARD_ALARM_TYPES_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALARM_TYPES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALARM_TYPES_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_ALERT_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_ALERT_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_DASHBOARD_ALERT_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ALERT_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ALERT_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_DASHBOARD_ALERT_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ALERT_METRICS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError is the validation error
// returned by SPOT_DASHBOARD_ALERT_METRICS_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ALERT_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ALERT_METRICS_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_CHART_META_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_DASHBOARD_CHART_META_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_DASHBOARD_CHART_META_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_CHART_META_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_CHART_META_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_CHART_META_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_CHART_META_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_CHART_META_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_DASHBOARD_CHART_META_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_CHART_META_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_CHART_META_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_CHART_META_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_CHART_META_RequestValidationError is the validation error
// returned by SPOT_DASHBOARD_CHART_META_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_CHART_META_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_CHART_META_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_CHART_META_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_CHART_META_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_CHART_META_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_CHART_META_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_ORG_METRICS_QUERY_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_ORG_METRICS_QUERY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_ORG_METRICS_QUERY_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_ORG_METRICS_QUERY_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ORG_METRICS_QUERY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ORG_METRICS_QUERY_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_ORG_METRICS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_DASHBOARD_ORG_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_DASHBOARD_ORG_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_ORG_METRICS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_ORG_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_ORG_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_ORG_METRICS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_ORG_METRICS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_DASHBOARD_ORG_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_ORG_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_ORG_METRICS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_ORG_METRICS_RequestValidationError is the validation error
// returned by SPOT_DASHBOARD_ORG_METRICS_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_ORG_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_ORG_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_ORG_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_ORG_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_ORG_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_ORG_METRICS_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_PROJECT_METRICS_QUERY_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_PROJECT_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_PROJECT_METRICS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_PROJECT_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_PROJECT_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_PROJECT_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_PROJECT_METRICS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_PROJECT_METRICS_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_PROJECT_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_PROJECT_METRICS_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError, or nil if
// none found.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricType

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestMultiError) AllErrors() []error {
	return m
}

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceType

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request.Validate if
// the designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_CONTAINERS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_CONTAINERS_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_RESOURCES_GROUP_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_GROUP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_GROUP_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RESOURCES_GROUP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_GROUP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_GROUP_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_GROUP_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_RESOURCES_GROUP_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_GROUP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_GROUP_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_RESOURCES_TYPES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_RESOURCES_TYPES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RESOURCES_TYPES_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RESOURCES_TYPES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RESOURCES_TYPES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_RESOURCES_TYPES_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RESOURCES_TYPES_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_RESOURCES_TYPES_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RESOURCES_TYPES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RESOURCES_TYPES_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_RequestValidationError{}

// Validate checks the field values on SPOT_DASHBOARD_RUNTIME_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_RUNTIME_METRICS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_RUNTIME_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_RUNTIME_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_RUNTIME_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_RUNTIME_METRICS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_RUNTIME_METRICS_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_RUNTIME_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_RUNTIME_METRICS_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError is the
// validation error returned by
// SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on
// SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError, or nil if none found.
func (m *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestMultiError) AllErrors() []error { return m }

// SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError is the validation
// error returned by SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request.Validate if the
// designated constraints aren't met.
type SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) ErrorName() string {
	return "SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_DASHBOARD_SYSTEM_POD_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_DASHBOARD_SYSTEM_POD_METRICS_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_FINISH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_JVM_PROFILER_FINISH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_FINISH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_FINISH_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_FINISH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_FINISH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_FINISH_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_FINISH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_JVM_PROFILER_FINISH_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_FINISH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_FINISH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_FINISH_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_FINISH_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_FINISH_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_FINISH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_FINISH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_FINISH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_FINISH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_FINISH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_FINISH_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_HEAP_GC_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_JVM_PROFILER_HEAP_GC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_HEAP_GC_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_HEAP_GC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_HEAP_GC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_JVM_PROFILER_HEAP_GC_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_HEAP_GC_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_HEAP_GC_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_HEAP_GC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_HEAP_GC_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_HEAP_GC_STATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_JVM_PROFILER_HEAP_GC_STATE_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	// no validation rules for HeapGCID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_JVM_PROFILER_HEAP_GC_STATE_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError is the validation
// error returned by SPOT_JVM_PROFILER_HEAP_GC_STATE_Request.Validate if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_HEAP_GC_STATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_HEAP_GC_STATE_RequestValidationError{}

// Validate checks the field values on
// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError is the
// validation error returned by
// SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_HEAP_STAT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_JVM_PROFILER_HEAP_STAT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_HEAP_STAT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_HEAP_STAT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_HEAP_STAT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_JVM_PROFILER_HEAP_STAT_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_HEAP_STAT_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_HEAP_STAT_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_HEAP_STAT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_HEAP_STAT_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_JVM_INFO_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_JVM_PROFILER_JVM_INFO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_JVM_INFO_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_JVM_INFO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_JVM_INFO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_JVM_PROFILER_JVM_INFO_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_JVM_INFO_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_JVM_INFO_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_JVM_INFO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_JVM_INFO_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_LIST_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_LIST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by SPOT_JVM_PROFILER_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type SPOT_JVM_PROFILER_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_LIST_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_LIST_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_LIST_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_LIST_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_SERVICES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_JVM_PROFILER_SERVICES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_SERVICES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_SERVICES_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_SERVICES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_SERVICES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_SERVICES_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_SERVICES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_JVM_PROFILER_SERVICES_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_SERVICES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_SERVICES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_SERVICES_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_SERVICES_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_SERVICES_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_SERVICES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_SERVICES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_SERVICES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_SERVICES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_SERVICES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_SERVICES_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_START_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_START_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_START_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_START_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_START_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_START_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_START_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_START_RequestMultiError is an error wrapping multiple
// validation errors returned by SPOT_JVM_PROFILER_START_Request.ValidateAll()
// if the designated constraints aren't met.
type SPOT_JVM_PROFILER_START_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_START_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_START_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_START_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_START_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_START_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_START_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_START_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_START_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_START_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_START_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_START_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_START_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_START_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_START_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_START_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_STATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_STATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_STATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_STATE_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_STATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_STATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_STATE_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_STATE_RequestMultiError is an error wrapping multiple
// validation errors returned by SPOT_JVM_PROFILER_STATE_Request.ValidateAll()
// if the designated constraints aren't met.
type SPOT_JVM_PROFILER_STATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_STATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_STATE_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_STATE_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_STATE_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_STATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_STATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_STATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_STATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_STATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_STATE_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_THREAD_DUMP_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_JVM_PROFILER_THREAD_DUMP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_THREAD_DUMP_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_THREAD_DUMP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_THREAD_DUMP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_JVM_PROFILER_THREAD_DUMP_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_THREAD_DUMP_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_THREAD_DUMP_Request.Validate if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_THREAD_DUMP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_THREAD_DUMP_RequestValidationError{}

// Validate checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	// no validation rules for SnapshotsID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError is the
// validation error returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_RequestValidationError{}

// Validate checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError is the
// validation error returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_RequestValidationError{}

// Validate checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	// no validation rules for SnapshotsID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError is an error
// wrapping multiple validation errors returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError is the
// validation error returned by
// SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request.Validate if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_RequestValidationError{}

// Validate checks the field values on SPOT_JVM_PROFILER_THREAD_STAT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SPOT_JVM_PROFILER_THREAD_STAT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_JVM_PROFILER_THREAD_STAT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError, or nil if none found.
func (m *SPOT_JVM_PROFILER_THREAD_STAT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_JVM_PROFILER_THREAD_STAT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for ProfilingID

	if len(errors) > 0 {
		return SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError(errors)
	}

	return nil
}

// SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError is an error wrapping
// multiple validation errors returned by
// SPOT_JVM_PROFILER_THREAD_STAT_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_JVM_PROFILER_THREAD_STAT_RequestMultiError) AllErrors() []error { return m }

// SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError is the validation error
// returned by SPOT_JVM_PROFILER_THREAD_STAT_Request.Validate if the
// designated constraints aren't met.
type SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) ErrorName() string {
	return "SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_JVM_PROFILER_THREAD_STAT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_JVM_PROFILER_THREAD_STAT_RequestValidationError{}

// Validate checks the field values on SPOT_ORG_LOGS_DOWNLOAD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_ORG_LOGS_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_ORG_LOGS_DOWNLOAD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *SPOT_ORG_LOGS_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_ORG_LOGS_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by SPOT_ORG_LOGS_DOWNLOAD_Request.ValidateAll()
// if the designated constraints aren't met.
type SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_ORG_LOGS_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError is the validation error
// returned by SPOT_ORG_LOGS_DOWNLOAD_Request.Validate if the designated
// constraints aren't met.
type SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_ORG_LOGS_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_ORG_LOGS_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on SPOT_ORG_LOGS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_ORG_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_ORG_LOGS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SPOT_ORG_LOGS_RequestMultiError, or nil if none found.
func (m *SPOT_ORG_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_ORG_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_ORG_LOGS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_ORG_LOGS_RequestMultiError is an error wrapping multiple validation
// errors returned by SPOT_ORG_LOGS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_ORG_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_ORG_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_ORG_LOGS_RequestMultiError) AllErrors() []error { return m }

// SPOT_ORG_LOGS_RequestValidationError is the validation error returned by
// SPOT_ORG_LOGS_Request.Validate if the designated constraints aren't met.
type SPOT_ORG_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_ORG_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_ORG_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_ORG_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_ORG_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_ORG_LOGS_RequestValidationError) ErrorName() string {
	return "SPOT_ORG_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_ORG_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_ORG_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_ORG_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_ORG_LOGS_RequestValidationError{}

// Validate checks the field values on SPOT_RUNTIME_LOGS_DOWNLOAD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_RUNTIME_LOGS_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_RUNTIME_LOGS_DOWNLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_RUNTIME_LOGS_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError is the validation error
// returned by SPOT_RUNTIME_LOGS_DOWNLOAD_Request.Validate if the designated
// constraints aren't met.
type SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_RUNTIME_LOGS_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_RUNTIME_LOGS_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on SPOT_RUNTIME_LOGS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_RUNTIME_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_RUNTIME_LOGS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SPOT_RUNTIME_LOGS_RequestMultiError, or nil if none found.
func (m *SPOT_RUNTIME_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_RUNTIME_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_RUNTIME_LOGS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_RUNTIME_LOGS_RequestMultiError is an error wrapping multiple validation
// errors returned by SPOT_RUNTIME_LOGS_Request.ValidateAll() if the
// designated constraints aren't met.
type SPOT_RUNTIME_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_RUNTIME_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_RUNTIME_LOGS_RequestMultiError) AllErrors() []error { return m }

// SPOT_RUNTIME_LOGS_RequestValidationError is the validation error returned by
// SPOT_RUNTIME_LOGS_Request.Validate if the designated constraints aren't met.
type SPOT_RUNTIME_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_RUNTIME_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_RUNTIME_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_RUNTIME_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_RUNTIME_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_RUNTIME_LOGS_RequestValidationError) ErrorName() string {
	return "SPOT_RUNTIME_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_RUNTIME_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_RUNTIME_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_RUNTIME_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_RUNTIME_LOGS_RequestValidationError{}

// Validate checks the field values on SPOT_RUNTIME_REALTIME_LOGS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_RUNTIME_REALTIME_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_RUNTIME_REALTIME_LOGS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError, or nil if none found.
func (m *SPOT_RUNTIME_REALTIME_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_RUNTIME_REALTIME_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_RUNTIME_REALTIME_LOGS_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_RUNTIME_REALTIME_LOGS_RequestMultiError) AllErrors() []error { return m }

// SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError is the validation error
// returned by SPOT_RUNTIME_REALTIME_LOGS_Request.Validate if the designated
// constraints aren't met.
type SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) ErrorName() string {
	return "SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_RUNTIME_REALTIME_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_RUNTIME_REALTIME_LOGS_RequestValidationError{}
