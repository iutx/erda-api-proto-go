// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: monitor.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MonitorHandler is the server API for Monitor service.
type MonitorHandler interface {
	// POST /api/log-analytics/{addon}/search
	MONITOR_ADDON_LOGS_SEARCH(context.Context, *MONITOR_ADDON_LOGS_SEARCH_Request) (*emptypb.Empty, error)
	// GET /api/micro-service/logs/tags/tree
	MONITOR_ADDON_LOGS_TAGS_TREE(context.Context, *MONITOR_ADDON_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)
	// DELETE /api/apm/alert/{id}
	MONITOR_APM_ALERT_ID_DELETE(context.Context, *MONITOR_APM_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/apm/alert/{id}
	MONITOR_APM_ALERT_ID_GET(context.Context, *MONITOR_APM_ALERT_ID_GET_Request) (*emptypb.Empty, error)
	// PUT /api/apm/alert/{id}
	MONITOR_APM_ALERT_ID_PUT(context.Context, *MONITOR_APM_ALERT_ID_PUT_Request) (*emptypb.Empty, error)
	// PUT /api/apm/alert/{id}/switch
	MONITOR_APM_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)
	// GET /api/apm/alerts
	MONITOR_APM_ALERT_LIST(context.Context, *MONITOR_APM_ALERT_LIST_Request) (*emptypb.Empty, error)
	// POST /api/apm/alert
	MONITOR_APM_ALERT_POST(context.Context, *MONITOR_APM_ALERT_POST_Request) (*emptypb.Empty, error)
	// GET /api/apm/alerts/rules
	MONITOR_APM_ALERT_RULE_LIST(context.Context, *MONITOR_APM_ALERT_RULE_LIST_Request) (*emptypb.Empty, error)
	// DELETE /api/apm/customize/alert/{id}
	MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/apm/customize/alert/{id}
	MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) (*emptypb.Empty, error)
	// PUT /api/apm/customize/alert/{id}
	MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) (*emptypb.Empty, error)
	// PUT /api/apm/customize/alert/{id}/switch
	MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)
	// GET /api/apm/customize/alerts
	MONITOR_APM_CUSTOMIZE_ALERT_LIST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) (*emptypb.Empty, error)
	// GET /api/apm/customize/alerts/metrics
	MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/customize/alerts/notifies/targets
	MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) (*emptypb.Empty, error)
	// POST /api/apm/customize/alert
	MONITOR_APM_CUSTOMIZE_ALERT_POST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) (*emptypb.Empty, error)
	// GET /api/apm/instance
	MONITOR_APM_INSTANCE_GET(context.Context, *MONITOR_APM_INSTANCE_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/runtime
	MONITOR_APM_RUNTIME_GET(context.Context, *MONITOR_APM_RUNTIME_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/exception/message
	MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/exception/types
	MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology
	MONITOR_APM_TOPOLOGY_GET(context.Context, *MONITOR_APM_TOPOLOGY_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/overview
	MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/process/diskio
	MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/service/instance/ids
	MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/process/netio
	MONITOR_APM_TOPOLOGY_PROCESS_NETIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/search/tags
	MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/search/tagv
	MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/services
	MONITOR_APM_TOPOLOGY_SERVICES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/service/instances
	MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/service/overview
	MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/service/requests
	MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/translation
	MONITOR_APM_TOPOLOGY_TRANSLATION(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/translation/db
	MONITOR_APM_TOPOLOGY_TRANSLATION_DB(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) (*emptypb.Empty, error)
	// GET /api/apm/topology/translation/slow
	MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) (*emptypb.Empty, error)
	// GET /api/apm/trace/{id}
	MONITOR_APM_TRACE_ID_GET(context.Context, *MONITOR_APM_TRACE_ID_GET_Request) (*emptypb.Empty, error)
	// GET /api/apm/traces
	MONITOR_APM_TRACE_LIST(context.Context, *MONITOR_APM_TRACE_LIST_Request) (*emptypb.Empty, error)
	// GET /api/org/clusters/status
	MONITOR_CLUSTER_STATUS_GET(context.Context, *MONITOR_CLUSTER_STATUS_GET_Request) (*emptypb.Empty, error)
	// POST /api/dashboard/blocks/export
	MONITOR_DASHBOARD_EXPORT(context.Context, *MONITOR_DASHBOARD_EXPORT_Request) (*emptypb.Empty, error)
	// POST /api/dashboard/blocks/import
	MONITOR_DASHBOARD_IMPORT(context.Context, *MONITOR_DASHBOARD_IMPORT_Request) (*emptypb.Empty, error)
	// POST /api/dashboard/blocks/parse
	MONITOR_DASHBOARD_PARSE(context.Context, *MONITOR_DASHBOARD_PARSE_Request) (*emptypb.Empty, error)
	// GET /api/dashboard/template/{id}
	MONITOR_DASHBOARD_TEMPLATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_Request) (*emptypb.Empty, error)
	// GET /api/dashboard/templates
	MONITOR_DASHBOARD_TEMPLATES(context.Context, *MONITOR_DASHBOARD_TEMPLATES_Request) (*emptypb.Empty, error)
	// POST /api/dashboard/template
	MONITOR_DASHBOARD_TEMPLATE_CREATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/dashboard/template/{id}
	MONITOR_DASHBOARD_TEMPLATE_DELETE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) (*emptypb.Empty, error)
	// PUT /api/dashboard/template/{id}
	MONITOR_DASHBOARD_TEMPLATE_UPDATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/container/{containerID}/files/download
	MONITOR_FILEMANAGER_DOWNLOAD(context.Context, *MONITOR_FILEMANAGER_DOWNLOAD_Request) (*emptypb.Empty, error)
	// POST /api/container/{containerID}/files/upload
	MONITOR_FILEMANAGER_UPLOAD(context.Context, *MONITOR_FILEMANAGER_UPLOAD_Request) (*emptypb.Empty, error)
	// POST /api/host-status
	MONITOR_HOST_STATUS(context.Context, *HostStatusListRequest) (*HostStatusListResponse, error)
	// POST /api/notify/records
	MONITOR_NOTIFY_CREATE(context.Context, *MONITOR_NOTIFY_CREATE_Request) (*emptypb.Empty, error)
	// POST /api/notify/user-define/templates
	MONITOR_NOTIFY_CUSTOMIZE(context.Context, *MONITOR_NOTIFY_CUSTOMIZE_Request) (*emptypb.Empty, error)
	// DELETE /api/notify/records/{id}
	MONITOR_NOTIFY_DELETE(context.Context, *MONITOR_NOTIFY_DELETE_Request) (*emptypb.Empty, error)
	// PUT /api/notify/{id}/switch
	MONITOR_NOTIFY_ENABLE(context.Context, *MONITOR_NOTIFY_ENABLE_Request) (*emptypb.Empty, error)
	// GET /api/notify/records
	MONITOR_NOTIFY_LIST(context.Context, *MONITOR_NOTIFY_LIST_Request) (*emptypb.Empty, error)
	// GET /api/notify/templates
	MONITOR_NOTIFY_TEMPALTES(context.Context, *MONITOR_NOTIFY_TEMPALTES_Request) (*emptypb.Empty, error)
	// PUT /api/notify/records/{id}
	MONITOR_NOTIFY_UPDATE(context.Context, *MONITOR_NOTIFY_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/alerts/{id}
	MONITOR_ORGS_ALERT(context.Context, *MONITOR_ORGS_ALERT_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/alerts
	MONITOR_ORGS_ALERTS(context.Context, *MONITOR_ORGS_ALERTS_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/alerts/rules
	MONITOR_ORGS_ALERTS_RULES(context.Context, *MONITOR_ORGS_ALERTS_RULES_Request) (*emptypb.Empty, error)
	// POST /api/orgCenter/alerts
	MONITOR_ORGS_ALERT_CREATE(context.Context, *MONITOR_ORGS_ALERT_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/orgCenter/alerts/{id}
	MONITOR_ORGS_ALERT_DELETE(context.Context, *MONITOR_ORGS_ALERT_DELETE_Request) (*emptypb.Empty, error)
	// PUT /api/orgCenter/alerts/{id}/switch
	MONITOR_ORGS_ALERT_SWITCH(context.Context, *MONITOR_ORGS_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	// PUT /api/orgCenter/alerts/{id}
	MONITOR_ORGS_ALERT_UPDATE(context.Context, *MONITOR_ORGS_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/customize/alerts/{id}
	MONITOR_ORGS_CUSTOMIZE_ALERT(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/customize/alerts
	MONITOR_ORGS_CUSTOMIZE_ALERTS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)
	// POST /api/orgCenter/customize/alerts
	MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)
	// POST /api/orgCenter/customize/alerts/dash-preview/query
	MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)
	// DELETE /api/orgCenter/customize/alerts/{id}
	MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/customize/alerts/metrics
	MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/customize/alerts/notifies/targets
	MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)
	// PUT /api/orgCenter/customize/alerts/{id}/switch
	MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	// PUT /api/orgCenter/customize/alerts/{id}
	MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/org-alert-records/{groupId}
	MONITOR_ORG_ALERT_RECORD(context.Context, *MONITOR_ORG_ALERT_RECORD_Request) (*emptypb.Empty, error)
	// GET /api/org-alert-records
	MONITOR_ORG_ALERT_RECORDS(context.Context, *MONITOR_ORG_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	// GET /api/org-alert-record-attrs
	MONITOR_ORG_ALERT_RECORD_ATTRS(context.Context, *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)
	// GET /api/org-alert-records/{groupId}/histories
	MONITOR_ORG_ALERT_RECORD_HISTORIES(context.Context, *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)
	// POST /api/org-alert-records/{groupId}/issues
	MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)
	// PUT /api/org-alert-records/{groupId}/issues/{issueId}
	MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)
	// POST /api/org-hosts-alert-records
	MONITOR_ORG_HOSTS_ALERT_RECORDS(context.Context, *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/rules/{id}
	MONITOR_ORG_LOGS_RULE(context.Context, *MONITOR_ORG_LOGS_RULE_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/rules
	MONITOR_ORG_LOGS_RULES(context.Context, *MONITOR_ORG_LOGS_RULES_Request) (*emptypb.Empty, error)
	// POST /api/org/logs/rules
	MONITOR_ORG_LOGS_RULES_CREATE(context.Context, *MONITOR_ORG_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/org/logs/rules/{id}
	MONITOR_ORG_LOGS_RULES_DELETE(context.Context, *MONITOR_ORG_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)
	// PUT /api/org/logs/rules/{id}/state
	MONITOR_ORG_LOGS_RULES_ENABLE(context.Context, *MONITOR_ORG_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/rules/templates/{name}
	MONITOR_ORG_LOGS_RULES_TEMPLATE(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/rules/templates
	MONITOR_ORG_LOGS_RULES_TEMPLATES(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)
	// POST /api/org/logs/rules/test
	MONITOR_ORG_LOGS_RULES_TEST(context.Context, *MONITOR_ORG_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)
	// PUT /api/org/logs/rules/{id}
	MONITOR_ORG_LOGS_RULES_UPDATE(context.Context, *MONITOR_ORG_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/search
	MONITOR_ORG_LOGS_SEARCH(context.Context, *MONITOR_ORG_LOGS_SEARCH_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/statistic/histogram
	MONITOR_ORG_LOGS_STATISTIC(context.Context, *MONITOR_ORG_LOGS_STATISTIC_Request) (*emptypb.Empty, error)
	// GET /api/org/logs/tags/tree
	MONITOR_ORG_LOGS_TAGS_TREE(context.Context, *MONITOR_ORG_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)
	// GET /api/report/histories/{id}
	MONITOR_ORG_REPORT_HISTORY(context.Context, *MONITOR_ORG_REPORT_HISTORY_Request) (*emptypb.Empty, error)
	// POST /api/report/histories
	MONITOR_ORG_REPORT_HISTORY_CREATE(context.Context, *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) (*emptypb.Empty, error)
	// GET /api/org/report/tasks/{id}
	MONITOR_ORG_REPORT_TASK(context.Context, *MONITOR_ORG_REPORT_TASK_Request) (*emptypb.Empty, error)
	// POST /api/org/report/tasks
	MONITOR_ORG_REPORT_TASK_CREATE(context.Context, *MONITOR_ORG_REPORT_TASK_CREATE_Request) (*emptypb.Empty, error)
	// GET /api/micro-service/logs/rules/{id}
	MSP_ADDON_LOGS_RULE(context.Context, *MSP_ADDON_LOGS_RULE_Request) (*emptypb.Empty, error)
	// GET /api/micro-service/logs/rules
	MSP_ADDON_LOGS_RULES(context.Context, *MSP_ADDON_LOGS_RULES_Request) (*emptypb.Empty, error)
	// POST /api/micro-service/logs/rules
	MSP_ADDON_LOGS_RULES_CREATE(context.Context, *MSP_ADDON_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/micro-service/logs/rules/{id}
	MSP_ADDON_LOGS_RULES_DELETE(context.Context, *MSP_ADDON_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)
	// PUT /api/micro-service/logs/rules/{id}/state
	MSP_ADDON_LOGS_RULES_ENABLE(context.Context, *MSP_ADDON_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)
	// GET /api/micro-service/logs/rules/templates/{name}
	MSP_ADDON_LOGS_RULES_TEMPLATE(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)
	// GET /api/micro-service/logs/rules/templates
	MSP_ADDON_LOGS_RULES_TEMPLATES(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)
	// POST /api/micro-service/logs/rules/test
	MSP_ADDON_LOGS_RULES_TEST(context.Context, *MSP_ADDON_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)
	// PUT /api/micro-service/logs/rules/{id}
	MSP_ADDON_LOGS_RULES_UPDATE(context.Context, *MSP_ADDON_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/alarm/notifies
	SPOT_DASHBOARD_ALARM_NOTIFIES(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) (*emptypb.Empty, error)
	// POST /api/alarm/notifies
	SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/alarm/notifies/{id}
	SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) (*emptypb.Empty, error)
	// POST /api/alarm/notifies/{id}
	SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) (*emptypb.Empty, error)
	// POST /api/alarm/notifies/{id}/switch
	SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) (*emptypb.Empty, error)
	// GET /api/alarm/types
	SPOT_DASHBOARD_ALARM_TYPES(context.Context, *SPOT_DASHBOARD_ALARM_TYPES_Request) (*emptypb.Empty, error)
	// GET /api/alert/metrics/{scope}
	SPOT_DASHBOARD_ALERT_METRICS(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/alert/metrics/{scope}/histogram
	SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	// GET /api/chart/meta
	SPOT_DASHBOARD_CHART_META(context.Context, *SPOT_DASHBOARD_CHART_META_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/metrics/{scope}
	SPOT_DASHBOARD_ORG_METRICS(context.Context, *SPOT_DASHBOARD_ORG_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/metrics/{scope}/histogram
	SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/metrics-query
	SPOT_DASHBOARD_ORG_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) (*emptypb.Empty, error)
	// POST /api/orgCenter/metrics-query
	SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	// GET /api/project/metrics/{scope}
	SPOT_DASHBOARD_PROJECT_METRICS(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/project/metrics/{scope}/histogram
	SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	// GET /api/project/metrics-query
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) (*emptypb.Empty, error)
	// POST /api/project/metrics-query
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	// POST /api/cluster/resources/containers/{instanceType}
	SPOT_DASHBOARD_RESOURCES_CONTAINERS(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) (*emptypb.Empty, error)
	// POST /api/cluster/resources/containers/group/allocation/{metricType}
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) (*emptypb.Empty, error)
	// POST /api/cluster/resources/containers/group/count
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) (*emptypb.Empty, error)
	// GET /api/cluster/resources/containers/group/list
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) (*emptypb.Empty, error)
	// POST /api/cluster/resources/group
	SPOT_DASHBOARD_RESOURCES_GROUP(context.Context, *SPOT_DASHBOARD_RESOURCES_GROUP_Request) (*emptypb.Empty, error)
	// GET /api/cluster/resources/types
	SPOT_DASHBOARD_RESOURCES_TYPES(context.Context, *SPOT_DASHBOARD_RESOURCES_TYPES_Request) (*emptypb.Empty, error)
	// GET /api/runtime/metrics/{scope}
	SPOT_DASHBOARD_RUNTIME_METRICS(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/runtime/metrics/{scope}/histogram
	SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	// GET /api/runtime/metrics-query
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) (*emptypb.Empty, error)
	// POST /api/runtime/metrics-query
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	// GET /api/system/addon/metrics/{scope}/histogram
	SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	// GET /api/system/pod/metrics
	SPOT_DASHBOARD_SYSTEM_POD_METRICS(context.Context, *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) (*emptypb.Empty, error)
	// PUT /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/actions/finish
	SPOT_JVM_PROFILER_FINISH(context.Context, *SPOT_JVM_PROFILER_FINISH_Request) (*emptypb.Empty, error)
	// POST /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc
	SPOT_JVM_PROFILER_HEAP_GC(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc/{heapGCID}/state
	SPOT_JVM_PROFILER_HEAP_GC_STATE(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-snapshots
	SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-stats
	SPOT_JVM_PROFILER_HEAP_STAT(context.Context, *SPOT_JVM_PROFILER_HEAP_STAT_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/jvm-info
	SPOT_JVM_PROFILER_JVM_INFO(context.Context, *SPOT_JVM_PROFILER_JVM_INFO_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling
	SPOT_JVM_PROFILER_LIST(context.Context, *SPOT_JVM_PROFILER_LIST_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/services
	SPOT_JVM_PROFILER_SERVICES(context.Context, *SPOT_JVM_PROFILER_SERVICES_Request) (*emptypb.Empty, error)
	// POST /api/monitor/jvmprofiler/{addonID}/profiling
	SPOT_JVM_PROFILER_START(context.Context, *SPOT_JVM_PROFILER_START_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/state
	SPOT_JVM_PROFILER_STATE(context.Context, *SPOT_JVM_PROFILER_STATE_Request) (*emptypb.Empty, error)
	// POST /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots
	SPOT_JVM_PROFILER_THREAD_DUMP(context.Context, *SPOT_JVM_PROFILER_THREAD_DUMP_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}/state
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) (*emptypb.Empty, error)
	// GET /api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-stats
	SPOT_JVM_PROFILER_THREAD_STAT(context.Context, *SPOT_JVM_PROFILER_THREAD_STAT_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/logs
	SPOT_ORG_LOGS(context.Context, *SPOT_ORG_LOGS_Request) (*emptypb.Empty, error)
	// GET /api/orgCenter/logs/actions/download
	SPOT_ORG_LOGS_DOWNLOAD(context.Context, *SPOT_ORG_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	// GET /api/runtime/logs
	SPOT_RUNTIME_LOGS(context.Context, *SPOT_RUNTIME_LOGS_Request) (*emptypb.Empty, error)
	// GET /api/runtime/logs/actions/download
	SPOT_RUNTIME_LOGS_DOWNLOAD(context.Context, *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	// GET /api/runtime/realtime/logs
	SPOT_RUNTIME_REALTIME_LOGS(context.Context, *SPOT_RUNTIME_REALTIME_LOGS_Request) (*emptypb.Empty, error)
}

// RegisterMonitorHandler register MonitorHandler to http.Router.
func RegisterMonitorHandler(r http.Router, srv MonitorHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_MONITOR_ADDON_LOGS_SEARCH := func(method, path string, fn func(context.Context, *MONITOR_ADDON_LOGS_SEARCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ADDON_LOGS_SEARCH_Request))
		}
		var MONITOR_ADDON_LOGS_SEARCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ADDON_LOGS_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ADDON_LOGS_SEARCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ADDON_LOGS_SEARCH_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ADDON_LOGS_SEARCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ADDON_LOGS_TAGS_TREE := func(method, path string, fn func(context.Context, *MONITOR_ADDON_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ADDON_LOGS_TAGS_TREE_Request))
		}
		var MONITOR_ADDON_LOGS_TAGS_TREE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ADDON_LOGS_TAGS_TREE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ADDON_LOGS_TAGS_TREE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ADDON_LOGS_TAGS_TREE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ADDON_LOGS_TAGS_TREE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_ID_DELETE := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_ID_DELETE_Request))
		}
		var MONITOR_APM_ALERT_ID_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_ID_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_ID_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_ID_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_ID_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_ID_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_ID_GET_Request))
		}
		var MONITOR_APM_ALERT_ID_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_ID_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_ID_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_ID_PUT := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_ID_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_ID_PUT_Request))
		}
		var MONITOR_APM_ALERT_ID_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_ID_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_PUT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_ID_PUT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_ID_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_ID_SWITCH_PUT := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_ID_SWITCH_PUT_Request))
		}
		var MONITOR_APM_ALERT_ID_SWITCH_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_ID_SWITCH_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_SWITCH_PUT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_ID_SWITCH_PUT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_ID_SWITCH_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_LIST_Request))
		}
		var MONITOR_APM_ALERT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_POST := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_POST_Request))
		}
		var MONITOR_APM_ALERT_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_POST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_ALERT_RULE_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_ALERT_RULE_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_ALERT_RULE_LIST_Request))
		}
		var MONITOR_APM_ALERT_RULE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_ALERT_RULE_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_RULE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_ALERT_RULE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_ALERT_RULE_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_CUSTOMIZE_ALERT_POST := func(method, path string, fn func(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_POST_Request))
		}
		var MONITOR_APM_CUSTOMIZE_ALERT_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_CUSTOMIZE_ALERT_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_CUSTOMIZE_ALERT_POST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_CUSTOMIZE_ALERT_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_INSTANCE_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_INSTANCE_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_INSTANCE_GET_Request))
		}
		var MONITOR_APM_INSTANCE_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_INSTANCE_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_INSTANCE_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_INSTANCE_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_INSTANCE_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_RUNTIME_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_RUNTIME_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_RUNTIME_GET_Request))
		}
		var MONITOR_APM_RUNTIME_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_RUNTIME_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_RUNTIME_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_RUNTIME_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_RUNTIME_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request))
		}
		var MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_DISKIO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_PROCESS_NETIO := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request))
		}
		var MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_NETIO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SERVICES_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request))
		}
		var MONITOR_APM_TOPOLOGY_SERVICES_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SERVICES_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICES_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SERVICES_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request))
		}
		var MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request))
		}
		var MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_TRANSLATION := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_Request))
		}
		var MONITOR_APM_TOPOLOGY_TRANSLATION_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_TRANSLATION_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_TRANSLATION_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_TRANSLATION_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_TRANSLATION_DB := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request))
		}
		var MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION_DB", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW := func(method, path string, fn func(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request))
		}
		var MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TRACE_ID_GET := func(method, path string, fn func(context.Context, *MONITOR_APM_TRACE_ID_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TRACE_ID_GET_Request))
		}
		var MONITOR_APM_TRACE_ID_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TRACE_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TRACE_ID_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TRACE_ID_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TRACE_ID_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_APM_TRACE_LIST := func(method, path string, fn func(context.Context, *MONITOR_APM_TRACE_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_APM_TRACE_LIST_Request))
		}
		var MONITOR_APM_TRACE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_APM_TRACE_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TRACE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_APM_TRACE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_APM_TRACE_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_CLUSTER_STATUS_GET := func(method, path string, fn func(context.Context, *MONITOR_CLUSTER_STATUS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_CLUSTER_STATUS_GET_Request))
		}
		var MONITOR_CLUSTER_STATUS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_CLUSTER_STATUS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_CLUSTER_STATUS_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_CLUSTER_STATUS_GET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_CLUSTER_STATUS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_EXPORT := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_EXPORT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_EXPORT_Request))
		}
		var MONITOR_DASHBOARD_EXPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_EXPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_EXPORT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_EXPORT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_IMPORT := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_IMPORT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_IMPORT_Request))
		}
		var MONITOR_DASHBOARD_IMPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_IMPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_IMPORT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_IMPORT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_PARSE := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_PARSE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_PARSE_Request))
		}
		var MONITOR_DASHBOARD_PARSE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_PARSE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_PARSE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_PARSE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_PARSE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_TEMPLATE := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_TEMPLATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_Request))
		}
		var MONITOR_DASHBOARD_TEMPLATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_TEMPLATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_TEMPLATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_TEMPLATES := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_TEMPLATES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_TEMPLATES_Request))
		}
		var MONITOR_DASHBOARD_TEMPLATES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_TEMPLATES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_TEMPLATES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_TEMPLATE_CREATE := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_CREATE_Request))
		}
		var MONITOR_DASHBOARD_TEMPLATE_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_TEMPLATE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_TEMPLATE_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_TEMPLATE_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_TEMPLATE_DELETE := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_DELETE_Request))
		}
		var MONITOR_DASHBOARD_TEMPLATE_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_TEMPLATE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_TEMPLATE_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_TEMPLATE_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_DASHBOARD_TEMPLATE_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request))
		}
		var MONITOR_DASHBOARD_TEMPLATE_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_DASHBOARD_TEMPLATE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_DASHBOARD_TEMPLATE_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_FILEMANAGER_DOWNLOAD := func(method, path string, fn func(context.Context, *MONITOR_FILEMANAGER_DOWNLOAD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_FILEMANAGER_DOWNLOAD_Request))
		}
		var MONITOR_FILEMANAGER_DOWNLOAD_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_FILEMANAGER_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_FILEMANAGER_DOWNLOAD", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_FILEMANAGER_DOWNLOAD_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_FILEMANAGER_DOWNLOAD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "containerID":
							in.ContainerID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_FILEMANAGER_UPLOAD := func(method, path string, fn func(context.Context, *MONITOR_FILEMANAGER_UPLOAD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_FILEMANAGER_UPLOAD_Request))
		}
		var MONITOR_FILEMANAGER_UPLOAD_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_FILEMANAGER_UPLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_FILEMANAGER_UPLOAD", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_FILEMANAGER_UPLOAD_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_FILEMANAGER_UPLOAD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "containerID":
							in.ContainerID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_HOST_STATUS := func(method, path string, fn func(context.Context, *HostStatusListRequest) (*HostStatusListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*HostStatusListRequest))
		}
		var MONITOR_HOST_STATUS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_HOST_STATUS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_HOST_STATUS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_HOST_STATUS_info)
				}
				r = r.WithContext(ctx)
				var in HostStatusListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_CREATE := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_CREATE_Request))
		}
		var MONITOR_NOTIFY_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_CUSTOMIZE := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_CUSTOMIZE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_CUSTOMIZE_Request))
		}
		var MONITOR_NOTIFY_CUSTOMIZE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_CUSTOMIZE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_CUSTOMIZE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_CUSTOMIZE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_CUSTOMIZE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_DELETE := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_DELETE_Request))
		}
		var MONITOR_NOTIFY_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_ENABLE := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_ENABLE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_ENABLE_Request))
		}
		var MONITOR_NOTIFY_ENABLE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_ENABLE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_ENABLE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_ENABLE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_LIST := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_LIST_Request))
		}
		var MONITOR_NOTIFY_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_TEMPALTES := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_TEMPALTES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_TEMPALTES_Request))
		}
		var MONITOR_NOTIFY_TEMPALTES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_TEMPALTES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_TEMPALTES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_TEMPALTES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_TEMPALTES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_NOTIFY_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_NOTIFY_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_NOTIFY_UPDATE_Request))
		}
		var MONITOR_NOTIFY_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_NOTIFY_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_NOTIFY_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_NOTIFY_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERT := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERT_Request))
		}
		var MONITOR_ORGS_ALERT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERTS := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERTS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERTS_Request))
		}
		var MONITOR_ORGS_ALERTS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERTS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERTS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERTS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERTS_RULES := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERTS_RULES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERTS_RULES_Request))
		}
		var MONITOR_ORGS_ALERTS_RULES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERTS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERTS_RULES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERTS_RULES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERTS_RULES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERT_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERT_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERT_CREATE_Request))
		}
		var MONITOR_ORGS_ALERT_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERT_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERT_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERT_DELETE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERT_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERT_DELETE_Request))
		}
		var MONITOR_ORGS_ALERT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERT_SWITCH := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERT_SWITCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERT_SWITCH_Request))
		}
		var MONITOR_ORGS_ALERT_SWITCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_SWITCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERT_SWITCH_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERT_SWITCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_ALERT_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_ALERT_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_ALERT_UPDATE_Request))
		}
		var MONITOR_ORGS_ALERT_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_ALERT_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_ALERT_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERTS := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERTS_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERTS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERTS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERTS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERTS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request))
		}
		var MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORD := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORD_Request))
		}
		var MONITOR_ORG_ALERT_RECORD_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORD_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORDS := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORDS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORDS_Request))
		}
		var MONITOR_ORG_ALERT_RECORDS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORDS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORDS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORDS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORD_ATTRS := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ATTRS_Request))
		}
		var MONITOR_ORG_ALERT_RECORD_ATTRS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORD_ATTRS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ATTRS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORD_ATTRS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORD_ATTRS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORD_HISTORIES := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORD_HISTORIES_Request))
		}
		var MONITOR_ORG_ALERT_RECORD_HISTORIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORD_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_HISTORIES", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORD_HISTORIES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORD_HISTORIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request))
		}
		var MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request))
		}
		var MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "groupId":
							in.GroupId = val
						case "issueId":
							in.IssueId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_HOSTS_ALERT_RECORDS := func(method, path string, fn func(context.Context, *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_HOSTS_ALERT_RECORDS_Request))
		}
		var MONITOR_ORG_HOSTS_ALERT_RECORDS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_HOSTS_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_HOSTS_ALERT_RECORDS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_HOSTS_ALERT_RECORDS_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_HOSTS_ALERT_RECORDS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULE_Request))
		}
		var MONITOR_ORG_LOGS_RULE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_Request))
		}
		var MONITOR_ORG_LOGS_RULES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_CREATE_Request))
		}
		var MONITOR_ORG_LOGS_RULES_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_DELETE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_DELETE_Request))
		}
		var MONITOR_ORG_LOGS_RULES_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_ENABLE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_ENABLE_Request))
		}
		var MONITOR_ORG_LOGS_RULES_ENABLE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_ENABLE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_ENABLE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_ENABLE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_TEMPLATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEMPLATE_Request))
		}
		var MONITOR_ORG_LOGS_RULES_TEMPLATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEMPLATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_TEMPLATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_TEMPLATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_TEMPLATES := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEMPLATES_Request))
		}
		var MONITOR_ORG_LOGS_RULES_TEMPLATES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEMPLATES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_TEMPLATES_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_TEMPLATES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_TEST := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEST_Request))
		}
		var MONITOR_ORG_LOGS_RULES_TEST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_TEST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_TEST_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_TEST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_RULES_UPDATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_RULES_UPDATE_Request))
		}
		var MONITOR_ORG_LOGS_RULES_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_RULES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_RULES_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_RULES_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_SEARCH := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_SEARCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_SEARCH_Request))
		}
		var MONITOR_ORG_LOGS_SEARCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_SEARCH", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_SEARCH_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_SEARCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_STATISTIC := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_STATISTIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_STATISTIC_Request))
		}
		var MONITOR_ORG_LOGS_STATISTIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_STATISTIC_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_STATISTIC", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_STATISTIC_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_STATISTIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_LOGS_TAGS_TREE := func(method, path string, fn func(context.Context, *MONITOR_ORG_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_LOGS_TAGS_TREE_Request))
		}
		var MONITOR_ORG_LOGS_TAGS_TREE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_LOGS_TAGS_TREE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_TAGS_TREE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_LOGS_TAGS_TREE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_LOGS_TAGS_TREE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_REPORT_HISTORY := func(method, path string, fn func(context.Context, *MONITOR_ORG_REPORT_HISTORY_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_REPORT_HISTORY_Request))
		}
		var MONITOR_ORG_REPORT_HISTORY_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_REPORT_HISTORY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_HISTORY", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_REPORT_HISTORY_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_REPORT_HISTORY_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_REPORT_HISTORY_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_REPORT_HISTORY_CREATE_Request))
		}
		var MONITOR_ORG_REPORT_HISTORY_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_REPORT_HISTORY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_HISTORY_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_REPORT_HISTORY_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_REPORT_HISTORY_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_REPORT_TASK := func(method, path string, fn func(context.Context, *MONITOR_ORG_REPORT_TASK_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_REPORT_TASK_Request))
		}
		var MONITOR_ORG_REPORT_TASK_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_REPORT_TASK_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_TASK", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_REPORT_TASK_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_REPORT_TASK_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ORG_REPORT_TASK_CREATE := func(method, path string, fn func(context.Context, *MONITOR_ORG_REPORT_TASK_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MONITOR_ORG_REPORT_TASK_CREATE_Request))
		}
		var MONITOR_ORG_REPORT_TASK_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MONITOR_ORG_REPORT_TASK_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_TASK_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MONITOR_ORG_REPORT_TASK_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MONITOR_ORG_REPORT_TASK_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULE_Request))
		}
		var MSP_ADDON_LOGS_RULE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_Request))
		}
		var MSP_ADDON_LOGS_RULES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_CREATE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_CREATE_Request))
		}
		var MSP_ADDON_LOGS_RULES_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_DELETE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_DELETE_Request))
		}
		var MSP_ADDON_LOGS_RULES_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_ENABLE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_ENABLE_Request))
		}
		var MSP_ADDON_LOGS_RULES_ENABLE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_ENABLE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_ENABLE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_ENABLE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_TEMPLATE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_TEMPLATE_Request))
		}
		var MSP_ADDON_LOGS_RULES_TEMPLATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEMPLATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_TEMPLATE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_TEMPLATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_TEMPLATES := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_TEMPLATES_Request))
		}
		var MSP_ADDON_LOGS_RULES_TEMPLATES_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEMPLATES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_TEMPLATES_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_TEMPLATES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_TEST := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_TEST_Request))
		}
		var MSP_ADDON_LOGS_RULES_TEST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_TEST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_TEST_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_TEST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_RULES_UPDATE := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_RULES_UPDATE_Request))
		}
		var MSP_ADDON_LOGS_RULES_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_RULES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_RULES_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_RULES_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_NOTIFIES := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_Request))
		}
		var SPOT_DASHBOARD_ALARM_NOTIFIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_NOTIFIES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_NOTIFIES_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_NOTIFIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request))
		}
		var SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request))
		}
		var SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request))
		}
		var SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request))
		}
		var SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALARM_TYPES := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALARM_TYPES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALARM_TYPES_Request))
		}
		var SPOT_DASHBOARD_ALARM_TYPES_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALARM_TYPES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_TYPES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALARM_TYPES_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALARM_TYPES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALERT_METRICS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALERT_METRICS_Request))
		}
		var SPOT_DASHBOARD_ALERT_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALERT_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALERT_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALERT_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request))
		}
		var SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_CHART_META := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_CHART_META_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_CHART_META_Request))
		}
		var SPOT_DASHBOARD_CHART_META_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_CHART_META_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_CHART_META", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_CHART_META_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_CHART_META_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ORG_METRICS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ORG_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_Request))
		}
		var SPOT_DASHBOARD_ORG_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ORG_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ORG_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ORG_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request))
		}
		var SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ORG_METRICS_QUERY := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_QUERY_Request))
		}
		var SPOT_DASHBOARD_ORG_METRICS_QUERY_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ORG_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_QUERY", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ORG_METRICS_QUERY_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ORG_METRICS_QUERY_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request))
		}
		var SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_QUERY_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_PROJECT_METRICS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_Request))
		}
		var SPOT_DASHBOARD_PROJECT_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_PROJECT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_PROJECT_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_PROJECT_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request))
		}
		var SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_PROJECT_METRICS_QUERY := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request))
		}
		var SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_QUERY", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request))
		}
		var SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_CONTAINERS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_CONTAINERS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_CONTAINERS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "instanceType":
							in.InstanceType = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "metricType":
							in.MetricType = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_GROUP := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_GROUP_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_GROUP_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_GROUP_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_GROUP_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_GROUP", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_GROUP_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_GROUP_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RESOURCES_TYPES := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RESOURCES_TYPES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RESOURCES_TYPES_Request))
		}
		var SPOT_DASHBOARD_RESOURCES_TYPES_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RESOURCES_TYPES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_TYPES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RESOURCES_TYPES_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RESOURCES_TYPES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RUNTIME_METRICS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_Request))
		}
		var SPOT_DASHBOARD_RUNTIME_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RUNTIME_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RUNTIME_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RUNTIME_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request))
		}
		var SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request))
		}
		var SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request))
		}
		var SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request))
		}
		var SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_DASHBOARD_SYSTEM_POD_METRICS := func(method, path string, fn func(context.Context, *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request))
		}
		var SPOT_DASHBOARD_SYSTEM_POD_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_DASHBOARD_SYSTEM_POD_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_SYSTEM_POD_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_DASHBOARD_SYSTEM_POD_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_FINISH := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_FINISH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_FINISH_Request))
		}
		var SPOT_JVM_PROFILER_FINISH_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_FINISH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_FINISH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_FINISH_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_FINISH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_HEAP_GC := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_HEAP_GC_Request))
		}
		var SPOT_JVM_PROFILER_HEAP_GC_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_HEAP_GC_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_GC", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_HEAP_GC_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_HEAP_GC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_HEAP_GC_STATE := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_HEAP_GC_STATE_Request))
		}
		var SPOT_JVM_PROFILER_HEAP_GC_STATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_HEAP_GC_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_GC_STATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_HEAP_GC_STATE_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_HEAP_GC_STATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						case "heapGCID":
							in.HeapGCID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request))
		}
		var SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_HEAP_STAT := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_HEAP_STAT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_HEAP_STAT_Request))
		}
		var SPOT_JVM_PROFILER_HEAP_STAT_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_HEAP_STAT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_STAT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_HEAP_STAT_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_HEAP_STAT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_JVM_INFO := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_JVM_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_JVM_INFO_Request))
		}
		var SPOT_JVM_PROFILER_JVM_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_JVM_INFO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_JVM_INFO", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_JVM_INFO_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_JVM_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_LIST := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_LIST_Request))
		}
		var SPOT_JVM_PROFILER_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_LIST", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_LIST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_SERVICES := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_SERVICES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_SERVICES_Request))
		}
		var SPOT_JVM_PROFILER_SERVICES_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_SERVICES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_SERVICES", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_SERVICES_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_SERVICES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_START := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_START_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_START_Request))
		}
		var SPOT_JVM_PROFILER_START_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_START_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_START", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_START_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_START_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_STATE := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_STATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_STATE_Request))
		}
		var SPOT_JVM_PROFILER_STATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_STATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_STATE_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_STATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_THREAD_DUMP := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_THREAD_DUMP_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_THREAD_DUMP_Request))
		}
		var SPOT_JVM_PROFILER_THREAD_DUMP_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_THREAD_DUMP_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_DUMP", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_THREAD_DUMP_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_THREAD_DUMP_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request))
		}
		var SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						case "snapshotsID":
							in.SnapshotsID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request))
		}
		var SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request))
		}
		var SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						case "snapshotsID":
							in.SnapshotsID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_JVM_PROFILER_THREAD_STAT := func(method, path string, fn func(context.Context, *SPOT_JVM_PROFILER_THREAD_STAT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_JVM_PROFILER_THREAD_STAT_Request))
		}
		var SPOT_JVM_PROFILER_THREAD_STAT_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_JVM_PROFILER_THREAD_STAT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_STAT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_JVM_PROFILER_THREAD_STAT_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_JVM_PROFILER_THREAD_STAT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addonID":
							in.AddonID = val
						case "profilingID":
							in.ProfilingID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_ORG_LOGS := func(method, path string, fn func(context.Context, *SPOT_ORG_LOGS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_ORG_LOGS_Request))
		}
		var SPOT_ORG_LOGS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_ORG_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_ORG_LOGS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_ORG_LOGS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_ORG_LOGS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_ORG_LOGS_DOWNLOAD := func(method, path string, fn func(context.Context, *SPOT_ORG_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_ORG_LOGS_DOWNLOAD_Request))
		}
		var SPOT_ORG_LOGS_DOWNLOAD_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_ORG_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_ORG_LOGS_DOWNLOAD", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_ORG_LOGS_DOWNLOAD_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_ORG_LOGS_DOWNLOAD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_RUNTIME_LOGS := func(method, path string, fn func(context.Context, *SPOT_RUNTIME_LOGS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_RUNTIME_LOGS_Request))
		}
		var SPOT_RUNTIME_LOGS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_RUNTIME_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_LOGS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_RUNTIME_LOGS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_RUNTIME_LOGS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_RUNTIME_LOGS_DOWNLOAD := func(method, path string, fn func(context.Context, *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_RUNTIME_LOGS_DOWNLOAD_Request))
		}
		var SPOT_RUNTIME_LOGS_DOWNLOAD_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_RUNTIME_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_LOGS_DOWNLOAD", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_RUNTIME_LOGS_DOWNLOAD_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_RUNTIME_LOGS_DOWNLOAD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SPOT_RUNTIME_REALTIME_LOGS := func(method, path string, fn func(context.Context, *SPOT_RUNTIME_REALTIME_LOGS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SPOT_RUNTIME_REALTIME_LOGS_Request))
		}
		var SPOT_RUNTIME_REALTIME_LOGS_info transport.ServiceInfo
		if h.Interceptor != nil {
			SPOT_RUNTIME_REALTIME_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_REALTIME_LOGS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SPOT_RUNTIME_REALTIME_LOGS_info)
				}
				r = r.WithContext(ctx)
				var in SPOT_RUNTIME_REALTIME_LOGS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MONITOR_ADDON_LOGS_SEARCH("POST", "/api/log-analytics/{addon}/search", srv.MONITOR_ADDON_LOGS_SEARCH)
	add_MONITOR_ADDON_LOGS_TAGS_TREE("GET", "/api/micro-service/logs/tags/tree", srv.MONITOR_ADDON_LOGS_TAGS_TREE)
	add_MONITOR_APM_ALERT_ID_DELETE("DELETE", "/api/apm/alert/{id}", srv.MONITOR_APM_ALERT_ID_DELETE)
	add_MONITOR_APM_ALERT_ID_GET("GET", "/api/apm/alert/{id}", srv.MONITOR_APM_ALERT_ID_GET)
	add_MONITOR_APM_ALERT_ID_PUT("PUT", "/api/apm/alert/{id}", srv.MONITOR_APM_ALERT_ID_PUT)
	add_MONITOR_APM_ALERT_ID_SWITCH_PUT("PUT", "/api/apm/alert/{id}/switch", srv.MONITOR_APM_ALERT_ID_SWITCH_PUT)
	add_MONITOR_APM_ALERT_LIST("GET", "/api/apm/alerts", srv.MONITOR_APM_ALERT_LIST)
	add_MONITOR_APM_ALERT_POST("POST", "/api/apm/alert", srv.MONITOR_APM_ALERT_POST)
	add_MONITOR_APM_ALERT_RULE_LIST("GET", "/api/apm/alerts/rules", srv.MONITOR_APM_ALERT_RULE_LIST)
	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE("DELETE", "/api/apm/customize/alert/{id}", srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE)
	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET("GET", "/api/apm/customize/alert/{id}", srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_GET)
	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT("PUT", "/api/apm/customize/alert/{id}", srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT)
	add_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT("PUT", "/api/apm/customize/alert/{id}/switch", srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT)
	add_MONITOR_APM_CUSTOMIZE_ALERT_LIST("GET", "/api/apm/customize/alerts", srv.MONITOR_APM_CUSTOMIZE_ALERT_LIST)
	add_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET("GET", "/api/apm/customize/alerts/metrics", srv.MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET)
	add_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET("GET", "/api/apm/customize/alerts/notifies/targets", srv.MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET)
	add_MONITOR_APM_CUSTOMIZE_ALERT_POST("POST", "/api/apm/customize/alert", srv.MONITOR_APM_CUSTOMIZE_ALERT_POST)
	add_MONITOR_APM_INSTANCE_GET("GET", "/api/apm/instance", srv.MONITOR_APM_INSTANCE_GET)
	add_MONITOR_APM_RUNTIME_GET("GET", "/api/apm/runtime", srv.MONITOR_APM_RUNTIME_GET)
	add_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET("GET", "/api/apm/topology/exception/message", srv.MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET)
	add_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET("GET", "/api/apm/topology/exception/types", srv.MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET)
	add_MONITOR_APM_TOPOLOGY_GET("GET", "/api/apm/topology", srv.MONITOR_APM_TOPOLOGY_GET)
	add_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET("GET", "/api/apm/topology/overview", srv.MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET)
	add_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO("GET", "/api/apm/topology/process/diskio", srv.MONITOR_APM_TOPOLOGY_PROCESS_DISKIO)
	add_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET("GET", "/api/apm/topology/service/instance/ids", srv.MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET)
	add_MONITOR_APM_TOPOLOGY_PROCESS_NETIO("GET", "/api/apm/topology/process/netio", srv.MONITOR_APM_TOPOLOGY_PROCESS_NETIO)
	add_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET("GET", "/api/apm/topology/search/tags", srv.MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET)
	add_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET("GET", "/api/apm/topology/search/tagv", srv.MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET)
	add_MONITOR_APM_TOPOLOGY_SERVICES_LIST("GET", "/api/apm/topology/services", srv.MONITOR_APM_TOPOLOGY_SERVICES_LIST)
	add_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST("GET", "/api/apm/topology/service/instances", srv.MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST)
	add_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET("GET", "/api/apm/topology/service/overview", srv.MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET)
	add_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET("GET", "/api/apm/topology/service/requests", srv.MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET)
	add_MONITOR_APM_TOPOLOGY_TRANSLATION("GET", "/api/apm/topology/translation", srv.MONITOR_APM_TOPOLOGY_TRANSLATION)
	add_MONITOR_APM_TOPOLOGY_TRANSLATION_DB("GET", "/api/apm/topology/translation/db", srv.MONITOR_APM_TOPOLOGY_TRANSLATION_DB)
	add_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW("GET", "/api/apm/topology/translation/slow", srv.MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW)
	add_MONITOR_APM_TRACE_ID_GET("GET", "/api/apm/trace/{id}", srv.MONITOR_APM_TRACE_ID_GET)
	add_MONITOR_APM_TRACE_LIST("GET", "/api/apm/traces", srv.MONITOR_APM_TRACE_LIST)
	add_MONITOR_CLUSTER_STATUS_GET("GET", "/api/org/clusters/status", srv.MONITOR_CLUSTER_STATUS_GET)
	add_MONITOR_DASHBOARD_EXPORT("POST", "/api/dashboard/blocks/export", srv.MONITOR_DASHBOARD_EXPORT)
	add_MONITOR_DASHBOARD_IMPORT("POST", "/api/dashboard/blocks/import", srv.MONITOR_DASHBOARD_IMPORT)
	add_MONITOR_DASHBOARD_PARSE("POST", "/api/dashboard/blocks/parse", srv.MONITOR_DASHBOARD_PARSE)
	add_MONITOR_DASHBOARD_TEMPLATE("GET", "/api/dashboard/template/{id}", srv.MONITOR_DASHBOARD_TEMPLATE)
	add_MONITOR_DASHBOARD_TEMPLATES("GET", "/api/dashboard/templates", srv.MONITOR_DASHBOARD_TEMPLATES)
	add_MONITOR_DASHBOARD_TEMPLATE_CREATE("POST", "/api/dashboard/template", srv.MONITOR_DASHBOARD_TEMPLATE_CREATE)
	add_MONITOR_DASHBOARD_TEMPLATE_DELETE("DELETE", "/api/dashboard/template/{id}", srv.MONITOR_DASHBOARD_TEMPLATE_DELETE)
	add_MONITOR_DASHBOARD_TEMPLATE_UPDATE("PUT", "/api/dashboard/template/{id}", srv.MONITOR_DASHBOARD_TEMPLATE_UPDATE)
	add_MONITOR_FILEMANAGER_DOWNLOAD("GET", "/api/container/{containerID}/files/download", srv.MONITOR_FILEMANAGER_DOWNLOAD)
	add_MONITOR_FILEMANAGER_UPLOAD("POST", "/api/container/{containerID}/files/upload", srv.MONITOR_FILEMANAGER_UPLOAD)
	add_MONITOR_HOST_STATUS("POST", "/api/host-status", srv.MONITOR_HOST_STATUS)
	add_MONITOR_NOTIFY_CREATE("POST", "/api/notify/records", srv.MONITOR_NOTIFY_CREATE)
	add_MONITOR_NOTIFY_CUSTOMIZE("POST", "/api/notify/user-define/templates", srv.MONITOR_NOTIFY_CUSTOMIZE)
	add_MONITOR_NOTIFY_DELETE("DELETE", "/api/notify/records/{id}", srv.MONITOR_NOTIFY_DELETE)
	add_MONITOR_NOTIFY_ENABLE("PUT", "/api/notify/{id}/switch", srv.MONITOR_NOTIFY_ENABLE)
	add_MONITOR_NOTIFY_LIST("GET", "/api/notify/records", srv.MONITOR_NOTIFY_LIST)
	add_MONITOR_NOTIFY_TEMPALTES("GET", "/api/notify/templates", srv.MONITOR_NOTIFY_TEMPALTES)
	add_MONITOR_NOTIFY_UPDATE("PUT", "/api/notify/records/{id}", srv.MONITOR_NOTIFY_UPDATE)
	add_MONITOR_ORGS_ALERT("GET", "/api/orgCenter/alerts/{id}", srv.MONITOR_ORGS_ALERT)
	add_MONITOR_ORGS_ALERTS("GET", "/api/orgCenter/alerts", srv.MONITOR_ORGS_ALERTS)
	add_MONITOR_ORGS_ALERTS_RULES("GET", "/api/orgCenter/alerts/rules", srv.MONITOR_ORGS_ALERTS_RULES)
	add_MONITOR_ORGS_ALERT_CREATE("POST", "/api/orgCenter/alerts", srv.MONITOR_ORGS_ALERT_CREATE)
	add_MONITOR_ORGS_ALERT_DELETE("DELETE", "/api/orgCenter/alerts/{id}", srv.MONITOR_ORGS_ALERT_DELETE)
	add_MONITOR_ORGS_ALERT_SWITCH("PUT", "/api/orgCenter/alerts/{id}/switch", srv.MONITOR_ORGS_ALERT_SWITCH)
	add_MONITOR_ORGS_ALERT_UPDATE("PUT", "/api/orgCenter/alerts/{id}", srv.MONITOR_ORGS_ALERT_UPDATE)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT("GET", "/api/orgCenter/customize/alerts/{id}", srv.MONITOR_ORGS_CUSTOMIZE_ALERT)
	add_MONITOR_ORGS_CUSTOMIZE_ALERTS("GET", "/api/orgCenter/customize/alerts", srv.MONITOR_ORGS_CUSTOMIZE_ALERTS)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE("POST", "/api/orgCenter/customize/alerts", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW("POST", "/api/orgCenter/customize/alerts/dash-preview/query", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE("DELETE", "/api/orgCenter/customize/alerts/{id}", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS("GET", "/api/orgCenter/customize/alerts/metrics", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET("GET", "/api/orgCenter/customize/alerts/notifies/targets", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH("PUT", "/api/orgCenter/customize/alerts/{id}/switch", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH)
	add_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE("PUT", "/api/orgCenter/customize/alerts/{id}", srv.MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE)
	add_MONITOR_ORG_ALERT_RECORD("GET", "/api/org-alert-records/{groupId}", srv.MONITOR_ORG_ALERT_RECORD)
	add_MONITOR_ORG_ALERT_RECORDS("GET", "/api/org-alert-records", srv.MONITOR_ORG_ALERT_RECORDS)
	add_MONITOR_ORG_ALERT_RECORD_ATTRS("GET", "/api/org-alert-record-attrs", srv.MONITOR_ORG_ALERT_RECORD_ATTRS)
	add_MONITOR_ORG_ALERT_RECORD_HISTORIES("GET", "/api/org-alert-records/{groupId}/histories", srv.MONITOR_ORG_ALERT_RECORD_HISTORIES)
	add_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE("POST", "/api/org-alert-records/{groupId}/issues", srv.MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE)
	add_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE("PUT", "/api/org-alert-records/{groupId}/issues/{issueId}", srv.MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE)
	add_MONITOR_ORG_HOSTS_ALERT_RECORDS("POST", "/api/org-hosts-alert-records", srv.MONITOR_ORG_HOSTS_ALERT_RECORDS)
	add_MONITOR_ORG_LOGS_RULE("GET", "/api/org/logs/rules/{id}", srv.MONITOR_ORG_LOGS_RULE)
	add_MONITOR_ORG_LOGS_RULES("GET", "/api/org/logs/rules", srv.MONITOR_ORG_LOGS_RULES)
	add_MONITOR_ORG_LOGS_RULES_CREATE("POST", "/api/org/logs/rules", srv.MONITOR_ORG_LOGS_RULES_CREATE)
	add_MONITOR_ORG_LOGS_RULES_DELETE("DELETE", "/api/org/logs/rules/{id}", srv.MONITOR_ORG_LOGS_RULES_DELETE)
	add_MONITOR_ORG_LOGS_RULES_ENABLE("PUT", "/api/org/logs/rules/{id}/state", srv.MONITOR_ORG_LOGS_RULES_ENABLE)
	add_MONITOR_ORG_LOGS_RULES_TEMPLATE("GET", "/api/org/logs/rules/templates/{name}", srv.MONITOR_ORG_LOGS_RULES_TEMPLATE)
	add_MONITOR_ORG_LOGS_RULES_TEMPLATES("GET", "/api/org/logs/rules/templates", srv.MONITOR_ORG_LOGS_RULES_TEMPLATES)
	add_MONITOR_ORG_LOGS_RULES_TEST("POST", "/api/org/logs/rules/test", srv.MONITOR_ORG_LOGS_RULES_TEST)
	add_MONITOR_ORG_LOGS_RULES_UPDATE("PUT", "/api/org/logs/rules/{id}", srv.MONITOR_ORG_LOGS_RULES_UPDATE)
	add_MONITOR_ORG_LOGS_SEARCH("GET", "/api/org/logs/search", srv.MONITOR_ORG_LOGS_SEARCH)
	add_MONITOR_ORG_LOGS_STATISTIC("GET", "/api/org/logs/statistic/histogram", srv.MONITOR_ORG_LOGS_STATISTIC)
	add_MONITOR_ORG_LOGS_TAGS_TREE("GET", "/api/org/logs/tags/tree", srv.MONITOR_ORG_LOGS_TAGS_TREE)
	add_MONITOR_ORG_REPORT_HISTORY("GET", "/api/report/histories/{id}", srv.MONITOR_ORG_REPORT_HISTORY)
	add_MONITOR_ORG_REPORT_HISTORY_CREATE("POST", "/api/report/histories", srv.MONITOR_ORG_REPORT_HISTORY_CREATE)
	add_MONITOR_ORG_REPORT_TASK("GET", "/api/org/report/tasks/{id}", srv.MONITOR_ORG_REPORT_TASK)
	add_MONITOR_ORG_REPORT_TASK_CREATE("POST", "/api/org/report/tasks", srv.MONITOR_ORG_REPORT_TASK_CREATE)
	add_MSP_ADDON_LOGS_RULE("GET", "/api/micro-service/logs/rules/{id}", srv.MSP_ADDON_LOGS_RULE)
	add_MSP_ADDON_LOGS_RULES("GET", "/api/micro-service/logs/rules", srv.MSP_ADDON_LOGS_RULES)
	add_MSP_ADDON_LOGS_RULES_CREATE("POST", "/api/micro-service/logs/rules", srv.MSP_ADDON_LOGS_RULES_CREATE)
	add_MSP_ADDON_LOGS_RULES_DELETE("DELETE", "/api/micro-service/logs/rules/{id}", srv.MSP_ADDON_LOGS_RULES_DELETE)
	add_MSP_ADDON_LOGS_RULES_ENABLE("PUT", "/api/micro-service/logs/rules/{id}/state", srv.MSP_ADDON_LOGS_RULES_ENABLE)
	add_MSP_ADDON_LOGS_RULES_TEMPLATE("GET", "/api/micro-service/logs/rules/templates/{name}", srv.MSP_ADDON_LOGS_RULES_TEMPLATE)
	add_MSP_ADDON_LOGS_RULES_TEMPLATES("GET", "/api/micro-service/logs/rules/templates", srv.MSP_ADDON_LOGS_RULES_TEMPLATES)
	add_MSP_ADDON_LOGS_RULES_TEST("POST", "/api/micro-service/logs/rules/test", srv.MSP_ADDON_LOGS_RULES_TEST)
	add_MSP_ADDON_LOGS_RULES_UPDATE("PUT", "/api/micro-service/logs/rules/{id}", srv.MSP_ADDON_LOGS_RULES_UPDATE)
	add_SPOT_DASHBOARD_ALARM_NOTIFIES("GET", "/api/alarm/notifies", srv.SPOT_DASHBOARD_ALARM_NOTIFIES)
	add_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE("POST", "/api/alarm/notifies", srv.SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE)
	add_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE("DELETE", "/api/alarm/notifies/{id}", srv.SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE)
	add_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT("POST", "/api/alarm/notifies/{id}", srv.SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT)
	add_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH("POST", "/api/alarm/notifies/{id}/switch", srv.SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH)
	add_SPOT_DASHBOARD_ALARM_TYPES("GET", "/api/alarm/types", srv.SPOT_DASHBOARD_ALARM_TYPES)
	add_SPOT_DASHBOARD_ALERT_METRICS("GET", "/api/alert/metrics/{scope}", srv.SPOT_DASHBOARD_ALERT_METRICS)
	add_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM("GET", "/api/alert/metrics/{scope}/histogram", srv.SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM)
	add_SPOT_DASHBOARD_CHART_META("GET", "/api/chart/meta", srv.SPOT_DASHBOARD_CHART_META)
	add_SPOT_DASHBOARD_ORG_METRICS("GET", "/api/orgCenter/metrics/{scope}", srv.SPOT_DASHBOARD_ORG_METRICS)
	add_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM("GET", "/api/orgCenter/metrics/{scope}/histogram", srv.SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM)
	add_SPOT_DASHBOARD_ORG_METRICS_QUERY("GET", "/api/orgCenter/metrics-query", srv.SPOT_DASHBOARD_ORG_METRICS_QUERY)
	add_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST("POST", "/api/orgCenter/metrics-query", srv.SPOT_DASHBOARD_ORG_METRICS_QUERY_POST)
	add_SPOT_DASHBOARD_PROJECT_METRICS("GET", "/api/project/metrics/{scope}", srv.SPOT_DASHBOARD_PROJECT_METRICS)
	add_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM("GET", "/api/project/metrics/{scope}/histogram", srv.SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM)
	add_SPOT_DASHBOARD_PROJECT_METRICS_QUERY("GET", "/api/project/metrics-query", srv.SPOT_DASHBOARD_PROJECT_METRICS_QUERY)
	add_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST("POST", "/api/project/metrics-query", srv.SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST)
	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS("POST", "/api/cluster/resources/containers/{instanceType}", srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS)
	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION("POST", "/api/cluster/resources/containers/group/allocation/{metricType}", srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION)
	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT("POST", "/api/cluster/resources/containers/group/count", srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT)
	add_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST("GET", "/api/cluster/resources/containers/group/list", srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST)
	add_SPOT_DASHBOARD_RESOURCES_GROUP("POST", "/api/cluster/resources/group", srv.SPOT_DASHBOARD_RESOURCES_GROUP)
	add_SPOT_DASHBOARD_RESOURCES_TYPES("GET", "/api/cluster/resources/types", srv.SPOT_DASHBOARD_RESOURCES_TYPES)
	add_SPOT_DASHBOARD_RUNTIME_METRICS("GET", "/api/runtime/metrics/{scope}", srv.SPOT_DASHBOARD_RUNTIME_METRICS)
	add_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM("GET", "/api/runtime/metrics/{scope}/histogram", srv.SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM)
	add_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY("GET", "/api/runtime/metrics-query", srv.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY)
	add_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST("POST", "/api/runtime/metrics-query", srv.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST)
	add_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM("GET", "/api/system/addon/metrics/{scope}/histogram", srv.SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM)
	add_SPOT_DASHBOARD_SYSTEM_POD_METRICS("GET", "/api/system/pod/metrics", srv.SPOT_DASHBOARD_SYSTEM_POD_METRICS)
	add_SPOT_JVM_PROFILER_FINISH("PUT", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/actions/finish", srv.SPOT_JVM_PROFILER_FINISH)
	add_SPOT_JVM_PROFILER_HEAP_GC("POST", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc", srv.SPOT_JVM_PROFILER_HEAP_GC)
	add_SPOT_JVM_PROFILER_HEAP_GC_STATE("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc/{heapGCID}/state", srv.SPOT_JVM_PROFILER_HEAP_GC_STATE)
	add_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-snapshots", srv.SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST)
	add_SPOT_JVM_PROFILER_HEAP_STAT("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-stats", srv.SPOT_JVM_PROFILER_HEAP_STAT)
	add_SPOT_JVM_PROFILER_JVM_INFO("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/jvm-info", srv.SPOT_JVM_PROFILER_JVM_INFO)
	add_SPOT_JVM_PROFILER_LIST("GET", "/api/monitor/jvmprofiler/{addonID}/profiling", srv.SPOT_JVM_PROFILER_LIST)
	add_SPOT_JVM_PROFILER_SERVICES("GET", "/api/monitor/jvmprofiler/{addonID}/services", srv.SPOT_JVM_PROFILER_SERVICES)
	add_SPOT_JVM_PROFILER_START("POST", "/api/monitor/jvmprofiler/{addonID}/profiling", srv.SPOT_JVM_PROFILER_START)
	add_SPOT_JVM_PROFILER_STATE("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/state", srv.SPOT_JVM_PROFILER_STATE)
	add_SPOT_JVM_PROFILER_THREAD_DUMP("POST", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots", srv.SPOT_JVM_PROFILER_THREAD_DUMP)
	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}", srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET)
	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots", srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST)
	add_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}/state", srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE)
	add_SPOT_JVM_PROFILER_THREAD_STAT("GET", "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-stats", srv.SPOT_JVM_PROFILER_THREAD_STAT)
	add_SPOT_ORG_LOGS("GET", "/api/orgCenter/logs", srv.SPOT_ORG_LOGS)
	add_SPOT_ORG_LOGS_DOWNLOAD("GET", "/api/orgCenter/logs/actions/download", srv.SPOT_ORG_LOGS_DOWNLOAD)
	add_SPOT_RUNTIME_LOGS("GET", "/api/runtime/logs", srv.SPOT_RUNTIME_LOGS)
	add_SPOT_RUNTIME_LOGS_DOWNLOAD("GET", "/api/runtime/logs/actions/download", srv.SPOT_RUNTIME_LOGS_DOWNLOAD)
	add_SPOT_RUNTIME_REALTIME_LOGS("GET", "/api/runtime/realtime/logs", srv.SPOT_RUNTIME_REALTIME_LOGS)
}
