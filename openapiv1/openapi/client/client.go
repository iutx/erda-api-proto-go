// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: openapi.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/openapi/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Openapi openapi.proto
	Openapi() pb.OpenapiClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		openapi: pb.NewOpenapiClient(cc),
	}
}

type serviceClients struct {
	openapi pb.OpenapiClient
}

func (c *serviceClients) Openapi() pb.OpenapiClient {
	return c.openapi
}

type openapiWrapper struct {
	client pb.OpenapiClient
	opts   []grpc1.CallOption
}

func (s *openapiWrapper) DICE_METADATA(ctx context.Context, req *pb.DICE_METADATA_Request) (*emptypb.Empty, error) {
	return s.client.DICE_METADATA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) DOC_JSON(ctx context.Context, req *pb.DOC_JSON_Request) (*emptypb.Empty, error) {
	return s.client.DOC_JSON(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_DOC(ctx context.Context, req *pb.OPENAPI_DOC_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_DOC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_EVENT_DOC(ctx context.Context, req *pb.OPENAPI_EVENT_DOC_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_EVENT_DOC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_GEN_CLIENT_TOKEN(ctx context.Context, req *pb.OPENAPI_GEN_CLIENT_TOKEN_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_GEN_CLIENT_TOKEN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_LIST_CLIENT(ctx context.Context, req *pb.OPENAPI_LIST_CLIENT_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_LIST_CLIENT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_METRICS(ctx context.Context, req *pb.OPENAPI_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_NEW_CLIENT(ctx context.Context, req *pb.OPENAPI_NEW_CLIENT_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_NEW_CLIENT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_STAT(ctx context.Context, req *pb.OPENAPI_STAT_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_STAT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *openapiWrapper) OPENAPI_VERSION(ctx context.Context, req *pb.OPENAPI_VERSION_Request) (*emptypb.Empty, error) {
	return s.client.OPENAPI_VERSION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
