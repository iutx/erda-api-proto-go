// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ADMIN_APPROVE_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADMIN_APPROVE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADMIN_APPROVE_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADMIN_APPROVE_GET_RequestMultiError, or nil if none found.
func (m *ADMIN_APPROVE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADMIN_APPROVE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApproveId

	if len(errors) > 0 {
		return ADMIN_APPROVE_GET_RequestMultiError(errors)
	}

	return nil
}

// ADMIN_APPROVE_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by ADMIN_APPROVE_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type ADMIN_APPROVE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADMIN_APPROVE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADMIN_APPROVE_GET_RequestMultiError) AllErrors() []error { return m }

// ADMIN_APPROVE_GET_RequestValidationError is the validation error returned by
// ADMIN_APPROVE_GET_Request.Validate if the designated constraints aren't met.
type ADMIN_APPROVE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADMIN_APPROVE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADMIN_APPROVE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADMIN_APPROVE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADMIN_APPROVE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADMIN_APPROVE_GET_RequestValidationError) ErrorName() string {
	return "ADMIN_APPROVE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADMIN_APPROVE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADMIN_APPROVE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADMIN_APPROVE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADMIN_APPROVE_GET_RequestValidationError{}

// Validate checks the field values on ADMIN_CLUSTER_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADMIN_CLUSTER_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADMIN_CLUSTER_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADMIN_CLUSTER_GET_RequestMultiError, or nil if none found.
func (m *ADMIN_CLUSTER_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADMIN_CLUSTER_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ADMIN_CLUSTER_GET_RequestMultiError(errors)
	}

	return nil
}

// ADMIN_CLUSTER_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by ADMIN_CLUSTER_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type ADMIN_CLUSTER_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADMIN_CLUSTER_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADMIN_CLUSTER_GET_RequestMultiError) AllErrors() []error { return m }

// ADMIN_CLUSTER_GET_RequestValidationError is the validation error returned by
// ADMIN_CLUSTER_GET_Request.Validate if the designated constraints aren't met.
type ADMIN_CLUSTER_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADMIN_CLUSTER_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADMIN_CLUSTER_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADMIN_CLUSTER_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADMIN_CLUSTER_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADMIN_CLUSTER_GET_RequestValidationError) ErrorName() string {
	return "ADMIN_CLUSTER_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADMIN_CLUSTER_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADMIN_CLUSTER_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADMIN_CLUSTER_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADMIN_CLUSTER_GET_RequestValidationError{}

// Validate checks the field values on ADMIN_NOTICE_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADMIN_NOTICE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADMIN_NOTICE_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADMIN_NOTICE_DELETE_RequestMultiError, or nil if none found.
func (m *ADMIN_NOTICE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADMIN_NOTICE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ADMIN_NOTICE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// ADMIN_NOTICE_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by ADMIN_NOTICE_DELETE_Request.ValidateAll() if
// the designated constraints aren't met.
type ADMIN_NOTICE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADMIN_NOTICE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADMIN_NOTICE_DELETE_RequestMultiError) AllErrors() []error { return m }

// ADMIN_NOTICE_DELETE_RequestValidationError is the validation error returned
// by ADMIN_NOTICE_DELETE_Request.Validate if the designated constraints
// aren't met.
type ADMIN_NOTICE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADMIN_NOTICE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADMIN_NOTICE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADMIN_NOTICE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADMIN_NOTICE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADMIN_NOTICE_DELETE_RequestValidationError) ErrorName() string {
	return "ADMIN_NOTICE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADMIN_NOTICE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADMIN_NOTICE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADMIN_NOTICE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADMIN_NOTICE_DELETE_RequestValidationError{}

// Validate checks the field values on ADMIN_NOTICE_PUBLISH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADMIN_NOTICE_PUBLISH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADMIN_NOTICE_PUBLISH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADMIN_NOTICE_PUBLISH_RequestMultiError, or nil if none found.
func (m *ADMIN_NOTICE_PUBLISH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADMIN_NOTICE_PUBLISH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ADMIN_NOTICE_PUBLISH_RequestMultiError(errors)
	}

	return nil
}

// ADMIN_NOTICE_PUBLISH_RequestMultiError is an error wrapping multiple
// validation errors returned by ADMIN_NOTICE_PUBLISH_Request.ValidateAll() if
// the designated constraints aren't met.
type ADMIN_NOTICE_PUBLISH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADMIN_NOTICE_PUBLISH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADMIN_NOTICE_PUBLISH_RequestMultiError) AllErrors() []error { return m }

// ADMIN_NOTICE_PUBLISH_RequestValidationError is the validation error returned
// by ADMIN_NOTICE_PUBLISH_Request.Validate if the designated constraints
// aren't met.
type ADMIN_NOTICE_PUBLISH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) ErrorName() string {
	return "ADMIN_NOTICE_PUBLISH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADMIN_NOTICE_PUBLISH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADMIN_NOTICE_PUBLISH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADMIN_NOTICE_PUBLISH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADMIN_NOTICE_PUBLISH_RequestValidationError{}

// Validate checks the field values on ADMIN_NOTICE_UNPUBLISH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADMIN_NOTICE_UNPUBLISH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADMIN_NOTICE_UNPUBLISH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADMIN_NOTICE_UNPUBLISH_RequestMultiError, or nil if none found.
func (m *ADMIN_NOTICE_UNPUBLISH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADMIN_NOTICE_UNPUBLISH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ADMIN_NOTICE_UNPUBLISH_RequestMultiError(errors)
	}

	return nil
}

// ADMIN_NOTICE_UNPUBLISH_RequestMultiError is an error wrapping multiple
// validation errors returned by ADMIN_NOTICE_UNPUBLISH_Request.ValidateAll()
// if the designated constraints aren't met.
type ADMIN_NOTICE_UNPUBLISH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADMIN_NOTICE_UNPUBLISH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADMIN_NOTICE_UNPUBLISH_RequestMultiError) AllErrors() []error { return m }

// ADMIN_NOTICE_UNPUBLISH_RequestValidationError is the validation error
// returned by ADMIN_NOTICE_UNPUBLISH_Request.Validate if the designated
// constraints aren't met.
type ADMIN_NOTICE_UNPUBLISH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) ErrorName() string {
	return "ADMIN_NOTICE_UNPUBLISH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADMIN_NOTICE_UNPUBLISH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADMIN_NOTICE_UNPUBLISH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADMIN_NOTICE_UNPUBLISH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADMIN_NOTICE_UNPUBLISH_RequestValidationError{}

// Validate checks the field values on ApproveDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApproveDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApproveDTOMultiError, or
// nil if none found.
func (m *ApproveDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for OrgID

	// no validation rules for EntityID

	// no validation rules for TargetID

	// no validation rules for TargetName

	// no validation rules for Type

	// no validation rules for Extra

	// no validation rules for Title

	// no validation rules for Priority

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for Submitter

	// no validation rules for Approver

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ApprovalTime != nil {

		if all {
			switch v := interface{}(m.GetApprovalTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApproveDTOValidationError{
						field:  "ApprovalTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApproveDTOValidationError{
						field:  "ApprovalTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApprovalTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApproveDTOValidationError{
					field:  "ApprovalTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApproveDTOMultiError(errors)
	}

	return nil
}

// ApproveDTOMultiError is an error wrapping multiple validation errors
// returned by ApproveDTO.ValidateAll() if the designated constraints aren't met.
type ApproveDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveDTOMultiError) AllErrors() []error { return m }

// ApproveDTOValidationError is the validation error returned by
// ApproveDTO.Validate if the designated constraints aren't met.
type ApproveDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveDTOValidationError) ErrorName() string { return "ApproveDTOValidationError" }

// Error satisfies the builtin error interface
func (e ApproveDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveDTOValidationError{}

// Validate checks the field values on ApproveDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveDetailResponseMultiError, or nil if none found.
func (m *ApproveDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveDetailResponseMultiError(errors)
	}

	return nil
}

// ApproveDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveDetailResponseMultiError) AllErrors() []error { return m }

// ApproveDetailResponseValidationError is the validation error returned by
// ApproveDetailResponse.Validate if the designated constraints aren't met.
type ApproveDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveDetailResponseValidationError) ErrorName() string {
	return "ApproveDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveDetailResponseValidationError{}

// Validate checks the field values on ApproveListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveListRequestMultiError, or nil if none found.
func (m *ApproveListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for PageNo

	// no validation rules for PageSize

	if m.ID != nil {
		// no validation rules for ID
	}

	if len(errors) > 0 {
		return ApproveListRequestMultiError(errors)
	}

	return nil
}

// ApproveListRequestMultiError is an error wrapping multiple validation errors
// returned by ApproveListRequest.ValidateAll() if the designated constraints
// aren't met.
type ApproveListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveListRequestMultiError) AllErrors() []error { return m }

// ApproveListRequestValidationError is the validation error returned by
// ApproveListRequest.Validate if the designated constraints aren't met.
type ApproveListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveListRequestValidationError) ErrorName() string {
	return "ApproveListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveListRequestValidationError{}

// Validate checks the field values on ApproveUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveUpdateRequestMultiError, or nil if none found.
func (m *ApproveUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Extra

	// no validation rules for Priority

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for Approver

	// no validation rules for ApproveId

	if len(errors) > 0 {
		return ApproveUpdateRequestMultiError(errors)
	}

	return nil
}

// ApproveUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveUpdateRequestMultiError) AllErrors() []error { return m }

// ApproveUpdateRequestValidationError is the validation error returned by
// ApproveUpdateRequest.Validate if the designated constraints aren't met.
type ApproveUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveUpdateRequestValidationError) ErrorName() string {
	return "ApproveUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveUpdateRequestValidationError{}

// Validate checks the field values on ApproveUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveUpdateResponseMultiError, or nil if none found.
func (m *ApproveUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveUpdateResponseMultiError(errors)
	}

	return nil
}

// ApproveUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveUpdateResponseMultiError) AllErrors() []error { return m }

// ApproveUpdateResponseValidationError is the validation error returned by
// ApproveUpdateResponse.Validate if the designated constraints aren't met.
type ApproveUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveUpdateResponseValidationError) ErrorName() string {
	return "ApproveUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveUpdateResponseValidationError{}

// Validate checks the field values on AuditsListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuditsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditsListRequestMultiError, or nil if none found.
func (m *AuditsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sys

	// no validation rules for OrgID

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for FDPProjectID

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return AuditsListRequestMultiError(errors)
	}

	return nil
}

// AuditsListRequestMultiError is an error wrapping multiple validation errors
// returned by AuditsListRequest.ValidateAll() if the designated constraints
// aren't met.
type AuditsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditsListRequestMultiError) AllErrors() []error { return m }

// AuditsListRequestValidationError is the validation error returned by
// AuditsListRequest.Validate if the designated constraints aren't met.
type AuditsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditsListRequestValidationError) ErrorName() string {
	return "AuditsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditsListRequestValidationError{}

// Validate checks the field values on AuditsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditsListResponseMultiError, or nil if none found.
func (m *AuditsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuditsListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuditsListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuditsListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuditsListResponseMultiError(errors)
	}

	return nil
}

// AuditsListResponseMultiError is an error wrapping multiple validation errors
// returned by AuditsListResponse.ValidateAll() if the designated constraints
// aren't met.
type AuditsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditsListResponseMultiError) AllErrors() []error { return m }

// AuditsListResponseValidationError is the validation error returned by
// AuditsListResponse.Validate if the designated constraints aren't met.
type AuditsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditsListResponseValidationError) ErrorName() string {
	return "AuditsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuditsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditsListResponseValidationError{}

// Validate checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterInfoMultiError, or
// nil if none found.
func (m *ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Type

	// no validation rules for CloudVendor

	// no validation rules for Logo

	// no validation rules for Description

	// no validation rules for WildcardDomain

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	// no validation rules for URLs

	{
		sorted_keys := make([]string, len(m.GetSettings()))
		i := 0
		for key := range m.GetSettings() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSettings()[key]
			_ = val

			// no validation rules for Settings[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ClusterInfoValidationError{
							field:  fmt.Sprintf("Settings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ClusterInfoValidationError{
							field:  fmt.Sprintf("Settings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ClusterInfoValidationError{
						field:  fmt.Sprintf("Settings[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Config

	// no validation rules for IsRelation

	// no validation rules for CM

	if m.SchedConfig != nil {

		if all {
			switch v := interface{}(m.GetSchedConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "SchedConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "SchedConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchedConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterInfoValidationError{
					field:  "SchedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OpsConfig != nil {

		if all {
			switch v := interface{}(m.GetOpsConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "OpsConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "OpsConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpsConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterInfoValidationError{
					field:  "OpsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.System != nil {

		if all {
			switch v := interface{}(m.GetSystem()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "System",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "System",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterInfoValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ManageConfig != nil {

		if all {
			switch v := interface{}(m.GetManageConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "ManageConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  "ManageConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManageConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterInfoValidationError{
					field:  "ManageConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterInfoMultiError(errors)
	}

	return nil
}

// ClusterInfoMultiError is an error wrapping multiple validation errors
// returned by ClusterInfo.ValidateAll() if the designated constraints aren't met.
type ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterInfoMultiError) AllErrors() []error { return m }

// ClusterInfoValidationError is the validation error returned by
// ClusterInfo.Validate if the designated constraints aren't met.
type ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterInfoValidationError) ErrorName() string { return "ClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterInfoValidationError{}

// Validate checks the field values on ClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterListRequestMultiError, or nil if none found.
func (m *ClusterListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return ClusterListRequestMultiError(errors)
	}

	return nil
}

// ClusterListRequestMultiError is an error wrapping multiple validation errors
// returned by ClusterListRequest.ValidateAll() if the designated constraints
// aren't met.
type ClusterListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterListRequestMultiError) AllErrors() []error { return m }

// ClusterListRequestValidationError is the validation error returned by
// ClusterListRequest.Validate if the designated constraints aren't met.
type ClusterListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterListRequestValidationError) ErrorName() string {
	return "ClusterListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterListRequestValidationError{}

// Validate checks the field values on ClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterListResponseMultiError, or nil if none found.
func (m *ClusterListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterListResponseMultiError(errors)
	}

	return nil
}

// ClusterListResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterListResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterListResponseMultiError) AllErrors() []error { return m }

// ClusterListResponseValidationError is the validation error returned by
// ClusterListResponse.Validate if the designated constraints aren't met.
type ClusterListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterListResponseValidationError) ErrorName() string {
	return "ClusterListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterListResponseValidationError{}

// Validate checks the field values on Notice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NoticeMultiError, or nil if none found.
func (m *Notice) ValidateAll() error {
	return m.validate(true)
}

func (m *Notice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for OrgID

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for Creator

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateAt != nil {

		if all {
			switch v := interface{}(m.GetUpdateAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeValidationError{
						field:  "UpdateAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeValidationError{
						field:  "UpdateAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NoticeMultiError(errors)
	}

	return nil
}

// NoticeMultiError is an error wrapping multiple validation errors returned by
// Notice.ValidateAll() if the designated constraints aren't met.
type NoticeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeMultiError) AllErrors() []error { return m }

// NoticeValidationError is the validation error returned by Notice.Validate if
// the designated constraints aren't met.
type NoticeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeValidationError) ErrorName() string { return "NoticeValidationError" }

// Error satisfies the builtin error interface
func (e NoticeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeValidationError{}

// Validate checks the field values on NoticeCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeCreateRequestMultiError, or nil if none found.
func (m *NoticeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return NoticeCreateRequestMultiError(errors)
	}

	return nil
}

// NoticeCreateRequestMultiError is an error wrapping multiple validation
// errors returned by NoticeCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type NoticeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeCreateRequestMultiError) AllErrors() []error { return m }

// NoticeCreateRequestValidationError is the validation error returned by
// NoticeCreateRequest.Validate if the designated constraints aren't met.
type NoticeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeCreateRequestValidationError) ErrorName() string {
	return "NoticeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeCreateRequestValidationError{}

// Validate checks the field values on NoticeCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeCreateResponseMultiError, or nil if none found.
func (m *NoticeCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticeCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticeCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticeCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NoticeCreateResponseMultiError(errors)
	}

	return nil
}

// NoticeCreateResponseMultiError is an error wrapping multiple validation
// errors returned by NoticeCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type NoticeCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeCreateResponseMultiError) AllErrors() []error { return m }

// NoticeCreateResponseValidationError is the validation error returned by
// NoticeCreateResponse.Validate if the designated constraints aren't met.
type NoticeCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeCreateResponseValidationError) ErrorName() string {
	return "NoticeCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeCreateResponseValidationError{}

// Validate checks the field values on NoticeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeDeleteResponseMultiError, or nil if none found.
func (m *NoticeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticeDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticeDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticeDeleteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NoticeDeleteResponseMultiError(errors)
	}

	return nil
}

// NoticeDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by NoticeDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type NoticeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeDeleteResponseMultiError) AllErrors() []error { return m }

// NoticeDeleteResponseValidationError is the validation error returned by
// NoticeDeleteResponse.Validate if the designated constraints aren't met.
type NoticeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeDeleteResponseValidationError) ErrorName() string {
	return "NoticeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeDeleteResponseValidationError{}

// Validate checks the field values on NoticeListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NoticeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeListRequestMultiError, or nil if none found.
func (m *NoticeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return NoticeListRequestMultiError(errors)
	}

	return nil
}

// NoticeListRequestMultiError is an error wrapping multiple validation errors
// returned by NoticeListRequest.ValidateAll() if the designated constraints
// aren't met.
type NoticeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeListRequestMultiError) AllErrors() []error { return m }

// NoticeListRequestValidationError is the validation error returned by
// NoticeListRequest.Validate if the designated constraints aren't met.
type NoticeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeListRequestValidationError) ErrorName() string {
	return "NoticeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeListRequestValidationError{}

// Validate checks the field values on NoticeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeListResponseMultiError, or nil if none found.
func (m *NoticeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticeListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticeListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticeListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NoticeListResponseMultiError(errors)
	}

	return nil
}

// NoticeListResponseMultiError is an error wrapping multiple validation errors
// returned by NoticeListResponse.ValidateAll() if the designated constraints
// aren't met.
type NoticeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeListResponseMultiError) AllErrors() []error { return m }

// NoticeListResponseValidationError is the validation error returned by
// NoticeListResponse.Validate if the designated constraints aren't met.
type NoticeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeListResponseValidationError) ErrorName() string {
	return "NoticeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeListResponseValidationError{}

// Validate checks the field values on NoticeListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeListResponseDataMultiError, or nil if none found.
func (m *NoticeListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NoticeListResponseDataMultiError(errors)
	}

	return nil
}

// NoticeListResponseDataMultiError is an error wrapping multiple validation
// errors returned by NoticeListResponseData.ValidateAll() if the designated
// constraints aren't met.
type NoticeListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeListResponseDataMultiError) AllErrors() []error { return m }

// NoticeListResponseDataValidationError is the validation error returned by
// NoticeListResponseData.Validate if the designated constraints aren't met.
type NoticeListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeListResponseDataValidationError) ErrorName() string {
	return "NoticeListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeListResponseDataValidationError{}

// Validate checks the field values on NoticePublishResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticePublishResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticePublishResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticePublishResponseMultiError, or nil if none found.
func (m *NoticePublishResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticePublishResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticePublishResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticePublishResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticePublishResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NoticePublishResponseMultiError(errors)
	}

	return nil
}

// NoticePublishResponseMultiError is an error wrapping multiple validation
// errors returned by NoticePublishResponse.ValidateAll() if the designated
// constraints aren't met.
type NoticePublishResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticePublishResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticePublishResponseMultiError) AllErrors() []error { return m }

// NoticePublishResponseValidationError is the validation error returned by
// NoticePublishResponse.Validate if the designated constraints aren't met.
type NoticePublishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticePublishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticePublishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticePublishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticePublishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticePublishResponseValidationError) ErrorName() string {
	return "NoticePublishResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NoticePublishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticePublishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticePublishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticePublishResponseValidationError{}

// Validate checks the field values on NoticeUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeUpdateRequestMultiError, or nil if none found.
func (m *NoticeUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for ID

	if len(errors) > 0 {
		return NoticeUpdateRequestMultiError(errors)
	}

	return nil
}

// NoticeUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by NoticeUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type NoticeUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeUpdateRequestMultiError) AllErrors() []error { return m }

// NoticeUpdateRequestValidationError is the validation error returned by
// NoticeUpdateRequest.Validate if the designated constraints aren't met.
type NoticeUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeUpdateRequestValidationError) ErrorName() string {
	return "NoticeUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeUpdateRequestValidationError{}

// Validate checks the field values on NoticeUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeUpdateResponseMultiError, or nil if none found.
func (m *NoticeUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return NoticeUpdateResponseMultiError(errors)
	}

	return nil
}

// NoticeUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by NoticeUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type NoticeUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeUpdateResponseMultiError) AllErrors() []error { return m }

// NoticeUpdateResponseValidationError is the validation error returned by
// NoticeUpdateResponse.Validate if the designated constraints aren't met.
type NoticeUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeUpdateResponseValidationError) ErrorName() string {
	return "NoticeUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeUpdateResponseValidationError{}

// Validate checks the field values on PagingApproveDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagingApproveDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingApproveDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingApproveDTOMultiError, or nil if none found.
func (m *PagingApproveDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingApproveDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingApproveDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingApproveDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingApproveDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingApproveDTOMultiError(errors)
	}

	return nil
}

// PagingApproveDTOMultiError is an error wrapping multiple validation errors
// returned by PagingApproveDTO.ValidateAll() if the designated constraints
// aren't met.
type PagingApproveDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingApproveDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingApproveDTOMultiError) AllErrors() []error { return m }

// PagingApproveDTOValidationError is the validation error returned by
// PagingApproveDTO.Validate if the designated constraints aren't met.
type PagingApproveDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingApproveDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingApproveDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingApproveDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingApproveDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingApproveDTOValidationError) ErrorName() string { return "PagingApproveDTOValidationError" }

// Error satisfies the builtin error interface
func (e PagingApproveDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingApproveDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingApproveDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingApproveDTOValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Avatar

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Token

	// no validation rules for LastLoginAt

	// no validation rules for PwdExpireAt

	// no validation rules for Source

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListRequestMultiError, or nil if none found.
func (m *UserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Plaintext

	if len(errors) > 0 {
		return UserListRequestMultiError(errors)
	}

	return nil
}

// UserListRequestMultiError is an error wrapping multiple validation errors
// returned by UserListRequest.ValidateAll() if the designated constraints
// aren't met.
type UserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListRequestMultiError) AllErrors() []error { return m }

// UserListRequestValidationError is the validation error returned by
// UserListRequest.Validate if the designated constraints aren't met.
type UserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListRequestValidationError) ErrorName() string { return "UserListRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListRequestValidationError{}

// Validate checks the field values on UserListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListResponseMultiError, or nil if none found.
func (m *UserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserListResponseMultiError(errors)
	}

	return nil
}

// UserListResponseMultiError is an error wrapping multiple validation errors
// returned by UserListResponse.ValidateAll() if the designated constraints
// aren't met.
type UserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListResponseMultiError) AllErrors() []error { return m }

// UserListResponseValidationError is the validation error returned by
// UserListResponse.Validate if the designated constraints aren't met.
type UserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListResponseValidationError) ErrorName() string { return "UserListResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListResponseValidationError{}

// Validate checks the field values on UserListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListResponseDataMultiError, or nil if none found.
func (m *UserListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListResponseDataValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListResponseDataValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListResponseDataValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserListResponseDataMultiError(errors)
	}

	return nil
}

// UserListResponseDataMultiError is an error wrapping multiple validation
// errors returned by UserListResponseData.ValidateAll() if the designated
// constraints aren't met.
type UserListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListResponseDataMultiError) AllErrors() []error { return m }

// UserListResponseDataValidationError is the validation error returned by
// UserListResponseData.Validate if the designated constraints aren't met.
type UserListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListResponseDataValidationError) ErrorName() string {
	return "UserListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e UserListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListResponseDataValidationError{}
