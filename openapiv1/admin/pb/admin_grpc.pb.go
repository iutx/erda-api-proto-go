// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: admin.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ADMIN_APPROVE_GET(ctx context.Context, in *ADMIN_APPROVE_GET_Request, opts ...grpc.CallOption) (*ApproveDetailResponse, error)
	ADMIN_APPROVE_LIST(ctx context.Context, in *ApproveListRequest, opts ...grpc.CallOption) (*PagingApproveDTO, error)
	ADMIN_APPROVE_UPDATE(ctx context.Context, in *ApproveUpdateRequest, opts ...grpc.CallOption) (*ApproveUpdateResponse, error)
	ADMIN_AUDITS_EXPORT(ctx context.Context, in *AuditsListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADMIN_AUDITS_LIST(ctx context.Context, in *AuditsListRequest, opts ...grpc.CallOption) (*AuditsListResponse, error)
	ADMIN_CLUSTER_GET(ctx context.Context, in *ADMIN_CLUSTER_GET_Request, opts ...grpc.CallOption) (*ClusterInfo, error)
	ADMIN_CLUSTER_LIST(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	ADMIN_NOTICE_CREATE(ctx context.Context, in *NoticeCreateRequest, opts ...grpc.CallOption) (*NoticeCreateResponse, error)
	ADMIN_NOTICE_DELETE(ctx context.Context, in *ADMIN_NOTICE_DELETE_Request, opts ...grpc.CallOption) (*NoticeDeleteResponse, error)
	ADMIN_NOTICE_LIST(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error)
	ADMIN_NOTICE_PUBLISH(ctx context.Context, in *ADMIN_NOTICE_PUBLISH_Request, opts ...grpc.CallOption) (*NoticePublishResponse, error)
	ADMIN_NOTICE_UNPUBLISH(ctx context.Context, in *ADMIN_NOTICE_UNPUBLISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADMIN_NOTICE_UPDATE(ctx context.Context, in *NoticeUpdateRequest, opts ...grpc.CallOption) (*NoticeUpdateResponse, error)
	ADMIN_USER_LIST(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	ADMIN_USER_SEARCH(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
}

type adminClient struct {
	cc grpc1.ClientConnInterface
}

func NewAdminClient(cc grpc1.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ADMIN_APPROVE_GET(ctx context.Context, in *ADMIN_APPROVE_GET_Request, opts ...grpc.CallOption) (*ApproveDetailResponse, error) {
	out := new(ApproveDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_APPROVE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_APPROVE_LIST(ctx context.Context, in *ApproveListRequest, opts ...grpc.CallOption) (*PagingApproveDTO, error) {
	out := new(PagingApproveDTO)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_APPROVE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_APPROVE_UPDATE(ctx context.Context, in *ApproveUpdateRequest, opts ...grpc.CallOption) (*ApproveUpdateResponse, error) {
	out := new(ApproveUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_APPROVE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_AUDITS_EXPORT(ctx context.Context, in *AuditsListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_AUDITS_EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_AUDITS_LIST(ctx context.Context, in *AuditsListRequest, opts ...grpc.CallOption) (*AuditsListResponse, error) {
	out := new(AuditsListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_AUDITS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_CLUSTER_GET(ctx context.Context, in *ADMIN_CLUSTER_GET_Request, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_CLUSTER_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_CLUSTER_LIST(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_CLUSTER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_CREATE(ctx context.Context, in *NoticeCreateRequest, opts ...grpc.CallOption) (*NoticeCreateResponse, error) {
	out := new(NoticeCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_DELETE(ctx context.Context, in *ADMIN_NOTICE_DELETE_Request, opts ...grpc.CallOption) (*NoticeDeleteResponse, error) {
	out := new(NoticeDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_LIST(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error) {
	out := new(NoticeListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_PUBLISH(ctx context.Context, in *ADMIN_NOTICE_PUBLISH_Request, opts ...grpc.CallOption) (*NoticePublishResponse, error) {
	out := new(NoticePublishResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_PUBLISH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_UNPUBLISH(ctx context.Context, in *ADMIN_NOTICE_UNPUBLISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_UNPUBLISH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_NOTICE_UPDATE(ctx context.Context, in *NoticeUpdateRequest, opts ...grpc.CallOption) (*NoticeUpdateResponse, error) {
	out := new(NoticeUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_NOTICE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_USER_LIST(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_USER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ADMIN_USER_SEARCH(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.admin.admin/ADMIN_USER_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations should embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ADMIN_APPROVE_GET(context.Context, *ADMIN_APPROVE_GET_Request) (*ApproveDetailResponse, error)
	ADMIN_APPROVE_LIST(context.Context, *ApproveListRequest) (*PagingApproveDTO, error)
	ADMIN_APPROVE_UPDATE(context.Context, *ApproveUpdateRequest) (*ApproveUpdateResponse, error)
	ADMIN_AUDITS_EXPORT(context.Context, *AuditsListRequest) (*emptypb.Empty, error)
	ADMIN_AUDITS_LIST(context.Context, *AuditsListRequest) (*AuditsListResponse, error)
	ADMIN_CLUSTER_GET(context.Context, *ADMIN_CLUSTER_GET_Request) (*ClusterInfo, error)
	ADMIN_CLUSTER_LIST(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	ADMIN_NOTICE_CREATE(context.Context, *NoticeCreateRequest) (*NoticeCreateResponse, error)
	ADMIN_NOTICE_DELETE(context.Context, *ADMIN_NOTICE_DELETE_Request) (*NoticeDeleteResponse, error)
	ADMIN_NOTICE_LIST(context.Context, *NoticeListRequest) (*NoticeListResponse, error)
	ADMIN_NOTICE_PUBLISH(context.Context, *ADMIN_NOTICE_PUBLISH_Request) (*NoticePublishResponse, error)
	ADMIN_NOTICE_UNPUBLISH(context.Context, *ADMIN_NOTICE_UNPUBLISH_Request) (*emptypb.Empty, error)
	ADMIN_NOTICE_UPDATE(context.Context, *NoticeUpdateRequest) (*NoticeUpdateResponse, error)
	ADMIN_USER_LIST(context.Context, *UserListRequest) (*UserListResponse, error)
	ADMIN_USER_SEARCH(context.Context, *UserListRequest) (*UserListResponse, error)
}

// UnimplementedAdminServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) ADMIN_APPROVE_GET(context.Context, *ADMIN_APPROVE_GET_Request) (*ApproveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_APPROVE_GET not implemented")
}
func (*UnimplementedAdminServer) ADMIN_APPROVE_LIST(context.Context, *ApproveListRequest) (*PagingApproveDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_APPROVE_LIST not implemented")
}
func (*UnimplementedAdminServer) ADMIN_APPROVE_UPDATE(context.Context, *ApproveUpdateRequest) (*ApproveUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_APPROVE_UPDATE not implemented")
}
func (*UnimplementedAdminServer) ADMIN_AUDITS_EXPORT(context.Context, *AuditsListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_AUDITS_EXPORT not implemented")
}
func (*UnimplementedAdminServer) ADMIN_AUDITS_LIST(context.Context, *AuditsListRequest) (*AuditsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_AUDITS_LIST not implemented")
}
func (*UnimplementedAdminServer) ADMIN_CLUSTER_GET(context.Context, *ADMIN_CLUSTER_GET_Request) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_CLUSTER_GET not implemented")
}
func (*UnimplementedAdminServer) ADMIN_CLUSTER_LIST(context.Context, *ClusterListRequest) (*ClusterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_CLUSTER_LIST not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_CREATE(context.Context, *NoticeCreateRequest) (*NoticeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_CREATE not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_DELETE(context.Context, *ADMIN_NOTICE_DELETE_Request) (*NoticeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_DELETE not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_LIST(context.Context, *NoticeListRequest) (*NoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_LIST not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_PUBLISH(context.Context, *ADMIN_NOTICE_PUBLISH_Request) (*NoticePublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_PUBLISH not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_UNPUBLISH(context.Context, *ADMIN_NOTICE_UNPUBLISH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_UNPUBLISH not implemented")
}
func (*UnimplementedAdminServer) ADMIN_NOTICE_UPDATE(context.Context, *NoticeUpdateRequest) (*NoticeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_NOTICE_UPDATE not implemented")
}
func (*UnimplementedAdminServer) ADMIN_USER_LIST(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_USER_LIST not implemented")
}
func (*UnimplementedAdminServer) ADMIN_USER_SEARCH(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADMIN_USER_SEARCH not implemented")
}

func RegisterAdminServer(s grpc1.ServiceRegistrar, srv AdminServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Admin_serviceDesc(srv, opts...), srv)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "admin.proto",
}

func _get_Admin_serviceDesc(srv AdminServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Admin_ADMIN_APPROVE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_APPROVE_GET(ctx, req.(*ADMIN_APPROVE_GET_Request))
	}
	var _Admin_ADMIN_APPROVE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_APPROVE_GET_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_GET", srv)
		_Admin_ADMIN_APPROVE_GET_Handler = h.Interceptor(_Admin_ADMIN_APPROVE_GET_Handler)
	}

	_Admin_ADMIN_APPROVE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_APPROVE_LIST(ctx, req.(*ApproveListRequest))
	}
	var _Admin_ADMIN_APPROVE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_APPROVE_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_LIST", srv)
		_Admin_ADMIN_APPROVE_LIST_Handler = h.Interceptor(_Admin_ADMIN_APPROVE_LIST_Handler)
	}

	_Admin_ADMIN_APPROVE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_APPROVE_UPDATE(ctx, req.(*ApproveUpdateRequest))
	}
	var _Admin_ADMIN_APPROVE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_APPROVE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_UPDATE", srv)
		_Admin_ADMIN_APPROVE_UPDATE_Handler = h.Interceptor(_Admin_ADMIN_APPROVE_UPDATE_Handler)
	}

	_Admin_ADMIN_AUDITS_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_AUDITS_EXPORT(ctx, req.(*AuditsListRequest))
	}
	var _Admin_ADMIN_AUDITS_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_AUDITS_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_AUDITS_EXPORT", srv)
		_Admin_ADMIN_AUDITS_EXPORT_Handler = h.Interceptor(_Admin_ADMIN_AUDITS_EXPORT_Handler)
	}

	_Admin_ADMIN_AUDITS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_AUDITS_LIST(ctx, req.(*AuditsListRequest))
	}
	var _Admin_ADMIN_AUDITS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_AUDITS_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_AUDITS_LIST", srv)
		_Admin_ADMIN_AUDITS_LIST_Handler = h.Interceptor(_Admin_ADMIN_AUDITS_LIST_Handler)
	}

	_Admin_ADMIN_CLUSTER_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_CLUSTER_GET(ctx, req.(*ADMIN_CLUSTER_GET_Request))
	}
	var _Admin_ADMIN_CLUSTER_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_CLUSTER_GET_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_CLUSTER_GET", srv)
		_Admin_ADMIN_CLUSTER_GET_Handler = h.Interceptor(_Admin_ADMIN_CLUSTER_GET_Handler)
	}

	_Admin_ADMIN_CLUSTER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_CLUSTER_LIST(ctx, req.(*ClusterListRequest))
	}
	var _Admin_ADMIN_CLUSTER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_CLUSTER_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_CLUSTER_LIST", srv)
		_Admin_ADMIN_CLUSTER_LIST_Handler = h.Interceptor(_Admin_ADMIN_CLUSTER_LIST_Handler)
	}

	_Admin_ADMIN_NOTICE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_CREATE(ctx, req.(*NoticeCreateRequest))
	}
	var _Admin_ADMIN_NOTICE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_CREATE", srv)
		_Admin_ADMIN_NOTICE_CREATE_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_CREATE_Handler)
	}

	_Admin_ADMIN_NOTICE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_DELETE(ctx, req.(*ADMIN_NOTICE_DELETE_Request))
	}
	var _Admin_ADMIN_NOTICE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_DELETE", srv)
		_Admin_ADMIN_NOTICE_DELETE_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_DELETE_Handler)
	}

	_Admin_ADMIN_NOTICE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_LIST(ctx, req.(*NoticeListRequest))
	}
	var _Admin_ADMIN_NOTICE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_LIST", srv)
		_Admin_ADMIN_NOTICE_LIST_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_LIST_Handler)
	}

	_Admin_ADMIN_NOTICE_PUBLISH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_PUBLISH(ctx, req.(*ADMIN_NOTICE_PUBLISH_Request))
	}
	var _Admin_ADMIN_NOTICE_PUBLISH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_PUBLISH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_PUBLISH", srv)
		_Admin_ADMIN_NOTICE_PUBLISH_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_PUBLISH_Handler)
	}

	_Admin_ADMIN_NOTICE_UNPUBLISH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_UNPUBLISH(ctx, req.(*ADMIN_NOTICE_UNPUBLISH_Request))
	}
	var _Admin_ADMIN_NOTICE_UNPUBLISH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_UNPUBLISH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_UNPUBLISH", srv)
		_Admin_ADMIN_NOTICE_UNPUBLISH_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_UNPUBLISH_Handler)
	}

	_Admin_ADMIN_NOTICE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_NOTICE_UPDATE(ctx, req.(*NoticeUpdateRequest))
	}
	var _Admin_ADMIN_NOTICE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_NOTICE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_UPDATE", srv)
		_Admin_ADMIN_NOTICE_UPDATE_Handler = h.Interceptor(_Admin_ADMIN_NOTICE_UPDATE_Handler)
	}

	_Admin_ADMIN_USER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_USER_LIST(ctx, req.(*UserListRequest))
	}
	var _Admin_ADMIN_USER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_USER_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_USER_LIST", srv)
		_Admin_ADMIN_USER_LIST_Handler = h.Interceptor(_Admin_ADMIN_USER_LIST_Handler)
	}

	_Admin_ADMIN_USER_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADMIN_USER_SEARCH(ctx, req.(*UserListRequest))
	}
	var _Admin_ADMIN_USER_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Admin_ADMIN_USER_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_USER_SEARCH", srv)
		_Admin_ADMIN_USER_SEARCH_Handler = h.Interceptor(_Admin_ADMIN_USER_SEARCH_Handler)
	}

	var serviceDesc = _Admin_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ADMIN_APPROVE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADMIN_APPROVE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_APPROVE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_APPROVE_GET_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_APPROVE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_APPROVE_GET",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_APPROVE_GET_Handler)
			},
		},
		{
			MethodName: "ADMIN_APPROVE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApproveListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_APPROVE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_APPROVE_LIST_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_APPROVE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_APPROVE_LIST",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_APPROVE_LIST_Handler)
			},
		},
		{
			MethodName: "ADMIN_APPROVE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApproveUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_APPROVE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_APPROVE_UPDATE_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_APPROVE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_APPROVE_UPDATE",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_APPROVE_UPDATE_Handler)
			},
		},
		{
			MethodName: "ADMIN_AUDITS_EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AuditsListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_AUDITS_EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_AUDITS_EXPORT_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_AUDITS_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_AUDITS_EXPORT",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_AUDITS_EXPORT_Handler)
			},
		},
		{
			MethodName: "ADMIN_AUDITS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AuditsListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_AUDITS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_AUDITS_LIST_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_AUDITS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_AUDITS_LIST",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_AUDITS_LIST_Handler)
			},
		},
		{
			MethodName: "ADMIN_CLUSTER_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADMIN_CLUSTER_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_CLUSTER_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_CLUSTER_GET_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_CLUSTER_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_CLUSTER_GET",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_CLUSTER_GET_Handler)
			},
		},
		{
			MethodName: "ADMIN_CLUSTER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ClusterListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_CLUSTER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_CLUSTER_LIST_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_CLUSTER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_CLUSTER_LIST",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_CLUSTER_LIST_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(NoticeCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_CREATE_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_CREATE",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_CREATE_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADMIN_NOTICE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_DELETE_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_DELETE",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_DELETE_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(NoticeListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_LIST_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_LIST",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_LIST_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_PUBLISH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADMIN_NOTICE_PUBLISH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_PUBLISH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_PUBLISH_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_PUBLISH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_PUBLISH",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_PUBLISH_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_UNPUBLISH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADMIN_NOTICE_UNPUBLISH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_UNPUBLISH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_UNPUBLISH_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_UNPUBLISH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_UNPUBLISH",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_UNPUBLISH_Handler)
			},
		},
		{
			MethodName: "ADMIN_NOTICE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(NoticeUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_NOTICE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_NOTICE_UPDATE_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_NOTICE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_NOTICE_UPDATE",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_NOTICE_UPDATE_Handler)
			},
		},
		{
			MethodName: "ADMIN_USER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_USER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_USER_LIST_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_USER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_USER_LIST",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_USER_LIST_Handler)
			},
		},
		{
			MethodName: "ADMIN_USER_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AdminServer).ADMIN_USER_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Admin_ADMIN_USER_SEARCH_info)
				}
				if interceptor == nil {
					return _Admin_ADMIN_USER_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.admin.admin/ADMIN_USER_SEARCH",
				}
				return interceptor(ctx, in, info, _Admin_ADMIN_USER_SEARCH_Handler)
			},
		},
	}
	return &serviceDesc
}
