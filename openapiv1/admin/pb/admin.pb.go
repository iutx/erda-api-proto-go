// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: admin.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ADMIN_APPROVE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApproveId string `protobuf:"bytes,1,opt,name=approveId,proto3" json:"approveId,omitempty"` // generated from path variable: approveId. You should change the proto type if necessary.
}

func (x *ADMIN_APPROVE_GET_Request) Reset() {
	*x = ADMIN_APPROVE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMIN_APPROVE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMIN_APPROVE_GET_Request) ProtoMessage() {}

func (x *ADMIN_APPROVE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMIN_APPROVE_GET_Request.ProtoReflect.Descriptor instead.
func (*ADMIN_APPROVE_GET_Request) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

func (x *ADMIN_APPROVE_GET_Request) GetApproveId() string {
	if x != nil {
		return x.ApproveId
	}
	return ""
}

type ADMIN_CLUSTER_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"` // generated from path variable: clusterName. You should change the proto type if necessary.
}

func (x *ADMIN_CLUSTER_GET_Request) Reset() {
	*x = ADMIN_CLUSTER_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMIN_CLUSTER_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMIN_CLUSTER_GET_Request) ProtoMessage() {}

func (x *ADMIN_CLUSTER_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMIN_CLUSTER_GET_Request.ProtoReflect.Descriptor instead.
func (*ADMIN_CLUSTER_GET_Request) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

func (x *ADMIN_CLUSTER_GET_Request) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ADMIN_NOTICE_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *ADMIN_NOTICE_DELETE_Request) Reset() {
	*x = ADMIN_NOTICE_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMIN_NOTICE_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMIN_NOTICE_DELETE_Request) ProtoMessage() {}

func (x *ADMIN_NOTICE_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMIN_NOTICE_DELETE_Request.ProtoReflect.Descriptor instead.
func (*ADMIN_NOTICE_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ADMIN_NOTICE_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ADMIN_NOTICE_PUBLISH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *ADMIN_NOTICE_PUBLISH_Request) Reset() {
	*x = ADMIN_NOTICE_PUBLISH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMIN_NOTICE_PUBLISH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMIN_NOTICE_PUBLISH_Request) ProtoMessage() {}

func (x *ADMIN_NOTICE_PUBLISH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMIN_NOTICE_PUBLISH_Request.ProtoReflect.Descriptor instead.
func (*ADMIN_NOTICE_PUBLISH_Request) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{3}
}

func (x *ADMIN_NOTICE_PUBLISH_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ADMIN_NOTICE_UNPUBLISH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *ADMIN_NOTICE_UNPUBLISH_Request) Reset() {
	*x = ADMIN_NOTICE_UNPUBLISH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMIN_NOTICE_UNPUBLISH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMIN_NOTICE_UNPUBLISH_Request) ProtoMessage() {}

func (x *ADMIN_NOTICE_UNPUBLISH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMIN_NOTICE_UNPUBLISH_Request.ProtoReflect.Descriptor instead.
func (*ADMIN_NOTICE_UNPUBLISH_Request) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ADMIN_NOTICE_UNPUBLISH_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApproveDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	OrgID        uint64                 `protobuf:"varint,2,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	EntityID     uint64                 `protobuf:"varint,3,opt,name=entityID,json=entityId,proto3" json:"entityID,omitempty"`
	TargetID     uint64                 `protobuf:"varint,4,opt,name=targetID,json=targetId,proto3" json:"targetID,omitempty"`
	TargetName   string                 `protobuf:"bytes,5,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Type         string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Extra        map[string]string      `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title        string                 `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Priority     string                 `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Desc         string                 `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`
	Status       string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Submitter    string                 `protobuf:"bytes,12,opt,name=submitter,proto3" json:"submitter,omitempty"`
	Approver     string                 `protobuf:"bytes,13,opt,name=approver,proto3" json:"approver,omitempty"`
	ApprovalTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approvalTime,proto3,oneof" json:"approvalTime,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ApproveDTO) Reset() {
	*x = ApproveDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDTO) ProtoMessage() {}

func (x *ApproveDTO) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDTO.ProtoReflect.Descriptor instead.
func (*ApproveDTO) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{5}
}

func (x *ApproveDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApproveDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApproveDTO) GetEntityID() uint64 {
	if x != nil {
		return x.EntityID
	}
	return 0
}

func (x *ApproveDTO) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *ApproveDTO) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ApproveDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApproveDTO) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ApproveDTO) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApproveDTO) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ApproveDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApproveDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApproveDTO) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *ApproveDTO) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *ApproveDTO) GetApprovalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovalTime
	}
	return nil
}

func (x *ApproveDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApproveDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ApproveDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApproveDetailResponse) Reset() {
	*x = ApproveDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDetailResponse) ProtoMessage() {}

func (x *ApproveDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDetailResponse.ProtoReflect.Descriptor instead.
func (*ApproveDetailResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ApproveDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApproveListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64   `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Status   []string `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	PageNo   int64    `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ID       *int64   `protobuf:"varint,5,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
}

func (x *ApproveListRequest) Reset() {
	*x = ApproveListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveListRequest) ProtoMessage() {}

func (x *ApproveListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveListRequest.ProtoReflect.Descriptor instead.
func (*ApproveListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{7}
}

func (x *ApproveListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApproveListRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ApproveListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ApproveListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ApproveListRequest) GetID() int64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

type ApproveUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64            `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Extra     map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Priority  string            `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Desc      string            `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Status    string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Approver  string            `protobuf:"bytes,6,opt,name=approver,proto3" json:"approver,omitempty"`
	ApproveId string            `protobuf:"bytes,7,opt,name=approveId,proto3" json:"approveId,omitempty"` // generated from path variable: approveId. You should change the proto type if necessary.
}

func (x *ApproveUpdateRequest) Reset() {
	*x = ApproveUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUpdateRequest) ProtoMessage() {}

func (x *ApproveUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApproveUpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ApproveUpdateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApproveUpdateRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ApproveUpdateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ApproveUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApproveUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApproveUpdateRequest) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *ApproveUpdateRequest) GetApproveId() string {
	if x != nil {
		return x.ApproveId
	}
	return ""
}

type ApproveUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApproveUpdateResponse) Reset() {
	*x = ApproveUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUpdateResponse) ProtoMessage() {}

func (x *ApproveUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApproveUpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ApproveUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuditsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys          bool     `protobuf:"varint,1,opt,name=sys,proto3" json:"sys,omitempty"`
	OrgID        uint64   `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	StartAt      string   `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt        string   `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt,omitempty"`
	FDPProjectID string   `protobuf:"bytes,5,opt,name=fDPProjectID,proto3" json:"fDPProjectID,omitempty"`
	UserID       []string `protobuf:"bytes,6,rep,name=userID,proto3" json:"userID,omitempty"`
	PageNo       int64    `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize     int64    `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *AuditsListRequest) Reset() {
	*x = AuditsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditsListRequest) ProtoMessage() {}

func (x *AuditsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditsListRequest.ProtoReflect.Descriptor instead.
func (*AuditsListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{10}
}

func (x *AuditsListRequest) GetSys() bool {
	if x != nil {
		return x.Sys
	}
	return false
}

func (x *AuditsListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *AuditsListRequest) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *AuditsListRequest) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *AuditsListRequest) GetFDPProjectID() string {
	if x != nil {
		return x.FDPProjectID
	}
	return ""
}

func (x *AuditsListRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *AuditsListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AuditsListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type AuditsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AuditsListResponse) Reset() {
	*x = AuditsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditsListResponse) ProtoMessage() {}

func (x *AuditsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditsListResponse.ProtoReflect.Descriptor instead.
func (*AuditsListResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{11}
}

func (x *AuditsListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int64                      `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name           string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName    string                     `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Type           string                     `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	CloudVendor    string                     `protobuf:"bytes,5,opt,name=cloudVendor,proto3" json:"cloudVendor,omitempty"`
	Logo           string                     `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	Description    string                     `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	WildcardDomain string                     `protobuf:"bytes,8,opt,name=wildcardDomain,proto3" json:"wildcardDomain,omitempty"`
	SchedConfig    *structpb.Value            `protobuf:"bytes,9,opt,name=schedConfig,json=scheduler,proto3,oneof" json:"schedConfig,omitempty"`
	OpsConfig      *structpb.Value            `protobuf:"bytes,10,opt,name=opsConfig,proto3,oneof" json:"opsConfig,omitempty"`
	System         *structpb.Value            `protobuf:"bytes,11,opt,name=system,proto3,oneof" json:"system,omitempty"`
	ManageConfig   *structpb.Value            `protobuf:"bytes,12,opt,name=manageConfig,proto3,oneof" json:"manageConfig,omitempty"`
	CreatedAt      *timestamppb.Timestamp     `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      *timestamppb.Timestamp     `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrgID          int64                      `protobuf:"varint,15,opt,name=orgID,proto3" json:"orgID,omitempty"`
	URLs           map[string]string          `protobuf:"bytes,16,rep,name=uRLs,json=urls,proto3" json:"uRLs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Settings       map[string]*structpb.Value `protobuf:"bytes,17,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config         map[string]string          `protobuf:"bytes,18,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsRelation     string                     `protobuf:"bytes,19,opt,name=isRelation,proto3" json:"isRelation,omitempty"`
	CM             map[string]string          `protobuf:"bytes,20,rep,name=cM,json=cm,proto3" json:"cM,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterInfo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ClusterInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterInfo) GetCloudVendor() string {
	if x != nil {
		return x.CloudVendor
	}
	return ""
}

func (x *ClusterInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ClusterInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterInfo) GetWildcardDomain() string {
	if x != nil {
		return x.WildcardDomain
	}
	return ""
}

func (x *ClusterInfo) GetSchedConfig() *structpb.Value {
	if x != nil {
		return x.SchedConfig
	}
	return nil
}

func (x *ClusterInfo) GetOpsConfig() *structpb.Value {
	if x != nil {
		return x.OpsConfig
	}
	return nil
}

func (x *ClusterInfo) GetSystem() *structpb.Value {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ClusterInfo) GetManageConfig() *structpb.Value {
	if x != nil {
		return x.ManageConfig
	}
	return nil
}

func (x *ClusterInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ClusterInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ClusterInfo) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ClusterInfo) GetURLs() map[string]string {
	if x != nil {
		return x.URLs
	}
	return nil
}

func (x *ClusterInfo) GetSettings() map[string]*structpb.Value {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ClusterInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ClusterInfo) GetIsRelation() string {
	if x != nil {
		return x.IsRelation
	}
	return ""
}

func (x *ClusterInfo) GetCM() map[string]string {
	if x != nil {
		return x.CM
	}
	return nil
}

type ClusterListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID int64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *ClusterListRequest) Reset() {
	*x = ClusterListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListRequest) ProtoMessage() {}

func (x *ClusterListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListRequest.ProtoReflect.Descriptor instead.
func (*ClusterListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterListRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type ClusterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ClusterListResponse) Reset() {
	*x = ClusterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListResponse) ProtoMessage() {}

func (x *ClusterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListResponse.ProtoReflect.Descriptor instead.
func (*ClusterListResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Notice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	OrgID     uint64                 `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Content   string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Status    string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Creator   string                 `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	UpdateAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updateAt,json=updatedAt,proto3,oneof" json:"updateAt,omitempty"`
}

func (x *Notice) Reset() {
	*x = Notice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notice) ProtoMessage() {}

func (x *Notice) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notice.ProtoReflect.Descriptor instead.
func (*Notice) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15}
}

func (x *Notice) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Notice) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *Notice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Notice) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Notice) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Notice) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type NoticeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NoticeCreateRequest) Reset() {
	*x = NoticeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeCreateRequest) ProtoMessage() {}

func (x *NoticeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeCreateRequest.ProtoReflect.Descriptor instead.
func (*NoticeCreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16}
}

func (x *NoticeCreateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type NoticeCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NoticeCreateResponse) Reset() {
	*x = NoticeCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeCreateResponse) ProtoMessage() {}

func (x *NoticeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeCreateResponse.ProtoReflect.Descriptor instead.
func (*NoticeCreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{17}
}

func (x *NoticeCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type NoticeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NoticeDeleteResponse) Reset() {
	*x = NoticeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeDeleteResponse) ProtoMessage() {}

func (x *NoticeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeDeleteResponse.ProtoReflect.Descriptor instead.
func (*NoticeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{18}
}

func (x *NoticeDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type NoticeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	PageNo   uint64 `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint64 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *NoticeListRequest) Reset() {
	*x = NoticeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeListRequest) ProtoMessage() {}

func (x *NoticeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeListRequest.ProtoReflect.Descriptor instead.
func (*NoticeListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{19}
}

func (x *NoticeListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *NoticeListRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NoticeListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NoticeListRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *NoticeListRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type NoticeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NoticeListResponse) Reset() {
	*x = NoticeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeListResponse) ProtoMessage() {}

func (x *NoticeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeListResponse.ProtoReflect.Descriptor instead.
func (*NoticeListResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{20}
}

func (x *NoticeListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type NoticeListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *NoticeListResponseData) Reset() {
	*x = NoticeListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeListResponseData) ProtoMessage() {}

func (x *NoticeListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeListResponseData.ProtoReflect.Descriptor instead.
func (*NoticeListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{21}
}

func (x *NoticeListResponseData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NoticeListResponseData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type NoticePublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NoticePublishResponse) Reset() {
	*x = NoticePublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticePublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticePublishResponse) ProtoMessage() {}

func (x *NoticePublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticePublishResponse.ProtoReflect.Descriptor instead.
func (*NoticePublishResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{22}
}

func (x *NoticePublishResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type NoticeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ID      uint64 `protobuf:"varint,2,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
}

func (x *NoticeUpdateRequest) Reset() {
	*x = NoticeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUpdateRequest) ProtoMessage() {}

func (x *NoticeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUpdateRequest.ProtoReflect.Descriptor instead.
func (*NoticeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{23}
}

func (x *NoticeUpdateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NoticeUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type NoticeUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NoticeUpdateResponse) Reset() {
	*x = NoticeUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUpdateResponse) ProtoMessage() {}

func (x *NoticeUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUpdateResponse.ProtoReflect.Descriptor instead.
func (*NoticeUpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24}
}

func (x *NoticeUpdateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type PagingApproveDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingApproveDTO) Reset() {
	*x = PagingApproveDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingApproveDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingApproveDTO) ProtoMessage() {}

func (x *PagingApproveDTO) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingApproveDTO.ProtoReflect.Descriptor instead.
func (*PagingApproveDTO) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{25}
}

func (x *PagingApproveDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingApproveDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Nick        string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	Avatar      string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Phone       string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email       string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Token       string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	LastLoginAt string `protobuf:"bytes,8,opt,name=lastLoginAt,proto3" json:"lastLoginAt,omitempty"`
	PwdExpireAt string `protobuf:"bytes,9,opt,name=pwdExpireAt,proto3" json:"pwdExpireAt,omitempty"`
	Source      string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{26}
}

func (x *UserInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserInfo) GetLastLoginAt() string {
	if x != nil {
		return x.LastLoginAt
	}
	return ""
}

func (x *UserInfo) GetPwdExpireAt() string {
	if x != nil {
		return x.PwdExpireAt
	}
	return ""
}

func (x *UserInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type UserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Plaintext bool     `protobuf:"varint,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	UserIDs   []string `protobuf:"bytes,3,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *UserListRequest) Reset() {
	*x = UserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListRequest) ProtoMessage() {}

func (x *UserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListRequest.ProtoReflect.Descriptor instead.
func (*UserListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{27}
}

func (x *UserListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UserListRequest) GetPlaintext() bool {
	if x != nil {
		return x.Plaintext
	}
	return false
}

func (x *UserListRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type UserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListResponse) Reset() {
	*x = UserListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResponse) ProtoMessage() {}

func (x *UserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResponse.ProtoReflect.Descriptor instead.
func (*UserListResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{28}
}

func (x *UserListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*structpb.Value `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserListResponseData) Reset() {
	*x = UserListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResponseData) ProtoMessage() {}

func (x *UserListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResponseData.ProtoReflect.Descriptor instead.
func (*UserListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{29}
}

func (x *UserListResponseData) GetUsers() []*structpb.Value {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_admin_proto protoreflect.FileDescriptor

var file_admin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a,
	0x19, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x19, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfd, 0x04, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01,
	0x0a, 0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x15, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xdb, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x44, 0x50, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x44, 0x50, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a,
	0x12, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x09,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x09, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x3f, 0x0a, 0x04, 0x75, 0x52, 0x4c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x52, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x12, 0x4b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x02, 0x63, 0x4d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x63, 0x6d, 0x1a,
	0x37, 0x0a, 0x09, 0x55, 0x52, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x43, 0x4d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2a, 0x0a, 0x12, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x2f, 0x0a,
	0x13, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x42,
	0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x16, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x22, 0x2a, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf8, 0x01,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x77, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x77, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x3e, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32,
	0x88, 0x18, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0xd5, 0x01, 0x0a, 0x11, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x7d,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xae, 0xa1, 0xe6, 0x89, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0x12, 0xe6, 0x01, 0x0a, 0x12, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4e, 0x0a, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xae,
	0xa1, 0xe6, 0x89, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xcd, 0x01, 0x0a, 0x14, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x36, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x7d, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0xa1, 0xe6, 0x89, 0xb9, 0x12, 0xca, 0x01, 0x0a, 0x13, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x6c, 0xfa, 0x81, 0xf9,
	0x1b, 0x45, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65,
	0x78, 0x63, 0x65, 0x6c, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba, 0xe5, 0xae, 0xa1, 0xe8, 0xae,
	0xa1, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0xe4, 0xba, 0x8b,
	0xe4, 0xbb, 0xb6, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x38, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12,
	0xaf, 0x01, 0x0a, 0x12, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0x12, 0xca, 0x01, 0x0a,
	0x13, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x36, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12,
	0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xb9, 0xb3, 0xe5,
	0x8f, 0xb0, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xed,
	0x01, 0x0a, 0x14, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x91, 0xe5,
	0xb8, 0x83, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0x12, 0xe0,
	0x01, 0x0a, 0x16, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x1a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4,
	0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x85, 0xac, 0xe5, 0x91,
	0x8a, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x36,
	0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0,
	0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x2f, 0x0a, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x12, 0xc8, 0x01, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x70, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0xc2, 0xc4,
	0xcb, 0x1c, 0x07, 0x22, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_proto_rawDescOnce sync.Once
	file_admin_proto_rawDescData = file_admin_proto_rawDesc
)

func file_admin_proto_rawDescGZIP() []byte {
	file_admin_proto_rawDescOnce.Do(func() {
		file_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_proto_rawDescData)
	})
	return file_admin_proto_rawDescData
}

var file_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_admin_proto_goTypes = []interface{}{
	(*ADMIN_APPROVE_GET_Request)(nil),      // 0: erda.openapiv1.admin.ADMIN_APPROVE_GET_Request
	(*ADMIN_CLUSTER_GET_Request)(nil),      // 1: erda.openapiv1.admin.ADMIN_CLUSTER_GET_Request
	(*ADMIN_NOTICE_DELETE_Request)(nil),    // 2: erda.openapiv1.admin.ADMIN_NOTICE_DELETE_Request
	(*ADMIN_NOTICE_PUBLISH_Request)(nil),   // 3: erda.openapiv1.admin.ADMIN_NOTICE_PUBLISH_Request
	(*ADMIN_NOTICE_UNPUBLISH_Request)(nil), // 4: erda.openapiv1.admin.ADMIN_NOTICE_UNPUBLISH_Request
	(*ApproveDTO)(nil),                     // 5: erda.openapiv1.admin.ApproveDTO
	(*ApproveDetailResponse)(nil),          // 6: erda.openapiv1.admin.ApproveDetailResponse
	(*ApproveListRequest)(nil),             // 7: erda.openapiv1.admin.ApproveListRequest
	(*ApproveUpdateRequest)(nil),           // 8: erda.openapiv1.admin.ApproveUpdateRequest
	(*ApproveUpdateResponse)(nil),          // 9: erda.openapiv1.admin.ApproveUpdateResponse
	(*AuditsListRequest)(nil),              // 10: erda.openapiv1.admin.AuditsListRequest
	(*AuditsListResponse)(nil),             // 11: erda.openapiv1.admin.AuditsListResponse
	(*ClusterInfo)(nil),                    // 12: erda.openapiv1.admin.ClusterInfo
	(*ClusterListRequest)(nil),             // 13: erda.openapiv1.admin.ClusterListRequest
	(*ClusterListResponse)(nil),            // 14: erda.openapiv1.admin.ClusterListResponse
	(*Notice)(nil),                         // 15: erda.openapiv1.admin.Notice
	(*NoticeCreateRequest)(nil),            // 16: erda.openapiv1.admin.NoticeCreateRequest
	(*NoticeCreateResponse)(nil),           // 17: erda.openapiv1.admin.NoticeCreateResponse
	(*NoticeDeleteResponse)(nil),           // 18: erda.openapiv1.admin.NoticeDeleteResponse
	(*NoticeListRequest)(nil),              // 19: erda.openapiv1.admin.NoticeListRequest
	(*NoticeListResponse)(nil),             // 20: erda.openapiv1.admin.NoticeListResponse
	(*NoticeListResponseData)(nil),         // 21: erda.openapiv1.admin.NoticeListResponseData
	(*NoticePublishResponse)(nil),          // 22: erda.openapiv1.admin.NoticePublishResponse
	(*NoticeUpdateRequest)(nil),            // 23: erda.openapiv1.admin.NoticeUpdateRequest
	(*NoticeUpdateResponse)(nil),           // 24: erda.openapiv1.admin.NoticeUpdateResponse
	(*PagingApproveDTO)(nil),               // 25: erda.openapiv1.admin.PagingApproveDTO
	(*UserInfo)(nil),                       // 26: erda.openapiv1.admin.UserInfo
	(*UserListRequest)(nil),                // 27: erda.openapiv1.admin.UserListRequest
	(*UserListResponse)(nil),               // 28: erda.openapiv1.admin.UserListResponse
	(*UserListResponseData)(nil),           // 29: erda.openapiv1.admin.UserListResponseData
	nil,                                    // 30: erda.openapiv1.admin.ApproveDTO.ExtraEntry
	nil,                                    // 31: erda.openapiv1.admin.ApproveUpdateRequest.ExtraEntry
	nil,                                    // 32: erda.openapiv1.admin.ClusterInfo.URLsEntry
	nil,                                    // 33: erda.openapiv1.admin.ClusterInfo.SettingsEntry
	nil,                                    // 34: erda.openapiv1.admin.ClusterInfo.ConfigEntry
	nil,                                    // 35: erda.openapiv1.admin.ClusterInfo.CMEntry
	(*timestamppb.Timestamp)(nil),          // 36: google.protobuf.Timestamp
	(*structpb.Value)(nil),                 // 37: google.protobuf.Value
	(*emptypb.Empty)(nil),                  // 38: google.protobuf.Empty
}
var file_admin_proto_depIdxs = []int32{
	30, // 0: erda.openapiv1.admin.ApproveDTO.extra:type_name -> erda.openapiv1.admin.ApproveDTO.ExtraEntry
	36, // 1: erda.openapiv1.admin.ApproveDTO.approvalTime:type_name -> google.protobuf.Timestamp
	36, // 2: erda.openapiv1.admin.ApproveDTO.createdAt:type_name -> google.protobuf.Timestamp
	36, // 3: erda.openapiv1.admin.ApproveDTO.updatedAt:type_name -> google.protobuf.Timestamp
	37, // 4: erda.openapiv1.admin.ApproveDetailResponse.data:type_name -> google.protobuf.Value
	31, // 5: erda.openapiv1.admin.ApproveUpdateRequest.extra:type_name -> erda.openapiv1.admin.ApproveUpdateRequest.ExtraEntry
	37, // 6: erda.openapiv1.admin.ApproveUpdateResponse.data:type_name -> google.protobuf.Value
	37, // 7: erda.openapiv1.admin.AuditsListResponse.data:type_name -> google.protobuf.Value
	37, // 8: erda.openapiv1.admin.ClusterInfo.schedConfig:type_name -> google.protobuf.Value
	37, // 9: erda.openapiv1.admin.ClusterInfo.opsConfig:type_name -> google.protobuf.Value
	37, // 10: erda.openapiv1.admin.ClusterInfo.system:type_name -> google.protobuf.Value
	37, // 11: erda.openapiv1.admin.ClusterInfo.manageConfig:type_name -> google.protobuf.Value
	36, // 12: erda.openapiv1.admin.ClusterInfo.createdAt:type_name -> google.protobuf.Timestamp
	36, // 13: erda.openapiv1.admin.ClusterInfo.updatedAt:type_name -> google.protobuf.Timestamp
	32, // 14: erda.openapiv1.admin.ClusterInfo.uRLs:type_name -> erda.openapiv1.admin.ClusterInfo.URLsEntry
	33, // 15: erda.openapiv1.admin.ClusterInfo.settings:type_name -> erda.openapiv1.admin.ClusterInfo.SettingsEntry
	34, // 16: erda.openapiv1.admin.ClusterInfo.config:type_name -> erda.openapiv1.admin.ClusterInfo.ConfigEntry
	35, // 17: erda.openapiv1.admin.ClusterInfo.cM:type_name -> erda.openapiv1.admin.ClusterInfo.CMEntry
	37, // 18: erda.openapiv1.admin.ClusterListResponse.data:type_name -> google.protobuf.Value
	36, // 19: erda.openapiv1.admin.Notice.createdAt:type_name -> google.protobuf.Timestamp
	36, // 20: erda.openapiv1.admin.Notice.updateAt:type_name -> google.protobuf.Timestamp
	37, // 21: erda.openapiv1.admin.NoticeCreateResponse.data:type_name -> google.protobuf.Value
	37, // 22: erda.openapiv1.admin.NoticeDeleteResponse.data:type_name -> google.protobuf.Value
	37, // 23: erda.openapiv1.admin.NoticeListResponse.data:type_name -> google.protobuf.Value
	37, // 24: erda.openapiv1.admin.NoticeListResponseData.list:type_name -> google.protobuf.Value
	37, // 25: erda.openapiv1.admin.NoticePublishResponse.data:type_name -> google.protobuf.Value
	37, // 26: erda.openapiv1.admin.PagingApproveDTO.list:type_name -> google.protobuf.Value
	37, // 27: erda.openapiv1.admin.UserListResponse.data:type_name -> google.protobuf.Value
	37, // 28: erda.openapiv1.admin.UserListResponseData.users:type_name -> google.protobuf.Value
	37, // 29: erda.openapiv1.admin.ClusterInfo.SettingsEntry.value:type_name -> google.protobuf.Value
	0,  // 30: erda.openapiv1.admin.admin.ADMIN_APPROVE_GET:input_type -> erda.openapiv1.admin.ADMIN_APPROVE_GET_Request
	7,  // 31: erda.openapiv1.admin.admin.ADMIN_APPROVE_LIST:input_type -> erda.openapiv1.admin.ApproveListRequest
	8,  // 32: erda.openapiv1.admin.admin.ADMIN_APPROVE_UPDATE:input_type -> erda.openapiv1.admin.ApproveUpdateRequest
	10, // 33: erda.openapiv1.admin.admin.ADMIN_AUDITS_EXPORT:input_type -> erda.openapiv1.admin.AuditsListRequest
	10, // 34: erda.openapiv1.admin.admin.ADMIN_AUDITS_LIST:input_type -> erda.openapiv1.admin.AuditsListRequest
	1,  // 35: erda.openapiv1.admin.admin.ADMIN_CLUSTER_GET:input_type -> erda.openapiv1.admin.ADMIN_CLUSTER_GET_Request
	13, // 36: erda.openapiv1.admin.admin.ADMIN_CLUSTER_LIST:input_type -> erda.openapiv1.admin.ClusterListRequest
	16, // 37: erda.openapiv1.admin.admin.ADMIN_NOTICE_CREATE:input_type -> erda.openapiv1.admin.NoticeCreateRequest
	2,  // 38: erda.openapiv1.admin.admin.ADMIN_NOTICE_DELETE:input_type -> erda.openapiv1.admin.ADMIN_NOTICE_DELETE_Request
	19, // 39: erda.openapiv1.admin.admin.ADMIN_NOTICE_LIST:input_type -> erda.openapiv1.admin.NoticeListRequest
	3,  // 40: erda.openapiv1.admin.admin.ADMIN_NOTICE_PUBLISH:input_type -> erda.openapiv1.admin.ADMIN_NOTICE_PUBLISH_Request
	4,  // 41: erda.openapiv1.admin.admin.ADMIN_NOTICE_UNPUBLISH:input_type -> erda.openapiv1.admin.ADMIN_NOTICE_UNPUBLISH_Request
	23, // 42: erda.openapiv1.admin.admin.ADMIN_NOTICE_UPDATE:input_type -> erda.openapiv1.admin.NoticeUpdateRequest
	27, // 43: erda.openapiv1.admin.admin.ADMIN_USER_LIST:input_type -> erda.openapiv1.admin.UserListRequest
	27, // 44: erda.openapiv1.admin.admin.ADMIN_USER_SEARCH:input_type -> erda.openapiv1.admin.UserListRequest
	6,  // 45: erda.openapiv1.admin.admin.ADMIN_APPROVE_GET:output_type -> erda.openapiv1.admin.ApproveDetailResponse
	25, // 46: erda.openapiv1.admin.admin.ADMIN_APPROVE_LIST:output_type -> erda.openapiv1.admin.PagingApproveDTO
	9,  // 47: erda.openapiv1.admin.admin.ADMIN_APPROVE_UPDATE:output_type -> erda.openapiv1.admin.ApproveUpdateResponse
	38, // 48: erda.openapiv1.admin.admin.ADMIN_AUDITS_EXPORT:output_type -> google.protobuf.Empty
	11, // 49: erda.openapiv1.admin.admin.ADMIN_AUDITS_LIST:output_type -> erda.openapiv1.admin.AuditsListResponse
	12, // 50: erda.openapiv1.admin.admin.ADMIN_CLUSTER_GET:output_type -> erda.openapiv1.admin.ClusterInfo
	14, // 51: erda.openapiv1.admin.admin.ADMIN_CLUSTER_LIST:output_type -> erda.openapiv1.admin.ClusterListResponse
	17, // 52: erda.openapiv1.admin.admin.ADMIN_NOTICE_CREATE:output_type -> erda.openapiv1.admin.NoticeCreateResponse
	18, // 53: erda.openapiv1.admin.admin.ADMIN_NOTICE_DELETE:output_type -> erda.openapiv1.admin.NoticeDeleteResponse
	20, // 54: erda.openapiv1.admin.admin.ADMIN_NOTICE_LIST:output_type -> erda.openapiv1.admin.NoticeListResponse
	22, // 55: erda.openapiv1.admin.admin.ADMIN_NOTICE_PUBLISH:output_type -> erda.openapiv1.admin.NoticePublishResponse
	38, // 56: erda.openapiv1.admin.admin.ADMIN_NOTICE_UNPUBLISH:output_type -> google.protobuf.Empty
	24, // 57: erda.openapiv1.admin.admin.ADMIN_NOTICE_UPDATE:output_type -> erda.openapiv1.admin.NoticeUpdateResponse
	28, // 58: erda.openapiv1.admin.admin.ADMIN_USER_LIST:output_type -> erda.openapiv1.admin.UserListResponse
	28, // 59: erda.openapiv1.admin.admin.ADMIN_USER_SEARCH:output_type -> erda.openapiv1.admin.UserListResponse
	45, // [45:60] is the sub-list for method output_type
	30, // [30:45] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_admin_proto_init() }
func file_admin_proto_init() {
	if File_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMIN_APPROVE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMIN_CLUSTER_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMIN_NOTICE_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMIN_NOTICE_PUBLISH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMIN_NOTICE_UNPUBLISH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticePublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingApproveDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_admin_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_admin_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_admin_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_admin_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_admin_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_proto_goTypes,
		DependencyIndexes: file_admin_proto_depIdxs,
		MessageInfos:      file_admin_proto_msgTypes,
	}.Build()
	File_admin_proto = out.File
	file_admin_proto_rawDesc = nil
	file_admin_proto_goTypes = nil
	file_admin_proto_depIdxs = nil
}
