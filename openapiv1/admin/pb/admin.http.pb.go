// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: admin.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// AdminHandler is the server API for Admin service.
type AdminHandler interface {
	// GET /api/approves/{approveId}
	ADMIN_APPROVE_GET(context.Context, *ADMIN_APPROVE_GET_Request) (*ApproveDetailResponse, error)
	// GET /api/approves/actions/list-approves
	ADMIN_APPROVE_LIST(context.Context, *ApproveListRequest) (*PagingApproveDTO, error)
	// PUT /api/approves/{approveId}
	ADMIN_APPROVE_UPDATE(context.Context, *ApproveUpdateRequest) (*ApproveUpdateResponse, error)
	// GET /api/audits/actions/export-excel
	ADMIN_AUDITS_EXPORT(context.Context, *AuditsListRequest) (*emptypb.Empty, error)
	// GET /api/audits/actions/list
	ADMIN_AUDITS_LIST(context.Context, *AuditsListRequest) (*AuditsListResponse, error)
	// GET /api/clusters/{clusterName}
	ADMIN_CLUSTER_GET(context.Context, *ADMIN_CLUSTER_GET_Request) (*ClusterInfo, error)
	// GET /api/clusters
	ADMIN_CLUSTER_LIST(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	// POST /api/notices
	ADMIN_NOTICE_CREATE(context.Context, *NoticeCreateRequest) (*NoticeCreateResponse, error)
	// DELETE /api/notices/{id}
	ADMIN_NOTICE_DELETE(context.Context, *ADMIN_NOTICE_DELETE_Request) (*NoticeDeleteResponse, error)
	// GET /api/notices
	ADMIN_NOTICE_LIST(context.Context, *NoticeListRequest) (*NoticeListResponse, error)
	// PUT /api/notices/{id}/actions/publish
	ADMIN_NOTICE_PUBLISH(context.Context, *ADMIN_NOTICE_PUBLISH_Request) (*NoticePublishResponse, error)
	// PUT /api/notices/{id}/actions/unpublish
	ADMIN_NOTICE_UNPUBLISH(context.Context, *ADMIN_NOTICE_UNPUBLISH_Request) (*emptypb.Empty, error)
	// PUT /api/notices/{ID}
	ADMIN_NOTICE_UPDATE(context.Context, *NoticeUpdateRequest) (*NoticeUpdateResponse, error)
	// GET /api/users
	ADMIN_USER_LIST(context.Context, *UserListRequest) (*UserListResponse, error)
	// GET /api/users/actions/search
	ADMIN_USER_SEARCH(context.Context, *UserListRequest) (*UserListResponse, error)
}

// RegisterAdminHandler register AdminHandler to http.Router.
func RegisterAdminHandler(r http.Router, srv AdminHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ADMIN_APPROVE_GET := func(method, path string, fn func(context.Context, *ADMIN_APPROVE_GET_Request) (*ApproveDetailResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ADMIN_APPROVE_GET_Request))
		}
		var ADMIN_APPROVE_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_APPROVE_GET_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_APPROVE_GET_info)
				}
				r = r.WithContext(ctx)
				var in ADMIN_APPROVE_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "approveId":
							in.ApproveId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_APPROVE_LIST := func(method, path string, fn func(context.Context, *ApproveListRequest) (*PagingApproveDTO, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ApproveListRequest))
		}
		var ADMIN_APPROVE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_APPROVE_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_APPROVE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in ApproveListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_APPROVE_UPDATE := func(method, path string, fn func(context.Context, *ApproveUpdateRequest) (*ApproveUpdateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ApproveUpdateRequest))
		}
		var ADMIN_APPROVE_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_APPROVE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_APPROVE_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_APPROVE_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in ApproveUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "approveId":
							in.ApproveId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_AUDITS_EXPORT := func(method, path string, fn func(context.Context, *AuditsListRequest) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*AuditsListRequest))
		}
		var ADMIN_AUDITS_EXPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_AUDITS_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_AUDITS_EXPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_AUDITS_EXPORT_info)
				}
				r = r.WithContext(ctx)
				var in AuditsListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_AUDITS_LIST := func(method, path string, fn func(context.Context, *AuditsListRequest) (*AuditsListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*AuditsListRequest))
		}
		var ADMIN_AUDITS_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_AUDITS_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_AUDITS_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_AUDITS_LIST_info)
				}
				r = r.WithContext(ctx)
				var in AuditsListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_CLUSTER_GET := func(method, path string, fn func(context.Context, *ADMIN_CLUSTER_GET_Request) (*ClusterInfo, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ADMIN_CLUSTER_GET_Request))
		}
		var ADMIN_CLUSTER_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_CLUSTER_GET_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_CLUSTER_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_CLUSTER_GET_info)
				}
				r = r.WithContext(ctx)
				var in ADMIN_CLUSTER_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "clusterName":
							in.ClusterName = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_CLUSTER_LIST := func(method, path string, fn func(context.Context, *ClusterListRequest) (*ClusterListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ClusterListRequest))
		}
		var ADMIN_CLUSTER_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_CLUSTER_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_CLUSTER_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_CLUSTER_LIST_info)
				}
				r = r.WithContext(ctx)
				var in ClusterListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_CREATE := func(method, path string, fn func(context.Context, *NoticeCreateRequest) (*NoticeCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*NoticeCreateRequest))
		}
		var ADMIN_NOTICE_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in NoticeCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_DELETE := func(method, path string, fn func(context.Context, *ADMIN_NOTICE_DELETE_Request) (*NoticeDeleteResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ADMIN_NOTICE_DELETE_Request))
		}
		var ADMIN_NOTICE_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in ADMIN_NOTICE_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_LIST := func(method, path string, fn func(context.Context, *NoticeListRequest) (*NoticeListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*NoticeListRequest))
		}
		var ADMIN_NOTICE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in NoticeListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_PUBLISH := func(method, path string, fn func(context.Context, *ADMIN_NOTICE_PUBLISH_Request) (*NoticePublishResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ADMIN_NOTICE_PUBLISH_Request))
		}
		var ADMIN_NOTICE_PUBLISH_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_PUBLISH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_PUBLISH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_PUBLISH_info)
				}
				r = r.WithContext(ctx)
				var in ADMIN_NOTICE_PUBLISH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_UNPUBLISH := func(method, path string, fn func(context.Context, *ADMIN_NOTICE_UNPUBLISH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ADMIN_NOTICE_UNPUBLISH_Request))
		}
		var ADMIN_NOTICE_UNPUBLISH_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_UNPUBLISH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_UNPUBLISH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_UNPUBLISH_info)
				}
				r = r.WithContext(ctx)
				var in ADMIN_NOTICE_UNPUBLISH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_NOTICE_UPDATE := func(method, path string, fn func(context.Context, *NoticeUpdateRequest) (*NoticeUpdateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*NoticeUpdateRequest))
		}
		var ADMIN_NOTICE_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_NOTICE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_NOTICE_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_NOTICE_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in NoticeUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "ID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.ID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_USER_LIST := func(method, path string, fn func(context.Context, *UserListRequest) (*UserListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UserListRequest))
		}
		var ADMIN_USER_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_USER_LIST_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_USER_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_USER_LIST_info)
				}
				r = r.WithContext(ctx)
				var in UserListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_USER_SEARCH := func(method, path string, fn func(context.Context, *UserListRequest) (*UserListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UserListRequest))
		}
		var ADMIN_USER_SEARCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADMIN_USER_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.admin.admin", "ADMIN_USER_SEARCH", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADMIN_USER_SEARCH_info)
				}
				r = r.WithContext(ctx)
				var in UserListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADMIN_APPROVE_GET("GET", "/api/approves/{approveId}", srv.ADMIN_APPROVE_GET)
	add_ADMIN_APPROVE_LIST("GET", "/api/approves/actions/list-approves", srv.ADMIN_APPROVE_LIST)
	add_ADMIN_APPROVE_UPDATE("PUT", "/api/approves/{approveId}", srv.ADMIN_APPROVE_UPDATE)
	add_ADMIN_AUDITS_EXPORT("GET", "/api/audits/actions/export-excel", srv.ADMIN_AUDITS_EXPORT)
	add_ADMIN_AUDITS_LIST("GET", "/api/audits/actions/list", srv.ADMIN_AUDITS_LIST)
	add_ADMIN_CLUSTER_GET("GET", "/api/clusters/{clusterName}", srv.ADMIN_CLUSTER_GET)
	add_ADMIN_CLUSTER_LIST("GET", "/api/clusters", srv.ADMIN_CLUSTER_LIST)
	add_ADMIN_NOTICE_CREATE("POST", "/api/notices", srv.ADMIN_NOTICE_CREATE)
	add_ADMIN_NOTICE_DELETE("DELETE", "/api/notices/{id}", srv.ADMIN_NOTICE_DELETE)
	add_ADMIN_NOTICE_LIST("GET", "/api/notices", srv.ADMIN_NOTICE_LIST)
	add_ADMIN_NOTICE_PUBLISH("PUT", "/api/notices/{id}/actions/publish", srv.ADMIN_NOTICE_PUBLISH)
	add_ADMIN_NOTICE_UNPUBLISH("PUT", "/api/notices/{id}/actions/unpublish", srv.ADMIN_NOTICE_UNPUBLISH)
	add_ADMIN_NOTICE_UPDATE("PUT", "/api/notices/{ID}", srv.ADMIN_NOTICE_UPDATE)
	add_ADMIN_USER_LIST("GET", "/api/users", srv.ADMIN_USER_LIST)
	add_ADMIN_USER_SEARCH("GET", "/api/users/actions/search", srv.ADMIN_USER_SEARCH)
}
