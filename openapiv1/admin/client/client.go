// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: admin.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/admin/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Admin admin.proto
	Admin() pb.AdminClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		admin: pb.NewAdminClient(cc),
	}
}

type serviceClients struct {
	admin pb.AdminClient
}

func (c *serviceClients) Admin() pb.AdminClient {
	return c.admin
}

type adminWrapper struct {
	client pb.AdminClient
	opts   []grpc1.CallOption
}

func (s *adminWrapper) ADMIN_APPROVE_GET(ctx context.Context, req *pb.ADMIN_APPROVE_GET_Request) (*pb.ApproveDetailResponse, error) {
	return s.client.ADMIN_APPROVE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_APPROVE_LIST(ctx context.Context, req *pb.ApproveListRequest) (*pb.PagingApproveDTO, error) {
	return s.client.ADMIN_APPROVE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_APPROVE_UPDATE(ctx context.Context, req *pb.ApproveUpdateRequest) (*pb.ApproveUpdateResponse, error) {
	return s.client.ADMIN_APPROVE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_AUDITS_EXPORT(ctx context.Context, req *pb.AuditsListRequest) (*emptypb.Empty, error) {
	return s.client.ADMIN_AUDITS_EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_AUDITS_LIST(ctx context.Context, req *pb.AuditsListRequest) (*pb.AuditsListResponse, error) {
	return s.client.ADMIN_AUDITS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_CLUSTER_GET(ctx context.Context, req *pb.ADMIN_CLUSTER_GET_Request) (*pb.ClusterInfo, error) {
	return s.client.ADMIN_CLUSTER_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_CLUSTER_LIST(ctx context.Context, req *pb.ClusterListRequest) (*pb.ClusterListResponse, error) {
	return s.client.ADMIN_CLUSTER_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_CREATE(ctx context.Context, req *pb.NoticeCreateRequest) (*pb.NoticeCreateResponse, error) {
	return s.client.ADMIN_NOTICE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_DELETE(ctx context.Context, req *pb.ADMIN_NOTICE_DELETE_Request) (*pb.NoticeDeleteResponse, error) {
	return s.client.ADMIN_NOTICE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_LIST(ctx context.Context, req *pb.NoticeListRequest) (*pb.NoticeListResponse, error) {
	return s.client.ADMIN_NOTICE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_PUBLISH(ctx context.Context, req *pb.ADMIN_NOTICE_PUBLISH_Request) (*pb.NoticePublishResponse, error) {
	return s.client.ADMIN_NOTICE_PUBLISH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_UNPUBLISH(ctx context.Context, req *pb.ADMIN_NOTICE_UNPUBLISH_Request) (*emptypb.Empty, error) {
	return s.client.ADMIN_NOTICE_UNPUBLISH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_NOTICE_UPDATE(ctx context.Context, req *pb.NoticeUpdateRequest) (*pb.NoticeUpdateResponse, error) {
	return s.client.ADMIN_NOTICE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_USER_LIST(ctx context.Context, req *pb.UserListRequest) (*pb.UserListResponse, error) {
	return s.client.ADMIN_USER_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *adminWrapper) ADMIN_USER_SEARCH(ctx context.Context, req *pb.UserListRequest) (*pb.UserListResponse, error) {
	return s.client.ADMIN_USER_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
