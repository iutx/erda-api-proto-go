// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: fdp.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// FdpHandler is the server API for Fdp service.
type FdpHandler interface {
	// DELETE /api/fdp/**
	CDP_DELETE(context.Context, *CDP_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/fdp/**
	CDP_GET(context.Context, *CDP_GET_Request) (*emptypb.Empty, error)
	// PATCH /api/fdp/**
	CDP_PATCH(context.Context, *CDP_PATCH_Request) (*emptypb.Empty, error)
	// POST /api/fdp/**
	CDP_POST(context.Context, *CDP_POST_Request) (*emptypb.Empty, error)
	// PUT /api/fdp/**
	CDP_PUT(context.Context, *CDP_PUT_Request) (*emptypb.Empty, error)
	// GET /api/fdp-websocket/**
	FDP_WEBSOCKET(context.Context, *FDP_WEBSOCKET_Request) (*emptypb.Empty, error)
}

// RegisterFdpHandler register FdpHandler to http.Router.
func RegisterFdpHandler(r http.Router, srv FdpHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CDP_DELETE := func(method, path string, fn func(context.Context, *CDP_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CDP_DELETE_Request))
		}
		var CDP_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CDP_DELETE_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CDP_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in CDP_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CDP_GET := func(method, path string, fn func(context.Context, *CDP_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CDP_GET_Request))
		}
		var CDP_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			CDP_GET_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CDP_GET_info)
				}
				r = r.WithContext(ctx)
				var in CDP_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CDP_PATCH := func(method, path string, fn func(context.Context, *CDP_PATCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CDP_PATCH_Request))
		}
		var CDP_PATCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			CDP_PATCH_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_PATCH", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CDP_PATCH_info)
				}
				r = r.WithContext(ctx)
				var in CDP_PATCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CDP_POST := func(method, path string, fn func(context.Context, *CDP_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CDP_POST_Request))
		}
		var CDP_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			CDP_POST_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CDP_POST_info)
				}
				r = r.WithContext(ctx)
				var in CDP_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CDP_PUT := func(method, path string, fn func(context.Context, *CDP_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CDP_PUT_Request))
		}
		var CDP_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			CDP_PUT_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_PUT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CDP_PUT_info)
				}
				r = r.WithContext(ctx)
				var in CDP_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_FDP_WEBSOCKET := func(method, path string, fn func(context.Context, *FDP_WEBSOCKET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*FDP_WEBSOCKET_Request))
		}
		var FDP_WEBSOCKET_info transport.ServiceInfo
		if h.Interceptor != nil {
			FDP_WEBSOCKET_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "FDP_WEBSOCKET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, FDP_WEBSOCKET_info)
				}
				r = r.WithContext(ctx)
				var in FDP_WEBSOCKET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CDP_DELETE("DELETE", "/api/fdp/**", srv.CDP_DELETE)
	add_CDP_GET("GET", "/api/fdp/**", srv.CDP_GET)
	add_CDP_PATCH("PATCH", "/api/fdp/**", srv.CDP_PATCH)
	add_CDP_POST("POST", "/api/fdp/**", srv.CDP_POST)
	add_CDP_PUT("PUT", "/api/fdp/**", srv.CDP_PUT)
	add_FDP_WEBSOCKET("GET", "/api/fdp-websocket/**", srv.FDP_WEBSOCKET)
}
