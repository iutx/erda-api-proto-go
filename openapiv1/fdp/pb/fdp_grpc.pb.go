// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: fdp.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// FdpClient is the client API for Fdp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FdpClient interface {
	CDP_DELETE(ctx context.Context, in *CDP_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CDP_GET(ctx context.Context, in *CDP_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CDP_PATCH(ctx context.Context, in *CDP_PATCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CDP_POST(ctx context.Context, in *CDP_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CDP_PUT(ctx context.Context, in *CDP_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FDP_WEBSOCKET(ctx context.Context, in *FDP_WEBSOCKET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fdpClient struct {
	cc grpc1.ClientConnInterface
}

func NewFdpClient(cc grpc1.ClientConnInterface) FdpClient {
	return &fdpClient{cc}
}

func (c *fdpClient) CDP_DELETE(ctx context.Context, in *CDP_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/CDP_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdpClient) CDP_GET(ctx context.Context, in *CDP_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/CDP_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdpClient) CDP_PATCH(ctx context.Context, in *CDP_PATCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/CDP_PATCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdpClient) CDP_POST(ctx context.Context, in *CDP_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/CDP_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdpClient) CDP_PUT(ctx context.Context, in *CDP_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/CDP_PUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdpClient) FDP_WEBSOCKET(ctx context.Context, in *FDP_WEBSOCKET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.fdp.fdp/FDP_WEBSOCKET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FdpServer is the server API for Fdp service.
// All implementations should embed UnimplementedFdpServer
// for forward compatibility
type FdpServer interface {
	CDP_DELETE(context.Context, *CDP_DELETE_Request) (*emptypb.Empty, error)
	CDP_GET(context.Context, *CDP_GET_Request) (*emptypb.Empty, error)
	CDP_PATCH(context.Context, *CDP_PATCH_Request) (*emptypb.Empty, error)
	CDP_POST(context.Context, *CDP_POST_Request) (*emptypb.Empty, error)
	CDP_PUT(context.Context, *CDP_PUT_Request) (*emptypb.Empty, error)
	FDP_WEBSOCKET(context.Context, *FDP_WEBSOCKET_Request) (*emptypb.Empty, error)
}

// UnimplementedFdpServer should be embedded to have forward compatible implementations.
type UnimplementedFdpServer struct {
}

func (*UnimplementedFdpServer) CDP_DELETE(context.Context, *CDP_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDP_DELETE not implemented")
}
func (*UnimplementedFdpServer) CDP_GET(context.Context, *CDP_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDP_GET not implemented")
}
func (*UnimplementedFdpServer) CDP_PATCH(context.Context, *CDP_PATCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDP_PATCH not implemented")
}
func (*UnimplementedFdpServer) CDP_POST(context.Context, *CDP_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDP_POST not implemented")
}
func (*UnimplementedFdpServer) CDP_PUT(context.Context, *CDP_PUT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDP_PUT not implemented")
}
func (*UnimplementedFdpServer) FDP_WEBSOCKET(context.Context, *FDP_WEBSOCKET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FDP_WEBSOCKET not implemented")
}

func RegisterFdpServer(s grpc1.ServiceRegistrar, srv FdpServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Fdp_serviceDesc(srv, opts...), srv)
}

var _Fdp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.fdp.fdp",
	HandlerType: (*FdpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "fdp.proto",
}

func _get_Fdp_serviceDesc(srv FdpServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Fdp_CDP_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CDP_DELETE(ctx, req.(*CDP_DELETE_Request))
	}
	var _Fdp_CDP_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_CDP_DELETE_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_DELETE", srv)
		_Fdp_CDP_DELETE_Handler = h.Interceptor(_Fdp_CDP_DELETE_Handler)
	}

	_Fdp_CDP_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CDP_GET(ctx, req.(*CDP_GET_Request))
	}
	var _Fdp_CDP_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_CDP_GET_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_GET", srv)
		_Fdp_CDP_GET_Handler = h.Interceptor(_Fdp_CDP_GET_Handler)
	}

	_Fdp_CDP_PATCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CDP_PATCH(ctx, req.(*CDP_PATCH_Request))
	}
	var _Fdp_CDP_PATCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_CDP_PATCH_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_PATCH", srv)
		_Fdp_CDP_PATCH_Handler = h.Interceptor(_Fdp_CDP_PATCH_Handler)
	}

	_Fdp_CDP_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CDP_POST(ctx, req.(*CDP_POST_Request))
	}
	var _Fdp_CDP_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_CDP_POST_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_POST", srv)
		_Fdp_CDP_POST_Handler = h.Interceptor(_Fdp_CDP_POST_Handler)
	}

	_Fdp_CDP_PUT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CDP_PUT(ctx, req.(*CDP_PUT_Request))
	}
	var _Fdp_CDP_PUT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_CDP_PUT_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "CDP_PUT", srv)
		_Fdp_CDP_PUT_Handler = h.Interceptor(_Fdp_CDP_PUT_Handler)
	}

	_Fdp_FDP_WEBSOCKET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FDP_WEBSOCKET(ctx, req.(*FDP_WEBSOCKET_Request))
	}
	var _Fdp_FDP_WEBSOCKET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Fdp_FDP_WEBSOCKET_info = transport.NewServiceInfo("erda.openapiv1.fdp.fdp", "FDP_WEBSOCKET", srv)
		_Fdp_FDP_WEBSOCKET_Handler = h.Interceptor(_Fdp_FDP_WEBSOCKET_Handler)
	}

	var serviceDesc = _Fdp_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CDP_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CDP_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).CDP_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_CDP_DELETE_info)
				}
				if interceptor == nil {
					return _Fdp_CDP_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/CDP_DELETE",
				}
				return interceptor(ctx, in, info, _Fdp_CDP_DELETE_Handler)
			},
		},
		{
			MethodName: "CDP_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CDP_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).CDP_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_CDP_GET_info)
				}
				if interceptor == nil {
					return _Fdp_CDP_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/CDP_GET",
				}
				return interceptor(ctx, in, info, _Fdp_CDP_GET_Handler)
			},
		},
		{
			MethodName: "CDP_PATCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CDP_PATCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).CDP_PATCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_CDP_PATCH_info)
				}
				if interceptor == nil {
					return _Fdp_CDP_PATCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/CDP_PATCH",
				}
				return interceptor(ctx, in, info, _Fdp_CDP_PATCH_Handler)
			},
		},
		{
			MethodName: "CDP_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CDP_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).CDP_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_CDP_POST_info)
				}
				if interceptor == nil {
					return _Fdp_CDP_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/CDP_POST",
				}
				return interceptor(ctx, in, info, _Fdp_CDP_POST_Handler)
			},
		},
		{
			MethodName: "CDP_PUT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CDP_PUT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).CDP_PUT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_CDP_PUT_info)
				}
				if interceptor == nil {
					return _Fdp_CDP_PUT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/CDP_PUT",
				}
				return interceptor(ctx, in, info, _Fdp_CDP_PUT_Handler)
			},
		},
		{
			MethodName: "FDP_WEBSOCKET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FDP_WEBSOCKET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FdpServer).FDP_WEBSOCKET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Fdp_FDP_WEBSOCKET_info)
				}
				if interceptor == nil {
					return _Fdp_FDP_WEBSOCKET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.fdp.fdp/FDP_WEBSOCKET",
				}
				return interceptor(ctx, in, info, _Fdp_FDP_WEBSOCKET_Handler)
			},
		},
	}
	return &serviceDesc
}
