// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: officer.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OfficerClient is the client API for Officer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficerClient interface {
	OFFICER_FETCH_SCRIPT(ctx context.Context, in *OFFICER_FETCH_SCRIPT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OFFICER_GET_PRICE(ctx context.Context, in *OFFICER_GET_PRICE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OFFICER_GET_SCRIPT_INFO(ctx context.Context, in *OFFICER_GET_SCRIPT_INFO_Request, opts ...grpc.CallOption) (*ScriptInfo, error)
}

type officerClient struct {
	cc grpc1.ClientConnInterface
}

func NewOfficerClient(cc grpc1.ClientConnInterface) OfficerClient {
	return &officerClient{cc}
}

func (c *officerClient) OFFICER_FETCH_SCRIPT(ctx context.Context, in *OFFICER_FETCH_SCRIPT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.officer.officer/OFFICER_FETCH_SCRIPT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officerClient) OFFICER_GET_PRICE(ctx context.Context, in *OFFICER_GET_PRICE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.officer.officer/OFFICER_GET_PRICE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officerClient) OFFICER_GET_SCRIPT_INFO(ctx context.Context, in *OFFICER_GET_SCRIPT_INFO_Request, opts ...grpc.CallOption) (*ScriptInfo, error) {
	out := new(ScriptInfo)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.officer.officer/OFFICER_GET_SCRIPT_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficerServer is the server API for Officer service.
// All implementations should embed UnimplementedOfficerServer
// for forward compatibility
type OfficerServer interface {
	OFFICER_FETCH_SCRIPT(context.Context, *OFFICER_FETCH_SCRIPT_Request) (*emptypb.Empty, error)
	OFFICER_GET_PRICE(context.Context, *OFFICER_GET_PRICE_Request) (*emptypb.Empty, error)
	OFFICER_GET_SCRIPT_INFO(context.Context, *OFFICER_GET_SCRIPT_INFO_Request) (*ScriptInfo, error)
}

// UnimplementedOfficerServer should be embedded to have forward compatible implementations.
type UnimplementedOfficerServer struct {
}

func (*UnimplementedOfficerServer) OFFICER_FETCH_SCRIPT(context.Context, *OFFICER_FETCH_SCRIPT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OFFICER_FETCH_SCRIPT not implemented")
}
func (*UnimplementedOfficerServer) OFFICER_GET_PRICE(context.Context, *OFFICER_GET_PRICE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OFFICER_GET_PRICE not implemented")
}
func (*UnimplementedOfficerServer) OFFICER_GET_SCRIPT_INFO(context.Context, *OFFICER_GET_SCRIPT_INFO_Request) (*ScriptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OFFICER_GET_SCRIPT_INFO not implemented")
}

func RegisterOfficerServer(s grpc1.ServiceRegistrar, srv OfficerServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Officer_serviceDesc(srv, opts...), srv)
}

var _Officer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.officer.officer",
	HandlerType: (*OfficerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "officer.proto",
}

func _get_Officer_serviceDesc(srv OfficerServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Officer_OFFICER_FETCH_SCRIPT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.OFFICER_FETCH_SCRIPT(ctx, req.(*OFFICER_FETCH_SCRIPT_Request))
	}
	var _Officer_OFFICER_FETCH_SCRIPT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Officer_OFFICER_FETCH_SCRIPT_info = transport.NewServiceInfo("erda.openapiv1.officer.officer", "OFFICER_FETCH_SCRIPT", srv)
		_Officer_OFFICER_FETCH_SCRIPT_Handler = h.Interceptor(_Officer_OFFICER_FETCH_SCRIPT_Handler)
	}

	_Officer_OFFICER_GET_PRICE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.OFFICER_GET_PRICE(ctx, req.(*OFFICER_GET_PRICE_Request))
	}
	var _Officer_OFFICER_GET_PRICE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Officer_OFFICER_GET_PRICE_info = transport.NewServiceInfo("erda.openapiv1.officer.officer", "OFFICER_GET_PRICE", srv)
		_Officer_OFFICER_GET_PRICE_Handler = h.Interceptor(_Officer_OFFICER_GET_PRICE_Handler)
	}

	_Officer_OFFICER_GET_SCRIPT_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.OFFICER_GET_SCRIPT_INFO(ctx, req.(*OFFICER_GET_SCRIPT_INFO_Request))
	}
	var _Officer_OFFICER_GET_SCRIPT_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Officer_OFFICER_GET_SCRIPT_INFO_info = transport.NewServiceInfo("erda.openapiv1.officer.officer", "OFFICER_GET_SCRIPT_INFO", srv)
		_Officer_OFFICER_GET_SCRIPT_INFO_Handler = h.Interceptor(_Officer_OFFICER_GET_SCRIPT_INFO_Handler)
	}

	var serviceDesc = _Officer_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "OFFICER_FETCH_SCRIPT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OFFICER_FETCH_SCRIPT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OfficerServer).OFFICER_FETCH_SCRIPT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Officer_OFFICER_FETCH_SCRIPT_info)
				}
				if interceptor == nil {
					return _Officer_OFFICER_FETCH_SCRIPT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.officer.officer/OFFICER_FETCH_SCRIPT",
				}
				return interceptor(ctx, in, info, _Officer_OFFICER_FETCH_SCRIPT_Handler)
			},
		},
		{
			MethodName: "OFFICER_GET_PRICE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OFFICER_GET_PRICE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OfficerServer).OFFICER_GET_PRICE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Officer_OFFICER_GET_PRICE_info)
				}
				if interceptor == nil {
					return _Officer_OFFICER_GET_PRICE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.officer.officer/OFFICER_GET_PRICE",
				}
				return interceptor(ctx, in, info, _Officer_OFFICER_GET_PRICE_Handler)
			},
		},
		{
			MethodName: "OFFICER_GET_SCRIPT_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OFFICER_GET_SCRIPT_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OfficerServer).OFFICER_GET_SCRIPT_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Officer_OFFICER_GET_SCRIPT_INFO_info)
				}
				if interceptor == nil {
					return _Officer_OFFICER_GET_SCRIPT_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.officer.officer/OFFICER_GET_SCRIPT_INFO",
				}
				return interceptor(ctx, in, info, _Officer_OFFICER_GET_SCRIPT_INFO_Handler)
			},
		},
	}
	return &serviceDesc
}
