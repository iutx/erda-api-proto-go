// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: dop_filetree.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DopFiletreeClient is the client API for DopFiletree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DopFiletreeClient interface {
	CMDB_PROJECT_FILETREE_CREATE(ctx context.Context, in *CMDB_PROJECT_FILETREE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_DELETE(ctx context.Context, in *CMDB_PROJECT_FILETREE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_FIND_ANCESTORS(ctx context.Context, in *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_FUZZY_SEARCH(ctx context.Context, in *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_GET(ctx context.Context, in *CMDB_PROJECT_FILETREE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_LIST(ctx context.Context, in *CMDB_PROJECT_FILETREE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dopFiletreeClient struct {
	cc grpc1.ClientConnInterface
}

func NewDopFiletreeClient(cc grpc1.ClientConnInterface) DopFiletreeClient {
	return &dopFiletreeClient{cc}
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_CREATE(ctx context.Context, in *CMDB_PROJECT_FILETREE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_DELETE(ctx context.Context, in *CMDB_PROJECT_FILETREE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_FIND_ANCESTORS(ctx context.Context, in *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_FIND_ANCESTORS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_FUZZY_SEARCH(ctx context.Context, in *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_FUZZY_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_GET(ctx context.Context, in *CMDB_PROJECT_FILETREE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopFiletreeClient) CMDB_PROJECT_FILETREE_LIST(ctx context.Context, in *CMDB_PROJECT_FILETREE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DopFiletreeServer is the server API for DopFiletree service.
// All implementations should embed UnimplementedDopFiletreeServer
// for forward compatibility
type DopFiletreeServer interface {
	CMDB_PROJECT_FILETREE_CREATE(context.Context, *CMDB_PROJECT_FILETREE_CREATE_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_DELETE(context.Context, *CMDB_PROJECT_FILETREE_DELETE_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_FIND_ANCESTORS(context.Context, *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_FUZZY_SEARCH(context.Context, *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_GET(context.Context, *CMDB_PROJECT_FILETREE_GET_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FILETREE_LIST(context.Context, *CMDB_PROJECT_FILETREE_LIST_Request) (*emptypb.Empty, error)
}

// UnimplementedDopFiletreeServer should be embedded to have forward compatible implementations.
type UnimplementedDopFiletreeServer struct {
}

func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_CREATE(context.Context, *CMDB_PROJECT_FILETREE_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_CREATE not implemented")
}
func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_DELETE(context.Context, *CMDB_PROJECT_FILETREE_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_DELETE not implemented")
}
func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_FIND_ANCESTORS(context.Context, *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_FIND_ANCESTORS not implemented")
}
func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_FUZZY_SEARCH(context.Context, *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_FUZZY_SEARCH not implemented")
}
func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_GET(context.Context, *CMDB_PROJECT_FILETREE_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_GET not implemented")
}
func (*UnimplementedDopFiletreeServer) CMDB_PROJECT_FILETREE_LIST(context.Context, *CMDB_PROJECT_FILETREE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FILETREE_LIST not implemented")
}

func RegisterDopFiletreeServer(s grpc1.ServiceRegistrar, srv DopFiletreeServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DopFiletree_serviceDesc(srv, opts...), srv)
}

var _DopFiletree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.dop.dop_filetree",
	HandlerType: (*DopFiletreeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "dop_filetree.proto",
}

func _get_DopFiletree_serviceDesc(srv DopFiletreeServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_CREATE(ctx, req.(*CMDB_PROJECT_FILETREE_CREATE_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_CREATE", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_CREATE_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_CREATE_Handler)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_DELETE(ctx, req.(*CMDB_PROJECT_FILETREE_DELETE_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_DELETE", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_DELETE_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_DELETE_Handler)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_FIND_ANCESTORS(ctx, req.(*CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_FIND_ANCESTORS", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Handler)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_FUZZY_SEARCH(ctx, req.(*CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_FUZZY_SEARCH", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Handler)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_GET(ctx, req.(*CMDB_PROJECT_FILETREE_GET_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_GET", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_GET_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_GET_Handler)
	}

	_DopFiletree_CMDB_PROJECT_FILETREE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FILETREE_LIST(ctx, req.(*CMDB_PROJECT_FILETREE_LIST_Request))
	}
	var _DopFiletree_CMDB_PROJECT_FILETREE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DopFiletree_CMDB_PROJECT_FILETREE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_LIST", srv)
		_DopFiletree_CMDB_PROJECT_FILETREE_LIST_Handler = h.Interceptor(_DopFiletree_CMDB_PROJECT_FILETREE_LIST_Handler)
	}

	var serviceDesc = _DopFiletree_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CMDB_PROJECT_FILETREE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_CREATE_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_CREATE",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FILETREE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_DELETE_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_DELETE",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FILETREE_FIND_ANCESTORS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_FIND_ANCESTORS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_FIND_ANCESTORS",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FILETREE_FUZZY_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_FUZZY_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_FUZZY_SEARCH",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FILETREE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_GET_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_GET",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FILETREE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FILETREE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopFiletreeServer).CMDB_PROJECT_FILETREE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DopFiletree_CMDB_PROJECT_FILETREE_LIST_info)
				}
				if interceptor == nil {
					return _DopFiletree_CMDB_PROJECT_FILETREE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop_filetree/CMDB_PROJECT_FILETREE_LIST",
				}
				return interceptor(ctx, in, info, _DopFiletree_CMDB_PROJECT_FILETREE_LIST_Handler)
			},
		},
	}
	return &serviceDesc
}
