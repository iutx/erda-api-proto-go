// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: dop_filetree.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// DopFiletreeHandler is the server API for DopFiletree service.
type DopFiletreeHandler interface {
	// POST /api/project-pipeline/filetree
	CMDB_PROJECT_FILETREE_CREATE(context.Context, *CMDB_PROJECT_FILETREE_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/project-pipeline/filetree/{inode}
	CMDB_PROJECT_FILETREE_DELETE(context.Context, *CMDB_PROJECT_FILETREE_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/project-pipeline/filetree/{inode}/actions/find-ancestors
	CMDB_PROJECT_FILETREE_FIND_ANCESTORS(context.Context, *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request) (*emptypb.Empty, error)
	// GET /api/project-pipeline/filetree/actions/fuzzy-search
	CMDB_PROJECT_FILETREE_FUZZY_SEARCH(context.Context, *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request) (*emptypb.Empty, error)
	// GET /api/project-pipeline/filetree/{inode}
	CMDB_PROJECT_FILETREE_GET(context.Context, *CMDB_PROJECT_FILETREE_GET_Request) (*emptypb.Empty, error)
	// GET /api/project-pipeline/filetree
	CMDB_PROJECT_FILETREE_LIST(context.Context, *CMDB_PROJECT_FILETREE_LIST_Request) (*emptypb.Empty, error)
}

// RegisterDopFiletreeHandler register DopFiletreeHandler to http.Router.
func RegisterDopFiletreeHandler(r http.Router, srv DopFiletreeHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CMDB_PROJECT_FILETREE_CREATE := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_CREATE_Request))
		}
		var CMDB_PROJECT_FILETREE_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_DELETE := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_DELETE_Request))
		}
		var CMDB_PROJECT_FILETREE_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "inode":
							in.Inode = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_FIND_ANCESTORS := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request))
		}
		var CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_FIND_ANCESTORS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_FIND_ANCESTORS_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_FIND_ANCESTORS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "inode":
							in.Inode = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_FUZZY_SEARCH := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request))
		}
		var CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_FUZZY_SEARCH", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_FUZZY_SEARCH_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_FUZZY_SEARCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_GET := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_GET_Request))
		}
		var CMDB_PROJECT_FILETREE_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_GET_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "inode":
							in.Inode = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_LIST := func(method, path string, fn func(context.Context, *CMDB_PROJECT_FILETREE_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CMDB_PROJECT_FILETREE_LIST_Request))
		}
		var CMDB_PROJECT_FILETREE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			CMDB_PROJECT_FILETREE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_filetree", "CMDB_PROJECT_FILETREE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CMDB_PROJECT_FILETREE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in CMDB_PROJECT_FILETREE_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CMDB_PROJECT_FILETREE_CREATE("POST", "/api/project-pipeline/filetree", srv.CMDB_PROJECT_FILETREE_CREATE)
	add_CMDB_PROJECT_FILETREE_DELETE("DELETE", "/api/project-pipeline/filetree/{inode}", srv.CMDB_PROJECT_FILETREE_DELETE)
	add_CMDB_PROJECT_FILETREE_FIND_ANCESTORS("GET", "/api/project-pipeline/filetree/{inode}/actions/find-ancestors", srv.CMDB_PROJECT_FILETREE_FIND_ANCESTORS)
	add_CMDB_PROJECT_FILETREE_FUZZY_SEARCH("GET", "/api/project-pipeline/filetree/actions/fuzzy-search", srv.CMDB_PROJECT_FILETREE_FUZZY_SEARCH)
	add_CMDB_PROJECT_FILETREE_GET("GET", "/api/project-pipeline/filetree/{inode}", srv.CMDB_PROJECT_FILETREE_GET)
	add_CMDB_PROJECT_FILETREE_LIST("GET", "/api/project-pipeline/filetree", srv.CMDB_PROJECT_FILETREE_LIST)
}
