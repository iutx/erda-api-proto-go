// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: dop.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/dop/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Dop dop.proto
	Dop() pb.DopClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		dop: pb.NewDopClient(cc),
	}
}

type serviceClients struct {
	dop pb.DopClient
}

func (c *serviceClients) Dop() pb.DopClient {
	return c.dop
}

type dopWrapper struct {
	client pb.DopClient
	opts   []grpc1.CallOption
}

func (s *dopWrapper) AADAPTOR_CICD_CRON_LIST(ctx context.Context, req *pb.AADAPTOR_CICD_CRON_LIST_Request) (*pb.PipelineCronListResponse, error) {
	return s.client.AADAPTOR_CICD_CRON_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx context.Context, req *pb.ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) (*pb.PipelineAppAllValidBranchWorkspaceResponse, error) {
	return s.client.ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CANCEL(ctx context.Context, req *pb.ADAPTOR_CICD_CANCEL_Request) (*pb.PipelineCancelResponse, error) {
	return s.client.ADAPTOR_CICD_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CONFIG_GET(ctx context.Context, req *pb.ADAPTOR_CICD_CONFIG_GET_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_CONFIG_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CONFIG_NAMESPACES(ctx context.Context, req *pb.ADAPTOR_CICD_CONFIG_NAMESPACES_Request) (*pb.PipelineConfigNamespacesFetchResponse, error) {
	return s.client.ADAPTOR_CICD_CONFIG_NAMESPACES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CONFIG_WORKSPACES(ctx context.Context, req *pb.ADAPTOR_CICD_CONFIG_WORKSPACES_Request) (*pb.PipelineConfigNamespacesFetchResponse, error) {
	return s.client.ADAPTOR_CICD_CONFIG_WORKSPACES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CREATE(ctx context.Context, req *pb.PipelineCreateRequest) (*pb.PipelineCreateResponse, error) {
	return s.client.ADAPTOR_CICD_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CRON_START(ctx context.Context, req *pb.ADAPTOR_CICD_CRON_START_Request) (*pb.PipelineCronStartResponse, error) {
	return s.client.ADAPTOR_CICD_CRON_START(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_CRON_STOP(ctx context.Context, req *pb.ADAPTOR_CICD_CRON_STOP_Request) (*pb.PipelineCronStopResponse, error) {
	return s.client.ADAPTOR_CICD_CRON_STOP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx context.Context, req *pb.ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_CREATE(ctx context.Context, req *pb.UnifiedFileTreeNodeCreateRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_DELETE(ctx context.Context, req *pb.UnifiedFileTreeNodeDeleteRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx context.Context, req *pb.UnifiedFileTreeNodeFindAncestorsRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx context.Context, req *pb.UnifiedFileTreeNodeFuzzySearchRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_GET(ctx context.Context, req *pb.UnifiedFileTreeNodeGetRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx context.Context, req *pb.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_FILETREE_LIST(ctx context.Context, req *pb.UnifiedFileTreeNodeListRequest) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_FILETREE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_GET_BRANCH_RULE(ctx context.Context, req *pb.ADAPTOR_CICD_GET_BRANCH_RULE_Request) (*pb.PipelineGetBranchRuleResponse, error) {
	return s.client.ADAPTOR_CICD_GET_BRANCH_RULE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_INVOKED_COMBO(ctx context.Context, req *pb.PipelineInvokedComboRequest) (*pb.PipelineInvokedComboResponse, error) {
	return s.client.ADAPTOR_CICD_INVOKED_COMBO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_LIST(ctx context.Context, req *pb.PipelinePageListRequest) (*pb.PipelinePageListResponse, error) {
	return s.client.ADAPTOR_CICD_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_OPERATE(ctx context.Context, req *pb.PipelineOperateRequest) (*pb.PipelineOperateResponse, error) {
	return s.client.ADAPTOR_CICD_OPERATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_PIPELINE_DETAIL(ctx context.Context, req *pb.ADAPTOR_CICD_PIPELINE_DETAIL_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_PIPELINE_DETAIL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_PIPELINE_YML_LIST(ctx context.Context, req *pb.CICDPipelineYmlListRequest) (*pb.CICDPipelineYmlListResponse, error) {
	return s.client.ADAPTOR_CICD_PIPELINE_YML_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_PROJECT_CREATE(ctx context.Context, req *pb.ADAPTOR_CICD_PROJECT_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_PROJECT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_PROJECT_DETAIL(ctx context.Context, req *pb.ADAPTOR_CICD_PROJECT_DETAIL_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_PROJECT_DETAIL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_RERUN(ctx context.Context, req *pb.ADAPTOR_CICD_RERUN_Request) (*pb.PipelineRerunResponse, error) {
	return s.client.ADAPTOR_CICD_RERUN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_RERUN_FAILED(ctx context.Context, req *pb.PipelineRerunFailedResponse) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_RERUN_FAILED(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_RUN(ctx context.Context, req *pb.ADAPTOR_CICD_RUN_Request) (*pb.PipelineRunResponse, error) {
	return s.client.ADAPTOR_CICD_RUN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_TASK_LOG(ctx context.Context, req *pb.ADAPTOR_CICD_TASK_LOG_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_TASK_LOG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx context.Context, req *pb.ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) APIDocWebsocket(ctx context.Context, req *pb.APIDocWebsocket_Request) (*emptypb.Empty, error) {
	return s.client.APIDocWebsocket(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) APITEST_ATTEMPT(ctx context.Context, req *pb.APITestsAttemptRequest) (*pb.APITestsAttemptResponse, error) {
	return s.client.APITEST_ATTEMPT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) APPLICATIONS_RESOURCES_LIST(ctx context.Context, req *pb.APPLICATIONS_RESOURCES_LIST_Request) (*emptypb.Empty, error) {
	return s.client.APPLICATIONS_RESOURCES_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) APP_PUBLISH_ITEM_RELATION_GET(ctx context.Context, req *pb.APP_PUBLISH_ITEM_RELATION_GET_Request) (*pb.QueryAppPublishItemRelationResponse, error) {
	return s.client.APP_PUBLISH_ITEM_RELATION_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) APP_PUBLISH_ITEM_RELATION_UPDATE(ctx context.Context, req *pb.UpdateAppPublishItemRelationRequest) (*pb.UpdateAppPublishItemRelationResponse, error) {
	return s.client.APP_PUBLISH_ITEM_RELATION_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CI_SONAR_STORE(ctx context.Context, req *pb.SonarStoreRequest) (*pb.SonarStoreResponse, error) {
	return s.client.CI_SONAR_STORE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_APPLICATION_CREATE(ctx context.Context, req *pb.ApplicationCreateRequest) (*pb.ApplicationCreateResponse, error) {
	return s.client.CMDB_APPLICATION_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_APPLICATION_DELETE(ctx context.Context, req *pb.ApplicationDeleteRequest) (*pb.ApplicationDeleteResponse, error) {
	return s.client.CMDB_APPLICATION_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_APPLICATION_INIT(ctx context.Context, req *pb.ApplicationInitRequest) (*emptypb.Empty, error) {
	return s.client.CMDB_APPLICATION_INIT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_APPLICATION_UPDATE(ctx context.Context, req *pb.ApplicationUpdateRequest) (*pb.ApplicationUpdateResponse, error) {
	return s.client.CMDB_APPLICATION_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_BRANCH_RULE_CREATE(ctx context.Context, req *pb.CreateBranchRuleRequest) (*pb.CreateBranchRuleResponse, error) {
	return s.client.CMDB_BRANCH_RULE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_BRANCH_RULE_DELETE(ctx context.Context, req *pb.CMDB_BRANCH_RULE_DELETE_Request) (*pb.DeleteBranchRuleResponse, error) {
	return s.client.CMDB_BRANCH_RULE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_BRANCH_RULE_QUERY(ctx context.Context, req *pb.QueryBranchRuleRequest) (*pb.QueryBranchRuleResponse, error) {
	return s.client.CMDB_BRANCH_RULE_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_BRANCH_RULE_UPDATE(ctx context.Context, req *pb.UpdateBranchRuleRequest) (*pb.UpdateBranchRuleResponse, error) {
	return s.client.CMDB_BRANCH_RULE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATES_APP_LIST(ctx context.Context, req *pb.AppCertificateListRequest) (*pb.PagingAppCertificateDTO, error) {
	return s.client.CMDB_CERTIFICATES_APP_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATES_LIST(ctx context.Context, req *pb.CertificateListRequest) (*pb.CertificateListResponse, error) {
	return s.client.CMDB_CERTIFICATES_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_APP_CANCEL(ctx context.Context, req *pb.CMDB_CERTIFICATE_APP_CANCEL_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_CERTIFICATE_APP_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_APP_CONFIG(ctx context.Context, req *pb.PushCertificateConfigsRequest) (*emptypb.Empty, error) {
	return s.client.CMDB_CERTIFICATE_APP_CONFIG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_APP_QUOTE(ctx context.Context, req *pb.CertificateQuoteRequest) (*emptypb.Empty, error) {
	return s.client.CMDB_CERTIFICATE_APP_QUOTE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_CREATE(ctx context.Context, req *pb.CertificateCreateRequest) (*pb.CertificateCreateResponse, error) {
	return s.client.CMDB_CERTIFICATE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_DELETE(ctx context.Context, req *pb.CMDB_CERTIFICATE_DELETE_Request) (*pb.CertificateDeleteResponse, error) {
	return s.client.CMDB_CERTIFICATE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_GET(ctx context.Context, req *pb.CMDB_CERTIFICATE_GET_Request) (*pb.CertificateDetailResponse, error) {
	return s.client.CMDB_CERTIFICATE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_CERTIFICATE_UPDATE(ctx context.Context, req *pb.CertificateUpdateRequest) (*pb.CertificateUpdateResponse, error) {
	return s.client.CMDB_CERTIFICATE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_COMMENT_CREATE(ctx context.Context, req *pb.CommentCreateRequest) (*pb.CommentCreateResponse, error) {
	return s.client.CMDB_COMMENT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_COMMENT_LIST(ctx context.Context, req *pb.CommentListRequest) (*pb.CommentListResponse, error) {
	return s.client.CMDB_COMMENT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_COMMENT_UPDATE(ctx context.Context, req *pb.CommentUpdateRequest) (*pb.CommentUpdateResponse, error) {
	return s.client.CMDB_COMMENT_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ITERATION_CREATE(ctx context.Context, req *pb.IterationCreateRequest) (*pb.IterationCreateResponse, error) {
	return s.client.CMDB_ITERATION_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ITERATION_DELETE(ctx context.Context, req *pb.CMDB_ITERATION_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_ITERATION_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ITERATION_GET(ctx context.Context, req *pb.CMDB_ITERATION_GET_Request) (*pb.IterationGetResponse, error) {
	return s.client.CMDB_ITERATION_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ITERATION_PAGING(ctx context.Context, req *pb.IterationPagingRequest) (*pb.IterationPagingResponse, error) {
	return s.client.CMDB_ITERATION_PAGING(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ITERATION_UPDATE(ctx context.Context, req *pb.IterationUpdateRequest) (*pb.IterationUpdateResponse, error) {
	return s.client.CMDB_ITERATION_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_LIBREFERENCE_CREATE(ctx context.Context, req *pb.LibReferenceCreateRequest) (*pb.LibReferenceCreateResponse, error) {
	return s.client.CMDB_LIBREFERENCE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_LIBREFERENCE_DELETE(ctx context.Context, req *pb.CMDB_LIBREFERENCE_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_LIBREFERENCE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_LIBREFERENCE_LIST(ctx context.Context, req *pb.LibReferenceListRequest) (*pb.LibReferenceListResponse, error) {
	return s.client.CMDB_LIBREFERENCE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_LIBREFERENCE_LIST_VERSION(ctx context.Context, req *pb.CMDB_LIBREFERENCE_LIST_VERSION_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_LIBREFERENCE_LIST_VERSION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_MY_PUBLISHERS_LIST(ctx context.Context, req *pb.PublisherListRequest) (*pb.PublisherListResponse, error) {
	return s.client.CMDB_MY_PUBLISHERS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_CREATE(ctx context.Context, req *pb.OrgCreateRequest) (*pb.OrgCreateResponse, error) {
	return s.client.CMDB_ORG_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_DELETE(ctx context.Context, req *pb.CMDB_ORG_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_ORG_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_FETCH(ctx context.Context, req *pb.OrgFetchRequest) (*pb.OrgSearchResponse, error) {
	return s.client.CMDB_ORG_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_GET_BY_DOMAIN(ctx context.Context, req *pb.OrgGetByDomainRequest) (*pb.OrgGetByDomainResponse, error) {
	return s.client.CMDB_ORG_GET_BY_DOMAIN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_NEXUS_FETCH(ctx context.Context, req *pb.OrgNexusGetRequest) (*pb.OrgNexusGetResponse, error) {
	return s.client.CMDB_ORG_NEXUS_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx context.Context, req *pb.OrgNexusShowPasswordRequest) (*pb.OrgNexusShowPasswordResponse, error) {
	return s.client.CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_PUBLIC(ctx context.Context, req *pb.OrgSearchRequest) (*pb.OrgSearchResponse, error) {
	return s.client.CMDB_ORG_PUBLIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_PUBLISHER_CREATE(ctx context.Context, req *pb.CMDB_ORG_PUBLISHER_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_ORG_PUBLISHER_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_PUBLISHER_CREATE_GET(ctx context.Context, req *pb.CMDB_ORG_PUBLISHER_CREATE_GET_Request) (*emptypb.Empty, error) {
	return s.client.CMDB_ORG_PUBLISHER_CREATE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_RESOURCE_GET(ctx context.Context, req *pb.CMDB_ORG_RESOURCE_GET_Request) (*pb.OrgResourceInfo, error) {
	return s.client.CMDB_ORG_RESOURCE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_SEARCH(ctx context.Context, req *pb.OrgSearchRequest) (*pb.OrgSearchResponse, error) {
	return s.client.CMDB_ORG_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ORG_UPDATE(ctx context.Context, req *pb.OrgUpdateRequest) (*pb.OrgUpdateRequestBody, error) {
	return s.client.CMDB_ORG_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PROJECTS_FETCH(ctx context.Context, req *pb.ProjectListRequest) (*pb.ProjectListResponse, error) {
	return s.client.CMDB_PROJECTS_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PROJECT_CREATE(ctx context.Context, req *pb.ProjectCreateRequest) (*pb.ProjectCreateResponse, error) {
	return s.client.CMDB_PROJECT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PROJECT_DELETE(ctx context.Context, req *pb.ProjectDeleteRequest) (*pb.ProjectDeleteResponse, error) {
	return s.client.CMDB_PROJECT_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PROJECT_DETAIL(ctx context.Context, req *pb.ProjectDetailRequest) (*pb.ProjectDetailResponse, error) {
	return s.client.CMDB_PROJECT_DETAIL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PUBLISHERS_LIST(ctx context.Context, req *pb.PublisherListRequest) (*pb.PublisherListResponse, error) {
	return s.client.CMDB_PUBLISHERS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PUBLISHER_CREATE(ctx context.Context, req *pb.PublisherCreateRequest) (*pb.PublisherCreateResponse, error) {
	return s.client.CMDB_PUBLISHER_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PUBLISHER_DELETE(ctx context.Context, req *pb.CMDB_PUBLISHER_DELETE_Request) (*pb.PublisherDeleteResponse, error) {
	return s.client.CMDB_PUBLISHER_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PUBLISHER_GET(ctx context.Context, req *pb.CMDB_PUBLISHER_GET_Request) (*pb.PublisherDetailResponse, error) {
	return s.client.CMDB_PUBLISHER_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_PUBLISHER_UPDATE(ctx context.Context, req *pb.PublisherUpdateRequest) (*pb.PublisherUpdateResponse, error) {
	return s.client.CMDB_PUBLISHER_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_ROLES_LIST(ctx context.Context, req *pb.CMDB_ROLES_LIST_Request) (*pb.MemberRoleListResponse, error) {
	return s.client.CMDB_ROLES_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_CLOSE(ctx context.Context, req *pb.TicketCloseRequest) (*pb.TicketCloseResponse, error) {
	return s.client.CMDB_TICKET_CLOSE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_CREATE(ctx context.Context, req *pb.TicketCreateRequest) (*pb.TicketCreateResponse, error) {
	return s.client.CMDB_TICKET_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_DELETE(ctx context.Context, req *pb.TicketDeleteRequest) (*pb.TicketDeleteResponse, error) {
	return s.client.CMDB_TICKET_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_FETCH(ctx context.Context, req *pb.TicketFetchRequest) (*pb.TicketFetchResponse, error) {
	return s.client.CMDB_TICKET_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_LIST(ctx context.Context, req *pb.TicketListRequest) (*pb.TicketListResponse, error) {
	return s.client.CMDB_TICKET_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_REOPEN(ctx context.Context, req *pb.TicketReopenRequest) (*pb.TicketReopenResponse, error) {
	return s.client.CMDB_TICKET_REOPEN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CMDB_TICKET_UPDATE(ctx context.Context, req *pb.TicketUpdateRequest) (*pb.TicketUpdateResponse, error) {
	return s.client.CMDB_TICKET_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CODE_COVERAGE_END_CALLBACK(ctx context.Context, req *pb.CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return s.client.CODE_COVERAGE_END_CALLBACK(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CODE_COVERAGE_READY_CALLBACK(ctx context.Context, req *pb.CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return s.client.CODE_COVERAGE_READY_CALLBACK(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CODE_COVERAGE_READY_STATUS(ctx context.Context, req *pb.CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return s.client.CODE_COVERAGE_READY_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CODE_COVERAGE_REPORT_CALLBACK(ctx context.Context, req *pb.CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return s.client.CODE_COVERAGE_REPORT_CALLBACK(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateAPIAsset(ctx context.Context, req *pb.APIAssetCreateRequest) (*emptypb.Empty, error) {
	return s.client.CreateAPIAsset(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateAPIAssetVersion(ctx context.Context, req *pb.APIAssetVersionCreateRequest) (*pb.CreateAPIAssetVersionBody, error) {
	return s.client.CreateAPIAssetVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateAccess(ctx context.Context, req *pb.CreateAccessReq) (*emptypb.Empty, error) {
	return s.client.CreateAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateAttempTest(ctx context.Context, req *pb.APITestReq) (*pb.Header, error) {
	return s.client.CreateAttempTest(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateClient(ctx context.Context, req *pb.CreateClientReq) (*emptypb.Empty, error) {
	return s.client.CreateClient(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateContract(ctx context.Context, req *pb.CreateContractReq) (*emptypb.Empty, error) {
	return s.client.CreateContract(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateInstantiation(ctx context.Context, req *pb.CreateInstantiationReq) (*emptypb.Empty, error) {
	return s.client.CreateInstantiation(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) CreateSLA(ctx context.Context, req *pb.CreateSLAReq) (*pb.Header, error) {
	return s.client.CreateSLA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteAPIAssetVersion(ctx context.Context, req *pb.DeleteAPIAssetVersion_Request) (*emptypb.Empty, error) {
	return s.client.DeleteAPIAssetVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteAPIAssets(ctx context.Context, req *pb.DeleteAPIAssets_Request) (*emptypb.Empty, error) {
	return s.client.DeleteAPIAssets(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteAccess(ctx context.Context, req *pb.DeleteAccess_Request) (*emptypb.Empty, error) {
	return s.client.DeleteAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteClient(ctx context.Context, req *pb.DeleteClient_Request) (*emptypb.Empty, error) {
	return s.client.DeleteClient(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteContract(ctx context.Context, req *pb.GetContractReq) (*emptypb.Empty, error) {
	return s.client.DeleteContract(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) DeleteSLA(ctx context.Context, req *pb.DeleteSLAReq) (*pb.Header, error) {
	return s.client.DeleteSLA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ExportSpec(ctx context.Context, req *pb.DownloadSpecTextReq) (*emptypb.Empty, error) {
	return s.client.ExportSpec(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeCreateNode(ctx context.Context, req *pb.APIDocCreateNodeReq) (*emptypb.Empty, error) {
	return s.client.FileTreeCreateNode(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeDeleteNode(ctx context.Context, req *pb.FileTreeDeleteNode_Request) (*emptypb.Empty, error) {
	return s.client.FileTreeDeleteNode(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeGetNode(ctx context.Context, req *pb.FileTreeGetNode_Request) (*emptypb.Empty, error) {
	return s.client.FileTreeGetNode(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeListNodes(ctx context.Context, req *pb.FileTreeListNodes_Request) (*emptypb.Empty, error) {
	return s.client.FileTreeListNodes(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeMvCpNode(ctx context.Context, req *pb.FileTreeMvCpNode_Request) (*emptypb.Empty, error) {
	return s.client.FileTreeMvCpNode(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) FileTreeUpdateNode(ctx context.Context, req *pb.FileTreeUpdateNode_Request) (*emptypb.Empty, error) {
	return s.client.FileTreeUpdateNode(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetAPIAssetVersion(ctx context.Context, req *pb.GetAPIAssetVersionReq) (*pb.GetAssetVersionRsp, error) {
	return s.client.GetAPIAssetVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetAPIAssets(ctx context.Context, req *pb.GetAPIAssetReq) (*pb.APIAssetGetResponse, error) {
	return s.client.GetAPIAssets(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetAccess(ctx context.Context, req *pb.GetAccess_Request) (*emptypb.Empty, error) {
	return s.client.GetAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetClient(ctx context.Context, req *pb.GetClientReq) (*emptypb.Empty, error) {
	return s.client.GetClient(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetContract(ctx context.Context, req *pb.GetContractReq) (*emptypb.Empty, error) {
	return s.client.GetContract(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetInstantiations(ctx context.Context, req *pb.GetInstantiationsReq) (*pb.GetAddonInstanceDetailResponse, error) {
	return s.client.GetInstantiations(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetOperation(ctx context.Context, req *pb.GetOperationReq) (*pb.BaseResponse, error) {
	return s.client.GetOperation(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) GetSLA(ctx context.Context, req *pb.ListSLAsReq) (*pb.ListSLAsRsp, error) {
	return s.client.GetSLA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListAPIAssetVersions(ctx context.Context, req *pb.GetAPIAssetVersionReq) (*pb.GetAssetVersionRsp, error) {
	return s.client.ListAPIAssetVersions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListAPIGateways(ctx context.Context, req *pb.ListAPIGatewaysReq) (*pb.ListAPIGatewaysResp, error) {
	return s.client.ListAPIGateways(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListAccess(ctx context.Context, req *pb.ListAccessReq) (*pb.ListAccessRsp, error) {
	return s.client.ListAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListContract(ctx context.Context, req *pb.ListContractsReq) (*pb.ListContractsRsp, error) {
	return s.client.ListContract(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListContractRecords(ctx context.Context, req *pb.ListContractRecordsReq) (*pb.ListContractRecordsRsp, error) {
	return s.client.ListContractRecords(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListInstantiations(ctx context.Context, req *pb.ListInstantiations_Request) (*emptypb.Empty, error) {
	return s.client.ListInstantiations(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListMyClients(ctx context.Context, req *pb.ListMyClientsReq) (*emptypb.Empty, error) {
	return s.client.ListMyClients(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListProjectAPIGateways(ctx context.Context, req *pb.ListProjectAPIGatewaysReq) (*pb.ListAPIGatewaysResp, error) {
	return s.client.ListProjectAPIGateways(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListRuntimeServices(ctx context.Context, req *pb.ListRuntimeServices_Request) (*pb.Header, error) {
	return s.client.ListRuntimeServices(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListSLA(ctx context.Context, req *pb.GetSLAReq) (*pb.GetSLARsp, error) {
	return s.client.ListSLA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListSwaggerVersionClients(ctx context.Context, req *pb.ListSwaggerVersionClientsReq) (*pb.ListSwaggerVersionRsp, error) {
	return s.client.ListSwaggerVersionClients(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ListSwaggerVersions(ctx context.Context, req *pb.ListSwaggerVersionsReq) (*pb.ListSwaggerVersionRsp, error) {
	return s.client.ListSwaggerVersions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_CERTIFICATION_GET(ctx context.Context, req *pb.PUBLISH_ITEM_CERTIFICATION_GET_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_CERTIFICATION_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_CHANNELS(ctx context.Context, req *pb.PublishItemStatisticsDetailRequest) (*pb.PublishItemStatisticsDetailData, error) {
	return s.client.PUBLISH_ITEM_CHANNELS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_ERR_EFFACTS(ctx context.Context, req *pb.PUBLISH_ITEM_ERR_EFFACTS_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_ERR_EFFACTS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_ERR_LIST(ctx context.Context, req *pb.PUBLISH_ITEM_ERR_LIST_Request) (*pb.PublishItemStatisticsErrListData, error) {
	return s.client.PUBLISH_ITEM_ERR_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_ERR_RATE(ctx context.Context, req *pb.PUBLISH_ITEM_ERR_RATE_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_ERR_RATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_ERR_TREND(ctx context.Context, req *pb.PUBLISH_ITEM_ERR_TREND_Request) (*pb.PublishItemStatisticsErrTrendData, error) {
	return s.client.PUBLISH_ITEM_ERR_TREND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_METIRCS_COMMON(ctx context.Context, req *pb.PUBLISH_ITEM_METIRCS_COMMON_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_METIRCS_COMMON(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx context.Context, req *pb.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_STATISTICS_TREND(ctx context.Context, req *pb.PUBLISH_ITEM_STATISTICS_TREND_Request) (*pb.PublishItemStatisticsTrendData, error) {
	return s.client.PUBLISH_ITEM_STATISTICS_TREND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_USERS(ctx context.Context, req *pb.PUBLISH_ITEM_USERS_Request) (*emptypb.Empty, error) {
	return s.client.PUBLISH_ITEM_USERS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PUBLISH_ITEM_VERSION_INFO_LIST(ctx context.Context, req *pb.PublishItemStatisticsDetailRequest) (*pb.PublishItemStatisticsDetailData, error) {
	return s.client.PUBLISH_ITEM_VERSION_INFO_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) PagingAPIAssets(ctx context.Context, req *pb.PagingAPIAssetsReq) (*pb.APIAssetPagingResponse, error) {
	return s.client.PagingAPIAssets(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectPackageExport(ctx context.Context, req *pb.ExportProjectPackageRequest) (*emptypb.Empty, error) {
	return s.client.ProjectPackageExport(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectPackageImport(ctx context.Context, req *pb.ImportProjectPackageRequest) (*emptypb.Empty, error) {
	return s.client.ProjectPackageImport(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectPackageParse(ctx context.Context, req *pb.ProjectPackageParse_Request) (*emptypb.Empty, error) {
	return s.client.ProjectPackageParse(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectTemplateExport(ctx context.Context, req *pb.ExportProjectTemplateRequest) (*emptypb.Empty, error) {
	return s.client.ProjectTemplateExport(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectTemplateImport(ctx context.Context, req *pb.ImportProjectTemplateRequest) (*emptypb.Empty, error) {
	return s.client.ProjectTemplateImport(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProjectTemplateParse(ctx context.Context, req *pb.ImportProjectTemplateRequest) (*emptypb.Empty, error) {
	return s.client.ProjectTemplateParse(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ProxyMetrics(ctx context.Context, req *pb.ProxyMetrics_Request) (*emptypb.Empty, error) {
	return s.client.ProxyMetrics(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_APITESTS_CANCEL(ctx context.Context, req *pb.ApiTestCancelRequest) (*pb.ApiTestCancelResponse, error) {
	return s.client.QA_APITESTS_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_APITESTS_GET(ctx context.Context, req *pb.QA_APITESTS_GET_Request) (*pb.ApiTestsGetResponse, error) {
	return s.client.QA_APITESTS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_APITESTS_UPDATE(ctx context.Context, req *pb.ApiTestsUpdateRequest) (*pb.ApiTestsUpdateResponse, error) {
	return s.client.QA_APITESTS_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_AUTOTEST_SPACE_GET(ctx context.Context, req *pb.QA_AUTOTEST_SPACE_GET_Request) (*pb.AutoTestSpaceResponse, error) {
	return s.client.QA_AUTOTEST_SPACE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_PIPELINE_TASK_LOGS(ctx context.Context, req *pb.QA_PIPELINE_TASK_LOGS_Request) (*pb.DashboardSpotLogResponse, error) {
	return s.client.QA_PIPELINE_TASK_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_RECORDS_GET(ctx context.Context, req *pb.QA_RECORDS_GET_Request) (*pb.GetTestFileRecordResponse, error) {
	return s.client.QA_RECORDS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_RECORDS_LIST(ctx context.Context, req *pb.ListTestFileRecordsRequest) (*pb.ListTestFileRecordsResponse, error) {
	return s.client.QA_RECORDS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_GET_CREDENTIAL(ctx context.Context, req *pb.QA_SONAR_GET_CREDENTIAL_Request) (*pb.SonarCredentialGetResponse, error) {
	return s.client.QA_SONAR_GET_CREDENTIAL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_ISSUES(ctx context.Context, req *pb.QA_SONAR_ISSUES_Request) (*pb.SonarIssueResponse, error) {
	return s.client.QA_SONAR_ISSUES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx context.Context, req *pb.SonarMetricRulesBatchDeleteRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx context.Context, req *pb.SonarMetricRulesBatchInsertRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_DELETE(ctx context.Context, req *pb.SonarMetricRulesDeleteRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_GET(ctx context.Context, req *pb.QA_SONAR_METRIC_RULES_GET_Request) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_PAGING(ctx context.Context, req *pb.SonarMetricRulesPagingRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_PAGING(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx context.Context, req *pb.SonarMetricRulesDefinitionListRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_QUERY_LIST(ctx context.Context, req *pb.SonarMetricRulesListRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_QUERY_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_SONAR_METRIC_RULES_UPDATE(ctx context.Context, req *pb.SonarMetricRulesUpdateRequest) (*emptypb.Empty, error) {
	return s.client.QA_SONAR_METRIC_RULES_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTENV_CREATE(ctx context.Context, req *pb.QA_TESTENV_CREATE_Request) (*pb.APITestEnvCreateRequest, error) {
	return s.client.QA_TESTENV_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTENV_DELETE(ctx context.Context, req *pb.QA_TESTENV_DELETE_Request) (*pb.APITestEnvDeleteResponse, error) {
	return s.client.QA_TESTENV_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTENV_GET(ctx context.Context, req *pb.QA_TESTENV_GET_Request) (*pb.APITestEnvGetResponse, error) {
	return s.client.QA_TESTENV_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTENV_LIST(ctx context.Context, req *pb.QA_TESTENV_LIST_Request) (*pb.APITestEnvListResponse, error) {
	return s.client.QA_TESTENV_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTENV_UPDATE(ctx context.Context, req *pb.APITestEnvUpdateRequest) (*pb.APITestEnvUpdateResponse, error) {
	return s.client.QA_TESTENV_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) QA_TESTPLAN_PIPELINE_DETAIL(ctx context.Context, req *pb.QA_TESTPLAN_PIPELINE_DETAIL_Request) (*pb.PipelineDetailResponse, error) {
	return s.client.QA_TESTPLAN_PIPELINE_DETAIL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) SPOT_APITESTS_LOGS(ctx context.Context, req *pb.SPOT_APITESTS_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_APITESTS_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) SPOT_APITESTS_LOGS_DOWNLOAD(ctx context.Context, req *pb.SPOT_APITESTS_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_APITESTS_LOGS_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) SearchOperations(ctx context.Context, req *pb.SearchOperationsReq) (*pb.BaseResponse, error) {
	return s.client.SearchOperations(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateAPIAssset(ctx context.Context, req *pb.UpdateAPIAssetReq) (*emptypb.Empty, error) {
	return s.client.UpdateAPIAssset(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateAccess(ctx context.Context, req *pb.UpdateAccess_Request) (*emptypb.Empty, error) {
	return s.client.UpdateAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateAssetVersion(ctx context.Context, req *pb.UpdateAssetVersionReq) (*pb.Header, error) {
	return s.client.UpdateAssetVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateClient(ctx context.Context, req *pb.UpdateClientReq) (*emptypb.Empty, error) {
	return s.client.UpdateClient(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateContract(ctx context.Context, req *pb.UpdateContract_Request) (*emptypb.Empty, error) {
	return s.client.UpdateContract(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateInstantiation(ctx context.Context, req *pb.UpdateInstantiationReq) (*emptypb.Empty, error) {
	return s.client.UpdateInstantiation(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) UpdateSLA(ctx context.Context, req *pb.UpdateSLAReq) (*pb.Header, error) {
	return s.client.UpdateSLA(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopWrapper) ValidateSwagger(ctx context.Context, req *pb.ValidateSwagger_Request) (*emptypb.Empty, error) {
	return s.client.ValidateSwagger(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
