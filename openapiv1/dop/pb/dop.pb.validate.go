// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dop.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AADAPTOR_CICD_CRON_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AADAPTOR_CICD_CRON_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AADAPTOR_CICD_CRON_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AADAPTOR_CICD_CRON_LIST_RequestMultiError, or nil if none found.
func (m *AADAPTOR_CICD_CRON_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AADAPTOR_CICD_CRON_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AADAPTOR_CICD_CRON_LIST_RequestMultiError(errors)
	}

	return nil
}

// AADAPTOR_CICD_CRON_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by AADAPTOR_CICD_CRON_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type AADAPTOR_CICD_CRON_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AADAPTOR_CICD_CRON_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AADAPTOR_CICD_CRON_LIST_RequestMultiError) AllErrors() []error { return m }

// AADAPTOR_CICD_CRON_LIST_RequestValidationError is the validation error
// returned by AADAPTOR_CICD_CRON_LIST_Request.Validate if the designated
// constraints aren't met.
type AADAPTOR_CICD_CRON_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) ErrorName() string {
	return "AADAPTOR_CICD_CRON_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AADAPTOR_CICD_CRON_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAADAPTOR_CICD_CRON_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AADAPTOR_CICD_CRON_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AADAPTOR_CICD_CRON_LIST_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_BRANCHES_ALL_VALID_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_BRANCHES_ALL_VALID_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ADAPTOR_CICD_BRANCHES_ALL_VALID_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError is the validation
// error returned by ADAPTOR_CICD_BRANCHES_ALL_VALID_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_BRANCHES_ALL_VALID_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_BRANCHES_ALL_VALID_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CANCEL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_CANCEL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_CANCEL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_CANCEL_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CANCEL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CANCEL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return ADAPTOR_CICD_CANCEL_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CANCEL_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_CANCEL_Request.ValidateAll() if
// the designated constraints aren't met.
type ADAPTOR_CICD_CANCEL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CANCEL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CANCEL_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CANCEL_RequestValidationError is the validation error returned
// by ADAPTOR_CICD_CANCEL_Request.Validate if the designated constraints
// aren't met.
type ADAPTOR_CICD_CANCEL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CANCEL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CANCEL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CANCEL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CANCEL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CANCEL_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CONFIG_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_CONFIG_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_CONFIG_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_CONFIG_GET_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CONFIG_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CONFIG_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_CONFIG_GET_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CONFIG_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_CONFIG_GET_Request.ValidateAll()
// if the designated constraints aren't met.
type ADAPTOR_CICD_CONFIG_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CONFIG_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CONFIG_GET_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CONFIG_GET_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_CONFIG_GET_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_CONFIG_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CONFIG_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CONFIG_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CONFIG_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CONFIG_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CONFIG_GET_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CONFIG_NAMESPACES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_CONFIG_NAMESPACES_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ADAPTOR_CICD_CONFIG_NAMESPACES_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CONFIG_NAMESPACES_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError is the validation
// error returned by ADAPTOR_CICD_CONFIG_NAMESPACES_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CONFIG_NAMESPACES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CONFIG_NAMESPACES_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CONFIG_WORKSPACES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_CONFIG_WORKSPACES_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ADAPTOR_CICD_CONFIG_WORKSPACES_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CONFIG_WORKSPACES_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError is the validation
// error returned by ADAPTOR_CICD_CONFIG_WORKSPACES_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CONFIG_WORKSPACES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CONFIG_WORKSPACES_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CRON_START_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_CRON_START_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_CRON_START_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_CRON_START_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CRON_START_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CRON_START_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return ADAPTOR_CICD_CRON_START_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CRON_START_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_CRON_START_Request.ValidateAll()
// if the designated constraints aren't met.
type ADAPTOR_CICD_CRON_START_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CRON_START_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CRON_START_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CRON_START_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_CRON_START_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_CRON_START_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CRON_START_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CRON_START_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CRON_START_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CRON_START_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CRON_START_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_CRON_STOP_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_CRON_STOP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_CRON_STOP_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_CRON_STOP_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_CRON_STOP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_CRON_STOP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return ADAPTOR_CICD_CRON_STOP_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_CRON_STOP_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_CRON_STOP_Request.ValidateAll()
// if the designated constraints aren't met.
type ADAPTOR_CICD_CRON_STOP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_CRON_STOP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_CRON_STOP_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_CRON_STOP_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_CRON_STOP_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_CRON_STOP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_CRON_STOP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_CRON_STOP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_CRON_STOP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_CRON_STOP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_CRON_STOP_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_FETCH_PIPELINE_ID_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_FETCH_PIPELINE_ID_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ADAPTOR_CICD_FETCH_PIPELINE_ID_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError is the validation
// error returned by ADAPTOR_CICD_FETCH_PIPELINE_ID_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_FETCH_PIPELINE_ID_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_FETCH_PIPELINE_ID_RequestValidationError{}

// Validate checks the field values on
// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError, or nil if
// none found.
func (m *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request.ValidateAll() if the
// designated constraints aren't met.
type ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError is the
// validation error returned by
// ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_GET_BRANCH_RULE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_GET_BRANCH_RULE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_GET_BRANCH_RULE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_GET_BRANCH_RULE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_GET_BRANCH_RULE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pipelineid

	if len(errors) > 0 {
		return ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ADAPTOR_CICD_GET_BRANCH_RULE_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_GET_BRANCH_RULE_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_GET_BRANCH_RULE_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_GET_BRANCH_RULE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_GET_BRANCH_RULE_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_PIPELINE_DETAIL_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_PIPELINE_DETAIL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_PIPELINE_DETAIL_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_PIPELINE_DETAIL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_PIPELINE_DETAIL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ADAPTOR_CICD_PIPELINE_DETAIL_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_PIPELINE_DETAIL_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_PIPELINE_DETAIL_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_PIPELINE_DETAIL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_PIPELINE_DETAIL_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_PROJECT_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ADAPTOR_CICD_PROJECT_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_PROJECT_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_PROJECT_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_PROJECT_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ADAPTOR_CICD_PROJECT_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_PROJECT_CREATE_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_PROJECT_CREATE_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_PROJECT_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_PROJECT_CREATE_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_PROJECT_DETAIL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ADAPTOR_CICD_PROJECT_DETAIL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_PROJECT_DETAIL_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_PROJECT_DETAIL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_PROJECT_DETAIL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ADAPTOR_CICD_PROJECT_DETAIL_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_PROJECT_DETAIL_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_PROJECT_DETAIL_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_PROJECT_DETAIL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_PROJECT_DETAIL_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_RERUN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_RERUN_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_RERUN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_RERUN_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_RERUN_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_RERUN_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return ADAPTOR_CICD_RERUN_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_RERUN_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_RERUN_Request.ValidateAll() if
// the designated constraints aren't met.
type ADAPTOR_CICD_RERUN_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_RERUN_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_RERUN_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_RERUN_RequestValidationError is the validation error returned
// by ADAPTOR_CICD_RERUN_Request.Validate if the designated constraints aren't met.
type ADAPTOR_CICD_RERUN_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_RERUN_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_RERUN_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_RERUN_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_RERUN_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_RERUN_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_RERUN_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_RERUN_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_RERUN_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_RERUN_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_RERUN_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_RUN_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_RUN_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_RUN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_RUN_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_RUN_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_RUN_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return ADAPTOR_CICD_RUN_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_RUN_RequestMultiError is an error wrapping multiple validation
// errors returned by ADAPTOR_CICD_RUN_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_RUN_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_RUN_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_RUN_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_RUN_RequestValidationError is the validation error returned by
// ADAPTOR_CICD_RUN_Request.Validate if the designated constraints aren't met.
type ADAPTOR_CICD_RUN_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_RUN_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_RUN_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_RUN_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_RUN_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_RUN_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_RUN_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_RUN_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_RUN_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_RUN_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_RUN_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for TaskID

	if len(errors) > 0 {
		return ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError is the validation
// error returned by ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request.Validate if the
// designated constraints aren't met.
type ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_TASK_LOG_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on ADAPTOR_CICD_TASK_LOG_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADAPTOR_CICD_TASK_LOG_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADAPTOR_CICD_TASK_LOG_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADAPTOR_CICD_TASK_LOG_RequestMultiError, or nil if none found.
func (m *ADAPTOR_CICD_TASK_LOG_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADAPTOR_CICD_TASK_LOG_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for TaskID

	if len(errors) > 0 {
		return ADAPTOR_CICD_TASK_LOG_RequestMultiError(errors)
	}

	return nil
}

// ADAPTOR_CICD_TASK_LOG_RequestMultiError is an error wrapping multiple
// validation errors returned by ADAPTOR_CICD_TASK_LOG_Request.ValidateAll()
// if the designated constraints aren't met.
type ADAPTOR_CICD_TASK_LOG_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADAPTOR_CICD_TASK_LOG_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADAPTOR_CICD_TASK_LOG_RequestMultiError) AllErrors() []error { return m }

// ADAPTOR_CICD_TASK_LOG_RequestValidationError is the validation error
// returned by ADAPTOR_CICD_TASK_LOG_Request.Validate if the designated
// constraints aren't met.
type ADAPTOR_CICD_TASK_LOG_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) ErrorName() string {
	return "ADAPTOR_CICD_TASK_LOG_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADAPTOR_CICD_TASK_LOG_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADAPTOR_CICD_TASK_LOG_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADAPTOR_CICD_TASK_LOG_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADAPTOR_CICD_TASK_LOG_RequestValidationError{}

// Validate checks the field values on APIAssetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAssetCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAssetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAssetCreateRequestMultiError, or nil if none found.
func (m *APIAssetCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAssetCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetID

	// no validation rules for AssetName

	// no validation rules for Desc

	// no validation rules for Logo

	// no validation rules for Source

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIAssetCreateRequestValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIAssetCreateRequestValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIAssetCreateRequestValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for AppID

	if len(errors) > 0 {
		return APIAssetCreateRequestMultiError(errors)
	}

	return nil
}

// APIAssetCreateRequestMultiError is an error wrapping multiple validation
// errors returned by APIAssetCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type APIAssetCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAssetCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAssetCreateRequestMultiError) AllErrors() []error { return m }

// APIAssetCreateRequestValidationError is the validation error returned by
// APIAssetCreateRequest.Validate if the designated constraints aren't met.
type APIAssetCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAssetCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAssetCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAssetCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAssetCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAssetCreateRequestValidationError) ErrorName() string {
	return "APIAssetCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIAssetCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAssetCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAssetCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAssetCreateRequestValidationError{}

// Validate checks the field values on APIAssetGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAssetGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAssetGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAssetGetResponseMultiError, or nil if none found.
func (m *APIAssetGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAssetGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIAssetGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIAssetGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIAssetGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APIAssetGetResponseMultiError(errors)
	}

	return nil
}

// APIAssetGetResponseMultiError is an error wrapping multiple validation
// errors returned by APIAssetGetResponse.ValidateAll() if the designated
// constraints aren't met.
type APIAssetGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAssetGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAssetGetResponseMultiError) AllErrors() []error { return m }

// APIAssetGetResponseValidationError is the validation error returned by
// APIAssetGetResponse.Validate if the designated constraints aren't met.
type APIAssetGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAssetGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAssetGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAssetGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAssetGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAssetGetResponseValidationError) ErrorName() string {
	return "APIAssetGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APIAssetGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAssetGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAssetGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAssetGetResponseValidationError{}

// Validate checks the field values on APIAssetPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAssetPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAssetPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAssetPagingResponseMultiError, or nil if none found.
func (m *APIAssetPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAssetPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIAssetPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIAssetPagingResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIAssetPagingResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APIAssetPagingResponseMultiError(errors)
	}

	return nil
}

// APIAssetPagingResponseMultiError is an error wrapping multiple validation
// errors returned by APIAssetPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type APIAssetPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAssetPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAssetPagingResponseMultiError) AllErrors() []error { return m }

// APIAssetPagingResponseValidationError is the validation error returned by
// APIAssetPagingResponse.Validate if the designated constraints aren't met.
type APIAssetPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAssetPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAssetPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAssetPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAssetPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAssetPagingResponseValidationError) ErrorName() string {
	return "APIAssetPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APIAssetPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAssetPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAssetPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAssetPagingResponseValidationError{}

// Validate checks the field values on APIAssetVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIAssetVersionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAssetVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIAssetVersionCreateRequestMultiError, or nil if none found.
func (m *APIAssetVersionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAssetVersionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for APIAssetID

	// no validation rules for Major

	// no validation rules for Minor

	// no validation rules for Patch

	// no validation rules for Desc

	// no validation rules for SpecProtocol

	// no validation rules for SpecDiceFileUUID

	// no validation rules for Spec

	// no validation rules for Inode

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIAssetVersionCreateRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIAssetVersionCreateRequestValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIAssetVersionCreateRequestValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Source

	// no validation rules for AppID

	// no validation rules for Branch

	// no validation rules for ServiceName

	// no validation rules for AssetID

	if len(errors) > 0 {
		return APIAssetVersionCreateRequestMultiError(errors)
	}

	return nil
}

// APIAssetVersionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by APIAssetVersionCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type APIAssetVersionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAssetVersionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAssetVersionCreateRequestMultiError) AllErrors() []error { return m }

// APIAssetVersionCreateRequestValidationError is the validation error returned
// by APIAssetVersionCreateRequest.Validate if the designated constraints
// aren't met.
type APIAssetVersionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAssetVersionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAssetVersionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAssetVersionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAssetVersionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAssetVersionCreateRequestValidationError) ErrorName() string {
	return "APIAssetVersionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIAssetVersionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAssetVersionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAssetVersionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAssetVersionCreateRequestValidationError{}

// Validate checks the field values on APIAssetVersionInstanceCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *APIAssetVersionInstanceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAssetVersionInstanceCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APIAssetVersionInstanceCreateRequestMultiError, or nil if none found.
func (m *APIAssetVersionInstanceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAssetVersionInstanceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for InstanceType

	// no validation rules for RuntimeID

	// no validation rules for ServiceName

	// no validation rules for EndpointID

	// no validation rules for URL

	// no validation rules for AssetID

	// no validation rules for VersionID

	if len(errors) > 0 {
		return APIAssetVersionInstanceCreateRequestMultiError(errors)
	}

	return nil
}

// APIAssetVersionInstanceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// APIAssetVersionInstanceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type APIAssetVersionInstanceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAssetVersionInstanceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAssetVersionInstanceCreateRequestMultiError) AllErrors() []error { return m }

// APIAssetVersionInstanceCreateRequestValidationError is the validation error
// returned by APIAssetVersionInstanceCreateRequest.Validate if the designated
// constraints aren't met.
type APIAssetVersionInstanceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAssetVersionInstanceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAssetVersionInstanceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAssetVersionInstanceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAssetVersionInstanceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAssetVersionInstanceCreateRequestValidationError) ErrorName() string {
	return "APIAssetVersionInstanceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIAssetVersionInstanceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAssetVersionInstanceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAssetVersionInstanceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAssetVersionInstanceCreateRequestValidationError{}

// Validate checks the field values on APIDocCreateNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDocCreateNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDocCreateNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDocCreateNodeReqMultiError, or nil if none found.
func (m *APIDocCreateNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDocCreateNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for TreeName

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIDocCreateNodeReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIDocCreateNodeReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APIDocCreateNodeReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APIDocCreateNodeReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APIDocCreateNodeReqMultiError(errors)
	}

	return nil
}

// APIDocCreateNodeReqMultiError is an error wrapping multiple validation
// errors returned by APIDocCreateNodeReq.ValidateAll() if the designated
// constraints aren't met.
type APIDocCreateNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDocCreateNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDocCreateNodeReqMultiError) AllErrors() []error { return m }

// APIDocCreateNodeReqValidationError is the validation error returned by
// APIDocCreateNodeReq.Validate if the designated constraints aren't met.
type APIDocCreateNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDocCreateNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDocCreateNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDocCreateNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIDocCreateNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDocCreateNodeReqValidationError) ErrorName() string {
	return "APIDocCreateNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e APIDocCreateNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDocCreateNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDocCreateNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIDocCreateNodeReqValidationError{}

// Validate checks the field values on APIDocWebsocket_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIDocWebsocket_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIDocWebsocket_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIDocWebsocket_RequestMultiError, or nil if none found.
func (m *APIDocWebsocket_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APIDocWebsocket_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	if len(errors) > 0 {
		return APIDocWebsocket_RequestMultiError(errors)
	}

	return nil
}

// APIDocWebsocket_RequestMultiError is an error wrapping multiple validation
// errors returned by APIDocWebsocket_Request.ValidateAll() if the designated
// constraints aren't met.
type APIDocWebsocket_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIDocWebsocket_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIDocWebsocket_RequestMultiError) AllErrors() []error { return m }

// APIDocWebsocket_RequestValidationError is the validation error returned by
// APIDocWebsocket_Request.Validate if the designated constraints aren't met.
type APIDocWebsocket_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIDocWebsocket_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIDocWebsocket_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIDocWebsocket_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIDocWebsocket_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIDocWebsocket_RequestValidationError) ErrorName() string {
	return "APIDocWebsocket_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APIDocWebsocket_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIDocWebsocket_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIDocWebsocket_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIDocWebsocket_RequestValidationError{}

// Validate checks the field values on APITestEnvCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvCreateRequestMultiError, or nil if none found.
func (m *APITestEnvCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAPITestEnvData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITestEnvCreateRequestValidationError{
					field:  "APITestEnvData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITestEnvCreateRequestValidationError{
					field:  "APITestEnvData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAPITestEnvData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITestEnvCreateRequestValidationError{
				field:  "APITestEnvData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return APITestEnvCreateRequestMultiError(errors)
	}

	return nil
}

// APITestEnvCreateRequestMultiError is an error wrapping multiple validation
// errors returned by APITestEnvCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvCreateRequestMultiError) AllErrors() []error { return m }

// APITestEnvCreateRequestValidationError is the validation error returned by
// APITestEnvCreateRequest.Validate if the designated constraints aren't met.
type APITestEnvCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvCreateRequestValidationError) ErrorName() string {
	return "APITestEnvCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvCreateRequestValidationError{}

// Validate checks the field values on APITestEnvData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APITestEnvData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in APITestEnvDataMultiError,
// or nil if none found.
func (m *APITestEnvData) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for EnvID

	// no validation rules for EnvType

	// no validation rules for Name

	// no validation rules for Domain

	// no validation rules for Header

	{
		sorted_keys := make([]string, len(m.GetGlobal()))
		i := 0
		for key := range m.GetGlobal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGlobal()[key]
			_ = val

			// no validation rules for Global[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, APITestEnvDataValidationError{
							field:  fmt.Sprintf("Global[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, APITestEnvDataValidationError{
							field:  fmt.Sprintf("Global[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return APITestEnvDataValidationError{
						field:  fmt.Sprintf("Global[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return APITestEnvDataMultiError(errors)
	}

	return nil
}

// APITestEnvDataMultiError is an error wrapping multiple validation errors
// returned by APITestEnvData.ValidateAll() if the designated constraints
// aren't met.
type APITestEnvDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvDataMultiError) AllErrors() []error { return m }

// APITestEnvDataValidationError is the validation error returned by
// APITestEnvData.Validate if the designated constraints aren't met.
type APITestEnvDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvDataValidationError) ErrorName() string { return "APITestEnvDataValidationError" }

// Error satisfies the builtin error interface
func (e APITestEnvDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvDataValidationError{}

// Validate checks the field values on APITestEnvDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvDeleteResponseMultiError, or nil if none found.
func (m *APITestEnvDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestEnvDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestEnvDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestEnvDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITestEnvDeleteResponseMultiError(errors)
	}

	return nil
}

// APITestEnvDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by APITestEnvDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvDeleteResponseMultiError) AllErrors() []error { return m }

// APITestEnvDeleteResponseValidationError is the validation error returned by
// APITestEnvDeleteResponse.Validate if the designated constraints aren't met.
type APITestEnvDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvDeleteResponseValidationError) ErrorName() string {
	return "APITestEnvDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvDeleteResponseValidationError{}

// Validate checks the field values on APITestEnvGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvGetResponseMultiError, or nil if none found.
func (m *APITestEnvGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestEnvGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestEnvGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestEnvGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITestEnvGetResponseMultiError(errors)
	}

	return nil
}

// APITestEnvGetResponseMultiError is an error wrapping multiple validation
// errors returned by APITestEnvGetResponse.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvGetResponseMultiError) AllErrors() []error { return m }

// APITestEnvGetResponseValidationError is the validation error returned by
// APITestEnvGetResponse.Validate if the designated constraints aren't met.
type APITestEnvGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvGetResponseValidationError) ErrorName() string {
	return "APITestEnvGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvGetResponseValidationError{}

// Validate checks the field values on APITestEnvListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvListResponseMultiError, or nil if none found.
func (m *APITestEnvListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestEnvListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestEnvListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestEnvListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITestEnvListResponseMultiError(errors)
	}

	return nil
}

// APITestEnvListResponseMultiError is an error wrapping multiple validation
// errors returned by APITestEnvListResponse.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvListResponseMultiError) AllErrors() []error { return m }

// APITestEnvListResponseValidationError is the validation error returned by
// APITestEnvListResponse.Validate if the designated constraints aren't met.
type APITestEnvListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvListResponseValidationError) ErrorName() string {
	return "APITestEnvListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvListResponseValidationError{}

// Validate checks the field values on APITestEnvUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvUpdateRequestMultiError, or nil if none found.
func (m *APITestEnvUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAPITestEnvData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITestEnvUpdateRequestValidationError{
					field:  "APITestEnvData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITestEnvUpdateRequestValidationError{
					field:  "APITestEnvData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAPITestEnvData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITestEnvUpdateRequestValidationError{
				field:  "APITestEnvData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return APITestEnvUpdateRequestMultiError(errors)
	}

	return nil
}

// APITestEnvUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by APITestEnvUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvUpdateRequestMultiError) AllErrors() []error { return m }

// APITestEnvUpdateRequestValidationError is the validation error returned by
// APITestEnvUpdateRequest.Validate if the designated constraints aren't met.
type APITestEnvUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvUpdateRequestValidationError) ErrorName() string {
	return "APITestEnvUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvUpdateRequestValidationError{}

// Validate checks the field values on APITestEnvUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestEnvUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestEnvUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestEnvUpdateResponseMultiError, or nil if none found.
func (m *APITestEnvUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestEnvUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return APITestEnvUpdateResponseMultiError(errors)
	}

	return nil
}

// APITestEnvUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by APITestEnvUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type APITestEnvUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestEnvUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestEnvUpdateResponseMultiError) AllErrors() []error { return m }

// APITestEnvUpdateResponseValidationError is the validation error returned by
// APITestEnvUpdateResponse.Validate if the designated constraints aren't met.
type APITestEnvUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestEnvUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestEnvUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestEnvUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestEnvUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestEnvUpdateResponseValidationError) ErrorName() string {
	return "APITestEnvUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITestEnvUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestEnvUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestEnvUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestEnvUpdateResponseValidationError{}

// Validate checks the field values on APITestReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APITestReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in APITestReqMultiError, or
// nil if none found.
func (m *APITestReq) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for ClientSecret

	for idx, item := range m.GetAPIs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestReqValidationError{
						field:  fmt.Sprintf("APIs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestReqValidationError{
						field:  fmt.Sprintf("APIs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestReqValidationError{
					field:  fmt.Sprintf("APIs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	if len(errors) > 0 {
		return APITestReqMultiError(errors)
	}

	return nil
}

// APITestReqMultiError is an error wrapping multiple validation errors
// returned by APITestReq.ValidateAll() if the designated constraints aren't met.
type APITestReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestReqMultiError) AllErrors() []error { return m }

// APITestReqValidationError is the validation error returned by
// APITestReq.Validate if the designated constraints aren't met.
type APITestReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestReqValidationError) ErrorName() string { return "APITestReqValidationError" }

// Error satisfies the builtin error interface
func (e APITestReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestReqValidationError{}

// Validate checks the field values on APITestsAttemptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestsAttemptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestsAttemptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestsAttemptRequestMultiError, or nil if none found.
func (m *APITestsAttemptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestsAttemptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectTestEnvID

	// no validation rules for UsecaseTestEnvID

	for idx, item := range m.GetAPIs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestsAttemptRequestValidationError{
						field:  fmt.Sprintf("APIs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestsAttemptRequestValidationError{
						field:  fmt.Sprintf("APIs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestsAttemptRequestValidationError{
					field:  fmt.Sprintf("APIs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITestsAttemptRequestMultiError(errors)
	}

	return nil
}

// APITestsAttemptRequestMultiError is an error wrapping multiple validation
// errors returned by APITestsAttemptRequest.ValidateAll() if the designated
// constraints aren't met.
type APITestsAttemptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestsAttemptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestsAttemptRequestMultiError) AllErrors() []error { return m }

// APITestsAttemptRequestValidationError is the validation error returned by
// APITestsAttemptRequest.Validate if the designated constraints aren't met.
type APITestsAttemptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestsAttemptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestsAttemptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestsAttemptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestsAttemptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestsAttemptRequestValidationError) ErrorName() string {
	return "APITestsAttemptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITestsAttemptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestsAttemptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestsAttemptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestsAttemptRequestValidationError{}

// Validate checks the field values on APITestsAttemptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITestsAttemptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITestsAttemptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITestsAttemptResponseMultiError, or nil if none found.
func (m *APITestsAttemptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITestsAttemptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITestsAttemptResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITestsAttemptResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITestsAttemptResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITestsAttemptResponseMultiError(errors)
	}

	return nil
}

// APITestsAttemptResponseMultiError is an error wrapping multiple validation
// errors returned by APITestsAttemptResponse.ValidateAll() if the designated
// constraints aren't met.
type APITestsAttemptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITestsAttemptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITestsAttemptResponseMultiError) AllErrors() []error { return m }

// APITestsAttemptResponseValidationError is the validation error returned by
// APITestsAttemptResponse.Validate if the designated constraints aren't met.
type APITestsAttemptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITestsAttemptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITestsAttemptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITestsAttemptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITestsAttemptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITestsAttemptResponseValidationError) ErrorName() string {
	return "APITestsAttemptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITestsAttemptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITestsAttemptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITestsAttemptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITestsAttemptResponseValidationError{}

// Validate checks the field values on APPLICATIONS_RESOURCES_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APPLICATIONS_RESOURCES_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APPLICATIONS_RESOURCES_LIST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APPLICATIONS_RESOURCES_LIST_RequestMultiError, or nil if none found.
func (m *APPLICATIONS_RESOURCES_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APPLICATIONS_RESOURCES_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return APPLICATIONS_RESOURCES_LIST_RequestMultiError(errors)
	}

	return nil
}

// APPLICATIONS_RESOURCES_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APPLICATIONS_RESOURCES_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type APPLICATIONS_RESOURCES_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APPLICATIONS_RESOURCES_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APPLICATIONS_RESOURCES_LIST_RequestMultiError) AllErrors() []error { return m }

// APPLICATIONS_RESOURCES_LIST_RequestValidationError is the validation error
// returned by APPLICATIONS_RESOURCES_LIST_Request.Validate if the designated
// constraints aren't met.
type APPLICATIONS_RESOURCES_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) ErrorName() string {
	return "APPLICATIONS_RESOURCES_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APPLICATIONS_RESOURCES_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPPLICATIONS_RESOURCES_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APPLICATIONS_RESOURCES_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APPLICATIONS_RESOURCES_LIST_RequestValidationError{}

// Validate checks the field values on APP_PUBLISH_ITEM_RELATION_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *APP_PUBLISH_ITEM_RELATION_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APP_PUBLISH_ITEM_RELATION_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError, or nil if none found.
func (m *APP_PUBLISH_ITEM_RELATION_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APP_PUBLISH_ITEM_RELATION_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Application

	if len(errors) > 0 {
		return APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError(errors)
	}

	return nil
}

// APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// APP_PUBLISH_ITEM_RELATION_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APP_PUBLISH_ITEM_RELATION_GET_RequestMultiError) AllErrors() []error { return m }

// APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError is the validation error
// returned by APP_PUBLISH_ITEM_RELATION_GET_Request.Validate if the
// designated constraints aren't met.
type APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) ErrorName() string {
	return "APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPP_PUBLISH_ITEM_RELATION_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APP_PUBLISH_ITEM_RELATION_GET_RequestValidationError{}

// Validate checks the field values on AndroidCertificateAutoDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AndroidCertificateAutoDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateAutoDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AndroidCertificateAutoDTOMultiError, or nil if none found.
func (m *AndroidCertificateAutoDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateAutoDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OU

	// no validation rules for Org

	// no validation rules for City

	// no validation rules for Province

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetDebugKeyStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateAutoDTOValidationError{
					field:  "DebugKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateAutoDTOValidationError{
					field:  "DebugKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebugKeyStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateAutoDTOValidationError{
				field:  "DebugKeyStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReleaseKeyStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateAutoDTOValidationError{
					field:  "ReleaseKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateAutoDTOValidationError{
					field:  "ReleaseKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleaseKeyStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateAutoDTOValidationError{
				field:  "ReleaseKeyStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AndroidCertificateAutoDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateAutoDTOMultiError is an error wrapping multiple validation
// errors returned by AndroidCertificateAutoDTO.ValidateAll() if the
// designated constraints aren't met.
type AndroidCertificateAutoDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateAutoDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateAutoDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateAutoDTOValidationError is the validation error returned by
// AndroidCertificateAutoDTO.Validate if the designated constraints aren't met.
type AndroidCertificateAutoDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateAutoDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateAutoDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateAutoDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateAutoDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateAutoDTOValidationError) ErrorName() string {
	return "AndroidCertificateAutoDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateAutoDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateAutoDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateAutoDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateAutoDTOValidationError{}

// Validate checks the field values on AndroidCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AndroidCertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AndroidCertificateDTOMultiError, or nil if none found.
func (m *AndroidCertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsManualCreate

	if all {
		switch v := interface{}(m.GetManualInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateDTOValidationError{
					field:  "ManualInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateDTOValidationError{
					field:  "ManualInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManualInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateDTOValidationError{
				field:  "ManualInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAutoInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateDTOValidationError{
					field:  "AutoInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateDTOValidationError{
					field:  "AutoInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateDTOValidationError{
				field:  "AutoInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AndroidCertificateDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateDTOMultiError is an error wrapping multiple validation
// errors returned by AndroidCertificateDTO.ValidateAll() if the designated
// constraints aren't met.
type AndroidCertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateDTOValidationError is the validation error returned by
// AndroidCertificateDTO.Validate if the designated constraints aren't met.
type AndroidCertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateDTOValidationError) ErrorName() string {
	return "AndroidCertificateDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateDTOValidationError{}

// Validate checks the field values on AndroidCertificateKeyDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AndroidCertificateKeyDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateKeyDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AndroidCertificateKeyDTOMultiError, or nil if none found.
func (m *AndroidCertificateKeyDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateKeyDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DebugKeyStoreFile

	// no validation rules for DebugKeyStoreAlias

	// no validation rules for DebugKeyPassword

	// no validation rules for DebugStorePassword

	// no validation rules for ReleaseKeyStoreFile

	// no validation rules for ReleaseKeyStoreAlias

	// no validation rules for ReleaseKeyPassword

	// no validation rules for ReleaseStorePassword

	if len(errors) > 0 {
		return AndroidCertificateKeyDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateKeyDTOMultiError is an error wrapping multiple validation
// errors returned by AndroidCertificateKeyDTO.ValidateAll() if the designated
// constraints aren't met.
type AndroidCertificateKeyDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateKeyDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateKeyDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateKeyDTOValidationError is the validation error returned by
// AndroidCertificateKeyDTO.Validate if the designated constraints aren't met.
type AndroidCertificateKeyDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateKeyDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateKeyDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateKeyDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateKeyDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateKeyDTOValidationError) ErrorName() string {
	return "AndroidCertificateKeyDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateKeyDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateKeyDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateKeyDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateKeyDTOValidationError{}

// Validate checks the field values on AndroidCertificateKeyStoreDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AndroidCertificateKeyStoreDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateKeyStoreDTO with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AndroidCertificateKeyStoreDTOMultiError, or nil if none found.
func (m *AndroidCertificateKeyStoreDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateKeyStoreDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for KeyPassword

	// no validation rules for StorePassword

	if len(errors) > 0 {
		return AndroidCertificateKeyStoreDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateKeyStoreDTOMultiError is an error wrapping multiple
// validation errors returned by AndroidCertificateKeyStoreDTO.ValidateAll()
// if the designated constraints aren't met.
type AndroidCertificateKeyStoreDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateKeyStoreDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateKeyStoreDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateKeyStoreDTOValidationError is the validation error
// returned by AndroidCertificateKeyStoreDTO.Validate if the designated
// constraints aren't met.
type AndroidCertificateKeyStoreDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateKeyStoreDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateKeyStoreDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateKeyStoreDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateKeyStoreDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateKeyStoreDTOValidationError) ErrorName() string {
	return "AndroidCertificateKeyStoreDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateKeyStoreDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateKeyStoreDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateKeyStoreDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateKeyStoreDTOValidationError{}

// Validate checks the field values on AndroidCertificateManualDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AndroidCertificateManualDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateManualDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AndroidCertificateManualDTOMultiError, or nil if none found.
func (m *AndroidCertificateManualDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateManualDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebugKeyStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateManualDTOValidationError{
					field:  "DebugKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateManualDTOValidationError{
					field:  "DebugKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebugKeyStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateManualDTOValidationError{
				field:  "DebugKeyStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReleaseKeyStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateManualDTOValidationError{
					field:  "ReleaseKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateManualDTOValidationError{
					field:  "ReleaseKeyStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleaseKeyStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateManualDTOValidationError{
				field:  "ReleaseKeyStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AndroidCertificateManualDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateManualDTOMultiError is an error wrapping multiple
// validation errors returned by AndroidCertificateManualDTO.ValidateAll() if
// the designated constraints aren't met.
type AndroidCertificateManualDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateManualDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateManualDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateManualDTOValidationError is the validation error returned
// by AndroidCertificateManualDTO.Validate if the designated constraints
// aren't met.
type AndroidCertificateManualDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateManualDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateManualDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateManualDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateManualDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateManualDTOValidationError) ErrorName() string {
	return "AndroidCertificateManualDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateManualDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateManualDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateManualDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateManualDTOValidationError{}

// Validate checks the field values on AndroidCertificateManualKeyStoreDTO with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AndroidCertificateManualKeyStoreDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AndroidCertificateManualKeyStoreDTO
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AndroidCertificateManualKeyStoreDTOMultiError, or nil if none found.
func (m *AndroidCertificateManualKeyStoreDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AndroidCertificateManualKeyStoreDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificateFileDTO()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateManualKeyStoreDTOValidationError{
					field:  "CertificateFileDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateManualKeyStoreDTOValidationError{
					field:  "CertificateFileDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificateFileDTO()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateManualKeyStoreDTOValidationError{
				field:  "CertificateFileDTO",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAndroidCertificateKeyStoreDTO()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AndroidCertificateManualKeyStoreDTOValidationError{
					field:  "AndroidCertificateKeyStoreDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AndroidCertificateManualKeyStoreDTOValidationError{
					field:  "AndroidCertificateKeyStoreDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidCertificateKeyStoreDTO()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AndroidCertificateManualKeyStoreDTOValidationError{
				field:  "AndroidCertificateKeyStoreDTO",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AndroidCertificateManualKeyStoreDTOMultiError(errors)
	}

	return nil
}

// AndroidCertificateManualKeyStoreDTOMultiError is an error wrapping multiple
// validation errors returned by
// AndroidCertificateManualKeyStoreDTO.ValidateAll() if the designated
// constraints aren't met.
type AndroidCertificateManualKeyStoreDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AndroidCertificateManualKeyStoreDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AndroidCertificateManualKeyStoreDTOMultiError) AllErrors() []error { return m }

// AndroidCertificateManualKeyStoreDTOValidationError is the validation error
// returned by AndroidCertificateManualKeyStoreDTO.Validate if the designated
// constraints aren't met.
type AndroidCertificateManualKeyStoreDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AndroidCertificateManualKeyStoreDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AndroidCertificateManualKeyStoreDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AndroidCertificateManualKeyStoreDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AndroidCertificateManualKeyStoreDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AndroidCertificateManualKeyStoreDTOValidationError) ErrorName() string {
	return "AndroidCertificateManualKeyStoreDTOValidationError"
}

// Error satisfies the builtin error interface
func (e AndroidCertificateManualKeyStoreDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAndroidCertificateManualKeyStoreDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AndroidCertificateManualKeyStoreDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AndroidCertificateManualKeyStoreDTOValidationError{}

// Validate checks the field values on ApiTestCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiTestCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiTestCancelRequestMultiError, or nil if none found.
func (m *ApiTestCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return ApiTestCancelRequestMultiError(errors)
	}

	return nil
}

// ApiTestCancelRequestMultiError is an error wrapping multiple validation
// errors returned by ApiTestCancelRequest.ValidateAll() if the designated
// constraints aren't met.
type ApiTestCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestCancelRequestMultiError) AllErrors() []error { return m }

// ApiTestCancelRequestValidationError is the validation error returned by
// ApiTestCancelRequest.Validate if the designated constraints aren't met.
type ApiTestCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestCancelRequestValidationError) ErrorName() string {
	return "ApiTestCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApiTestCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestCancelRequestValidationError{}

// Validate checks the field values on ApiTestCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiTestCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiTestCancelResponseMultiError, or nil if none found.
func (m *ApiTestCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ApiTestCancelResponseMultiError(errors)
	}

	return nil
}

// ApiTestCancelResponseMultiError is an error wrapping multiple validation
// errors returned by ApiTestCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type ApiTestCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestCancelResponseMultiError) AllErrors() []error { return m }

// ApiTestCancelResponseValidationError is the validation error returned by
// ApiTestCancelResponse.Validate if the designated constraints aren't met.
type ApiTestCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestCancelResponseValidationError) ErrorName() string {
	return "ApiTestCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApiTestCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestCancelResponseValidationError{}

// Validate checks the field values on ApiTestInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiTestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiTestInfoMultiError, or
// nil if none found.
func (m *ApiTestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiID

	// no validation rules for UsecaseID

	// no validation rules for UsecaseOrder

	// no validation rules for ProjectID

	// no validation rules for Status

	// no validation rules for ApiInfo

	// no validation rules for ApiRequest

	// no validation rules for ApiResponse

	// no validation rules for AssertResult

	if len(errors) > 0 {
		return ApiTestInfoMultiError(errors)
	}

	return nil
}

// ApiTestInfoMultiError is an error wrapping multiple validation errors
// returned by ApiTestInfo.ValidateAll() if the designated constraints aren't met.
type ApiTestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestInfoMultiError) AllErrors() []error { return m }

// ApiTestInfoValidationError is the validation error returned by
// ApiTestInfo.Validate if the designated constraints aren't met.
type ApiTestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestInfoValidationError) ErrorName() string { return "ApiTestInfoValidationError" }

// Error satisfies the builtin error interface
func (e ApiTestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestInfoValidationError{}

// Validate checks the field values on ApiTestsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiTestsGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiTestsGetResponseMultiError, or nil if none found.
func (m *ApiTestsGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestsGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiTestsGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiTestsGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiTestsGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApiTestsGetResponseMultiError(errors)
	}

	return nil
}

// ApiTestsGetResponseMultiError is an error wrapping multiple validation
// errors returned by ApiTestsGetResponse.ValidateAll() if the designated
// constraints aren't met.
type ApiTestsGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestsGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestsGetResponseMultiError) AllErrors() []error { return m }

// ApiTestsGetResponseValidationError is the validation error returned by
// ApiTestsGetResponse.Validate if the designated constraints aren't met.
type ApiTestsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestsGetResponseValidationError) ErrorName() string {
	return "ApiTestsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApiTestsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestsGetResponseValidationError{}

// Validate checks the field values on ApiTestsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiTestsUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiTestsUpdateRequestMultiError, or nil if none found.
func (m *ApiTestsUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestsUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApiTestInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiTestsUpdateRequestValidationError{
					field:  "ApiTestInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiTestsUpdateRequestValidationError{
					field:  "ApiTestInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiTestInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiTestsUpdateRequestValidationError{
				field:  "ApiTestInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsResult

	// no validation rules for Id

	if len(errors) > 0 {
		return ApiTestsUpdateRequestMultiError(errors)
	}

	return nil
}

// ApiTestsUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ApiTestsUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ApiTestsUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestsUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestsUpdateRequestMultiError) AllErrors() []error { return m }

// ApiTestsUpdateRequestValidationError is the validation error returned by
// ApiTestsUpdateRequest.Validate if the designated constraints aren't met.
type ApiTestsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestsUpdateRequestValidationError) ErrorName() string {
	return "ApiTestsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApiTestsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestsUpdateRequestValidationError{}

// Validate checks the field values on ApiTestsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiTestsUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTestsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiTestsUpdateResponseMultiError, or nil if none found.
func (m *ApiTestsUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTestsUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiTestsUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiTestsUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiTestsUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApiTestsUpdateResponseMultiError(errors)
	}

	return nil
}

// ApiTestsUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ApiTestsUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ApiTestsUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTestsUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTestsUpdateResponseMultiError) AllErrors() []error { return m }

// ApiTestsUpdateResponseValidationError is the validation error returned by
// ApiTestsUpdateResponse.Validate if the designated constraints aren't met.
type ApiTestsUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTestsUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTestsUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTestsUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTestsUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTestsUpdateResponseValidationError) ErrorName() string {
	return "ApiTestsUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApiTestsUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTestsUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTestsUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTestsUpdateResponseValidationError{}

// Validate checks the field values on AppCertificateListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppCertificateListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppCertificateListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppCertificateListRequestMultiError, or nil if none found.
func (m *AppCertificateListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppCertificateListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Status

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return AppCertificateListRequestMultiError(errors)
	}

	return nil
}

// AppCertificateListRequestMultiError is an error wrapping multiple validation
// errors returned by AppCertificateListRequest.ValidateAll() if the
// designated constraints aren't met.
type AppCertificateListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppCertificateListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppCertificateListRequestMultiError) AllErrors() []error { return m }

// AppCertificateListRequestValidationError is the validation error returned by
// AppCertificateListRequest.Validate if the designated constraints aren't met.
type AppCertificateListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppCertificateListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppCertificateListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppCertificateListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppCertificateListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppCertificateListRequestValidationError) ErrorName() string {
	return "AppCertificateListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppCertificateListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppCertificateListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppCertificateListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppCertificateListRequestValidationError{}

// Validate checks the field values on AppPublishItemRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppPublishItemRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppPublishItemRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppPublishItemRelationMultiError, or nil if none found.
func (m *AppPublishItemRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *AppPublishItemRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Env

	// no validation rules for OrgID

	// no validation rules for AppID

	// no validation rules for PublishItemID

	// no validation rules for PublishItemName

	// no validation rules for PublisherID

	// no validation rules for PublisherName

	// no validation rules for AK

	// no validation rules for AI

	if len(errors) > 0 {
		return AppPublishItemRelationMultiError(errors)
	}

	return nil
}

// AppPublishItemRelationMultiError is an error wrapping multiple validation
// errors returned by AppPublishItemRelation.ValidateAll() if the designated
// constraints aren't met.
type AppPublishItemRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppPublishItemRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppPublishItemRelationMultiError) AllErrors() []error { return m }

// AppPublishItemRelationValidationError is the validation error returned by
// AppPublishItemRelation.Validate if the designated constraints aren't met.
type AppPublishItemRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppPublishItemRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppPublishItemRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppPublishItemRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppPublishItemRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppPublishItemRelationValidationError) ErrorName() string {
	return "AppPublishItemRelationValidationError"
}

// Error satisfies the builtin error interface
func (e AppPublishItemRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppPublishItemRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppPublishItemRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppPublishItemRelationValidationError{}

// Validate checks the field values on ApplicationCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationCertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationCertificateDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationCertificateDTOMultiError, or nil if none found.
func (m *ApplicationCertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationCertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for AppID

	// no validation rules for CertificateID

	// no validation rules for ApprovalID

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OrgID

	// no validation rules for Status

	// no validation rules for Creator

	// no validation rules for Operator

	// no validation rules for Desc

	if all {
		switch v := interface{}(m.GetAndroidInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCertificateDTOValidationError{
				field:  "AndroidInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIOSInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIOSInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCertificateDTOValidationError{
				field:  "IOSInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCertificateDTOValidationError{
				field:  "MessageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPushConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "PushConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "PushConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCertificateDTOValidationError{
				field:  "PushConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCertificateDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCertificateDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationCertificateDTOMultiError(errors)
	}

	return nil
}

// ApplicationCertificateDTOMultiError is an error wrapping multiple validation
// errors returned by ApplicationCertificateDTO.ValidateAll() if the
// designated constraints aren't met.
type ApplicationCertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationCertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationCertificateDTOMultiError) AllErrors() []error { return m }

// ApplicationCertificateDTOValidationError is the validation error returned by
// ApplicationCertificateDTO.Validate if the designated constraints aren't met.
type ApplicationCertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationCertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationCertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationCertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationCertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationCertificateDTOValidationError) ErrorName() string {
	return "ApplicationCertificateDTOValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationCertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationCertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationCertificateDTOValidationError{}

// Validate checks the field values on ApplicationCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationCreateRequestMultiError, or nil if none found.
func (m *ApplicationCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for ProjectID

	// no validation rules for Mode

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ApplicationCreateRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ApplicationCreateRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ApplicationCreateRequestValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for IsExternalRepo

	if m.RepoConfig != nil {

		if all {
			switch v := interface{}(m.GetRepoConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationCreateRequestValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationCreateRequestValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRepoConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationCreateRequestValidationError{
					field:  "RepoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SonarConfig != nil {

		if all {
			switch v := interface{}(m.GetSonarConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationCreateRequestValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationCreateRequestValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSonarConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationCreateRequestValidationError{
					field:  "SonarConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationCreateRequestMultiError(errors)
	}

	return nil
}

// ApplicationCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationCreateRequestMultiError) AllErrors() []error { return m }

// ApplicationCreateRequestValidationError is the validation error returned by
// ApplicationCreateRequest.Validate if the designated constraints aren't met.
type ApplicationCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationCreateRequestValidationError) ErrorName() string {
	return "ApplicationCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationCreateRequestValidationError{}

// Validate checks the field values on ApplicationCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationCreateResponseMultiError, or nil if none found.
func (m *ApplicationCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationCreateResponseMultiError(errors)
	}

	return nil
}

// ApplicationCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ApplicationCreateResponse.ValidateAll() if the
// designated constraints aren't met.
type ApplicationCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationCreateResponseMultiError) AllErrors() []error { return m }

// ApplicationCreateResponseValidationError is the validation error returned by
// ApplicationCreateResponse.Validate if the designated constraints aren't met.
type ApplicationCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationCreateResponseValidationError) ErrorName() string {
	return "ApplicationCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationCreateResponseValidationError{}

// Validate checks the field values on ApplicationDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplicationDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicationDTOMultiError,
// or nil if none found.
func (m *ApplicationDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Mode

	// no validation rules for Pined

	// no validation rules for Desc

	// no validation rules for Logo

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ApplicationDTOValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ApplicationDTOValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ApplicationDTOValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for IsPublic

	// no validation rules for Creator

	// no validation rules for BlockStatus

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GitRepo

	// no validation rules for GitRepoAbbrev

	// no validation rules for GitRepoNew

	// no validation rules for Token

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for OrgDisplayName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  fmt.Sprintf("Workspaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsExternalRepo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extra

	if m.UnBlockStart != nil {

		if all {
			switch v := interface{}(m.GetUnBlockStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnBlockStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "UnBlockStart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UnBlockEnd != nil {

		if all {
			switch v := interface{}(m.GetUnBlockEnd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnBlockEnd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "UnBlockEnd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RepoConfig != nil {

		if all {
			switch v := interface{}(m.GetRepoConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRepoConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "RepoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SonarConfig != nil {

		if all {
			switch v := interface{}(m.GetSonarConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSonarConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "SonarConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationDTOMultiError(errors)
	}

	return nil
}

// ApplicationDTOMultiError is an error wrapping multiple validation errors
// returned by ApplicationDTO.ValidateAll() if the designated constraints
// aren't met.
type ApplicationDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationDTOMultiError) AllErrors() []error { return m }

// ApplicationDTOValidationError is the validation error returned by
// ApplicationDTO.Validate if the designated constraints aren't met.
type ApplicationDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDTOValidationError) ErrorName() string { return "ApplicationDTOValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDTOValidationError{}

// Validate checks the field values on ApplicationDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationDeleteRequestMultiError, or nil if none found.
func (m *ApplicationDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return ApplicationDeleteRequestMultiError(errors)
	}

	return nil
}

// ApplicationDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationDeleteRequestMultiError) AllErrors() []error { return m }

// ApplicationDeleteRequestValidationError is the validation error returned by
// ApplicationDeleteRequest.Validate if the designated constraints aren't met.
type ApplicationDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDeleteRequestValidationError) ErrorName() string {
	return "ApplicationDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDeleteRequestValidationError{}

// Validate checks the field values on ApplicationDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationDeleteResponseMultiError, or nil if none found.
func (m *ApplicationDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDeleteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationDeleteResponseMultiError(errors)
	}

	return nil
}

// ApplicationDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ApplicationDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type ApplicationDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationDeleteResponseMultiError) AllErrors() []error { return m }

// ApplicationDeleteResponseValidationError is the validation error returned by
// ApplicationDeleteResponse.Validate if the designated constraints aren't met.
type ApplicationDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDeleteResponseValidationError) ErrorName() string {
	return "ApplicationDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDeleteResponseValidationError{}

// Validate checks the field values on ApplicationInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationInitRequestMultiError, or nil if none found.
func (m *ApplicationInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationID

	// no validation rules for MobileAppName

	// no validation rules for MobileDisplayName

	// no validation rules for BundleID

	// no validation rules for PackageName

	if len(errors) > 0 {
		return ApplicationInitRequestMultiError(errors)
	}

	return nil
}

// ApplicationInitRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationInitRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationInitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationInitRequestMultiError) AllErrors() []error { return m }

// ApplicationInitRequestValidationError is the validation error returned by
// ApplicationInitRequest.Validate if the designated constraints aren't met.
type ApplicationInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationInitRequestValidationError) ErrorName() string {
	return "ApplicationInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationInitRequestValidationError{}

// Validate checks the field values on ApplicationStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationStatsMultiError, or nil if none found.
func (m *ApplicationStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CountRuntimes

	// no validation rules for CountMembers

	// no validation rules for TimeLastModified

	if len(errors) > 0 {
		return ApplicationStatsMultiError(errors)
	}

	return nil
}

// ApplicationStatsMultiError is an error wrapping multiple validation errors
// returned by ApplicationStats.ValidateAll() if the designated constraints
// aren't met.
type ApplicationStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationStatsMultiError) AllErrors() []error { return m }

// ApplicationStatsValidationError is the validation error returned by
// ApplicationStats.Validate if the designated constraints aren't met.
type ApplicationStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationStatsValidationError) ErrorName() string { return "ApplicationStatsValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationStatsValidationError{}

// Validate checks the field values on ApplicationUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationUpdateRequestMultiError, or nil if none found.
func (m *ApplicationUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationID

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationUpdateRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationUpdateRequestMultiError(errors)
	}

	return nil
}

// ApplicationUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationUpdateRequestMultiError) AllErrors() []error { return m }

// ApplicationUpdateRequestValidationError is the validation error returned by
// ApplicationUpdateRequest.Validate if the designated constraints aren't met.
type ApplicationUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationUpdateRequestValidationError) ErrorName() string {
	return "ApplicationUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationUpdateRequestValidationError{}

// Validate checks the field values on ApplicationUpdateRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationUpdateRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationUpdateRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationUpdateRequestBodyMultiError, or nil if none found.
func (m *ApplicationUpdateRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationUpdateRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for DisplayName

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ApplicationUpdateRequestBodyValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ApplicationUpdateRequestBodyValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ApplicationUpdateRequestBodyValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for IsPublic

	if m.RepoConfig != nil {

		if all {
			switch v := interface{}(m.GetRepoConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationUpdateRequestBodyValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationUpdateRequestBodyValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRepoConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationUpdateRequestBodyValidationError{
					field:  "RepoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SonarConfig != nil {

		if all {
			switch v := interface{}(m.GetSonarConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationUpdateRequestBodyValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationUpdateRequestBodyValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSonarConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationUpdateRequestBodyValidationError{
					field:  "SonarConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationUpdateRequestBodyMultiError(errors)
	}

	return nil
}

// ApplicationUpdateRequestBodyMultiError is an error wrapping multiple
// validation errors returned by ApplicationUpdateRequestBody.ValidateAll() if
// the designated constraints aren't met.
type ApplicationUpdateRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationUpdateRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationUpdateRequestBodyMultiError) AllErrors() []error { return m }

// ApplicationUpdateRequestBodyValidationError is the validation error returned
// by ApplicationUpdateRequestBody.Validate if the designated constraints
// aren't met.
type ApplicationUpdateRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationUpdateRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationUpdateRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationUpdateRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationUpdateRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationUpdateRequestBodyValidationError) ErrorName() string {
	return "ApplicationUpdateRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationUpdateRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationUpdateRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationUpdateRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationUpdateRequestBodyValidationError{}

// Validate checks the field values on ApplicationUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationUpdateResponseMultiError, or nil if none found.
func (m *ApplicationUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationUpdateResponseMultiError(errors)
	}

	return nil
}

// ApplicationUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ApplicationUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type ApplicationUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationUpdateResponseMultiError) AllErrors() []error { return m }

// ApplicationUpdateResponseValidationError is the validation error returned by
// ApplicationUpdateResponse.Validate if the designated constraints aren't met.
type ApplicationUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationUpdateResponseValidationError) ErrorName() string {
	return "ApplicationUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationUpdateResponseValidationError{}

// Validate checks the field values on ApplicationWorkspace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationWorkspace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationWorkspace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationWorkspaceMultiError, or nil if none found.
func (m *ApplicationWorkspace) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationWorkspace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for Workspace

	// no validation rules for ConfigNamespace

	if len(errors) > 0 {
		return ApplicationWorkspaceMultiError(errors)
	}

	return nil
}

// ApplicationWorkspaceMultiError is an error wrapping multiple validation
// errors returned by ApplicationWorkspace.ValidateAll() if the designated
// constraints aren't met.
type ApplicationWorkspaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationWorkspaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationWorkspaceMultiError) AllErrors() []error { return m }

// ApplicationWorkspaceValidationError is the validation error returned by
// ApplicationWorkspace.Validate if the designated constraints aren't met.
type ApplicationWorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWorkspaceValidationError) ErrorName() string {
	return "ApplicationWorkspaceValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWorkspaceValidationError{}

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Artifact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Artifact with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactMultiError, or nil
// if none found.
func (m *Artifact) ValidateAll() error {
	return m.validate(true)
}

func (m *Artifact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return ArtifactMultiError(errors)
	}

	return nil
}

// ArtifactMultiError is an error wrapping multiple validation errors returned
// by Artifact.ValidateAll() if the designated constraints aren't met.
type ArtifactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactMultiError) AllErrors() []error { return m }

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on AuditMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditMessageMultiError, or
// nil if none found.
func (m *AuditMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageZH

	// no validation rules for MessageEN

	if len(errors) > 0 {
		return AuditMessageMultiError(errors)
	}

	return nil
}

// AuditMessageMultiError is an error wrapping multiple validation errors
// returned by AuditMessage.ValidateAll() if the designated constraints aren't met.
type AuditMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMessageMultiError) AllErrors() []error { return m }

// AuditMessageValidationError is the validation error returned by
// AuditMessage.Validate if the designated constraints aren't met.
type AuditMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditMessageValidationError) ErrorName() string { return "AuditMessageValidationError" }

// Error satisfies the builtin error interface
func (e AuditMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditMessageValidationError{}

// Validate checks the field values on AutoTestSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestSpaceResponseMultiError, or nil if none found.
func (m *AutoTestSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestSpaceResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestSpaceResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestSpaceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestSpaceResponseMultiError(errors)
	}

	return nil
}

// AutoTestSpaceResponseMultiError is an error wrapping multiple validation
// errors returned by AutoTestSpaceResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSpaceResponseMultiError) AllErrors() []error { return m }

// AutoTestSpaceResponseValidationError is the validation error returned by
// AutoTestSpaceResponse.Validate if the designated constraints aren't met.
type AutoTestSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSpaceResponseValidationError) ErrorName() string {
	return "AutoTestSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSpaceResponseValidationError{}

// Validate checks the field values on BaseModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseModelMultiError, or nil
// if none found.
func (m *BaseModel) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseModelValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseModelValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if len(errors) > 0 {
		return BaseModelMultiError(errors)
	}

	return nil
}

// BaseModelMultiError is an error wrapping multiple validation errors returned
// by BaseModel.ValidateAll() if the designated constraints aren't met.
type BaseModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseModelMultiError) AllErrors() []error { return m }

// BaseModelValidationError is the validation error returned by
// BaseModel.Validate if the designated constraints aren't met.
type BaseModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseModelValidationError) ErrorName() string { return "BaseModelValidationError" }

// Error satisfies the builtin error interface
func (e BaseModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseModelValidationError{}

// Validate checks the field values on BaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseResponseMultiError, or
// nil if none found.
func (m *BaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if m.Err != nil {

		if all {
			switch v := interface{}(m.GetErr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BaseResponseValidationError{
						field:  "Err",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BaseResponseValidationError{
						field:  "Err",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BaseResponseValidationError{
					field:  "Err",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BaseResponseMultiError(errors)
	}

	return nil
}

// BaseResponseMultiError is an error wrapping multiple validation errors
// returned by BaseResponse.ValidateAll() if the designated constraints aren't met.
type BaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseResponseMultiError) AllErrors() []error { return m }

// BaseResponseValidationError is the validation error returned by
// BaseResponse.Validate if the designated constraints aren't met.
type BaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseResponseValidationError) ErrorName() string { return "BaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e BaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseResponseValidationError{}

// Validate checks the field values on BlockoutConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockoutConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockoutConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockoutConfigMultiError,
// or nil if none found.
func (m *BlockoutConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockoutConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockDEV

	// no validation rules for BlockTEST

	// no validation rules for BlockStage

	// no validation rules for BlockProd

	if len(errors) > 0 {
		return BlockoutConfigMultiError(errors)
	}

	return nil
}

// BlockoutConfigMultiError is an error wrapping multiple validation errors
// returned by BlockoutConfig.ValidateAll() if the designated constraints
// aren't met.
type BlockoutConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockoutConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockoutConfigMultiError) AllErrors() []error { return m }

// BlockoutConfigValidationError is the validation error returned by
// BlockoutConfig.Validate if the designated constraints aren't met.
type BlockoutConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockoutConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockoutConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockoutConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockoutConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockoutConfigValidationError) ErrorName() string { return "BlockoutConfigValidationError" }

// Error satisfies the builtin error interface
func (e BlockoutConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockoutConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockoutConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockoutConfigValidationError{}

// Validate checks the field values on CICDPipelineYmlListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDPipelineYmlListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDPipelineYmlListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDPipelineYmlListRequestMultiError, or nil if none found.
func (m *CICDPipelineYmlListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDPipelineYmlListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	if len(errors) > 0 {
		return CICDPipelineYmlListRequestMultiError(errors)
	}

	return nil
}

// CICDPipelineYmlListRequestMultiError is an error wrapping multiple
// validation errors returned by CICDPipelineYmlListRequest.ValidateAll() if
// the designated constraints aren't met.
type CICDPipelineYmlListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDPipelineYmlListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDPipelineYmlListRequestMultiError) AllErrors() []error { return m }

// CICDPipelineYmlListRequestValidationError is the validation error returned
// by CICDPipelineYmlListRequest.Validate if the designated constraints aren't met.
type CICDPipelineYmlListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDPipelineYmlListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDPipelineYmlListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDPipelineYmlListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDPipelineYmlListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDPipelineYmlListRequestValidationError) ErrorName() string {
	return "CICDPipelineYmlListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CICDPipelineYmlListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDPipelineYmlListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDPipelineYmlListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDPipelineYmlListRequestValidationError{}

// Validate checks the field values on CICDPipelineYmlListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDPipelineYmlListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDPipelineYmlListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDPipelineYmlListResponseMultiError, or nil if none found.
func (m *CICDPipelineYmlListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDPipelineYmlListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CICDPipelineYmlListResponseMultiError(errors)
	}

	return nil
}

// CICDPipelineYmlListResponseMultiError is an error wrapping multiple
// validation errors returned by CICDPipelineYmlListResponse.ValidateAll() if
// the designated constraints aren't met.
type CICDPipelineYmlListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDPipelineYmlListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDPipelineYmlListResponseMultiError) AllErrors() []error { return m }

// CICDPipelineYmlListResponseValidationError is the validation error returned
// by CICDPipelineYmlListResponse.Validate if the designated constraints
// aren't met.
type CICDPipelineYmlListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDPipelineYmlListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDPipelineYmlListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDPipelineYmlListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDPipelineYmlListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDPipelineYmlListResponseValidationError) ErrorName() string {
	return "CICDPipelineYmlListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CICDPipelineYmlListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDPipelineYmlListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDPipelineYmlListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDPipelineYmlListResponseValidationError{}

// Validate checks the field values on CMDB_BRANCH_RULE_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_BRANCH_RULE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_BRANCH_RULE_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_BRANCH_RULE_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_BRANCH_RULE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_BRANCH_RULE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CMDB_BRANCH_RULE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_BRANCH_RULE_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_BRANCH_RULE_DELETE_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_BRANCH_RULE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_BRANCH_RULE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_BRANCH_RULE_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_BRANCH_RULE_DELETE_RequestValidationError is the validation error
// returned by CMDB_BRANCH_RULE_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_BRANCH_RULE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_BRANCH_RULE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_BRANCH_RULE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_BRANCH_RULE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_BRANCH_RULE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_BRANCH_RULE_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_CERTIFICATE_APP_CANCEL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMDB_CERTIFICATE_APP_CANCEL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_CERTIFICATE_APP_CANCEL_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError, or nil if none found.
func (m *CMDB_CERTIFICATE_APP_CANCEL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_CERTIFICATE_APP_CANCEL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError(errors)
	}

	return nil
}

// CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMDB_CERTIFICATE_APP_CANCEL_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_CERTIFICATE_APP_CANCEL_RequestMultiError) AllErrors() []error { return m }

// CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError is the validation error
// returned by CMDB_CERTIFICATE_APP_CANCEL_Request.Validate if the designated
// constraints aren't met.
type CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) ErrorName() string {
	return "CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_CERTIFICATE_APP_CANCEL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_CERTIFICATE_APP_CANCEL_RequestValidationError{}

// Validate checks the field values on CMDB_CERTIFICATE_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_CERTIFICATE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_CERTIFICATE_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_CERTIFICATE_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_CERTIFICATE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_CERTIFICATE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificatesID

	if len(errors) > 0 {
		return CMDB_CERTIFICATE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_CERTIFICATE_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_CERTIFICATE_DELETE_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_CERTIFICATE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_CERTIFICATE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_CERTIFICATE_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_CERTIFICATE_DELETE_RequestValidationError is the validation error
// returned by CMDB_CERTIFICATE_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_CERTIFICATE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_CERTIFICATE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_CERTIFICATE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_CERTIFICATE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_CERTIFICATE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_CERTIFICATE_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_CERTIFICATE_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_CERTIFICATE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_CERTIFICATE_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_CERTIFICATE_GET_RequestMultiError, or nil if none found.
func (m *CMDB_CERTIFICATE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_CERTIFICATE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificateID

	if len(errors) > 0 {
		return CMDB_CERTIFICATE_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_CERTIFICATE_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_CERTIFICATE_GET_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_CERTIFICATE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_CERTIFICATE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_CERTIFICATE_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_CERTIFICATE_GET_RequestValidationError is the validation error returned
// by CMDB_CERTIFICATE_GET_Request.Validate if the designated constraints
// aren't met.
type CMDB_CERTIFICATE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_CERTIFICATE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_CERTIFICATE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_CERTIFICATE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_CERTIFICATE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_CERTIFICATE_GET_RequestValidationError) ErrorName() string {
	return "CMDB_CERTIFICATE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_CERTIFICATE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_CERTIFICATE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_CERTIFICATE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_CERTIFICATE_GET_RequestValidationError{}

// Validate checks the field values on CMDB_ITERATION_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_ITERATION_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ITERATION_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_ITERATION_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_ITERATION_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ITERATION_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CMDB_ITERATION_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ITERATION_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_ITERATION_DELETE_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_ITERATION_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ITERATION_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ITERATION_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_ITERATION_DELETE_RequestValidationError is the validation error
// returned by CMDB_ITERATION_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_ITERATION_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ITERATION_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ITERATION_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ITERATION_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ITERATION_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ITERATION_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_ITERATION_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ITERATION_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ITERATION_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ITERATION_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ITERATION_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_ITERATION_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_ITERATION_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ITERATION_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_ITERATION_GET_RequestMultiError, or nil if none found.
func (m *CMDB_ITERATION_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ITERATION_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CMDB_ITERATION_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ITERATION_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_ITERATION_GET_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_ITERATION_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ITERATION_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ITERATION_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_ITERATION_GET_RequestValidationError is the validation error returned
// by CMDB_ITERATION_GET_Request.Validate if the designated constraints aren't met.
type CMDB_ITERATION_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ITERATION_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ITERATION_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ITERATION_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ITERATION_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ITERATION_GET_RequestValidationError) ErrorName() string {
	return "CMDB_ITERATION_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ITERATION_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ITERATION_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ITERATION_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ITERATION_GET_RequestValidationError{}

// Validate checks the field values on CMDB_LIBREFERENCE_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMDB_LIBREFERENCE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_LIBREFERENCE_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_LIBREFERENCE_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_LIBREFERENCE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_LIBREFERENCE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CMDB_LIBREFERENCE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_LIBREFERENCE_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMDB_LIBREFERENCE_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_LIBREFERENCE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_LIBREFERENCE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_LIBREFERENCE_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_LIBREFERENCE_DELETE_RequestValidationError is the validation error
// returned by CMDB_LIBREFERENCE_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_LIBREFERENCE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_LIBREFERENCE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_LIBREFERENCE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_LIBREFERENCE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_LIBREFERENCE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_LIBREFERENCE_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_LIBREFERENCE_LIST_VERSION_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMDB_LIBREFERENCE_LIST_VERSION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMDB_LIBREFERENCE_LIST_VERSION_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError, or nil if none found.
func (m *CMDB_LIBREFERENCE_LIST_VERSION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_LIBREFERENCE_LIST_VERSION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError(errors)
	}

	return nil
}

// CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMDB_LIBREFERENCE_LIST_VERSION_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_LIBREFERENCE_LIST_VERSION_RequestMultiError) AllErrors() []error { return m }

// CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError is the validation
// error returned by CMDB_LIBREFERENCE_LIST_VERSION_Request.Validate if the
// designated constraints aren't met.
type CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) ErrorName() string {
	return "CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_LIBREFERENCE_LIST_VERSION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_LIBREFERENCE_LIST_VERSION_RequestValidationError{}

// Validate checks the field values on CMDB_ORG_DELETE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_ORG_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ORG_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_ORG_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_ORG_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ORG_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return CMDB_ORG_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ORG_DELETE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_ORG_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_ORG_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ORG_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ORG_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_ORG_DELETE_RequestValidationError is the validation error returned by
// CMDB_ORG_DELETE_Request.Validate if the designated constraints aren't met.
type CMDB_ORG_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ORG_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ORG_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ORG_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ORG_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ORG_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_ORG_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ORG_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ORG_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ORG_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ORG_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_ORG_PUBLISHER_CREATE_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMDB_ORG_PUBLISHER_CREATE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ORG_PUBLISHER_CREATE_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError, or nil if none found.
func (m *CMDB_ORG_PUBLISHER_CREATE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ORG_PUBLISHER_CREATE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMDB_ORG_PUBLISHER_CREATE_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ORG_PUBLISHER_CREATE_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError is the validation error
// returned by CMDB_ORG_PUBLISHER_CREATE_GET_Request.Validate if the
// designated constraints aren't met.
type CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) ErrorName() string {
	return "CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ORG_PUBLISHER_CREATE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ORG_PUBLISHER_CREATE_GET_RequestValidationError{}

// Validate checks the field values on CMDB_ORG_PUBLISHER_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMDB_ORG_PUBLISHER_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ORG_PUBLISHER_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMDB_ORG_PUBLISHER_CREATE_RequestMultiError, or nil if none found.
func (m *CMDB_ORG_PUBLISHER_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ORG_PUBLISHER_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return CMDB_ORG_PUBLISHER_CREATE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ORG_PUBLISHER_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMDB_ORG_PUBLISHER_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_ORG_PUBLISHER_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ORG_PUBLISHER_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ORG_PUBLISHER_CREATE_RequestMultiError) AllErrors() []error { return m }

// CMDB_ORG_PUBLISHER_CREATE_RequestValidationError is the validation error
// returned by CMDB_ORG_PUBLISHER_CREATE_Request.Validate if the designated
// constraints aren't met.
type CMDB_ORG_PUBLISHER_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) ErrorName() string {
	return "CMDB_ORG_PUBLISHER_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ORG_PUBLISHER_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ORG_PUBLISHER_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ORG_PUBLISHER_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ORG_PUBLISHER_CREATE_RequestValidationError{}

// Validate checks the field values on CMDB_ORG_RESOURCE_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_ORG_RESOURCE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ORG_RESOURCE_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_ORG_RESOURCE_GET_RequestMultiError, or nil if none found.
func (m *CMDB_ORG_RESOURCE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ORG_RESOURCE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_ORG_RESOURCE_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ORG_RESOURCE_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_ORG_RESOURCE_GET_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_ORG_RESOURCE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ORG_RESOURCE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ORG_RESOURCE_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_ORG_RESOURCE_GET_RequestValidationError is the validation error
// returned by CMDB_ORG_RESOURCE_GET_Request.Validate if the designated
// constraints aren't met.
type CMDB_ORG_RESOURCE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) ErrorName() string {
	return "CMDB_ORG_RESOURCE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ORG_RESOURCE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ORG_RESOURCE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ORG_RESOURCE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ORG_RESOURCE_GET_RequestValidationError{}

// Validate checks the field values on CMDB_PUBLISHER_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_PUBLISHER_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_PUBLISHER_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_PUBLISHER_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_PUBLISHER_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PUBLISHER_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublisherID

	if len(errors) > 0 {
		return CMDB_PUBLISHER_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PUBLISHER_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_PUBLISHER_DELETE_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_PUBLISHER_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PUBLISHER_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PUBLISHER_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_PUBLISHER_DELETE_RequestValidationError is the validation error
// returned by CMDB_PUBLISHER_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_PUBLISHER_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_PUBLISHER_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PUBLISHER_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PUBLISHER_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PUBLISHER_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PUBLISHER_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_PUBLISHER_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_PUBLISHER_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_PUBLISHER_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_PUBLISHER_GET_RequestMultiError, or nil if none found.
func (m *CMDB_PUBLISHER_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PUBLISHER_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublisherID

	if len(errors) > 0 {
		return CMDB_PUBLISHER_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PUBLISHER_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_PUBLISHER_GET_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_PUBLISHER_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PUBLISHER_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PUBLISHER_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_PUBLISHER_GET_RequestValidationError is the validation error returned
// by CMDB_PUBLISHER_GET_Request.Validate if the designated constraints aren't met.
type CMDB_PUBLISHER_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PUBLISHER_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PUBLISHER_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PUBLISHER_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PUBLISHER_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PUBLISHER_GET_RequestValidationError) ErrorName() string {
	return "CMDB_PUBLISHER_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PUBLISHER_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PUBLISHER_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PUBLISHER_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PUBLISHER_GET_RequestValidationError{}

// Validate checks the field values on CMDB_ROLES_LIST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_ROLES_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_ROLES_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_ROLES_LIST_RequestMultiError, or nil if none found.
func (m *CMDB_ROLES_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_ROLES_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_ROLES_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMDB_ROLES_LIST_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_ROLES_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_ROLES_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_ROLES_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_ROLES_LIST_RequestMultiError) AllErrors() []error { return m }

// CMDB_ROLES_LIST_RequestValidationError is the validation error returned by
// CMDB_ROLES_LIST_Request.Validate if the designated constraints aren't met.
type CMDB_ROLES_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_ROLES_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_ROLES_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_ROLES_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_ROLES_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_ROLES_LIST_RequestValidationError) ErrorName() string {
	return "CMDB_ROLES_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_ROLES_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_ROLES_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_ROLES_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_ROLES_LIST_RequestValidationError{}

// Validate checks the field values on CertificateCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateCreateRequestMultiError, or nil if none found.
func (m *CertificateCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Desc

	if all {
		switch v := interface{}(m.GetAndroidInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateCreateRequestValidationError{
				field:  "AndroidInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIOSInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIOSInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateCreateRequestValidationError{
				field:  "IOSInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateCreateRequestValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateCreateRequestValidationError{
				field:  "MessageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateCreateRequestMultiError(errors)
	}

	return nil
}

// CertificateCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CertificateCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CertificateCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateCreateRequestMultiError) AllErrors() []error { return m }

// CertificateCreateRequestValidationError is the validation error returned by
// CertificateCreateRequest.Validate if the designated constraints aren't met.
type CertificateCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateCreateRequestValidationError) ErrorName() string {
	return "CertificateCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateCreateRequestValidationError{}

// Validate checks the field values on CertificateCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateCreateResponseMultiError, or nil if none found.
func (m *CertificateCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateCreateResponseMultiError(errors)
	}

	return nil
}

// CertificateCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CertificateCreateResponse.ValidateAll() if the
// designated constraints aren't met.
type CertificateCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateCreateResponseMultiError) AllErrors() []error { return m }

// CertificateCreateResponseValidationError is the validation error returned by
// CertificateCreateResponse.Validate if the designated constraints aren't met.
type CertificateCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateCreateResponseValidationError) ErrorName() string {
	return "CertificateCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateCreateResponseValidationError{}

// Validate checks the field values on CertificateDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CertificateDTOMultiError,
// or nil if none found.
func (m *CertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OrgID

	// no validation rules for Creator

	// no validation rules for Operator

	// no validation rules for Desc

	if all {
		switch v := interface{}(m.GetAndroidInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "AndroidInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDTOValidationError{
				field:  "AndroidInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIOSInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "IOSInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIOSInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDTOValidationError{
				field:  "IOSInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "MessageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDTOValidationError{
				field:  "MessageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateDTOMultiError(errors)
	}

	return nil
}

// CertificateDTOMultiError is an error wrapping multiple validation errors
// returned by CertificateDTO.ValidateAll() if the designated constraints
// aren't met.
type CertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateDTOMultiError) AllErrors() []error { return m }

// CertificateDTOValidationError is the validation error returned by
// CertificateDTO.Validate if the designated constraints aren't met.
type CertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateDTOValidationError) ErrorName() string { return "CertificateDTOValidationError" }

// Error satisfies the builtin error interface
func (e CertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateDTOValidationError{}

// Validate checks the field values on CertificateDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateDeleteResponseMultiError, or nil if none found.
func (m *CertificateDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDeleteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateDeleteResponseMultiError(errors)
	}

	return nil
}

// CertificateDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by CertificateDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type CertificateDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateDeleteResponseMultiError) AllErrors() []error { return m }

// CertificateDeleteResponseValidationError is the validation error returned by
// CertificateDeleteResponse.Validate if the designated constraints aren't met.
type CertificateDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateDeleteResponseValidationError) ErrorName() string {
	return "CertificateDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateDeleteResponseValidationError{}

// Validate checks the field values on CertificateDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateDetailResponseMultiError, or nil if none found.
func (m *CertificateDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificateDTO()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDetailResponseValidationError{
					field:  "CertificateDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDetailResponseValidationError{
					field:  "CertificateDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificateDTO()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDetailResponseValidationError{
				field:  "CertificateDTO",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateDetailResponseMultiError(errors)
	}

	return nil
}

// CertificateDetailResponseMultiError is an error wrapping multiple validation
// errors returned by CertificateDetailResponse.ValidateAll() if the
// designated constraints aren't met.
type CertificateDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateDetailResponseMultiError) AllErrors() []error { return m }

// CertificateDetailResponseValidationError is the validation error returned by
// CertificateDetailResponse.Validate if the designated constraints aren't met.
type CertificateDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateDetailResponseValidationError) ErrorName() string {
	return "CertificateDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateDetailResponseValidationError{}

// Validate checks the field values on CertificateFileDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateFileDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateFileDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateFileDTOMultiError, or nil if none found.
func (m *CertificateFileDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateFileDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for FileName

	if len(errors) > 0 {
		return CertificateFileDTOMultiError(errors)
	}

	return nil
}

// CertificateFileDTOMultiError is an error wrapping multiple validation errors
// returned by CertificateFileDTO.ValidateAll() if the designated constraints
// aren't met.
type CertificateFileDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateFileDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateFileDTOMultiError) AllErrors() []error { return m }

// CertificateFileDTOValidationError is the validation error returned by
// CertificateFileDTO.Validate if the designated constraints aren't met.
type CertificateFileDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateFileDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateFileDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateFileDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateFileDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateFileDTOValidationError) ErrorName() string {
	return "CertificateFileDTOValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateFileDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateFileDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateFileDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateFileDTOValidationError{}

// Validate checks the field values on CertificateListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateListRequestMultiError, or nil if none found.
func (m *CertificateListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Query

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return CertificateListRequestMultiError(errors)
	}

	return nil
}

// CertificateListRequestMultiError is an error wrapping multiple validation
// errors returned by CertificateListRequest.ValidateAll() if the designated
// constraints aren't met.
type CertificateListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateListRequestMultiError) AllErrors() []error { return m }

// CertificateListRequestValidationError is the validation error returned by
// CertificateListRequest.Validate if the designated constraints aren't met.
type CertificateListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateListRequestValidationError) ErrorName() string {
	return "CertificateListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateListRequestValidationError{}

// Validate checks the field values on CertificateListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateListResponseMultiError, or nil if none found.
func (m *CertificateListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateListResponseMultiError(errors)
	}

	return nil
}

// CertificateListResponseMultiError is an error wrapping multiple validation
// errors returned by CertificateListResponse.ValidateAll() if the designated
// constraints aren't met.
type CertificateListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateListResponseMultiError) AllErrors() []error { return m }

// CertificateListResponseValidationError is the validation error returned by
// CertificateListResponse.Validate if the designated constraints aren't met.
type CertificateListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateListResponseValidationError) ErrorName() string {
	return "CertificateListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateListResponseValidationError{}

// Validate checks the field values on CertificateQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateQuoteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateQuoteRequestMultiError, or nil if none found.
func (m *CertificateQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificateID

	// no validation rules for AppID

	if len(errors) > 0 {
		return CertificateQuoteRequestMultiError(errors)
	}

	return nil
}

// CertificateQuoteRequestMultiError is an error wrapping multiple validation
// errors returned by CertificateQuoteRequest.ValidateAll() if the designated
// constraints aren't met.
type CertificateQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateQuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateQuoteRequestMultiError) AllErrors() []error { return m }

// CertificateQuoteRequestValidationError is the validation error returned by
// CertificateQuoteRequest.Validate if the designated constraints aren't met.
type CertificateQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateQuoteRequestValidationError) ErrorName() string {
	return "CertificateQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateQuoteRequestValidationError{}

// Validate checks the field values on CertificateUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateUpdateRequestMultiError, or nil if none found.
func (m *CertificateUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for Desc

	// no validation rules for Filename

	// no validation rules for CertificateID

	if len(errors) > 0 {
		return CertificateUpdateRequestMultiError(errors)
	}

	return nil
}

// CertificateUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CertificateUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CertificateUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateUpdateRequestMultiError) AllErrors() []error { return m }

// CertificateUpdateRequestValidationError is the validation error returned by
// CertificateUpdateRequest.Validate if the designated constraints aren't met.
type CertificateUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateUpdateRequestValidationError) ErrorName() string {
	return "CertificateUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateUpdateRequestValidationError{}

// Validate checks the field values on CertificateUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificateUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateUpdateResponseMultiError, or nil if none found.
func (m *CertificateUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateUpdateResponseMultiError(errors)
	}

	return nil
}

// CertificateUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CertificateUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type CertificateUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateUpdateResponseMultiError) AllErrors() []error { return m }

// CertificateUpdateResponseValidationError is the validation error returned by
// CertificateUpdateResponse.Validate if the designated constraints aren't met.
type CertificateUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateUpdateResponseValidationError) ErrorName() string {
	return "CertificateUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateUpdateResponseValidationError{}

// Validate checks the field values on CodeCoverageUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CodeCoverageUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodeCoverageUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CodeCoverageUpdateRequestMultiError, or nil if none found.
func (m *CodeCoverageUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CodeCoverageUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Status

	// no validation rules for Msg

	// no validation rules for ReportXmlUUID

	// no validation rules for ReportTarUrl

	if len(errors) > 0 {
		return CodeCoverageUpdateRequestMultiError(errors)
	}

	return nil
}

// CodeCoverageUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CodeCoverageUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type CodeCoverageUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeCoverageUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeCoverageUpdateRequestMultiError) AllErrors() []error { return m }

// CodeCoverageUpdateRequestValidationError is the validation error returned by
// CodeCoverageUpdateRequest.Validate if the designated constraints aren't met.
type CodeCoverageUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeCoverageUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeCoverageUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeCoverageUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeCoverageUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeCoverageUpdateRequestValidationError) ErrorName() string {
	return "CodeCoverageUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CodeCoverageUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeCoverageUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeCoverageUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeCoverageUpdateRequestValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentID

	// no validation rules for TicketID

	// no validation rules for CommentType

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetIRComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "IRComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "IRComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIRComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "IRComment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on CommentCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentCreateRequestMultiError, or nil if none found.
func (m *CommentCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	// no validation rules for CommentType

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetIRComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentCreateRequestValidationError{
					field:  "IRComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentCreateRequestValidationError{
					field:  "IRComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIRComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentCreateRequestValidationError{
				field:  "IRComment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return CommentCreateRequestMultiError(errors)
	}

	return nil
}

// CommentCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CommentCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentCreateRequestMultiError) AllErrors() []error { return m }

// CommentCreateRequestValidationError is the validation error returned by
// CommentCreateRequest.Validate if the designated constraints aren't met.
type CommentCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentCreateRequestValidationError) ErrorName() string {
	return "CommentCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentCreateRequestValidationError{}

// Validate checks the field values on CommentCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentCreateResponseMultiError, or nil if none found.
func (m *CommentCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CommentCreateResponseMultiError(errors)
	}

	return nil
}

// CommentCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CommentCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentCreateResponseMultiError) AllErrors() []error { return m }

// CommentCreateResponseValidationError is the validation error returned by
// CommentCreateResponse.Validate if the designated constraints aren't met.
type CommentCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentCreateResponseValidationError) ErrorName() string {
	return "CommentCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentCreateResponseValidationError{}

// Validate checks the field values on CommentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListRequestMultiError, or nil if none found.
func (m *CommentListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if len(errors) > 0 {
		return CommentListRequestMultiError(errors)
	}

	return nil
}

// CommentListRequestMultiError is an error wrapping multiple validation errors
// returned by CommentListRequest.ValidateAll() if the designated constraints
// aren't met.
type CommentListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListRequestMultiError) AllErrors() []error { return m }

// CommentListRequestValidationError is the validation error returned by
// CommentListRequest.Validate if the designated constraints aren't met.
type CommentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListRequestValidationError) ErrorName() string {
	return "CommentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListRequestValidationError{}

// Validate checks the field values on CommentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListResponseMultiError, or nil if none found.
func (m *CommentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentListResponseMultiError(errors)
	}

	return nil
}

// CommentListResponseMultiError is an error wrapping multiple validation
// errors returned by CommentListResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListResponseMultiError) AllErrors() []error { return m }

// CommentListResponseValidationError is the validation error returned by
// CommentListResponse.Validate if the designated constraints aren't met.
type CommentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListResponseValidationError) ErrorName() string {
	return "CommentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListResponseValidationError{}

// Validate checks the field values on CommentListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListResponseDataMultiError, or nil if none found.
func (m *CommentListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentListResponseDataValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentListResponseDataValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentListResponseDataValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentListResponseDataMultiError(errors)
	}

	return nil
}

// CommentListResponseDataMultiError is an error wrapping multiple validation
// errors returned by CommentListResponseData.ValidateAll() if the designated
// constraints aren't met.
type CommentListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListResponseDataMultiError) AllErrors() []error { return m }

// CommentListResponseDataValidationError is the validation error returned by
// CommentListResponseData.Validate if the designated constraints aren't met.
type CommentListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListResponseDataValidationError) ErrorName() string {
	return "CommentListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e CommentListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListResponseDataValidationError{}

// Validate checks the field values on CommentUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentUpdateRequestMultiError, or nil if none found.
func (m *CommentUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentID

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentUpdateRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentUpdateRequestMultiError(errors)
	}

	return nil
}

// CommentUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CommentUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentUpdateRequestMultiError) AllErrors() []error { return m }

// CommentUpdateRequestValidationError is the validation error returned by
// CommentUpdateRequest.Validate if the designated constraints aren't met.
type CommentUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentUpdateRequestValidationError) ErrorName() string {
	return "CommentUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentUpdateRequestValidationError{}

// Validate checks the field values on CommentUpdateRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentUpdateRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentUpdateRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentUpdateRequestBodyMultiError, or nil if none found.
func (m *CommentUpdateRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentUpdateRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return CommentUpdateRequestBodyMultiError(errors)
	}

	return nil
}

// CommentUpdateRequestBodyMultiError is an error wrapping multiple validation
// errors returned by CommentUpdateRequestBody.ValidateAll() if the designated
// constraints aren't met.
type CommentUpdateRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentUpdateRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentUpdateRequestBodyMultiError) AllErrors() []error { return m }

// CommentUpdateRequestBodyValidationError is the validation error returned by
// CommentUpdateRequestBody.Validate if the designated constraints aren't met.
type CommentUpdateRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentUpdateRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentUpdateRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentUpdateRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentUpdateRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentUpdateRequestBodyValidationError) ErrorName() string {
	return "CommentUpdateRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CommentUpdateRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentUpdateRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentUpdateRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentUpdateRequestBodyValidationError{}

// Validate checks the field values on CommentUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentUpdateResponseMultiError, or nil if none found.
func (m *CommentUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CommentUpdateResponseMultiError(errors)
	}

	return nil
}

// CommentUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CommentUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentUpdateResponseMultiError) AllErrors() []error { return m }

// CommentUpdateResponseValidationError is the validation error returned by
// CommentUpdateResponse.Validate if the designated constraints aren't met.
type CommentUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentUpdateResponseValidationError) ErrorName() string {
	return "CommentUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentUpdateResponseValidationError{}

// Validate checks the field values on CreateAPIAssetVersionBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAPIAssetVersionBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAPIAssetVersionBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAPIAssetVersionBodyMultiError, or nil if none found.
func (m *CreateAPIAssetVersionBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAPIAssetVersionBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetID

	// no validation rules for Major

	// no validation rules for Minor

	// no validation rules for Patch

	// no validation rules for SpecProtocol

	// no validation rules for SpecDiceFileUUID

	if len(errors) > 0 {
		return CreateAPIAssetVersionBodyMultiError(errors)
	}

	return nil
}

// CreateAPIAssetVersionBodyMultiError is an error wrapping multiple validation
// errors returned by CreateAPIAssetVersionBody.ValidateAll() if the
// designated constraints aren't met.
type CreateAPIAssetVersionBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAPIAssetVersionBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAPIAssetVersionBodyMultiError) AllErrors() []error { return m }

// CreateAPIAssetVersionBodyValidationError is the validation error returned by
// CreateAPIAssetVersionBody.Validate if the designated constraints aren't met.
type CreateAPIAssetVersionBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAPIAssetVersionBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAPIAssetVersionBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAPIAssetVersionBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAPIAssetVersionBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAPIAssetVersionBodyValidationError) ErrorName() string {
	return "CreateAPIAssetVersionBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAPIAssetVersionBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAPIAssetVersionBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAPIAssetVersionBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAPIAssetVersionBodyValidationError{}

// Validate checks the field values on CreateAccessReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessReqMultiError, or nil if none found.
func (m *CreateAccessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAccessReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAccessReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAccessReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAccessReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAccessReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAccessReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAccessReqMultiError(errors)
	}

	return nil
}

// CreateAccessReqMultiError is an error wrapping multiple validation errors
// returned by CreateAccessReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAccessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessReqMultiError) AllErrors() []error { return m }

// CreateAccessReqValidationError is the validation error returned by
// CreateAccessReq.Validate if the designated constraints aren't met.
type CreateAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessReqValidationError) ErrorName() string { return "CreateAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessReqValidationError{}

// Validate checks the field values on CreateBranchRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBranchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBranchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBranchRuleRequestMultiError, or nil if none found.
func (m *CreateBranchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBranchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Rule

	// no validation rules for IsProtect

	// no validation rules for NeedApproval

	// no validation rules for IsTriggerPipeline

	// no validation rules for Workspace

	// no validation rules for ArtifactWorkspace

	// no validation rules for Desc

	if len(errors) > 0 {
		return CreateBranchRuleRequestMultiError(errors)
	}

	return nil
}

// CreateBranchRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBranchRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBranchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBranchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBranchRuleRequestMultiError) AllErrors() []error { return m }

// CreateBranchRuleRequestValidationError is the validation error returned by
// CreateBranchRuleRequest.Validate if the designated constraints aren't met.
type CreateBranchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBranchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBranchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBranchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBranchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBranchRuleRequestValidationError) ErrorName() string {
	return "CreateBranchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBranchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBranchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBranchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBranchRuleRequestValidationError{}

// Validate checks the field values on CreateBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBranchRuleResponseMultiError, or nil if none found.
func (m *CreateBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBranchRuleResponseMultiError(errors)
	}

	return nil
}

// CreateBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBranchRuleResponseMultiError) AllErrors() []error { return m }

// CreateBranchRuleResponseValidationError is the validation error returned by
// CreateBranchRuleResponse.Validate if the designated constraints aren't met.
type CreateBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBranchRuleResponseValidationError) ErrorName() string {
	return "CreateBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBranchRuleResponseValidationError{}

// Validate checks the field values on CreateClientReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateClientReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientReqMultiError, or nil if none found.
func (m *CreateClientReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClientReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateClientReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateClientReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClientReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateClientReqMultiError(errors)
	}

	return nil
}

// CreateClientReqMultiError is an error wrapping multiple validation errors
// returned by CreateClientReq.ValidateAll() if the designated constraints
// aren't met.
type CreateClientReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientReqMultiError) AllErrors() []error { return m }

// CreateClientReqValidationError is the validation error returned by
// CreateClientReq.Validate if the designated constraints aren't met.
type CreateClientReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientReqValidationError) ErrorName() string { return "CreateClientReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateClientReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientReqValidationError{}

// Validate checks the field values on CreateContractReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateContractReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContractReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContractReqMultiError, or nil if none found.
func (m *CreateContractReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContractReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContractReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContractReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContractReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContractReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateContractReqMultiError(errors)
	}

	return nil
}

// CreateContractReqMultiError is an error wrapping multiple validation errors
// returned by CreateContractReq.ValidateAll() if the designated constraints
// aren't met.
type CreateContractReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContractReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContractReqMultiError) AllErrors() []error { return m }

// CreateContractReqValidationError is the validation error returned by
// CreateContractReq.Validate if the designated constraints aren't met.
type CreateContractReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContractReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContractReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContractReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContractReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContractReqValidationError) ErrorName() string {
	return "CreateContractReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContractReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContractReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContractReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContractReqValidationError{}

// Validate checks the field values on CreateInstantiationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstantiationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstantiationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstantiationReqMultiError, or nil if none found.
func (m *CreateInstantiationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstantiationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for Minor

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstantiationReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstantiationReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateInstantiationReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstantiationReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateInstantiationReqMultiError(errors)
	}

	return nil
}

// CreateInstantiationReqMultiError is an error wrapping multiple validation
// errors returned by CreateInstantiationReq.ValidateAll() if the designated
// constraints aren't met.
type CreateInstantiationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstantiationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstantiationReqMultiError) AllErrors() []error { return m }

// CreateInstantiationReqValidationError is the validation error returned by
// CreateInstantiationReq.Validate if the designated constraints aren't met.
type CreateInstantiationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstantiationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstantiationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstantiationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstantiationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstantiationReqValidationError) ErrorName() string {
	return "CreateInstantiationReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstantiationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstantiationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstantiationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstantiationReqValidationError{}

// Validate checks the field values on CreateSLAReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSLAReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSLAReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateSLAReqMultiError, or
// nil if none found.
func (m *CreateSLAReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSLAReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSLAReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSLAReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSLAReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSLAReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSLAReqMultiError(errors)
	}

	return nil
}

// CreateSLAReqMultiError is an error wrapping multiple validation errors
// returned by CreateSLAReq.ValidateAll() if the designated constraints aren't met.
type CreateSLAReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSLAReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSLAReqMultiError) AllErrors() []error { return m }

// CreateSLAReqValidationError is the validation error returned by
// CreateSLAReq.Validate if the designated constraints aren't met.
type CreateSLAReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSLAReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSLAReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSLAReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSLAReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSLAReqValidationError) ErrorName() string { return "CreateSLAReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateSLAReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSLAReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSLAReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSLAReqValidationError{}

// Validate checks the field values on DashboardSpotLogData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardSpotLogData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardSpotLogData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardSpotLogDataMultiError, or nil if none found.
func (m *DashboardSpotLogData) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardSpotLogData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardSpotLogDataValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardSpotLogDataValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardSpotLogDataValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DashboardSpotLogDataMultiError(errors)
	}

	return nil
}

// DashboardSpotLogDataMultiError is an error wrapping multiple validation
// errors returned by DashboardSpotLogData.ValidateAll() if the designated
// constraints aren't met.
type DashboardSpotLogDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardSpotLogDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardSpotLogDataMultiError) AllErrors() []error { return m }

// DashboardSpotLogDataValidationError is the validation error returned by
// DashboardSpotLogData.Validate if the designated constraints aren't met.
type DashboardSpotLogDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardSpotLogDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardSpotLogDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardSpotLogDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardSpotLogDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardSpotLogDataValidationError) ErrorName() string {
	return "DashboardSpotLogDataValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardSpotLogDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardSpotLogData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardSpotLogDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardSpotLogDataValidationError{}

// Validate checks the field values on DashboardSpotLogLine with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardSpotLogLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardSpotLogLine with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardSpotLogLineMultiError, or nil if none found.
func (m *DashboardSpotLogLine) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardSpotLogLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Source

	// no validation rules for Stream

	// no validation rules for TimeStamp

	// no validation rules for Content

	// no validation rules for Offset

	// no validation rules for Level

	// no validation rules for RequestID

	if len(errors) > 0 {
		return DashboardSpotLogLineMultiError(errors)
	}

	return nil
}

// DashboardSpotLogLineMultiError is an error wrapping multiple validation
// errors returned by DashboardSpotLogLine.ValidateAll() if the designated
// constraints aren't met.
type DashboardSpotLogLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardSpotLogLineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardSpotLogLineMultiError) AllErrors() []error { return m }

// DashboardSpotLogLineValidationError is the validation error returned by
// DashboardSpotLogLine.Validate if the designated constraints aren't met.
type DashboardSpotLogLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardSpotLogLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardSpotLogLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardSpotLogLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardSpotLogLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardSpotLogLineValidationError) ErrorName() string {
	return "DashboardSpotLogLineValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardSpotLogLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardSpotLogLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardSpotLogLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardSpotLogLineValidationError{}

// Validate checks the field values on DashboardSpotLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardSpotLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardSpotLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardSpotLogResponseMultiError, or nil if none found.
func (m *DashboardSpotLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardSpotLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DashboardSpotLogResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DashboardSpotLogResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DashboardSpotLogResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DashboardSpotLogResponseMultiError(errors)
	}

	return nil
}

// DashboardSpotLogResponseMultiError is an error wrapping multiple validation
// errors returned by DashboardSpotLogResponse.ValidateAll() if the designated
// constraints aren't met.
type DashboardSpotLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardSpotLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardSpotLogResponseMultiError) AllErrors() []error { return m }

// DashboardSpotLogResponseValidationError is the validation error returned by
// DashboardSpotLogResponse.Validate if the designated constraints aren't met.
type DashboardSpotLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardSpotLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardSpotLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardSpotLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardSpotLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardSpotLogResponseValidationError) ErrorName() string {
	return "DashboardSpotLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardSpotLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardSpotLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardSpotLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardSpotLogResponseValidationError{}

// Validate checks the field values on DeleteAPIAssetVersion_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAPIAssetVersion_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAPIAssetVersion_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAPIAssetVersion_RequestMultiError, or nil if none found.
func (m *DeleteAPIAssetVersion_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAPIAssetVersion_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetID

	// no validation rules for VersionID

	if len(errors) > 0 {
		return DeleteAPIAssetVersion_RequestMultiError(errors)
	}

	return nil
}

// DeleteAPIAssetVersion_RequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAPIAssetVersion_Request.ValidateAll()
// if the designated constraints aren't met.
type DeleteAPIAssetVersion_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAPIAssetVersion_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAPIAssetVersion_RequestMultiError) AllErrors() []error { return m }

// DeleteAPIAssetVersion_RequestValidationError is the validation error
// returned by DeleteAPIAssetVersion_Request.Validate if the designated
// constraints aren't met.
type DeleteAPIAssetVersion_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAPIAssetVersion_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAPIAssetVersion_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAPIAssetVersion_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAPIAssetVersion_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAPIAssetVersion_RequestValidationError) ErrorName() string {
	return "DeleteAPIAssetVersion_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAPIAssetVersion_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAPIAssetVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAPIAssetVersion_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAPIAssetVersion_RequestValidationError{}

// Validate checks the field values on DeleteAPIAssets_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAPIAssets_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAPIAssets_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAPIAssets_RequestMultiError, or nil if none found.
func (m *DeleteAPIAssets_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAPIAssets_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetID

	if len(errors) > 0 {
		return DeleteAPIAssets_RequestMultiError(errors)
	}

	return nil
}

// DeleteAPIAssets_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAPIAssets_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteAPIAssets_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAPIAssets_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAPIAssets_RequestMultiError) AllErrors() []error { return m }

// DeleteAPIAssets_RequestValidationError is the validation error returned by
// DeleteAPIAssets_Request.Validate if the designated constraints aren't met.
type DeleteAPIAssets_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAPIAssets_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAPIAssets_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAPIAssets_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAPIAssets_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAPIAssets_RequestValidationError) ErrorName() string {
	return "DeleteAPIAssets_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAPIAssets_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAPIAssets_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAPIAssets_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAPIAssets_RequestValidationError{}

// Validate checks the field values on DeleteAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccess_RequestMultiError, or nil if none found.
func (m *DeleteAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessID

	if len(errors) > 0 {
		return DeleteAccess_RequestMultiError(errors)
	}

	return nil
}

// DeleteAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccess_RequestMultiError) AllErrors() []error { return m }

// DeleteAccess_RequestValidationError is the validation error returned by
// DeleteAccess_Request.Validate if the designated constraints aren't met.
type DeleteAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccess_RequestValidationError) ErrorName() string {
	return "DeleteAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccess_RequestValidationError{}

// Validate checks the field values on DeleteBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBranchRuleResponseMultiError, or nil if none found.
func (m *DeleteBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteBranchRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBranchRuleResponseMultiError) AllErrors() []error { return m }

// DeleteBranchRuleResponseValidationError is the validation error returned by
// DeleteBranchRuleResponse.Validate if the designated constraints aren't met.
type DeleteBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBranchRuleResponseValidationError) ErrorName() string {
	return "DeleteBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBranchRuleResponseValidationError{}

// Validate checks the field values on DeleteClient_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClient_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClient_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClient_RequestMultiError, or nil if none found.
func (m *DeleteClient_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClient_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	if len(errors) > 0 {
		return DeleteClient_RequestMultiError(errors)
	}

	return nil
}

// DeleteClient_RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClient_Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteClient_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClient_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClient_RequestMultiError) AllErrors() []error { return m }

// DeleteClient_RequestValidationError is the validation error returned by
// DeleteClient_Request.Validate if the designated constraints aren't met.
type DeleteClient_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClient_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClient_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClient_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClient_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClient_RequestValidationError) ErrorName() string {
	return "DeleteClient_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClient_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClient_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClient_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClient_RequestValidationError{}

// Validate checks the field values on DeleteSLAReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteSLAReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSLAReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteSLAReqMultiError, or
// nil if none found.
func (m *DeleteSLAReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSLAReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for SlaID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteSLAReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteSLAReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteSLAReqMultiError(errors)
	}

	return nil
}

// DeleteSLAReqMultiError is an error wrapping multiple validation errors
// returned by DeleteSLAReq.ValidateAll() if the designated constraints aren't met.
type DeleteSLAReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSLAReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSLAReqMultiError) AllErrors() []error { return m }

// DeleteSLAReqValidationError is the validation error returned by
// DeleteSLAReq.Validate if the designated constraints aren't met.
type DeleteSLAReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSLAReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSLAReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSLAReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSLAReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSLAReqValidationError) ErrorName() string { return "DeleteSLAReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSLAReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSLAReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSLAReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSLAReqValidationError{}

// Validate checks the field values on DownloadSpecTextReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadSpecTextReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadSpecTextReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadSpecTextReqMultiError, or nil if none found.
func (m *DownloadSpecTextReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadSpecTextReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for VersionID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DownloadSpecTextReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DownloadSpecTextReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DownloadSpecTextReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DownloadSpecTextReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DownloadSpecTextReqMultiError(errors)
	}

	return nil
}

// DownloadSpecTextReqMultiError is an error wrapping multiple validation
// errors returned by DownloadSpecTextReq.ValidateAll() if the designated
// constraints aren't met.
type DownloadSpecTextReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadSpecTextReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadSpecTextReqMultiError) AllErrors() []error { return m }

// DownloadSpecTextReqValidationError is the validation error returned by
// DownloadSpecTextReq.Validate if the designated constraints aren't met.
type DownloadSpecTextReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadSpecTextReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadSpecTextReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadSpecTextReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadSpecTextReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadSpecTextReqValidationError) ErrorName() string {
	return "DownloadSpecTextReqValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadSpecTextReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadSpecTextReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadSpecTextReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadSpecTextReqValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetCtx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "Ctx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on ExportProjectPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportProjectPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportProjectPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportProjectPackageRequestMultiError, or nil if none found.
func (m *ExportProjectPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportProjectPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProjectPackageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportProjectPackageRequestValidationError{
					field:  "ProjectPackageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportProjectPackageRequestValidationError{
					field:  "ProjectPackageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPackageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportProjectPackageRequestValidationError{
				field:  "ProjectPackageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExportProjectPackageRequestValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExportProjectPackageRequestValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExportProjectPackageRequestValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrgID

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ExportProjectPackageRequestMultiError(errors)
	}

	return nil
}

// ExportProjectPackageRequestMultiError is an error wrapping multiple
// validation errors returned by ExportProjectPackageRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportProjectPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportProjectPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportProjectPackageRequestMultiError) AllErrors() []error { return m }

// ExportProjectPackageRequestValidationError is the validation error returned
// by ExportProjectPackageRequest.Validate if the designated constraints
// aren't met.
type ExportProjectPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportProjectPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportProjectPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportProjectPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportProjectPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportProjectPackageRequestValidationError) ErrorName() string {
	return "ExportProjectPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportProjectPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportProjectPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportProjectPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportProjectPackageRequestValidationError{}

// Validate checks the field values on ExportProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportProjectTemplateRequestMultiError, or nil if none found.
func (m *ExportProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return ExportProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// ExportProjectTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by ExportProjectTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportProjectTemplateRequestMultiError) AllErrors() []error { return m }

// ExportProjectTemplateRequestValidationError is the validation error returned
// by ExportProjectTemplateRequest.Validate if the designated constraints
// aren't met.
type ExportProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportProjectTemplateRequestValidationError) ErrorName() string {
	return "ExportProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportProjectTemplateRequestValidationError{}

// Validate checks the field values on FileTreeDeleteNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileTreeDeleteNode_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTreeDeleteNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTreeDeleteNode_RequestMultiError, or nil if none found.
func (m *FileTreeDeleteNode_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTreeDeleteNode_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TreeName

	// no validation rules for Inode

	if len(errors) > 0 {
		return FileTreeDeleteNode_RequestMultiError(errors)
	}

	return nil
}

// FileTreeDeleteNode_RequestMultiError is an error wrapping multiple
// validation errors returned by FileTreeDeleteNode_Request.ValidateAll() if
// the designated constraints aren't met.
type FileTreeDeleteNode_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTreeDeleteNode_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTreeDeleteNode_RequestMultiError) AllErrors() []error { return m }

// FileTreeDeleteNode_RequestValidationError is the validation error returned
// by FileTreeDeleteNode_Request.Validate if the designated constraints aren't met.
type FileTreeDeleteNode_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTreeDeleteNode_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTreeDeleteNode_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTreeDeleteNode_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTreeDeleteNode_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTreeDeleteNode_RequestValidationError) ErrorName() string {
	return "FileTreeDeleteNode_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileTreeDeleteNode_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTreeDeleteNode_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTreeDeleteNode_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTreeDeleteNode_RequestValidationError{}

// Validate checks the field values on FileTreeGetNode_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileTreeGetNode_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTreeGetNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTreeGetNode_RequestMultiError, or nil if none found.
func (m *FileTreeGetNode_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTreeGetNode_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TreeName

	// no validation rules for Inode

	if len(errors) > 0 {
		return FileTreeGetNode_RequestMultiError(errors)
	}

	return nil
}

// FileTreeGetNode_RequestMultiError is an error wrapping multiple validation
// errors returned by FileTreeGetNode_Request.ValidateAll() if the designated
// constraints aren't met.
type FileTreeGetNode_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTreeGetNode_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTreeGetNode_RequestMultiError) AllErrors() []error { return m }

// FileTreeGetNode_RequestValidationError is the validation error returned by
// FileTreeGetNode_Request.Validate if the designated constraints aren't met.
type FileTreeGetNode_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTreeGetNode_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTreeGetNode_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTreeGetNode_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTreeGetNode_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTreeGetNode_RequestValidationError) ErrorName() string {
	return "FileTreeGetNode_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileTreeGetNode_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTreeGetNode_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTreeGetNode_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTreeGetNode_RequestValidationError{}

// Validate checks the field values on FileTreeListNodes_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileTreeListNodes_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTreeListNodes_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTreeListNodes_RequestMultiError, or nil if none found.
func (m *FileTreeListNodes_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTreeListNodes_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TreeName

	if len(errors) > 0 {
		return FileTreeListNodes_RequestMultiError(errors)
	}

	return nil
}

// FileTreeListNodes_RequestMultiError is an error wrapping multiple validation
// errors returned by FileTreeListNodes_Request.ValidateAll() if the
// designated constraints aren't met.
type FileTreeListNodes_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTreeListNodes_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTreeListNodes_RequestMultiError) AllErrors() []error { return m }

// FileTreeListNodes_RequestValidationError is the validation error returned by
// FileTreeListNodes_Request.Validate if the designated constraints aren't met.
type FileTreeListNodes_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTreeListNodes_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTreeListNodes_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTreeListNodes_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTreeListNodes_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTreeListNodes_RequestValidationError) ErrorName() string {
	return "FileTreeListNodes_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileTreeListNodes_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTreeListNodes_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTreeListNodes_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTreeListNodes_RequestValidationError{}

// Validate checks the field values on FileTreeMvCpNode_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileTreeMvCpNode_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTreeMvCpNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTreeMvCpNode_RequestMultiError, or nil if none found.
func (m *FileTreeMvCpNode_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTreeMvCpNode_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TreeName

	// no validation rules for Inode

	// no validation rules for Action

	if len(errors) > 0 {
		return FileTreeMvCpNode_RequestMultiError(errors)
	}

	return nil
}

// FileTreeMvCpNode_RequestMultiError is an error wrapping multiple validation
// errors returned by FileTreeMvCpNode_Request.ValidateAll() if the designated
// constraints aren't met.
type FileTreeMvCpNode_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTreeMvCpNode_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTreeMvCpNode_RequestMultiError) AllErrors() []error { return m }

// FileTreeMvCpNode_RequestValidationError is the validation error returned by
// FileTreeMvCpNode_Request.Validate if the designated constraints aren't met.
type FileTreeMvCpNode_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTreeMvCpNode_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTreeMvCpNode_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTreeMvCpNode_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTreeMvCpNode_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTreeMvCpNode_RequestValidationError) ErrorName() string {
	return "FileTreeMvCpNode_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileTreeMvCpNode_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTreeMvCpNode_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTreeMvCpNode_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTreeMvCpNode_RequestValidationError{}

// Validate checks the field values on FileTreeUpdateNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileTreeUpdateNode_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTreeUpdateNode_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTreeUpdateNode_RequestMultiError, or nil if none found.
func (m *FileTreeUpdateNode_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTreeUpdateNode_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TreeName

	// no validation rules for Inode

	if len(errors) > 0 {
		return FileTreeUpdateNode_RequestMultiError(errors)
	}

	return nil
}

// FileTreeUpdateNode_RequestMultiError is an error wrapping multiple
// validation errors returned by FileTreeUpdateNode_Request.ValidateAll() if
// the designated constraints aren't met.
type FileTreeUpdateNode_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTreeUpdateNode_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTreeUpdateNode_RequestMultiError) AllErrors() []error { return m }

// FileTreeUpdateNode_RequestValidationError is the validation error returned
// by FileTreeUpdateNode_Request.Validate if the designated constraints aren't met.
type FileTreeUpdateNode_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTreeUpdateNode_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTreeUpdateNode_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTreeUpdateNode_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTreeUpdateNode_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTreeUpdateNode_RequestValidationError) ErrorName() string {
	return "FileTreeUpdateNode_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileTreeUpdateNode_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTreeUpdateNode_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTreeUpdateNode_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTreeUpdateNode_RequestValidationError{}

// Validate checks the field values on GetAPIAssetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAPIAssetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAPIAssetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAPIAssetReqMultiError,
// or nil if none found.
func (m *GetAPIAssetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAPIAssetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAPIAssetReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAPIAssetReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAPIAssetReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAPIAssetReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAPIAssetReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAPIAssetReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAPIAssetReqMultiError(errors)
	}

	return nil
}

// GetAPIAssetReqMultiError is an error wrapping multiple validation errors
// returned by GetAPIAssetReq.ValidateAll() if the designated constraints
// aren't met.
type GetAPIAssetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAPIAssetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAPIAssetReqMultiError) AllErrors() []error { return m }

// GetAPIAssetReqValidationError is the validation error returned by
// GetAPIAssetReq.Validate if the designated constraints aren't met.
type GetAPIAssetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAPIAssetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAPIAssetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAPIAssetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAPIAssetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAPIAssetReqValidationError) ErrorName() string { return "GetAPIAssetReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAPIAssetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAPIAssetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAPIAssetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAPIAssetReqValidationError{}

// Validate checks the field values on GetAPIAssetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAPIAssetVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAPIAssetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAPIAssetVersionReqMultiError, or nil if none found.
func (m *GetAPIAssetVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAPIAssetVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for VersionID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAPIAssetVersionReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAPIAssetVersionReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAPIAssetVersionReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAPIAssetVersionReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAPIAssetVersionReqMultiError(errors)
	}

	return nil
}

// GetAPIAssetVersionReqMultiError is an error wrapping multiple validation
// errors returned by GetAPIAssetVersionReq.ValidateAll() if the designated
// constraints aren't met.
type GetAPIAssetVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAPIAssetVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAPIAssetVersionReqMultiError) AllErrors() []error { return m }

// GetAPIAssetVersionReqValidationError is the validation error returned by
// GetAPIAssetVersionReq.Validate if the designated constraints aren't met.
type GetAPIAssetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAPIAssetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAPIAssetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAPIAssetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAPIAssetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAPIAssetVersionReqValidationError) ErrorName() string {
	return "GetAPIAssetVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAPIAssetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAPIAssetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAPIAssetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAPIAssetVersionReqValidationError{}

// Validate checks the field values on GetAccess_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccess_RequestMultiError, or nil if none found.
func (m *GetAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessID

	if len(errors) > 0 {
		return GetAccess_RequestMultiError(errors)
	}

	return nil
}

// GetAccess_RequestMultiError is an error wrapping multiple validation errors
// returned by GetAccess_Request.ValidateAll() if the designated constraints
// aren't met.
type GetAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccess_RequestMultiError) AllErrors() []error { return m }

// GetAccess_RequestValidationError is the validation error returned by
// GetAccess_Request.Validate if the designated constraints aren't met.
type GetAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccess_RequestValidationError) ErrorName() string {
	return "GetAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccess_RequestValidationError{}

// Validate checks the field values on GetAddonInstanceDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddonInstanceDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddonInstanceDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAddonInstanceDetailResponseMultiError, or nil if none found.
func (m *GetAddonInstanceDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddonInstanceDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAddonInstanceDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAddonInstanceDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAddonInstanceDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAddonInstanceDetailResponseMultiError(errors)
	}

	return nil
}

// GetAddonInstanceDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetAddonInstanceDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAddonInstanceDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddonInstanceDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddonInstanceDetailResponseMultiError) AllErrors() []error { return m }

// GetAddonInstanceDetailResponseValidationError is the validation error
// returned by GetAddonInstanceDetailResponse.Validate if the designated
// constraints aren't met.
type GetAddonInstanceDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddonInstanceDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddonInstanceDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddonInstanceDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddonInstanceDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddonInstanceDetailResponseValidationError) ErrorName() string {
	return "GetAddonInstanceDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddonInstanceDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddonInstanceDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddonInstanceDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddonInstanceDetailResponseValidationError{}

// Validate checks the field values on GetAssetVersionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetVersionRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetVersionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetVersionRspMultiError, or nil if none found.
func (m *GetAssetVersionRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetVersionRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasInstantiation

	// no validation rules for HasAccess

	if m.Asset != nil {

		if all {
			switch v := interface{}(m.GetAsset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Asset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetVersionRspValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Version != nil {

		if all {
			switch v := interface{}(m.GetVersion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Version",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Version",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetVersionRspValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Spec != nil {

		if all {
			switch v := interface{}(m.GetSpec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Spec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Spec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetVersionRspValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetVersionRspValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetVersionRspValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAssetVersionRspMultiError(errors)
	}

	return nil
}

// GetAssetVersionRspMultiError is an error wrapping multiple validation errors
// returned by GetAssetVersionRsp.ValidateAll() if the designated constraints
// aren't met.
type GetAssetVersionRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetVersionRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetVersionRspMultiError) AllErrors() []error { return m }

// GetAssetVersionRspValidationError is the validation error returned by
// GetAssetVersionRsp.Validate if the designated constraints aren't met.
type GetAssetVersionRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetVersionRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetVersionRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetVersionRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetVersionRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetVersionRspValidationError) ErrorName() string {
	return "GetAssetVersionRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetVersionRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetVersionRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetVersionRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetVersionRspValidationError{}

// Validate checks the field values on GetClientReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetClientReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetClientReqMultiError, or
// nil if none found.
func (m *GetClientReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClientReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClientReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClientReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClientReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClientReqMultiError(errors)
	}

	return nil
}

// GetClientReqMultiError is an error wrapping multiple validation errors
// returned by GetClientReq.ValidateAll() if the designated constraints aren't met.
type GetClientReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientReqMultiError) AllErrors() []error { return m }

// GetClientReqValidationError is the validation error returned by
// GetClientReq.Validate if the designated constraints aren't met.
type GetClientReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientReqValidationError) ErrorName() string { return "GetClientReqValidationError" }

// Error satisfies the builtin error interface
func (e GetClientReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientReqValidationError{}

// Validate checks the field values on GetContractReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetContractReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContractReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetContractReqMultiError,
// or nil if none found.
func (m *GetContractReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContractReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	// no validation rules for ContractID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetContractReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetContractReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContractReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetContractReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetContractReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContractReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetContractReqMultiError(errors)
	}

	return nil
}

// GetContractReqMultiError is an error wrapping multiple validation errors
// returned by GetContractReq.ValidateAll() if the designated constraints
// aren't met.
type GetContractReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContractReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContractReqMultiError) AllErrors() []error { return m }

// GetContractReqValidationError is the validation error returned by
// GetContractReq.Validate if the designated constraints aren't met.
type GetContractReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContractReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContractReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContractReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContractReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContractReqValidationError) ErrorName() string { return "GetContractReqValidationError" }

// Error satisfies the builtin error interface
func (e GetContractReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContractReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContractReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContractReqValidationError{}

// Validate checks the field values on GetInstantiationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstantiationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstantiationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstantiationsReqMultiError, or nil if none found.
func (m *GetInstantiationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstantiationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for Minor

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInstantiationsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInstantiationsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInstantiationsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInstantiationsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInstantiationsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInstantiationsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInstantiationsReqMultiError(errors)
	}

	return nil
}

// GetInstantiationsReqMultiError is an error wrapping multiple validation
// errors returned by GetInstantiationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetInstantiationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstantiationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstantiationsReqMultiError) AllErrors() []error { return m }

// GetInstantiationsReqValidationError is the validation error returned by
// GetInstantiationsReq.Validate if the designated constraints aren't met.
type GetInstantiationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstantiationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstantiationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstantiationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstantiationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstantiationsReqValidationError) ErrorName() string {
	return "GetInstantiationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstantiationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstantiationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstantiationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstantiationsReqValidationError{}

// Validate checks the field values on GetOperationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOperationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperationReqMultiError, or nil if none found.
func (m *GetOperationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if all {
		switch v := interface{}(m.GetURIParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperationReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperationReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperationReqValidationError{
				field:  "URIParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOperationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOperationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOperationReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOperationReqMultiError(errors)
	}

	return nil
}

// GetOperationReqMultiError is an error wrapping multiple validation errors
// returned by GetOperationReq.ValidateAll() if the designated constraints
// aren't met.
type GetOperationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperationReqMultiError) AllErrors() []error { return m }

// GetOperationReqValidationError is the validation error returned by
// GetOperationReq.Validate if the designated constraints aren't met.
type GetOperationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperationReqValidationError) ErrorName() string { return "GetOperationReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOperationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperationReqValidationError{}

// Validate checks the field values on GetOperationURIParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperationURIParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperationURIParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperationURIParametersMultiError, or nil if none found.
func (m *GetOperationURIParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperationURIParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return GetOperationURIParametersMultiError(errors)
	}

	return nil
}

// GetOperationURIParametersMultiError is an error wrapping multiple validation
// errors returned by GetOperationURIParameters.ValidateAll() if the
// designated constraints aren't met.
type GetOperationURIParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperationURIParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperationURIParametersMultiError) AllErrors() []error { return m }

// GetOperationURIParametersValidationError is the validation error returned by
// GetOperationURIParameters.Validate if the designated constraints aren't met.
type GetOperationURIParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperationURIParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperationURIParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperationURIParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperationURIParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperationURIParametersValidationError) ErrorName() string {
	return "GetOperationURIParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperationURIParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperationURIParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperationURIParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperationURIParametersValidationError{}

// Validate checks the field values on GetSLAReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSLAReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSLAReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSLAReqMultiError, or nil
// if none found.
func (m *GetSLAReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSLAReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSLAReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSLAReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSLAReqMultiError(errors)
	}

	return nil
}

// GetSLAReqMultiError is an error wrapping multiple validation errors returned
// by GetSLAReq.ValidateAll() if the designated constraints aren't met.
type GetSLAReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSLAReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSLAReqMultiError) AllErrors() []error { return m }

// GetSLAReqValidationError is the validation error returned by
// GetSLAReq.Validate if the designated constraints aren't met.
type GetSLAReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSLAReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSLAReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSLAReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSLAReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSLAReqValidationError) ErrorName() string { return "GetSLAReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSLAReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSLAReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSLAReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSLAReqValidationError{}

// Validate checks the field values on GetSLARsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSLARsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSLARsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSLARspMultiError, or nil
// if none found.
func (m *GetSLARsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSLARsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSLAModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSLARspValidationError{
					field:  "SLAModel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSLARspValidationError{
					field:  "SLAModel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSLAModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSLARspValidationError{
				field:  "SLAModel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSLARspValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSLARspValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSLARspValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetID

	// no validation rules for AssetName

	// no validation rules for SwaggerVersion

	// no validation rules for UserTo

	// no validation rules for Default

	// no validation rules for ClientCount

	if len(errors) > 0 {
		return GetSLARspMultiError(errors)
	}

	return nil
}

// GetSLARspMultiError is an error wrapping multiple validation errors returned
// by GetSLARsp.ValidateAll() if the designated constraints aren't met.
type GetSLARspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSLARspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSLARspMultiError) AllErrors() []error { return m }

// GetSLARspValidationError is the validation error returned by
// GetSLARsp.Validate if the designated constraints aren't met.
type GetSLARspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSLARspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSLARspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSLARspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSLARspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSLARspValidationError) ErrorName() string { return "GetSLARspValidationError" }

// Error satisfies the builtin error interface
func (e GetSLARspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSLARsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSLARspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSLARspValidationError{}

// Validate checks the field values on GetTestFileRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestFileRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestFileRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestFileRecordResponseMultiError, or nil if none found.
func (m *GetTestFileRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestFileRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestFileRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestFileRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestFileRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestFileRecordResponseMultiError(errors)
	}

	return nil
}

// GetTestFileRecordResponseMultiError is an error wrapping multiple validation
// errors returned by GetTestFileRecordResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTestFileRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestFileRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestFileRecordResponseMultiError) AllErrors() []error { return m }

// GetTestFileRecordResponseValidationError is the validation error returned by
// GetTestFileRecordResponse.Validate if the designated constraints aren't met.
type GetTestFileRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestFileRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestFileRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestFileRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestFileRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestFileRecordResponseValidationError) ErrorName() string {
	return "GetTestFileRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestFileRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestFileRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestFileRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestFileRecordResponseValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Header) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeaderMultiError, or nil if none found.
func (m *Header) ValidateAll() error {
	return m.validate(true)
}

func (m *Header) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeaderValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HeaderMultiError(errors)
	}

	return nil
}

// HeaderMultiError is an error wrapping multiple validation errors returned by
// Header.ValidateAll() if the designated constraints aren't met.
type HeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMultiError) AllErrors() []error { return m }

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on IOSCertificateDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IOSCertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOSCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOSCertificateDTOMultiError, or nil if none found.
func (m *IOSCertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *IOSCertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebugProvisionFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "DebugProvisionFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "DebugProvisionFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebugProvisionFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IOSCertificateDTOValidationError{
				field:  "DebugProvisionFile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReleaseProvisionFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "ReleaseProvisionFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "ReleaseProvisionFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleaseProvisionFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IOSCertificateDTOValidationError{
				field:  "ReleaseProvisionFile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKeyChainP12()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "KeyChainP12",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IOSCertificateDTOValidationError{
					field:  "KeyChainP12",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyChainP12()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IOSCertificateDTOValidationError{
				field:  "KeyChainP12",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IOSCertificateDTOMultiError(errors)
	}

	return nil
}

// IOSCertificateDTOMultiError is an error wrapping multiple validation errors
// returned by IOSCertificateDTO.ValidateAll() if the designated constraints
// aren't met.
type IOSCertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOSCertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOSCertificateDTOMultiError) AllErrors() []error { return m }

// IOSCertificateDTOValidationError is the validation error returned by
// IOSCertificateDTO.Validate if the designated constraints aren't met.
type IOSCertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOSCertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOSCertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOSCertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IOSCertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOSCertificateDTOValidationError) ErrorName() string {
	return "IOSCertificateDTOValidationError"
}

// Error satisfies the builtin error interface
func (e IOSCertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOSCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOSCertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IOSCertificateDTOValidationError{}

// Validate checks the field values on IOSCertificateKeyChainP12DTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IOSCertificateKeyChainP12DTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOSCertificateKeyChainP12DTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOSCertificateKeyChainP12DTOMultiError, or nil if none found.
func (m *IOSCertificateKeyChainP12DTO) ValidateAll() error {
	return m.validate(true)
}

func (m *IOSCertificateKeyChainP12DTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificateFileDTO()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IOSCertificateKeyChainP12DTOValidationError{
					field:  "CertificateFileDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IOSCertificateKeyChainP12DTOValidationError{
					field:  "CertificateFileDTO",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificateFileDTO()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IOSCertificateKeyChainP12DTOValidationError{
				field:  "CertificateFileDTO",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return IOSCertificateKeyChainP12DTOMultiError(errors)
	}

	return nil
}

// IOSCertificateKeyChainP12DTOMultiError is an error wrapping multiple
// validation errors returned by IOSCertificateKeyChainP12DTO.ValidateAll() if
// the designated constraints aren't met.
type IOSCertificateKeyChainP12DTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOSCertificateKeyChainP12DTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOSCertificateKeyChainP12DTOMultiError) AllErrors() []error { return m }

// IOSCertificateKeyChainP12DTOValidationError is the validation error returned
// by IOSCertificateKeyChainP12DTO.Validate if the designated constraints
// aren't met.
type IOSCertificateKeyChainP12DTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOSCertificateKeyChainP12DTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOSCertificateKeyChainP12DTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOSCertificateKeyChainP12DTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IOSCertificateKeyChainP12DTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOSCertificateKeyChainP12DTOValidationError) ErrorName() string {
	return "IOSCertificateKeyChainP12DTOValidationError"
}

// Error satisfies the builtin error interface
func (e IOSCertificateKeyChainP12DTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOSCertificateKeyChainP12DTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOSCertificateKeyChainP12DTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IOSCertificateKeyChainP12DTOValidationError{}

// Validate checks the field values on IOSCertificateKeyDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IOSCertificateKeyDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOSCertificateKeyDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IOSCertificateKeyDTOMultiError, or nil if none found.
func (m *IOSCertificateKeyDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *IOSCertificateKeyDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyChainP12File

	// no validation rules for KeyChainP12Password

	// no validation rules for DebugMobileProvision

	// no validation rules for ReleaseMobileProvision

	if len(errors) > 0 {
		return IOSCertificateKeyDTOMultiError(errors)
	}

	return nil
}

// IOSCertificateKeyDTOMultiError is an error wrapping multiple validation
// errors returned by IOSCertificateKeyDTO.ValidateAll() if the designated
// constraints aren't met.
type IOSCertificateKeyDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOSCertificateKeyDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOSCertificateKeyDTOMultiError) AllErrors() []error { return m }

// IOSCertificateKeyDTOValidationError is the validation error returned by
// IOSCertificateKeyDTO.Validate if the designated constraints aren't met.
type IOSCertificateKeyDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOSCertificateKeyDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOSCertificateKeyDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOSCertificateKeyDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IOSCertificateKeyDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOSCertificateKeyDTOValidationError) ErrorName() string {
	return "IOSCertificateKeyDTOValidationError"
}

// Error satisfies the builtin error interface
func (e IOSCertificateKeyDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOSCertificateKeyDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOSCertificateKeyDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IOSCertificateKeyDTOValidationError{}

// Validate checks the field values on IRComment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IRComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IRComment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IRCommentMultiError, or nil
// if none found.
func (m *IRComment) ValidateAll() error {
	return m.validate(true)
}

func (m *IRComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IterationID

	// no validation rules for IssueID

	// no validation rules for IssueTitle

	// no validation rules for IssueType

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return IRCommentMultiError(errors)
	}

	return nil
}

// IRCommentMultiError is an error wrapping multiple validation errors returned
// by IRComment.ValidateAll() if the designated constraints aren't met.
type IRCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IRCommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IRCommentMultiError) AllErrors() []error { return m }

// IRCommentValidationError is the validation error returned by
// IRComment.Validate if the designated constraints aren't met.
type IRCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IRCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IRCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IRCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IRCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IRCommentValidationError) ErrorName() string { return "IRCommentValidationError" }

// Error satisfies the builtin error interface
func (e IRCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIRComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IRCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IRCommentValidationError{}

// Validate checks the field values on ISummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ISummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ISummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ISummaryMultiError, or nil
// if none found.
func (m *ISummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ISummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequirement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Requirement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Requirement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequirement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ISummaryValidationError{
				field:  "Requirement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ISummaryValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBug()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Bug",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ISummaryValidationError{
					field:  "Bug",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBug()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ISummaryValidationError{
				field:  "Bug",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ISummaryMultiError(errors)
	}

	return nil
}

// ISummaryMultiError is an error wrapping multiple validation errors returned
// by ISummary.ValidateAll() if the designated constraints aren't met.
type ISummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ISummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ISummaryMultiError) AllErrors() []error { return m }

// ISummaryValidationError is the validation error returned by
// ISummary.Validate if the designated constraints aren't met.
type ISummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ISummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ISummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ISummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ISummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ISummaryValidationError) ErrorName() string { return "ISummaryValidationError" }

// Error satisfies the builtin error interface
func (e ISummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sISummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ISummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ISummaryValidationError{}

// Validate checks the field values on ISummaryState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ISummaryState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ISummaryState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ISummaryStateMultiError, or
// nil if none found.
func (m *ISummaryState) ValidateAll() error {
	return m.validate(true)
}

func (m *ISummaryState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Done

	// no validation rules for UnDone

	if len(errors) > 0 {
		return ISummaryStateMultiError(errors)
	}

	return nil
}

// ISummaryStateMultiError is an error wrapping multiple validation errors
// returned by ISummaryState.ValidateAll() if the designated constraints
// aren't met.
type ISummaryStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ISummaryStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ISummaryStateMultiError) AllErrors() []error { return m }

// ISummaryStateValidationError is the validation error returned by
// ISummaryState.Validate if the designated constraints aren't met.
type ISummaryStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ISummaryStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ISummaryStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ISummaryStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ISummaryStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ISummaryStateValidationError) ErrorName() string { return "ISummaryStateValidationError" }

// Error satisfies the builtin error interface
func (e ISummaryStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sISummaryState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ISummaryStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ISummaryStateValidationError{}

// Validate checks the field values on ImportProjectPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportProjectPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportProjectPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportProjectPackageRequestMultiError, or nil if none found.
func (m *ImportProjectPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportProjectPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProjectPackageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportProjectPackageRequestValidationError{
					field:  "ProjectPackageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportProjectPackageRequestValidationError{
					field:  "ProjectPackageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPackageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportProjectPackageRequestValidationError{
				field:  "ProjectPackageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ImportProjectPackageRequestMultiError(errors)
	}

	return nil
}

// ImportProjectPackageRequestMultiError is an error wrapping multiple
// validation errors returned by ImportProjectPackageRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportProjectPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportProjectPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportProjectPackageRequestMultiError) AllErrors() []error { return m }

// ImportProjectPackageRequestValidationError is the validation error returned
// by ImportProjectPackageRequest.Validate if the designated constraints
// aren't met.
type ImportProjectPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportProjectPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportProjectPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportProjectPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportProjectPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportProjectPackageRequestValidationError) ErrorName() string {
	return "ImportProjectPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportProjectPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportProjectPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportProjectPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportProjectPackageRequestValidationError{}

// Validate checks the field values on ImportProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportProjectTemplateRequestMultiError, or nil if none found.
func (m *ImportProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return ImportProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// ImportProjectTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by ImportProjectTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportProjectTemplateRequestMultiError) AllErrors() []error { return m }

// ImportProjectTemplateRequestValidationError is the validation error returned
// by ImportProjectTemplateRequest.Validate if the designated constraints
// aren't met.
type ImportProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportProjectTemplateRequestValidationError) ErrorName() string {
	return "ImportProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportProjectTemplateRequestValidationError{}

// Validate checks the field values on InstanceDetailRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceDetailRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceDetailRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceDetailResMultiError, or nil if none found.
func (m *InstanceDetailRes) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceDetailRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceName

	// no validation rules for AddonName

	// no validation rules for ProjectName

	// no validation rules for LogoURL

	// no validation rules for Status

	// no validation rules for ClusterName

	// no validation rules for Env

	// no validation rules for EnvCn

	// no validation rules for Version

	// no validation rules for AttachCount

	// no validation rules for PlanCnName

	// no validation rules for CreateAt

	// no validation rules for Platform

	// no validation rules for ProjectID

	// no validation rules for Config

	for idx, item := range m.GetReferenceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceDetailResValidationError{
						field:  fmt.Sprintf("ReferenceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceDetailResValidationError{
						field:  fmt.Sprintf("ReferenceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceDetailResValidationError{
					field:  fmt.Sprintf("ReferenceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CanDel

	if len(errors) > 0 {
		return InstanceDetailResMultiError(errors)
	}

	return nil
}

// InstanceDetailResMultiError is an error wrapping multiple validation errors
// returned by InstanceDetailRes.ValidateAll() if the designated constraints
// aren't met.
type InstanceDetailResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceDetailResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceDetailResMultiError) AllErrors() []error { return m }

// InstanceDetailResValidationError is the validation error returned by
// InstanceDetailRes.Validate if the designated constraints aren't met.
type InstanceDetailResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceDetailResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceDetailResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceDetailResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceDetailResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceDetailResValidationError) ErrorName() string {
	return "InstanceDetailResValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceDetailResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceDetailRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceDetailResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceDetailResValidationError{}

// Validate checks the field values on InstanceReferenceRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceReferenceRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceReferenceRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceReferenceResMultiError, or nil if none found.
func (m *InstanceReferenceRes) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceReferenceRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for RuntimeID

	// no validation rules for RuntimeName

	if len(errors) > 0 {
		return InstanceReferenceResMultiError(errors)
	}

	return nil
}

// InstanceReferenceResMultiError is an error wrapping multiple validation
// errors returned by InstanceReferenceRes.ValidateAll() if the designated
// constraints aren't met.
type InstanceReferenceResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceReferenceResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceReferenceResMultiError) AllErrors() []error { return m }

// InstanceReferenceResValidationError is the validation error returned by
// InstanceReferenceRes.Validate if the designated constraints aren't met.
type InstanceReferenceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceReferenceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceReferenceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceReferenceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceReferenceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceReferenceResValidationError) ErrorName() string {
	return "InstanceReferenceResValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceReferenceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceReferenceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceReferenceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceReferenceResValidationError{}

// Validate checks the field values on Iteration with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Iteration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Iteration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IterationMultiError, or nil
// if none found.
func (m *Iteration) ValidateAll() error {
	return m.validate(true)
}

func (m *Iteration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IterationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IterationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Creator

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetIssueSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "IssueSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IterationValidationError{
					field:  "IssueSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IterationValidationError{
				field:  "IssueSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.StartedAt != nil {

		if all {
			switch v := interface{}(m.GetStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FinishedAt != nil {

		if all {
			switch v := interface{}(m.GetFinishedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IterationMultiError(errors)
	}

	return nil
}

// IterationMultiError is an error wrapping multiple validation errors returned
// by Iteration.ValidateAll() if the designated constraints aren't met.
type IterationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationMultiError) AllErrors() []error { return m }

// IterationValidationError is the validation error returned by
// Iteration.Validate if the designated constraints aren't met.
type IterationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationValidationError) ErrorName() string { return "IterationValidationError" }

// Error satisfies the builtin error interface
func (e IterationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIteration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationValidationError{}

// Validate checks the field values on IterationCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationCreateRequestMultiError, or nil if none found.
func (m *IterationCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Title

	// no validation rules for Content

	if m.StartedAt != nil {

		if all {
			switch v := interface{}(m.GetStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationCreateRequestValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationCreateRequestValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationCreateRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FinishedAt != nil {

		if all {
			switch v := interface{}(m.GetFinishedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationCreateRequestValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationCreateRequestValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationCreateRequestValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IterationCreateRequestMultiError(errors)
	}

	return nil
}

// IterationCreateRequestMultiError is an error wrapping multiple validation
// errors returned by IterationCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type IterationCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationCreateRequestMultiError) AllErrors() []error { return m }

// IterationCreateRequestValidationError is the validation error returned by
// IterationCreateRequest.Validate if the designated constraints aren't met.
type IterationCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationCreateRequestValidationError) ErrorName() string {
	return "IterationCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IterationCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationCreateRequestValidationError{}

// Validate checks the field values on IterationCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationCreateResponseMultiError, or nil if none found.
func (m *IterationCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IterationCreateResponseMultiError(errors)
	}

	return nil
}

// IterationCreateResponseMultiError is an error wrapping multiple validation
// errors returned by IterationCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type IterationCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationCreateResponseMultiError) AllErrors() []error { return m }

// IterationCreateResponseValidationError is the validation error returned by
// IterationCreateResponse.Validate if the designated constraints aren't met.
type IterationCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationCreateResponseValidationError) ErrorName() string {
	return "IterationCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IterationCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationCreateResponseValidationError{}

// Validate checks the field values on IterationGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationGetResponseMultiError, or nil if none found.
func (m *IterationGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IterationGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IterationGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IterationGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IterationGetResponseMultiError(errors)
	}

	return nil
}

// IterationGetResponseMultiError is an error wrapping multiple validation
// errors returned by IterationGetResponse.ValidateAll() if the designated
// constraints aren't met.
type IterationGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationGetResponseMultiError) AllErrors() []error { return m }

// IterationGetResponseValidationError is the validation error returned by
// IterationGetResponse.Validate if the designated constraints aren't met.
type IterationGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationGetResponseValidationError) ErrorName() string {
	return "IterationGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IterationGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationGetResponseValidationError{}

// Validate checks the field values on IterationPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationPagingRequestMultiError, or nil if none found.
func (m *IterationPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Deadline

	// no validation rules for ProjectID

	// no validation rules for State

	// no validation rules for WithoutIssueSummary

	if len(errors) > 0 {
		return IterationPagingRequestMultiError(errors)
	}

	return nil
}

// IterationPagingRequestMultiError is an error wrapping multiple validation
// errors returned by IterationPagingRequest.ValidateAll() if the designated
// constraints aren't met.
type IterationPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationPagingRequestMultiError) AllErrors() []error { return m }

// IterationPagingRequestValidationError is the validation error returned by
// IterationPagingRequest.Validate if the designated constraints aren't met.
type IterationPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationPagingRequestValidationError) ErrorName() string {
	return "IterationPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IterationPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationPagingRequestValidationError{}

// Validate checks the field values on IterationPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationPagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationPagingResponseMultiError, or nil if none found.
func (m *IterationPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationPagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IterationPagingResponseMultiError(errors)
	}

	return nil
}

// IterationPagingResponseMultiError is an error wrapping multiple validation
// errors returned by IterationPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type IterationPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationPagingResponseMultiError) AllErrors() []error { return m }

// IterationPagingResponseValidationError is the validation error returned by
// IterationPagingResponse.Validate if the designated constraints aren't met.
type IterationPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationPagingResponseValidationError) ErrorName() string {
	return "IterationPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IterationPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationPagingResponseValidationError{}

// Validate checks the field values on IterationUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationUpdateRequestMultiError, or nil if none found.
func (m *IterationUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for State

	// no validation rules for Id

	if m.StartedAt != nil {

		if all {
			switch v := interface{}(m.GetStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationUpdateRequestValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationUpdateRequestValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationUpdateRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FinishedAt != nil {

		if all {
			switch v := interface{}(m.GetFinishedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IterationUpdateRequestValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IterationUpdateRequestValidationError{
						field:  "FinishedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IterationUpdateRequestValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IterationUpdateRequestMultiError(errors)
	}

	return nil
}

// IterationUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by IterationUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type IterationUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationUpdateRequestMultiError) AllErrors() []error { return m }

// IterationUpdateRequestValidationError is the validation error returned by
// IterationUpdateRequest.Validate if the designated constraints aren't met.
type IterationUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationUpdateRequestValidationError) ErrorName() string {
	return "IterationUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IterationUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationUpdateRequestValidationError{}

// Validate checks the field values on IterationUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IterationUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IterationUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IterationUpdateResponseMultiError, or nil if none found.
func (m *IterationUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IterationUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return IterationUpdateResponseMultiError(errors)
	}

	return nil
}

// IterationUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by IterationUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type IterationUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IterationUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IterationUpdateResponseMultiError) AllErrors() []error { return m }

// IterationUpdateResponseValidationError is the validation error returned by
// IterationUpdateResponse.Validate if the designated constraints aren't met.
type IterationUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IterationUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IterationUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IterationUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IterationUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IterationUpdateResponseValidationError) ErrorName() string {
	return "IterationUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IterationUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIterationUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IterationUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IterationUpdateResponseValidationError{}

// Validate checks the field values on LibReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LibReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LibReferenceMultiError, or
// nil if none found.
func (m *LibReference) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for AppID

	// no validation rules for LibID

	// no validation rules for LibName

	// no validation rules for LibDesc

	// no validation rules for ApprovalID

	// no validation rules for ApprovalStatus

	// no validation rules for Creator

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LibReferenceValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LibReferenceValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LibReferenceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LibReferenceValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LibReferenceValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LibReferenceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LibReferenceMultiError(errors)
	}

	return nil
}

// LibReferenceMultiError is an error wrapping multiple validation errors
// returned by LibReference.ValidateAll() if the designated constraints aren't met.
type LibReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceMultiError) AllErrors() []error { return m }

// LibReferenceValidationError is the validation error returned by
// LibReference.Validate if the designated constraints aren't met.
type LibReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceValidationError) ErrorName() string { return "LibReferenceValidationError" }

// Error satisfies the builtin error interface
func (e LibReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceValidationError{}

// Validate checks the field values on LibReferenceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibReferenceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReferenceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibReferenceCreateRequestMultiError, or nil if none found.
func (m *LibReferenceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReferenceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for AppName

	// no validation rules for LibID

	// no validation rules for LibName

	// no validation rules for LibDesc

	// no validation rules for OrgID

	if len(errors) > 0 {
		return LibReferenceCreateRequestMultiError(errors)
	}

	return nil
}

// LibReferenceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by LibReferenceCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type LibReferenceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceCreateRequestMultiError) AllErrors() []error { return m }

// LibReferenceCreateRequestValidationError is the validation error returned by
// LibReferenceCreateRequest.Validate if the designated constraints aren't met.
type LibReferenceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceCreateRequestValidationError) ErrorName() string {
	return "LibReferenceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LibReferenceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReferenceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceCreateRequestValidationError{}

// Validate checks the field values on LibReferenceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibReferenceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReferenceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibReferenceCreateResponseMultiError, or nil if none found.
func (m *LibReferenceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReferenceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return LibReferenceCreateResponseMultiError(errors)
	}

	return nil
}

// LibReferenceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by LibReferenceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type LibReferenceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceCreateResponseMultiError) AllErrors() []error { return m }

// LibReferenceCreateResponseValidationError is the validation error returned
// by LibReferenceCreateResponse.Validate if the designated constraints aren't met.
type LibReferenceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceCreateResponseValidationError) ErrorName() string {
	return "LibReferenceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LibReferenceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReferenceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceCreateResponseValidationError{}

// Validate checks the field values on LibReferenceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibReferenceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReferenceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibReferenceListRequestMultiError, or nil if none found.
func (m *LibReferenceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReferenceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for LibID

	// no validation rules for ApprovalStatus

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return LibReferenceListRequestMultiError(errors)
	}

	return nil
}

// LibReferenceListRequestMultiError is an error wrapping multiple validation
// errors returned by LibReferenceListRequest.ValidateAll() if the designated
// constraints aren't met.
type LibReferenceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceListRequestMultiError) AllErrors() []error { return m }

// LibReferenceListRequestValidationError is the validation error returned by
// LibReferenceListRequest.Validate if the designated constraints aren't met.
type LibReferenceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceListRequestValidationError) ErrorName() string {
	return "LibReferenceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LibReferenceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReferenceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceListRequestValidationError{}

// Validate checks the field values on LibReferenceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibReferenceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReferenceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibReferenceListResponseMultiError, or nil if none found.
func (m *LibReferenceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReferenceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LibReferenceListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LibReferenceListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LibReferenceListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LibReferenceListResponseMultiError(errors)
	}

	return nil
}

// LibReferenceListResponseMultiError is an error wrapping multiple validation
// errors returned by LibReferenceListResponse.ValidateAll() if the designated
// constraints aren't met.
type LibReferenceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceListResponseMultiError) AllErrors() []error { return m }

// LibReferenceListResponseValidationError is the validation error returned by
// LibReferenceListResponse.Validate if the designated constraints aren't met.
type LibReferenceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceListResponseValidationError) ErrorName() string {
	return "LibReferenceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LibReferenceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReferenceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceListResponseValidationError{}

// Validate checks the field values on LibReferenceListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibReferenceListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibReferenceListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibReferenceListResponseDataMultiError, or nil if none found.
func (m *LibReferenceListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *LibReferenceListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LibReferenceListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LibReferenceListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LibReferenceListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LibReferenceListResponseDataMultiError(errors)
	}

	return nil
}

// LibReferenceListResponseDataMultiError is an error wrapping multiple
// validation errors returned by LibReferenceListResponseData.ValidateAll() if
// the designated constraints aren't met.
type LibReferenceListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibReferenceListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibReferenceListResponseDataMultiError) AllErrors() []error { return m }

// LibReferenceListResponseDataValidationError is the validation error returned
// by LibReferenceListResponseData.Validate if the designated constraints
// aren't met.
type LibReferenceListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibReferenceListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibReferenceListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibReferenceListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibReferenceListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibReferenceListResponseDataValidationError) ErrorName() string {
	return "LibReferenceListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e LibReferenceListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibReferenceListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibReferenceListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibReferenceListResponseDataValidationError{}

// Validate checks the field values on ListAPIGatewayRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIGatewayRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIGatewayRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIGatewayRespDataMultiError, or nil if none found.
func (m *ListAPIGatewayRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIGatewayRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAPIGatewayRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAPIGatewayRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAPIGatewayRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAPIGatewayRespDataMultiError(errors)
	}

	return nil
}

// ListAPIGatewayRespDataMultiError is an error wrapping multiple validation
// errors returned by ListAPIGatewayRespData.ValidateAll() if the designated
// constraints aren't met.
type ListAPIGatewayRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIGatewayRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIGatewayRespDataMultiError) AllErrors() []error { return m }

// ListAPIGatewayRespDataValidationError is the validation error returned by
// ListAPIGatewayRespData.Validate if the designated constraints aren't met.
type ListAPIGatewayRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIGatewayRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIGatewayRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIGatewayRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIGatewayRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIGatewayRespDataValidationError) ErrorName() string {
	return "ListAPIGatewayRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIGatewayRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIGatewayRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIGatewayRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIGatewayRespDataValidationError{}

// Validate checks the field values on ListAPIGatewaysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIGatewaysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIGatewaysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIGatewaysReqMultiError, or nil if none found.
func (m *ListAPIGatewaysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIGatewaysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAPIGatewaysReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAPIGatewaysReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAPIGatewaysReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAPIGatewaysReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAPIGatewaysReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAPIGatewaysReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAPIGatewaysReqMultiError(errors)
	}

	return nil
}

// ListAPIGatewaysReqMultiError is an error wrapping multiple validation errors
// returned by ListAPIGatewaysReq.ValidateAll() if the designated constraints
// aren't met.
type ListAPIGatewaysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIGatewaysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIGatewaysReqMultiError) AllErrors() []error { return m }

// ListAPIGatewaysReqValidationError is the validation error returned by
// ListAPIGatewaysReq.Validate if the designated constraints aren't met.
type ListAPIGatewaysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIGatewaysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIGatewaysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIGatewaysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIGatewaysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIGatewaysReqValidationError) ErrorName() string {
	return "ListAPIGatewaysReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIGatewaysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIGatewaysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIGatewaysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIGatewaysReqValidationError{}

// Validate checks the field values on ListAPIGatewaysResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIGatewaysResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIGatewaysResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIGatewaysRespMultiError, or nil if none found.
func (m *ListAPIGatewaysResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIGatewaysResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAPIGatewaysRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAPIGatewaysRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAPIGatewaysRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAPIGatewaysRespMultiError(errors)
	}

	return nil
}

// ListAPIGatewaysRespMultiError is an error wrapping multiple validation
// errors returned by ListAPIGatewaysResp.ValidateAll() if the designated
// constraints aren't met.
type ListAPIGatewaysRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIGatewaysRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIGatewaysRespMultiError) AllErrors() []error { return m }

// ListAPIGatewaysRespValidationError is the validation error returned by
// ListAPIGatewaysResp.Validate if the designated constraints aren't met.
type ListAPIGatewaysRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIGatewaysRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIGatewaysRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIGatewaysRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIGatewaysRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIGatewaysRespValidationError) ErrorName() string {
	return "ListAPIGatewaysRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIGatewaysRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIGatewaysResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIGatewaysRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIGatewaysRespValidationError{}

// Validate checks the field values on ListAccessReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccessReqMultiError, or
// nil if none found.
func (m *ListAccessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccessReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccessReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccessReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccessReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccessReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccessReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccessReqMultiError(errors)
	}

	return nil
}

// ListAccessReqMultiError is an error wrapping multiple validation errors
// returned by ListAccessReq.ValidateAll() if the designated constraints
// aren't met.
type ListAccessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessReqMultiError) AllErrors() []error { return m }

// ListAccessReqValidationError is the validation error returned by
// ListAccessReq.Validate if the designated constraints aren't met.
type ListAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessReqValidationError) ErrorName() string { return "ListAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessReqValidationError{}

// Validate checks the field values on ListAccessRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccessRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccessRspMultiError, or
// nil if none found.
func (m *ListAccessRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccessRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccessRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccessRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListAccessRspMultiError(errors)
	}

	return nil
}

// ListAccessRspMultiError is an error wrapping multiple validation errors
// returned by ListAccessRsp.ValidateAll() if the designated constraints
// aren't met.
type ListAccessRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessRspMultiError) AllErrors() []error { return m }

// ListAccessRspValidationError is the validation error returned by
// ListAccessRsp.Validate if the designated constraints aren't met.
type ListAccessRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessRspValidationError) ErrorName() string { return "ListAccessRspValidationError" }

// Error satisfies the builtin error interface
func (e ListAccessRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessRspValidationError{}

// Validate checks the field values on ListContractRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContractRecordsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContractRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContractRecordsReqMultiError, or nil if none found.
func (m *ListContractRecordsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContractRecordsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	// no validation rules for ContractID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractRecordsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractRecordsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractRecordsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractRecordsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractRecordsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractRecordsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContractRecordsReqMultiError(errors)
	}

	return nil
}

// ListContractRecordsReqMultiError is an error wrapping multiple validation
// errors returned by ListContractRecordsReq.ValidateAll() if the designated
// constraints aren't met.
type ListContractRecordsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContractRecordsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContractRecordsReqMultiError) AllErrors() []error { return m }

// ListContractRecordsReqValidationError is the validation error returned by
// ListContractRecordsReq.Validate if the designated constraints aren't met.
type ListContractRecordsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContractRecordsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContractRecordsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContractRecordsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContractRecordsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContractRecordsReqValidationError) ErrorName() string {
	return "ListContractRecordsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListContractRecordsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContractRecordsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContractRecordsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContractRecordsReqValidationError{}

// Validate checks the field values on ListContractRecordsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContractRecordsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContractRecordsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContractRecordsRspMultiError, or nil if none found.
func (m *ListContractRecordsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContractRecordsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractRecordsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractRecordsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractRecordsRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContractRecordsRspMultiError(errors)
	}

	return nil
}

// ListContractRecordsRspMultiError is an error wrapping multiple validation
// errors returned by ListContractRecordsRsp.ValidateAll() if the designated
// constraints aren't met.
type ListContractRecordsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContractRecordsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContractRecordsRspMultiError) AllErrors() []error { return m }

// ListContractRecordsRspValidationError is the validation error returned by
// ListContractRecordsRsp.Validate if the designated constraints aren't met.
type ListContractRecordsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContractRecordsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContractRecordsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContractRecordsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContractRecordsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContractRecordsRspValidationError) ErrorName() string {
	return "ListContractRecordsRspValidationError"
}

// Error satisfies the builtin error interface
func (e ListContractRecordsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContractRecordsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContractRecordsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContractRecordsRspValidationError{}

// Validate checks the field values on ListContractsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContractsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContractsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContractsReqMultiError, or nil if none found.
func (m *ListContractsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContractsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContractsReqMultiError(errors)
	}

	return nil
}

// ListContractsReqMultiError is an error wrapping multiple validation errors
// returned by ListContractsReq.ValidateAll() if the designated constraints
// aren't met.
type ListContractsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContractsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContractsReqMultiError) AllErrors() []error { return m }

// ListContractsReqValidationError is the validation error returned by
// ListContractsReq.Validate if the designated constraints aren't met.
type ListContractsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContractsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContractsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContractsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContractsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContractsReqValidationError) ErrorName() string { return "ListContractsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListContractsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContractsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContractsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContractsReqValidationError{}

// Validate checks the field values on ListContractsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContractsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContractsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContractsRspMultiError, or nil if none found.
func (m *ListContractsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContractsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContractsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContractsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContractsRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContractsRspMultiError(errors)
	}

	return nil
}

// ListContractsRspMultiError is an error wrapping multiple validation errors
// returned by ListContractsRsp.ValidateAll() if the designated constraints
// aren't met.
type ListContractsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContractsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContractsRspMultiError) AllErrors() []error { return m }

// ListContractsRspValidationError is the validation error returned by
// ListContractsRsp.Validate if the designated constraints aren't met.
type ListContractsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContractsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContractsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContractsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContractsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContractsRspValidationError) ErrorName() string { return "ListContractsRspValidationError" }

// Error satisfies the builtin error interface
func (e ListContractsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContractsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContractsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContractsRspValidationError{}

// Validate checks the field values on ListInstantiations_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstantiations_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstantiations_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstantiations_RequestMultiError, or nil if none found.
func (m *ListInstantiations_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstantiations_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListInstantiations_RequestMultiError(errors)
	}

	return nil
}

// ListInstantiations_RequestMultiError is an error wrapping multiple
// validation errors returned by ListInstantiations_Request.ValidateAll() if
// the designated constraints aren't met.
type ListInstantiations_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstantiations_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstantiations_RequestMultiError) AllErrors() []error { return m }

// ListInstantiations_RequestValidationError is the validation error returned
// by ListInstantiations_Request.Validate if the designated constraints aren't met.
type ListInstantiations_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstantiations_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstantiations_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstantiations_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstantiations_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstantiations_RequestValidationError) ErrorName() string {
	return "ListInstantiations_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstantiations_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstantiations_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstantiations_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstantiations_RequestValidationError{}

// Validate checks the field values on ListMyClientsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMyClientsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMyClientsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMyClientsReqMultiError, or nil if none found.
func (m *ListMyClientsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMyClientsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMyClientsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMyClientsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyClientsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMyClientsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMyClientsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyClientsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMyClientsReqMultiError(errors)
	}

	return nil
}

// ListMyClientsReqMultiError is an error wrapping multiple validation errors
// returned by ListMyClientsReq.ValidateAll() if the designated constraints
// aren't met.
type ListMyClientsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMyClientsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMyClientsReqMultiError) AllErrors() []error { return m }

// ListMyClientsReqValidationError is the validation error returned by
// ListMyClientsReq.Validate if the designated constraints aren't met.
type ListMyClientsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyClientsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyClientsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyClientsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyClientsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyClientsReqValidationError) ErrorName() string { return "ListMyClientsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListMyClientsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyClientsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyClientsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyClientsReqValidationError{}

// Validate checks the field values on ListProjectAPIGatewaysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectAPIGatewaysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectAPIGatewaysReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectAPIGatewaysReqMultiError, or nil if none found.
func (m *ListProjectAPIGatewaysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectAPIGatewaysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectAPIGatewaysReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectAPIGatewaysReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectAPIGatewaysReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectAPIGatewaysReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectAPIGatewaysReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectAPIGatewaysReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectAPIGatewaysReqMultiError(errors)
	}

	return nil
}

// ListProjectAPIGatewaysReqMultiError is an error wrapping multiple validation
// errors returned by ListProjectAPIGatewaysReq.ValidateAll() if the
// designated constraints aren't met.
type ListProjectAPIGatewaysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectAPIGatewaysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectAPIGatewaysReqMultiError) AllErrors() []error { return m }

// ListProjectAPIGatewaysReqValidationError is the validation error returned by
// ListProjectAPIGatewaysReq.Validate if the designated constraints aren't met.
type ListProjectAPIGatewaysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectAPIGatewaysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectAPIGatewaysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectAPIGatewaysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectAPIGatewaysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectAPIGatewaysReqValidationError) ErrorName() string {
	return "ListProjectAPIGatewaysReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectAPIGatewaysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectAPIGatewaysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectAPIGatewaysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectAPIGatewaysReqValidationError{}

// Validate checks the field values on ListRuntimeServices_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRuntimeServices_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRuntimeServices_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRuntimeServices_RequestMultiError, or nil if none found.
func (m *ListRuntimeServices_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRuntimeServices_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	if len(errors) > 0 {
		return ListRuntimeServices_RequestMultiError(errors)
	}

	return nil
}

// ListRuntimeServices_RequestMultiError is an error wrapping multiple
// validation errors returned by ListRuntimeServices_Request.ValidateAll() if
// the designated constraints aren't met.
type ListRuntimeServices_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRuntimeServices_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRuntimeServices_RequestMultiError) AllErrors() []error { return m }

// ListRuntimeServices_RequestValidationError is the validation error returned
// by ListRuntimeServices_Request.Validate if the designated constraints
// aren't met.
type ListRuntimeServices_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuntimeServices_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuntimeServices_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuntimeServices_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuntimeServices_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuntimeServices_RequestValidationError) ErrorName() string {
	return "ListRuntimeServices_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuntimeServices_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuntimeServices_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuntimeServices_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuntimeServices_RequestValidationError{}

// Validate checks the field values on ListSLAsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSLAsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSLAsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSLAsReqMultiError, or
// nil if none found.
func (m *ListSLAsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSLAsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for SlaID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSLAsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSLAsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSLAsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSLAsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSLAsReqMultiError(errors)
	}

	return nil
}

// ListSLAsReqMultiError is an error wrapping multiple validation errors
// returned by ListSLAsReq.ValidateAll() if the designated constraints aren't met.
type ListSLAsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSLAsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSLAsReqMultiError) AllErrors() []error { return m }

// ListSLAsReqValidationError is the validation error returned by
// ListSLAsReq.Validate if the designated constraints aren't met.
type ListSLAsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSLAsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSLAsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSLAsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSLAsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSLAsReqValidationError) ErrorName() string { return "ListSLAsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSLAsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSLAsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSLAsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSLAsReqValidationError{}

// Validate checks the field values on ListSLAsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSLAsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSLAsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSLAsRspMultiError, or
// nil if none found.
func (m *ListSLAsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSLAsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSLAsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSLAsRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSLAsRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSLAsRspMultiError(errors)
	}

	return nil
}

// ListSLAsRspMultiError is an error wrapping multiple validation errors
// returned by ListSLAsRsp.ValidateAll() if the designated constraints aren't met.
type ListSLAsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSLAsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSLAsRspMultiError) AllErrors() []error { return m }

// ListSLAsRspValidationError is the validation error returned by
// ListSLAsRsp.Validate if the designated constraints aren't met.
type ListSLAsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSLAsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSLAsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSLAsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSLAsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSLAsRspValidationError) ErrorName() string { return "ListSLAsRspValidationError" }

// Error satisfies the builtin error interface
func (e ListSLAsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSLAsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSLAsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSLAsRspValidationError{}

// Validate checks the field values on ListSwaggerVersionClientsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSwaggerVersionClientsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSwaggerVersionClientsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSwaggerVersionClientsReqMultiError, or nil if none found.
func (m *ListSwaggerVersionClientsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSwaggerVersionClientsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionClientsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionClientsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionClientsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionClientsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSwaggerVersionClientsReqMultiError(errors)
	}

	return nil
}

// ListSwaggerVersionClientsReqMultiError is an error wrapping multiple
// validation errors returned by ListSwaggerVersionClientsReq.ValidateAll() if
// the designated constraints aren't met.
type ListSwaggerVersionClientsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSwaggerVersionClientsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSwaggerVersionClientsReqMultiError) AllErrors() []error { return m }

// ListSwaggerVersionClientsReqValidationError is the validation error returned
// by ListSwaggerVersionClientsReq.Validate if the designated constraints
// aren't met.
type ListSwaggerVersionClientsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSwaggerVersionClientsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSwaggerVersionClientsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSwaggerVersionClientsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSwaggerVersionClientsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSwaggerVersionClientsReqValidationError) ErrorName() string {
	return "ListSwaggerVersionClientsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSwaggerVersionClientsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSwaggerVersionClientsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSwaggerVersionClientsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSwaggerVersionClientsReqValidationError{}

// Validate checks the field values on ListSwaggerVersionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSwaggerVersionRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSwaggerVersionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSwaggerVersionRspMultiError, or nil if none found.
func (m *ListSwaggerVersionRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSwaggerVersionRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSwaggerVersionRspMultiError(errors)
	}

	return nil
}

// ListSwaggerVersionRspMultiError is an error wrapping multiple validation
// errors returned by ListSwaggerVersionRsp.ValidateAll() if the designated
// constraints aren't met.
type ListSwaggerVersionRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSwaggerVersionRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSwaggerVersionRspMultiError) AllErrors() []error { return m }

// ListSwaggerVersionRspValidationError is the validation error returned by
// ListSwaggerVersionRsp.Validate if the designated constraints aren't met.
type ListSwaggerVersionRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSwaggerVersionRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSwaggerVersionRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSwaggerVersionRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSwaggerVersionRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSwaggerVersionRspValidationError) ErrorName() string {
	return "ListSwaggerVersionRspValidationError"
}

// Error satisfies the builtin error interface
func (e ListSwaggerVersionRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSwaggerVersionRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSwaggerVersionRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSwaggerVersionRspValidationError{}

// Validate checks the field values on ListSwaggerVersionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSwaggerVersionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSwaggerVersionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSwaggerVersionsReqMultiError, or nil if none found.
func (m *ListSwaggerVersionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSwaggerVersionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionsReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSwaggerVersionsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSwaggerVersionsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSwaggerVersionsReqMultiError(errors)
	}

	return nil
}

// ListSwaggerVersionsReqMultiError is an error wrapping multiple validation
// errors returned by ListSwaggerVersionsReq.ValidateAll() if the designated
// constraints aren't met.
type ListSwaggerVersionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSwaggerVersionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSwaggerVersionsReqMultiError) AllErrors() []error { return m }

// ListSwaggerVersionsReqValidationError is the validation error returned by
// ListSwaggerVersionsReq.Validate if the designated constraints aren't met.
type ListSwaggerVersionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSwaggerVersionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSwaggerVersionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSwaggerVersionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSwaggerVersionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSwaggerVersionsReqValidationError) ErrorName() string {
	return "ListSwaggerVersionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSwaggerVersionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSwaggerVersionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSwaggerVersionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSwaggerVersionsReqValidationError{}

// Validate checks the field values on ListTestFileRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestFileRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestFileRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestFileRecordsRequestMultiError, or nil if none found.
func (m *ListTestFileRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestFileRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for OrgID

	// no validation rules for SpaceID

	// no validation rules for Locale

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListTestFileRecordsRequestMultiError(errors)
	}

	return nil
}

// ListTestFileRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by ListTestFileRecordsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTestFileRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestFileRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestFileRecordsRequestMultiError) AllErrors() []error { return m }

// ListTestFileRecordsRequestValidationError is the validation error returned
// by ListTestFileRecordsRequest.Validate if the designated constraints aren't met.
type ListTestFileRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestFileRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestFileRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestFileRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestFileRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestFileRecordsRequestValidationError) ErrorName() string {
	return "ListTestFileRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestFileRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestFileRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestFileRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestFileRecordsRequestValidationError{}

// Validate checks the field values on ListTestFileRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestFileRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestFileRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestFileRecordsResponseMultiError, or nil if none found.
func (m *ListTestFileRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestFileRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTestFileRecordsResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTestFileRecordsResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestFileRecordsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTestFileRecordsResponseMultiError(errors)
	}

	return nil
}

// ListTestFileRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by ListTestFileRecordsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTestFileRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestFileRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestFileRecordsResponseMultiError) AllErrors() []error { return m }

// ListTestFileRecordsResponseValidationError is the validation error returned
// by ListTestFileRecordsResponse.Validate if the designated constraints
// aren't met.
type ListTestFileRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestFileRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestFileRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestFileRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestFileRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestFileRecordsResponseValidationError) ErrorName() string {
	return "ListTestFileRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestFileRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestFileRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestFileRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestFileRecordsResponseValidationError{}

// Validate checks the field values on MemberRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberRoleListResponseMultiError, or nil if none found.
func (m *MemberRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberRoleListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberRoleListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberRoleListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberRoleListResponseMultiError(errors)
	}

	return nil
}

// MemberRoleListResponseMultiError is an error wrapping multiple validation
// errors returned by MemberRoleListResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRoleListResponseMultiError) AllErrors() []error { return m }

// MemberRoleListResponseValidationError is the validation error returned by
// MemberRoleListResponse.Validate if the designated constraints aren't met.
type MemberRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRoleListResponseValidationError) ErrorName() string {
	return "MemberRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRoleListResponseValidationError{}

// Validate checks the field values on MessageCertificateKeyDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageCertificateKeyDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageCertificateKeyDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageCertificateKeyDTOMultiError, or nil if none found.
func (m *MessageCertificateKeyDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageCertificateKeyDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return MessageCertificateKeyDTOMultiError(errors)
	}

	return nil
}

// MessageCertificateKeyDTOMultiError is an error wrapping multiple validation
// errors returned by MessageCertificateKeyDTO.ValidateAll() if the designated
// constraints aren't met.
type MessageCertificateKeyDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageCertificateKeyDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageCertificateKeyDTOMultiError) AllErrors() []error { return m }

// MessageCertificateKeyDTOValidationError is the validation error returned by
// MessageCertificateKeyDTO.Validate if the designated constraints aren't met.
type MessageCertificateKeyDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageCertificateKeyDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageCertificateKeyDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageCertificateKeyDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageCertificateKeyDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageCertificateKeyDTOValidationError) ErrorName() string {
	return "MessageCertificateKeyDTOValidationError"
}

// Error satisfies the builtin error interface
func (e MessageCertificateKeyDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageCertificateKeyDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageCertificateKeyDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageCertificateKeyDTOValidationError{}

// Validate checks the field values on MonitorKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonitorKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonitorKeysMultiError, or
// nil if none found.
func (m *MonitorKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AK

	// no validation rules for AI

	// no validation rules for Env

	// no validation rules for AppID

	if len(errors) > 0 {
		return MonitorKeysMultiError(errors)
	}

	return nil
}

// MonitorKeysMultiError is an error wrapping multiple validation errors
// returned by MonitorKeys.ValidateAll() if the designated constraints aren't met.
type MonitorKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorKeysMultiError) AllErrors() []error { return m }

// MonitorKeysValidationError is the validation error returned by
// MonitorKeys.Validate if the designated constraints aren't met.
type MonitorKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorKeysValidationError) ErrorName() string { return "MonitorKeysValidationError" }

// Error satisfies the builtin error interface
func (e MonitorKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorKeysValidationError{}

// Validate checks the field values on OrgCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgCreateRequestMultiError, or nil if none found.
func (m *OrgCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Locale

	// no validation rules for PublisherName

	// no validation rules for IsPublic

	// no validation rules for Type

	if len(errors) > 0 {
		return OrgCreateRequestMultiError(errors)
	}

	return nil
}

// OrgCreateRequestMultiError is an error wrapping multiple validation errors
// returned by OrgCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type OrgCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgCreateRequestMultiError) AllErrors() []error { return m }

// OrgCreateRequestValidationError is the validation error returned by
// OrgCreateRequest.Validate if the designated constraints aren't met.
type OrgCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgCreateRequestValidationError) ErrorName() string { return "OrgCreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrgCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgCreateRequestValidationError{}

// Validate checks the field values on OrgCreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgCreateResponseMultiError, or nil if none found.
func (m *OrgCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgCreateResponseMultiError(errors)
	}

	return nil
}

// OrgCreateResponseMultiError is an error wrapping multiple validation errors
// returned by OrgCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type OrgCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgCreateResponseMultiError) AllErrors() []error { return m }

// OrgCreateResponseValidationError is the validation error returned by
// OrgCreateResponse.Validate if the designated constraints aren't met.
type OrgCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgCreateResponseValidationError) ErrorName() string {
	return "OrgCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgCreateResponseValidationError{}

// Validate checks the field values on OrgDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrgDTOMultiError, or nil if none found.
func (m *OrgDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Creator

	// no validation rules for Desc

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Locale

	// no validation rules for IsPublic

	if all {
		switch v := interface{}(m.GetBlockoutConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockoutConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgDTOValidationError{
				field:  "BlockoutConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableReleaseCrossCluster

	// no validation rules for Selected

	// no validation rules for Operation

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for PublisherID

	// no validation rules for Domain

	// no validation rules for OpenFdp

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuditMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "AuditMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgDTOValidationError{
					field:  "AuditMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuditMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgDTOValidationError{
				field:  "AuditMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Config != nil {

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgDTOValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgDTOValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgDTOValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgDTOMultiError(errors)
	}

	return nil
}

// OrgDTOMultiError is an error wrapping multiple validation errors returned by
// OrgDTO.ValidateAll() if the designated constraints aren't met.
type OrgDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgDTOMultiError) AllErrors() []error { return m }

// OrgDTOValidationError is the validation error returned by OrgDTO.Validate if
// the designated constraints aren't met.
type OrgDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgDTOValidationError) ErrorName() string { return "OrgDTOValidationError" }

// Error satisfies the builtin error interface
func (e OrgDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgDTOValidationError{}

// Validate checks the field values on OrgFetchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgFetchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgFetchRequestMultiError, or nil if none found.
func (m *OrgFetchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgFetchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IDOrName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return OrgFetchRequestMultiError(errors)
	}

	return nil
}

// OrgFetchRequestMultiError is an error wrapping multiple validation errors
// returned by OrgFetchRequest.ValidateAll() if the designated constraints
// aren't met.
type OrgFetchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgFetchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgFetchRequestMultiError) AllErrors() []error { return m }

// OrgFetchRequestValidationError is the validation error returned by
// OrgFetchRequest.Validate if the designated constraints aren't met.
type OrgFetchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgFetchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgFetchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgFetchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgFetchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgFetchRequestValidationError) ErrorName() string { return "OrgFetchRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrgFetchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgFetchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgFetchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgFetchRequestValidationError{}

// Validate checks the field values on OrgGetByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgGetByDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgGetByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgGetByDomainRequestMultiError, or nil if none found.
func (m *OrgGetByDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgGetByDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for OrgName

	if len(errors) > 0 {
		return OrgGetByDomainRequestMultiError(errors)
	}

	return nil
}

// OrgGetByDomainRequestMultiError is an error wrapping multiple validation
// errors returned by OrgGetByDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type OrgGetByDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgGetByDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgGetByDomainRequestMultiError) AllErrors() []error { return m }

// OrgGetByDomainRequestValidationError is the validation error returned by
// OrgGetByDomainRequest.Validate if the designated constraints aren't met.
type OrgGetByDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgGetByDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgGetByDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgGetByDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgGetByDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgGetByDomainRequestValidationError) ErrorName() string {
	return "OrgGetByDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgGetByDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgGetByDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgGetByDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgGetByDomainRequestValidationError{}

// Validate checks the field values on OrgGetByDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgGetByDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgGetByDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgGetByDomainResponseMultiError, or nil if none found.
func (m *OrgGetByDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgGetByDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgGetByDomainResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgGetByDomainResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgGetByDomainResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgGetByDomainResponseMultiError(errors)
	}

	return nil
}

// OrgGetByDomainResponseMultiError is an error wrapping multiple validation
// errors returned by OrgGetByDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type OrgGetByDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgGetByDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgGetByDomainResponseMultiError) AllErrors() []error { return m }

// OrgGetByDomainResponseValidationError is the validation error returned by
// OrgGetByDomainResponse.Validate if the designated constraints aren't met.
type OrgGetByDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgGetByDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgGetByDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgGetByDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgGetByDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgGetByDomainResponseValidationError) ErrorName() string {
	return "OrgGetByDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgGetByDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgGetByDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgGetByDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgGetByDomainResponseValidationError{}

// Validate checks the field values on OrgNexusGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgNexusGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgNexusGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgNexusGetRequestMultiError, or nil if none found.
func (m *OrgNexusGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgNexusGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return OrgNexusGetRequestMultiError(errors)
	}

	return nil
}

// OrgNexusGetRequestMultiError is an error wrapping multiple validation errors
// returned by OrgNexusGetRequest.ValidateAll() if the designated constraints
// aren't met.
type OrgNexusGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgNexusGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgNexusGetRequestMultiError) AllErrors() []error { return m }

// OrgNexusGetRequestValidationError is the validation error returned by
// OrgNexusGetRequest.Validate if the designated constraints aren't met.
type OrgNexusGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgNexusGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgNexusGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgNexusGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgNexusGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgNexusGetRequestValidationError) ErrorName() string {
	return "OrgNexusGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgNexusGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgNexusGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgNexusGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgNexusGetRequestValidationError{}

// Validate checks the field values on OrgNexusGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgNexusGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgNexusGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgNexusGetResponseMultiError, or nil if none found.
func (m *OrgNexusGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgNexusGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgNexusGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgNexusGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgNexusGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgNexusGetResponseMultiError(errors)
	}

	return nil
}

// OrgNexusGetResponseMultiError is an error wrapping multiple validation
// errors returned by OrgNexusGetResponse.ValidateAll() if the designated
// constraints aren't met.
type OrgNexusGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgNexusGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgNexusGetResponseMultiError) AllErrors() []error { return m }

// OrgNexusGetResponseValidationError is the validation error returned by
// OrgNexusGetResponse.Validate if the designated constraints aren't met.
type OrgNexusGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgNexusGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgNexusGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgNexusGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgNexusGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgNexusGetResponseValidationError) ErrorName() string {
	return "OrgNexusGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgNexusGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgNexusGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgNexusGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgNexusGetResponseValidationError{}

// Validate checks the field values on OrgNexusShowPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgNexusShowPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgNexusShowPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgNexusShowPasswordRequestMultiError, or nil if none found.
func (m *OrgNexusShowPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgNexusShowPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return OrgNexusShowPasswordRequestMultiError(errors)
	}

	return nil
}

// OrgNexusShowPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by OrgNexusShowPasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type OrgNexusShowPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgNexusShowPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgNexusShowPasswordRequestMultiError) AllErrors() []error { return m }

// OrgNexusShowPasswordRequestValidationError is the validation error returned
// by OrgNexusShowPasswordRequest.Validate if the designated constraints
// aren't met.
type OrgNexusShowPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgNexusShowPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgNexusShowPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgNexusShowPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgNexusShowPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgNexusShowPasswordRequestValidationError) ErrorName() string {
	return "OrgNexusShowPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgNexusShowPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgNexusShowPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgNexusShowPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgNexusShowPasswordRequestValidationError{}

// Validate checks the field values on OrgNexusShowPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgNexusShowPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgNexusShowPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgNexusShowPasswordResponseMultiError, or nil if none found.
func (m *OrgNexusShowPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgNexusShowPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return OrgNexusShowPasswordResponseMultiError(errors)
	}

	return nil
}

// OrgNexusShowPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by OrgNexusShowPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type OrgNexusShowPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgNexusShowPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgNexusShowPasswordResponseMultiError) AllErrors() []error { return m }

// OrgNexusShowPasswordResponseValidationError is the validation error returned
// by OrgNexusShowPasswordResponse.Validate if the designated constraints
// aren't met.
type OrgNexusShowPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgNexusShowPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgNexusShowPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgNexusShowPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgNexusShowPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgNexusShowPasswordResponseValidationError) ErrorName() string {
	return "OrgNexusShowPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgNexusShowPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgNexusShowPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgNexusShowPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgNexusShowPasswordResponseValidationError{}

// Validate checks the field values on OrgResourceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgResourceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgResourceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgResourceInfoMultiError, or nil if none found.
func (m *OrgResourceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgResourceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCpu

	// no validation rules for TotalMem

	// no validation rules for AvailableCpu

	// no validation rules for AvailableMem

	if len(errors) > 0 {
		return OrgResourceInfoMultiError(errors)
	}

	return nil
}

// OrgResourceInfoMultiError is an error wrapping multiple validation errors
// returned by OrgResourceInfo.ValidateAll() if the designated constraints
// aren't met.
type OrgResourceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgResourceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgResourceInfoMultiError) AllErrors() []error { return m }

// OrgResourceInfoValidationError is the validation error returned by
// OrgResourceInfo.Validate if the designated constraints aren't met.
type OrgResourceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgResourceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgResourceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgResourceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgResourceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgResourceInfoValidationError) ErrorName() string { return "OrgResourceInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrgResourceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgResourceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgResourceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgResourceInfoValidationError{}

// Validate checks the field values on OrgSearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgSearchRequestMultiError, or nil if none found.
func (m *OrgSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Q

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Org

	if len(errors) > 0 {
		return OrgSearchRequestMultiError(errors)
	}

	return nil
}

// OrgSearchRequestMultiError is an error wrapping multiple validation errors
// returned by OrgSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type OrgSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgSearchRequestMultiError) AllErrors() []error { return m }

// OrgSearchRequestValidationError is the validation error returned by
// OrgSearchRequest.Validate if the designated constraints aren't met.
type OrgSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgSearchRequestValidationError) ErrorName() string { return "OrgSearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrgSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgSearchRequestValidationError{}

// Validate checks the field values on OrgSearchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgSearchResponseMultiError, or nil if none found.
func (m *OrgSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgSearchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgSearchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgSearchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgSearchResponseMultiError(errors)
	}

	return nil
}

// OrgSearchResponseMultiError is an error wrapping multiple validation errors
// returned by OrgSearchResponse.ValidateAll() if the designated constraints
// aren't met.
type OrgSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgSearchResponseMultiError) AllErrors() []error { return m }

// OrgSearchResponseValidationError is the validation error returned by
// OrgSearchResponse.Validate if the designated constraints aren't met.
type OrgSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgSearchResponseValidationError) ErrorName() string {
	return "OrgSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgSearchResponseValidationError{}

// Validate checks the field values on OrgUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgUpdateRequestMultiError, or nil if none found.
func (m *OrgUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgUpdateRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgUpdateRequestMultiError(errors)
	}

	return nil
}

// OrgUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by OrgUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type OrgUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgUpdateRequestMultiError) AllErrors() []error { return m }

// OrgUpdateRequestValidationError is the validation error returned by
// OrgUpdateRequest.Validate if the designated constraints aren't met.
type OrgUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgUpdateRequestValidationError) ErrorName() string { return "OrgUpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrgUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgUpdateRequestValidationError{}

// Validate checks the field values on OrgUpdateRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgUpdateRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgUpdateRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgUpdateRequestBodyMultiError, or nil if none found.
func (m *OrgUpdateRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgUpdateRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Locale

	// no validation rules for ID

	// no validation rules for PublisherName

	// no validation rules for IsPublic

	if m.Config != nil {

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgUpdateRequestBodyValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgUpdateRequestBodyValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgUpdateRequestBodyValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.BlockoutConfig != nil {

		if all {
			switch v := interface{}(m.GetBlockoutConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgUpdateRequestBodyValidationError{
						field:  "BlockoutConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgUpdateRequestBodyValidationError{
						field:  "BlockoutConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlockoutConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgUpdateRequestBodyValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgUpdateRequestBodyMultiError(errors)
	}

	return nil
}

// OrgUpdateRequestBodyMultiError is an error wrapping multiple validation
// errors returned by OrgUpdateRequestBody.ValidateAll() if the designated
// constraints aren't met.
type OrgUpdateRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgUpdateRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgUpdateRequestBodyMultiError) AllErrors() []error { return m }

// OrgUpdateRequestBodyValidationError is the validation error returned by
// OrgUpdateRequestBody.Validate if the designated constraints aren't met.
type OrgUpdateRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgUpdateRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgUpdateRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgUpdateRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgUpdateRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgUpdateRequestBodyValidationError) ErrorName() string {
	return "OrgUpdateRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e OrgUpdateRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgUpdateRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgUpdateRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgUpdateRequestBodyValidationError{}

// Validate checks the field values on PUBLISH_ITEM_CERTIFICATION_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PUBLISH_ITEM_CERTIFICATION_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PUBLISH_ITEM_CERTIFICATION_GET_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_CERTIFICATION_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_CERTIFICATION_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// PUBLISH_ITEM_CERTIFICATION_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_CERTIFICATION_GET_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError is the validation
// error returned by PUBLISH_ITEM_CERTIFICATION_GET_Request.Validate if the
// designated constraints aren't met.
type PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_CERTIFICATION_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_CERTIFICATION_GET_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_ERR_EFFACTS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PUBLISH_ITEM_ERR_EFFACTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_ERR_EFFACTS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_ERR_EFFACTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_ERR_EFFACTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// PUBLISH_ITEM_ERR_EFFACTS_Request.ValidateAll() if the designated
// constraints aren't met.
type PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_ERR_EFFACTS_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_ERR_EFFACTS_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_ERR_EFFACTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_ERR_EFFACTS_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_ERR_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PUBLISH_ITEM_ERR_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_ERR_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_ERR_LIST_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_ERR_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_ERR_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_ERR_LIST_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_ERR_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by PUBLISH_ITEM_ERR_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type PUBLISH_ITEM_ERR_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_ERR_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_ERR_LIST_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_ERR_LIST_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_ERR_LIST_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_ERR_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_ERR_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_ERR_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_ERR_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_ERR_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_ERR_LIST_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_ERR_RATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PUBLISH_ITEM_ERR_RATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_ERR_RATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_ERR_RATE_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_ERR_RATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_ERR_RATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_ERR_RATE_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_ERR_RATE_RequestMultiError is an error wrapping multiple
// validation errors returned by PUBLISH_ITEM_ERR_RATE_Request.ValidateAll()
// if the designated constraints aren't met.
type PUBLISH_ITEM_ERR_RATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_ERR_RATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_ERR_RATE_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_ERR_RATE_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_ERR_RATE_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_ERR_RATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_ERR_RATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_ERR_RATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_ERR_RATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_ERR_RATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_ERR_RATE_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_ERR_TREND_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PUBLISH_ITEM_ERR_TREND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_ERR_TREND_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_ERR_TREND_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_ERR_TREND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_ERR_TREND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_ERR_TREND_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_ERR_TREND_RequestMultiError is an error wrapping multiple
// validation errors returned by PUBLISH_ITEM_ERR_TREND_Request.ValidateAll()
// if the designated constraints aren't met.
type PUBLISH_ITEM_ERR_TREND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_ERR_TREND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_ERR_TREND_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_ERR_TREND_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_ERR_TREND_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_ERR_TREND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_ERR_TREND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_ERR_TREND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_ERR_TREND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_ERR_TREND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_ERR_TREND_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_METIRCS_COMMON_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PUBLISH_ITEM_METIRCS_COMMON_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_METIRCS_COMMON_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_METIRCS_COMMON_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_METIRCS_COMMON_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for MetricName

	if len(errors) > 0 {
		return PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError is an error wrapping multiple
// validation errors returned by
// PUBLISH_ITEM_METIRCS_COMMON_Request.ValidateAll() if the designated
// constraints aren't met.
type PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_METIRCS_COMMON_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_METIRCS_COMMON_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_METIRCS_COMMON_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_METIRCS_COMMON_RequestValidationError{}

// Validate checks the field values on
// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for MetricName

	if len(errors) > 0 {
		return PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError is an error wrapping
// multiple validation errors returned by
// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request.ValidateAll() if the
// designated constraints aren't met.
type PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError is the
// validation error returned by
// PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request.Validate if the designated
// constraints aren't met.
type PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_STATISTICS_TREND_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PUBLISH_ITEM_STATISTICS_TREND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_STATISTICS_TREND_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_STATISTICS_TREND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_STATISTICS_TREND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError is an error wrapping
// multiple validation errors returned by
// PUBLISH_ITEM_STATISTICS_TREND_Request.ValidateAll() if the designated
// constraints aren't met.
type PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_STATISTICS_TREND_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError is the validation error
// returned by PUBLISH_ITEM_STATISTICS_TREND_Request.Validate if the
// designated constraints aren't met.
type PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_STATISTICS_TREND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_STATISTICS_TREND_RequestValidationError{}

// Validate checks the field values on PUBLISH_ITEM_USERS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PUBLISH_ITEM_USERS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUBLISH_ITEM_USERS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PUBLISH_ITEM_USERS_RequestMultiError, or nil if none found.
func (m *PUBLISH_ITEM_USERS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUBLISH_ITEM_USERS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PUBLISH_ITEM_USERS_RequestMultiError(errors)
	}

	return nil
}

// PUBLISH_ITEM_USERS_RequestMultiError is an error wrapping multiple
// validation errors returned by PUBLISH_ITEM_USERS_Request.ValidateAll() if
// the designated constraints aren't met.
type PUBLISH_ITEM_USERS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUBLISH_ITEM_USERS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUBLISH_ITEM_USERS_RequestMultiError) AllErrors() []error { return m }

// PUBLISH_ITEM_USERS_RequestValidationError is the validation error returned
// by PUBLISH_ITEM_USERS_Request.Validate if the designated constraints aren't met.
type PUBLISH_ITEM_USERS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUBLISH_ITEM_USERS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUBLISH_ITEM_USERS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUBLISH_ITEM_USERS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUBLISH_ITEM_USERS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUBLISH_ITEM_USERS_RequestValidationError) ErrorName() string {
	return "PUBLISH_ITEM_USERS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUBLISH_ITEM_USERS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUBLISH_ITEM_USERS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUBLISH_ITEM_USERS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUBLISH_ITEM_USERS_RequestValidationError{}

// Validate checks the field values on PagingAPIAssetsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingAPIAssetsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingAPIAssetsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingAPIAssetsReqMultiError, or nil if none found.
func (m *PagingAPIAssetsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingAPIAssetsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingAPIAssetsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingAPIAssetsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingAPIAssetsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingAPIAssetsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingAPIAssetsReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingAPIAssetsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingAPIAssetsReqMultiError(errors)
	}

	return nil
}

// PagingAPIAssetsReqMultiError is an error wrapping multiple validation errors
// returned by PagingAPIAssetsReq.ValidateAll() if the designated constraints
// aren't met.
type PagingAPIAssetsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingAPIAssetsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingAPIAssetsReqMultiError) AllErrors() []error { return m }

// PagingAPIAssetsReqValidationError is the validation error returned by
// PagingAPIAssetsReq.Validate if the designated constraints aren't met.
type PagingAPIAssetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingAPIAssetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingAPIAssetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingAPIAssetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingAPIAssetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingAPIAssetsReqValidationError) ErrorName() string {
	return "PagingAPIAssetsReqValidationError"
}

// Error satisfies the builtin error interface
func (e PagingAPIAssetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingAPIAssetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingAPIAssetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingAPIAssetsReqValidationError{}

// Validate checks the field values on PagingAppCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingAppCertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingAppCertificateDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingAppCertificateDTOMultiError, or nil if none found.
func (m *PagingAppCertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingAppCertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingAppCertificateDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingAppCertificateDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingAppCertificateDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingAppCertificateDTOMultiError(errors)
	}

	return nil
}

// PagingAppCertificateDTOMultiError is an error wrapping multiple validation
// errors returned by PagingAppCertificateDTO.ValidateAll() if the designated
// constraints aren't met.
type PagingAppCertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingAppCertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingAppCertificateDTOMultiError) AllErrors() []error { return m }

// PagingAppCertificateDTOValidationError is the validation error returned by
// PagingAppCertificateDTO.Validate if the designated constraints aren't met.
type PagingAppCertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingAppCertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingAppCertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingAppCertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingAppCertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingAppCertificateDTOValidationError) ErrorName() string {
	return "PagingAppCertificateDTOValidationError"
}

// Error satisfies the builtin error interface
func (e PagingAppCertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingAppCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingAppCertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingAppCertificateDTOValidationError{}

// Validate checks the field values on PagingCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingCertificateDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingCertificateDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingCertificateDTOMultiError, or nil if none found.
func (m *PagingCertificateDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingCertificateDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingCertificateDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingCertificateDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingCertificateDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingCertificateDTOMultiError(errors)
	}

	return nil
}

// PagingCertificateDTOMultiError is an error wrapping multiple validation
// errors returned by PagingCertificateDTO.ValidateAll() if the designated
// constraints aren't met.
type PagingCertificateDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingCertificateDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingCertificateDTOMultiError) AllErrors() []error { return m }

// PagingCertificateDTOValidationError is the validation error returned by
// PagingCertificateDTO.Validate if the designated constraints aren't met.
type PagingCertificateDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingCertificateDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingCertificateDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingCertificateDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingCertificateDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingCertificateDTOValidationError) ErrorName() string {
	return "PagingCertificateDTOValidationError"
}

// Error satisfies the builtin error interface
func (e PagingCertificateDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingCertificateDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingCertificateDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingCertificateDTOValidationError{}

// Validate checks the field values on PagingOrgDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagingOrgDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingOrgDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagingOrgDTOMultiError, or
// nil if none found.
func (m *PagingOrgDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingOrgDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingOrgDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingOrgDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingOrgDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PagingOrgDTOMultiError(errors)
	}

	return nil
}

// PagingOrgDTOMultiError is an error wrapping multiple validation errors
// returned by PagingOrgDTO.ValidateAll() if the designated constraints aren't met.
type PagingOrgDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingOrgDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingOrgDTOMultiError) AllErrors() []error { return m }

// PagingOrgDTOValidationError is the validation error returned by
// PagingOrgDTO.Validate if the designated constraints aren't met.
type PagingOrgDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingOrgDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingOrgDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingOrgDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingOrgDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingOrgDTOValidationError) ErrorName() string { return "PagingOrgDTOValidationError" }

// Error satisfies the builtin error interface
func (e PagingOrgDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingOrgDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingOrgDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingOrgDTOValidationError{}

// Validate checks the field values on PagingProjectDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagingProjectDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingProjectDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingProjectDTOMultiError, or nil if none found.
func (m *PagingProjectDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingProjectDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingProjectDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingProjectDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingProjectDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingProjectDTOMultiError(errors)
	}

	return nil
}

// PagingProjectDTOMultiError is an error wrapping multiple validation errors
// returned by PagingProjectDTO.ValidateAll() if the designated constraints
// aren't met.
type PagingProjectDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingProjectDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingProjectDTOMultiError) AllErrors() []error { return m }

// PagingProjectDTOValidationError is the validation error returned by
// PagingProjectDTO.Validate if the designated constraints aren't met.
type PagingProjectDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingProjectDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingProjectDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingProjectDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingProjectDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingProjectDTOValidationError) ErrorName() string { return "PagingProjectDTOValidationError" }

// Error satisfies the builtin error interface
func (e PagingProjectDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingProjectDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingProjectDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingProjectDTOValidationError{}

// Validate checks the field values on PagingPublisherDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingPublisherDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingPublisherDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingPublisherDTOMultiError, or nil if none found.
func (m *PagingPublisherDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingPublisherDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingPublisherDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingPublisherDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingPublisherDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingPublisherDTOMultiError(errors)
	}

	return nil
}

// PagingPublisherDTOMultiError is an error wrapping multiple validation errors
// returned by PagingPublisherDTO.ValidateAll() if the designated constraints
// aren't met.
type PagingPublisherDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingPublisherDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingPublisherDTOMultiError) AllErrors() []error { return m }

// PagingPublisherDTOValidationError is the validation error returned by
// PagingPublisherDTO.Validate if the designated constraints aren't met.
type PagingPublisherDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingPublisherDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingPublisherDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingPublisherDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingPublisherDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingPublisherDTOValidationError) ErrorName() string {
	return "PagingPublisherDTOValidationError"
}

// Error satisfies the builtin error interface
func (e PagingPublisherDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingPublisherDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingPublisherDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingPublisherDTOValidationError{}

// Validate checks the field values on
// PipelineAppAllValidBranchWorkspaceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineAppAllValidBranchWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PipelineAppAllValidBranchWorkspaceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PipelineAppAllValidBranchWorkspaceResponseMultiError, or nil if none found.
func (m *PipelineAppAllValidBranchWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineAppAllValidBranchWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineAppAllValidBranchWorkspaceResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineAppAllValidBranchWorkspaceResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineAppAllValidBranchWorkspaceResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineAppAllValidBranchWorkspaceResponseMultiError(errors)
	}

	return nil
}

// PipelineAppAllValidBranchWorkspaceResponseMultiError is an error wrapping
// multiple validation errors returned by
// PipelineAppAllValidBranchWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineAppAllValidBranchWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineAppAllValidBranchWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineAppAllValidBranchWorkspaceResponseMultiError) AllErrors() []error { return m }

// PipelineAppAllValidBranchWorkspaceResponseValidationError is the validation
// error returned by PipelineAppAllValidBranchWorkspaceResponse.Validate if
// the designated constraints aren't met.
type PipelineAppAllValidBranchWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) ErrorName() string {
	return "PipelineAppAllValidBranchWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineAppAllValidBranchWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineAppAllValidBranchWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineAppAllValidBranchWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineAppAllValidBranchWorkspaceResponseValidationError{}

// Validate checks the field values on PipelineCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCancelResponseMultiError, or nil if none found.
func (m *PipelineCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineCancelResponseMultiError(errors)
	}

	return nil
}

// PipelineCancelResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCancelResponseMultiError) AllErrors() []error { return m }

// PipelineCancelResponseValidationError is the validation error returned by
// PipelineCancelResponse.Validate if the designated constraints aren't met.
type PipelineCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCancelResponseValidationError) ErrorName() string {
	return "PipelineCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCancelResponseValidationError{}

// Validate checks the field values on PipelineConfigNamespacesFetchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineConfigNamespacesFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineConfigNamespacesFetchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineConfigNamespacesFetchResponseMultiError, or nil if none found.
func (m *PipelineConfigNamespacesFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineConfigNamespacesFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineConfigNamespacesFetchResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineConfigNamespacesFetchResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineConfigNamespacesFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineConfigNamespacesFetchResponseMultiError(errors)
	}

	return nil
}

// PipelineConfigNamespacesFetchResponseMultiError is an error wrapping
// multiple validation errors returned by
// PipelineConfigNamespacesFetchResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineConfigNamespacesFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineConfigNamespacesFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineConfigNamespacesFetchResponseMultiError) AllErrors() []error { return m }

// PipelineConfigNamespacesFetchResponseValidationError is the validation error
// returned by PipelineConfigNamespacesFetchResponse.Validate if the
// designated constraints aren't met.
type PipelineConfigNamespacesFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineConfigNamespacesFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineConfigNamespacesFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineConfigNamespacesFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineConfigNamespacesFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineConfigNamespacesFetchResponseValidationError) ErrorName() string {
	return "PipelineConfigNamespacesFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineConfigNamespacesFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineConfigNamespacesFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineConfigNamespacesFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineConfigNamespacesFetchResponseValidationError{}

// Validate checks the field values on PipelineCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCreateRequestMultiError, or nil if none found.
func (m *PipelineCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	// no validation rules for Source

	// no validation rules for PipelineYmlSource

	// no validation rules for PipelineYmlName

	// no validation rules for PipelineYmlContent

	// no validation rules for AutoRun

	// no validation rules for UserID

	// no validation rules for IsCronTriggered

	if len(errors) > 0 {
		return PipelineCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCreateRequestMultiError) AllErrors() []error { return m }

// PipelineCreateRequestValidationError is the validation error returned by
// PipelineCreateRequest.Validate if the designated constraints aren't met.
type PipelineCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCreateRequestValidationError) ErrorName() string {
	return "PipelineCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCreateRequestValidationError{}

// Validate checks the field values on PipelineCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCreateResponseMultiError, or nil if none found.
func (m *PipelineCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCreateResponseMultiError) AllErrors() []error { return m }

// PipelineCreateResponseValidationError is the validation error returned by
// PipelineCreateResponse.Validate if the designated constraints aren't met.
type PipelineCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCreateResponseValidationError) ErrorName() string {
	return "PipelineCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCreateResponseValidationError{}

// Validate checks the field values on PipelineCronDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineCronDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCronDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCronDTOMultiError, or nil if none found.
func (m *PipelineCronDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCronDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCronDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCronDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCronDTOValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCronDTOValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCronDTOValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCronDTOValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApplicationID

	// no validation rules for Branch

	// no validation rules for CronExpr

	// no validation rules for PipelineYmlName

	// no validation rules for BasePipelineID

	// no validation rules for PipelineYml

	// no validation rules for Secrets

	// no validation rules for UserID

	// no validation rules for OrgID

	// no validation rules for PipelineDefinitionID

	// no validation rules for PipelineSource

	// no validation rules for ClusterName

	if m.CronStartTime != nil {

		if all {
			switch v := interface{}(m.GetCronStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCronDTOValidationError{
						field:  "CronStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCronDTOValidationError{
						field:  "CronStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCronStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCronDTOValidationError{
					field:  "CronStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Enable != nil {
		// no validation rules for Enable
	}

	if len(errors) > 0 {
		return PipelineCronDTOMultiError(errors)
	}

	return nil
}

// PipelineCronDTOMultiError is an error wrapping multiple validation errors
// returned by PipelineCronDTO.ValidateAll() if the designated constraints
// aren't met.
type PipelineCronDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCronDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCronDTOMultiError) AllErrors() []error { return m }

// PipelineCronDTOValidationError is the validation error returned by
// PipelineCronDTO.Validate if the designated constraints aren't met.
type PipelineCronDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCronDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCronDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCronDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCronDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCronDTOValidationError) ErrorName() string { return "PipelineCronDTOValidationError" }

// Error satisfies the builtin error interface
func (e PipelineCronDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCronDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCronDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCronDTOValidationError{}

// Validate checks the field values on PipelineCronListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCronListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCronListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCronListResponseMultiError, or nil if none found.
func (m *PipelineCronListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCronListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCronListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCronListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCronListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineCronListResponseMultiError(errors)
	}

	return nil
}

// PipelineCronListResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCronListResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCronListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCronListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCronListResponseMultiError) AllErrors() []error { return m }

// PipelineCronListResponseValidationError is the validation error returned by
// PipelineCronListResponse.Validate if the designated constraints aren't met.
type PipelineCronListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCronListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCronListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCronListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCronListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCronListResponseValidationError) ErrorName() string {
	return "PipelineCronListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCronListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCronListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCronListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCronListResponseValidationError{}

// Validate checks the field values on PipelineCronStartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCronStartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCronStartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCronStartResponseMultiError, or nil if none found.
func (m *PipelineCronStartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCronStartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCronStartResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCronStartResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCronStartResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineCronStartResponseMultiError(errors)
	}

	return nil
}

// PipelineCronStartResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCronStartResponse.ValidateAll() if the
// designated constraints aren't met.
type PipelineCronStartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCronStartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCronStartResponseMultiError) AllErrors() []error { return m }

// PipelineCronStartResponseValidationError is the validation error returned by
// PipelineCronStartResponse.Validate if the designated constraints aren't met.
type PipelineCronStartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCronStartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCronStartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCronStartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCronStartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCronStartResponseValidationError) ErrorName() string {
	return "PipelineCronStartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCronStartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCronStartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCronStartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCronStartResponseValidationError{}

// Validate checks the field values on PipelineCronStopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCronStopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCronStopResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCronStopResponseMultiError, or nil if none found.
func (m *PipelineCronStopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCronStopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCronStopResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCronStopResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCronStopResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineCronStopResponseMultiError(errors)
	}

	return nil
}

// PipelineCronStopResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCronStopResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCronStopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCronStopResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCronStopResponseMultiError) AllErrors() []error { return m }

// PipelineCronStopResponseValidationError is the validation error returned by
// PipelineCronStopResponse.Validate if the designated constraints aren't met.
type PipelineCronStopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCronStopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCronStopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCronStopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCronStopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCronStopResponseValidationError) ErrorName() string {
	return "PipelineCronStopResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCronStopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCronStopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCronStopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCronStopResponseValidationError{}

// Validate checks the field values on PipelineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDetailResponseMultiError, or nil if none found.
func (m *PipelineDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDetailResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDetailResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineDetailResponseMultiError(errors)
	}

	return nil
}

// PipelineDetailResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDetailResponseMultiError) AllErrors() []error { return m }

// PipelineDetailResponseValidationError is the validation error returned by
// PipelineDetailResponse.Validate if the designated constraints aren't met.
type PipelineDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDetailResponseValidationError) ErrorName() string {
	return "PipelineDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDetailResponseValidationError{}

// Validate checks the field values on PipelineGetBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineGetBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineGetBranchRuleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineGetBranchRuleResponseMultiError, or nil if none found.
func (m *PipelineGetBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineGetBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineGetBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineGetBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineGetBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineGetBranchRuleResponseMultiError(errors)
	}

	return nil
}

// PipelineGetBranchRuleResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineGetBranchRuleResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineGetBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineGetBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineGetBranchRuleResponseMultiError) AllErrors() []error { return m }

// PipelineGetBranchRuleResponseValidationError is the validation error
// returned by PipelineGetBranchRuleResponse.Validate if the designated
// constraints aren't met.
type PipelineGetBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineGetBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineGetBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineGetBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineGetBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineGetBranchRuleResponseValidationError) ErrorName() string {
	return "PipelineGetBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineGetBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineGetBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineGetBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineGetBranchRuleResponseValidationError{}

// Validate checks the field values on PipelineInvokedCombo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineInvokedCombo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineInvokedCombo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineInvokedComboMultiError, or nil if none found.
func (m *PipelineInvokedCombo) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineInvokedCombo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branch

	// no validation rules for Source

	// no validation rules for YmlName

	// no validation rules for PipelineID

	// no validation rules for Commit

	// no validation rules for Status

	// no validation rules for TriggerMode

	// no validation rules for Workspace

	if m.TimeCreated != nil {

		if all {
			switch v := interface{}(m.GetTimeCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineInvokedComboValidationError{
						field:  "TimeCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineInvokedComboValidationError{
						field:  "TimeCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineInvokedComboValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CancelUser != nil {

		if all {
			switch v := interface{}(m.GetCancelUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineInvokedComboValidationError{
						field:  "CancelUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineInvokedComboValidationError{
						field:  "CancelUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCancelUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineInvokedComboValidationError{
					field:  "CancelUser",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineInvokedComboMultiError(errors)
	}

	return nil
}

// PipelineInvokedComboMultiError is an error wrapping multiple validation
// errors returned by PipelineInvokedCombo.ValidateAll() if the designated
// constraints aren't met.
type PipelineInvokedComboMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineInvokedComboMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineInvokedComboMultiError) AllErrors() []error { return m }

// PipelineInvokedComboValidationError is the validation error returned by
// PipelineInvokedCombo.Validate if the designated constraints aren't met.
type PipelineInvokedComboValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineInvokedComboValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineInvokedComboValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineInvokedComboValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineInvokedComboValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineInvokedComboValidationError) ErrorName() string {
	return "PipelineInvokedComboValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineInvokedComboValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineInvokedCombo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineInvokedComboValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineInvokedComboValidationError{}

// Validate checks the field values on PipelineInvokedComboRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineInvokedComboRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineInvokedComboRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineInvokedComboRequestMultiError, or nil if none found.
func (m *PipelineInvokedComboRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineInvokedComboRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branches

	// no validation rules for Sources

	// no validation rules for YmlNames

	if len(errors) > 0 {
		return PipelineInvokedComboRequestMultiError(errors)
	}

	return nil
}

// PipelineInvokedComboRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineInvokedComboRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineInvokedComboRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineInvokedComboRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineInvokedComboRequestMultiError) AllErrors() []error { return m }

// PipelineInvokedComboRequestValidationError is the validation error returned
// by PipelineInvokedComboRequest.Validate if the designated constraints
// aren't met.
type PipelineInvokedComboRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineInvokedComboRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineInvokedComboRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineInvokedComboRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineInvokedComboRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineInvokedComboRequestValidationError) ErrorName() string {
	return "PipelineInvokedComboRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineInvokedComboRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineInvokedComboRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineInvokedComboRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineInvokedComboRequestValidationError{}

// Validate checks the field values on PipelineInvokedComboResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineInvokedComboResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineInvokedComboResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineInvokedComboResponseMultiError, or nil if none found.
func (m *PipelineInvokedComboResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineInvokedComboResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineInvokedComboResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineInvokedComboResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineInvokedComboResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineInvokedComboResponseMultiError(errors)
	}

	return nil
}

// PipelineInvokedComboResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineInvokedComboResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineInvokedComboResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineInvokedComboResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineInvokedComboResponseMultiError) AllErrors() []error { return m }

// PipelineInvokedComboResponseValidationError is the validation error returned
// by PipelineInvokedComboResponse.Validate if the designated constraints
// aren't met.
type PipelineInvokedComboResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineInvokedComboResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineInvokedComboResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineInvokedComboResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineInvokedComboResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineInvokedComboResponseValidationError) ErrorName() string {
	return "PipelineInvokedComboResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineInvokedComboResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineInvokedComboResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineInvokedComboResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineInvokedComboResponseValidationError{}

// Validate checks the field values on PipelineOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineOperateRequestMultiError, or nil if none found.
func (m *PipelineOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaskOperates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineOperateRequestValidationError{
						field:  fmt.Sprintf("TaskOperates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineOperateRequestValidationError{
						field:  fmt.Sprintf("TaskOperates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineOperateRequestValidationError{
					field:  fmt.Sprintf("TaskOperates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return PipelineOperateRequestMultiError(errors)
	}

	return nil
}

// PipelineOperateRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineOperateRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineOperateRequestMultiError) AllErrors() []error { return m }

// PipelineOperateRequestValidationError is the validation error returned by
// PipelineOperateRequest.Validate if the designated constraints aren't met.
type PipelineOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineOperateRequestValidationError) ErrorName() string {
	return "PipelineOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineOperateRequestValidationError{}

// Validate checks the field values on PipelineOperateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineOperateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineOperateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineOperateResponseMultiError, or nil if none found.
func (m *PipelineOperateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineOperateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineOperateResponseMultiError(errors)
	}

	return nil
}

// PipelineOperateResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineOperateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineOperateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineOperateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineOperateResponseMultiError) AllErrors() []error { return m }

// PipelineOperateResponseValidationError is the validation error returned by
// PipelineOperateResponse.Validate if the designated constraints aren't met.
type PipelineOperateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineOperateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineOperateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineOperateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineOperateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineOperateResponseValidationError) ErrorName() string {
	return "PipelineOperateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineOperateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineOperateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineOperateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineOperateResponseValidationError{}

// Validate checks the field values on PipelinePageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelinePageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelinePageListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelinePageListRequestMultiError, or nil if none found.
func (m *PipelinePageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelinePageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommaBranches

	// no validation rules for CommaSources

	// no validation rules for CommaYmlNames

	// no validation rules for CommaStatuses

	// no validation rules for AppID

	// no validation rules for AllSources

	// no validation rules for IncludeSnippet

	if all {
		switch v := interface{}(m.GetStartTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePageListRequestValidationError{
				field:  "StartTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTimeBeginTimestamp

	// no validation rules for StartTimeBeginCST

	if all {
		switch v := interface{}(m.GetEndTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "EndTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "EndTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePageListRequestValidationError{
				field:  "EndTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EndTimeBeginTimestamp

	// no validation rules for EndTimeBeginCST

	if all {
		switch v := interface{}(m.GetStartTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "StartTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "StartTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePageListRequestValidationError{
				field:  "StartTimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTimeCreatedTimestamp

	if all {
		switch v := interface{}(m.GetEndTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "EndTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePageListRequestValidationError{
					field:  "EndTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePageListRequestValidationError{
				field:  "EndTimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EndTimeCreatedTimestamp

	// no validation rules for MustMatchLabelsJSON

	{
		sorted_keys := make([]string, len(m.GetMustMatchLabels()))
		i := 0
		for key := range m.GetMustMatchLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMustMatchLabels()[key]
			_ = val

			// no validation rules for MustMatchLabels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelinePageListRequestValidationError{
							field:  fmt.Sprintf("MustMatchLabels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelinePageListRequestValidationError{
							field:  fmt.Sprintf("MustMatchLabels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelinePageListRequestValidationError{
						field:  fmt.Sprintf("MustMatchLabels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for AnyMatchLabelsJSON

	{
		sorted_keys := make([]string, len(m.GetAnyMatchLabels()))
		i := 0
		for key := range m.GetAnyMatchLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnyMatchLabels()[key]
			_ = val

			// no validation rules for AnyMatchLabels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelinePageListRequestValidationError{
							field:  fmt.Sprintf("AnyMatchLabels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelinePageListRequestValidationError{
							field:  fmt.Sprintf("AnyMatchLabels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelinePageListRequestValidationError{
						field:  fmt.Sprintf("AnyMatchLabels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for PageNum

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for LargePageSize

	// no validation rules for CountOnly

	// no validation rules for StartIDGt

	// no validation rules for EndIDLt

	// no validation rules for PipelineDefinitionRequestJSONBase64

	if m.PipelineDefinitionRequest != nil {

		if all {
			switch v := interface{}(m.GetPipelineDefinitionRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelinePageListRequestValidationError{
						field:  "PipelineDefinitionRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelinePageListRequestValidationError{
						field:  "PipelineDefinitionRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipelineDefinitionRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelinePageListRequestValidationError{
					field:  "PipelineDefinitionRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelinePageListRequestMultiError(errors)
	}

	return nil
}

// PipelinePageListRequestMultiError is an error wrapping multiple validation
// errors returned by PipelinePageListRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelinePageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelinePageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelinePageListRequestMultiError) AllErrors() []error { return m }

// PipelinePageListRequestValidationError is the validation error returned by
// PipelinePageListRequest.Validate if the designated constraints aren't met.
type PipelinePageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelinePageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelinePageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelinePageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelinePageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelinePageListRequestValidationError) ErrorName() string {
	return "PipelinePageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelinePageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelinePageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelinePageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelinePageListRequestValidationError{}

// Validate checks the field values on PipelinePageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelinePageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelinePageListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelinePageListResponseMultiError, or nil if none found.
func (m *PipelinePageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelinePageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelinePageListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelinePageListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelinePageListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelinePageListResponseMultiError(errors)
	}

	return nil
}

// PipelinePageListResponseMultiError is an error wrapping multiple validation
// errors returned by PipelinePageListResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelinePageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelinePageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelinePageListResponseMultiError) AllErrors() []error { return m }

// PipelinePageListResponseValidationError is the validation error returned by
// PipelinePageListResponse.Validate if the designated constraints aren't met.
type PipelinePageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelinePageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelinePageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelinePageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelinePageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelinePageListResponseValidationError) ErrorName() string {
	return "PipelinePageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelinePageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelinePageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelinePageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelinePageListResponseValidationError{}

// Validate checks the field values on PipelineRerunFailedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunFailedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunFailedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunFailedResponseMultiError, or nil if none found.
func (m *PipelineRerunFailedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunFailedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRerunFailedResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRerunFailedResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRerunFailedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineRerunFailedResponseMultiError(errors)
	}

	return nil
}

// PipelineRerunFailedResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineRerunFailedResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineRerunFailedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunFailedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunFailedResponseMultiError) AllErrors() []error { return m }

// PipelineRerunFailedResponseValidationError is the validation error returned
// by PipelineRerunFailedResponse.Validate if the designated constraints
// aren't met.
type PipelineRerunFailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunFailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunFailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunFailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunFailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunFailedResponseValidationError) ErrorName() string {
	return "PipelineRerunFailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunFailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunFailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunFailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunFailedResponseValidationError{}

// Validate checks the field values on PipelineRerunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunResponseMultiError, or nil if none found.
func (m *PipelineRerunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRerunResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRerunResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRerunResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineRerunResponseMultiError(errors)
	}

	return nil
}

// PipelineRerunResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineRerunResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineRerunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunResponseMultiError) AllErrors() []error { return m }

// PipelineRerunResponseValidationError is the validation error returned by
// PipelineRerunResponse.Validate if the designated constraints aren't met.
type PipelineRerunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunResponseValidationError) ErrorName() string {
	return "PipelineRerunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunResponseValidationError{}

// Validate checks the field values on PipelineRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunResponseMultiError, or nil if none found.
func (m *PipelineRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineRunResponseMultiError(errors)
	}

	return nil
}

// PipelineRunResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineRunResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunResponseMultiError) AllErrors() []error { return m }

// PipelineRunResponseValidationError is the validation error returned by
// PipelineRunResponse.Validate if the designated constraints aren't met.
type PipelineRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunResponseValidationError) ErrorName() string {
	return "PipelineRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunResponseValidationError{}

// Validate checks the field values on PipelineTaskOperateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskOperateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskOperateRequestMultiError, or nil if none found.
func (m *PipelineTaskOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for TaskAlias

	if m.Disable != nil {
		// no validation rules for Disable
	}

	if m.Pause != nil {
		// no validation rules for Pause
	}

	if len(errors) > 0 {
		return PipelineTaskOperateRequestMultiError(errors)
	}

	return nil
}

// PipelineTaskOperateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTaskOperateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineTaskOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskOperateRequestMultiError) AllErrors() []error { return m }

// PipelineTaskOperateRequestValidationError is the validation error returned
// by PipelineTaskOperateRequest.Validate if the designated constraints aren't met.
type PipelineTaskOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskOperateRequestValidationError) ErrorName() string {
	return "PipelineTaskOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskOperateRequestValidationError{}

// Validate checks the field values on ProjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCreateRequestMultiError, or nil if none found.
func (m *ProjectCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Logo

	// no validation rules for DdHook

	// no validation rules for Desc

	// no validation rules for Creator

	// no validation rules for OrgID

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for ClusterConfig

	// no validation rules for RollbackConfig

	// no validation rules for CpuQuota

	// no validation rules for MemQuota

	// no validation rules for Template

	if m.ResourceConfigs != nil {

		if all {
			switch v := interface{}(m.GetResourceConfigs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectCreateRequestValidationError{
						field:  "ResourceConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectCreateRequestValidationError{
						field:  "ResourceConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceConfigs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectCreateRequestValidationError{
					field:  "ResourceConfigs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectCreateRequestMultiError(errors)
	}

	return nil
}

// ProjectCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCreateRequestMultiError) AllErrors() []error { return m }

// ProjectCreateRequestValidationError is the validation error returned by
// ProjectCreateRequest.Validate if the designated constraints aren't met.
type ProjectCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCreateRequestValidationError) ErrorName() string {
	return "ProjectCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCreateRequestValidationError{}

// Validate checks the field values on ProjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCreateResponseMultiError, or nil if none found.
func (m *ProjectCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ProjectCreateResponseMultiError(errors)
	}

	return nil
}

// ProjectCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCreateResponseMultiError) AllErrors() []error { return m }

// ProjectCreateResponseValidationError is the validation error returned by
// ProjectCreateResponse.Validate if the designated constraints aren't met.
type ProjectCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCreateResponseValidationError) ErrorName() string {
	return "ProjectCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCreateResponseValidationError{}

// Validate checks the field values on ProjectDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectDTOMultiError, or
// nil if none found.
func (m *ProjectDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for DDHook

	// no validation rules for OrgID

	// no validation rules for Creator

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for ActiveTime

	// no validation rules for Joined

	// no validation rules for BlockStatus

	// no validation rules for CanManage

	// no validation rules for IsPublic

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProjectResourceUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "ProjectResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "ProjectResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectResourceUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "ProjectResourceUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterConfig

	// no validation rules for RollbackConfig

	// no validation rules for CpuQuota

	// no validation rules for MemQuota

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if m.CanUnblock != nil {
		// no validation rules for CanUnblock
	}

	if m.ResourceConfig != nil {

		if all {
			switch v := interface{}(m.GetResourceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectDTOValidationError{
						field:  "ResourceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectDTOValidationError{
						field:  "ResourceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectDTOValidationError{
					field:  "ResourceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectDTOMultiError(errors)
	}

	return nil
}

// ProjectDTOMultiError is an error wrapping multiple validation errors
// returned by ProjectDTO.ValidateAll() if the designated constraints aren't met.
type ProjectDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDTOMultiError) AllErrors() []error { return m }

// ProjectDTOValidationError is the validation error returned by
// ProjectDTO.Validate if the designated constraints aren't met.
type ProjectDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDTOValidationError) ErrorName() string { return "ProjectDTOValidationError" }

// Error satisfies the builtin error interface
func (e ProjectDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDTOValidationError{}

// Validate checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteRequestMultiError, or nil if none found.
func (m *ProjectDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ProjectDeleteRequestMultiError(errors)
	}

	return nil
}

// ProjectDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteRequestMultiError) AllErrors() []error { return m }

// ProjectDeleteRequestValidationError is the validation error returned by
// ProjectDeleteRequest.Validate if the designated constraints aren't met.
type ProjectDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteRequestValidationError) ErrorName() string {
	return "ProjectDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteRequestValidationError{}

// Validate checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDeleteResponseMultiError, or nil if none found.
func (m *ProjectDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDeleteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectDeleteResponseMultiError(errors)
	}

	return nil
}

// ProjectDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDeleteResponseMultiError) AllErrors() []error { return m }

// ProjectDeleteResponseValidationError is the validation error returned by
// ProjectDeleteResponse.Validate if the designated constraints aren't met.
type ProjectDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDeleteResponseValidationError) ErrorName() string {
	return "ProjectDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDeleteResponseValidationError{}

// Validate checks the field values on ProjectDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDetailRequestMultiError, or nil if none found.
func (m *ProjectDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectIDOrName

	// no validation rules for OrgID

	// no validation rules for OrgName

	if len(errors) > 0 {
		return ProjectDetailRequestMultiError(errors)
	}

	return nil
}

// ProjectDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDetailRequestMultiError) AllErrors() []error { return m }

// ProjectDetailRequestValidationError is the validation error returned by
// ProjectDetailRequest.Validate if the designated constraints aren't met.
type ProjectDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDetailRequestValidationError) ErrorName() string {
	return "ProjectDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDetailRequestValidationError{}

// Validate checks the field values on ProjectDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectDetailResponseMultiError, or nil if none found.
func (m *ProjectDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectDetailResponseMultiError(errors)
	}

	return nil
}

// ProjectDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDetailResponseMultiError) AllErrors() []error { return m }

// ProjectDetailResponseValidationError is the validation error returned by
// ProjectDetailResponse.Validate if the designated constraints aren't met.
type ProjectDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDetailResponseValidationError) ErrorName() string {
	return "ProjectDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDetailResponseValidationError{}

// Validate checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListRequestMultiError, or nil if none found.
func (m *ProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Query

	// no validation rules for Name

	// no validation rules for OrderBy

	// no validation rules for Asc

	// no validation rules for Joined

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for KeepMsp

	// no validation rules for IsPublic

	if len(errors) > 0 {
		return ProjectListRequestMultiError(errors)
	}

	return nil
}

// ProjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListRequestMultiError) AllErrors() []error { return m }

// ProjectListRequestValidationError is the validation error returned by
// ProjectListRequest.Validate if the designated constraints aren't met.
type ProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListRequestValidationError) ErrorName() string {
	return "ProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListRequestValidationError{}

// Validate checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponseMultiError, or nil if none found.
func (m *ProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectListResponseMultiError(errors)
	}

	return nil
}

// ProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponseMultiError) AllErrors() []error { return m }

// ProjectListResponseValidationError is the validation error returned by
// ProjectListResponse.Validate if the designated constraints aren't met.
type ProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponseValidationError) ErrorName() string {
	return "ProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponseValidationError{}

// Validate checks the field values on ProjectPackageParse_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPackageParse_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPackageParse_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPackageParse_RequestMultiError, or nil if none found.
func (m *ProjectPackageParse_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPackageParse_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectPackageParse_RequestMultiError(errors)
	}

	return nil
}

// ProjectPackageParse_RequestMultiError is an error wrapping multiple
// validation errors returned by ProjectPackageParse_Request.ValidateAll() if
// the designated constraints aren't met.
type ProjectPackageParse_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPackageParse_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPackageParse_RequestMultiError) AllErrors() []error { return m }

// ProjectPackageParse_RequestValidationError is the validation error returned
// by ProjectPackageParse_Request.Validate if the designated constraints
// aren't met.
type ProjectPackageParse_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPackageParse_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPackageParse_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPackageParse_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPackageParse_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPackageParse_RequestValidationError) ErrorName() string {
	return "ProjectPackageParse_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPackageParse_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPackageParse_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPackageParse_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPackageParse_RequestValidationError{}

// Validate checks the field values on ProjectPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPackageRequestMultiError, or nil if none found.
func (m *ProjectPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for OrgID

	// no validation rules for OrgName

	if len(errors) > 0 {
		return ProjectPackageRequestMultiError(errors)
	}

	return nil
}

// ProjectPackageRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectPackageRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPackageRequestMultiError) AllErrors() []error { return m }

// ProjectPackageRequestValidationError is the validation error returned by
// ProjectPackageRequest.Validate if the designated constraints aren't met.
type ProjectPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPackageRequestValidationError) ErrorName() string {
	return "ProjectPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPackageRequestValidationError{}

// Validate checks the field values on ProjectResourceUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectResourceUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectResourceUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectResourceUsageMultiError, or nil if none found.
func (m *ProjectResourceUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectResourceUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuServiceUsed

	// no validation rules for MemServiceUsed

	// no validation rules for CpuAddonUsed

	// no validation rules for MemAddonUsed

	if len(errors) > 0 {
		return ProjectResourceUsageMultiError(errors)
	}

	return nil
}

// ProjectResourceUsageMultiError is an error wrapping multiple validation
// errors returned by ProjectResourceUsage.ValidateAll() if the designated
// constraints aren't met.
type ProjectResourceUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectResourceUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectResourceUsageMultiError) AllErrors() []error { return m }

// ProjectResourceUsageValidationError is the validation error returned by
// ProjectResourceUsage.Validate if the designated constraints aren't met.
type ProjectResourceUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectResourceUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectResourceUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectResourceUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectResourceUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectResourceUsageValidationError) ErrorName() string {
	return "ProjectResourceUsageValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectResourceUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectResourceUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectResourceUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectResourceUsageValidationError{}

// Validate checks the field values on ProjectStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectStatsMultiError, or
// nil if none found.
func (m *ProjectStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CountApplications

	// no validation rules for CountMembers

	// no validation rules for TotalApplicationsCount

	// no validation rules for TotalMembersCount

	// no validation rules for TotalIterationsCount

	// no validation rules for RunningIterationsCount

	// no validation rules for PlanningIterationsCount

	// no validation rules for TotalManHourCount

	// no validation rules for UsedManHourCount

	// no validation rules for PlanningManHourCount

	// no validation rules for DoneBugCount

	// no validation rules for TotalBugCount

	// no validation rules for DoneBugPercent

	if len(errors) > 0 {
		return ProjectStatsMultiError(errors)
	}

	return nil
}

// ProjectStatsMultiError is an error wrapping multiple validation errors
// returned by ProjectStats.ValidateAll() if the designated constraints aren't met.
type ProjectStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectStatsMultiError) AllErrors() []error { return m }

// ProjectStatsValidationError is the validation error returned by
// ProjectStats.Validate if the designated constraints aren't met.
type ProjectStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectStatsValidationError) ErrorName() string { return "ProjectStatsValidationError" }

// Error satisfies the builtin error interface
func (e ProjectStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectStatsValidationError{}

// Validate checks the field values on ProxyMetrics_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProxyMetrics_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyMetrics_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProxyMetrics_RequestMultiError, or nil if none found.
func (m *ProxyMetrics_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyMetrics_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProxyMetrics_RequestMultiError(errors)
	}

	return nil
}

// ProxyMetrics_RequestMultiError is an error wrapping multiple validation
// errors returned by ProxyMetrics_Request.ValidateAll() if the designated
// constraints aren't met.
type ProxyMetrics_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyMetrics_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyMetrics_RequestMultiError) AllErrors() []error { return m }

// ProxyMetrics_RequestValidationError is the validation error returned by
// ProxyMetrics_Request.Validate if the designated constraints aren't met.
type ProxyMetrics_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyMetrics_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyMetrics_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyMetrics_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyMetrics_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyMetrics_RequestValidationError) ErrorName() string {
	return "ProxyMetrics_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProxyMetrics_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyMetrics_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyMetrics_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyMetrics_RequestValidationError{}

// Validate checks the field values on PublishItemStatisticsDetailData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemStatisticsDetailData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsDetailData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsDetailDataMultiError, or nil if none found.
func (m *PublishItemStatisticsDetailData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsDetailData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishItemStatisticsDetailDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishItemStatisticsDetailDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishItemStatisticsDetailDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublishItemStatisticsDetailDataMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsDetailDataMultiError is an error wrapping multiple
// validation errors returned by PublishItemStatisticsDetailData.ValidateAll()
// if the designated constraints aren't met.
type PublishItemStatisticsDetailDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsDetailDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsDetailDataMultiError) AllErrors() []error { return m }

// PublishItemStatisticsDetailDataValidationError is the validation error
// returned by PublishItemStatisticsDetailData.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsDetailDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsDetailDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsDetailDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsDetailDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsDetailDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsDetailDataValidationError) ErrorName() string {
	return "PublishItemStatisticsDetailDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsDetailDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsDetailData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsDetailDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsDetailDataValidationError{}

// Validate checks the field values on PublishItemStatisticsDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemStatisticsDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsDetailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsDetailRequestMultiError, or nil if none found.
func (m *PublishItemStatisticsDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EndTime

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return PublishItemStatisticsDetailRequestMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsDetailRequestMultiError) AllErrors() []error { return m }

// PublishItemStatisticsDetailRequestValidationError is the validation error
// returned by PublishItemStatisticsDetailRequest.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsDetailRequestValidationError) ErrorName() string {
	return "PublishItemStatisticsDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsDetailRequestValidationError{}

// Validate checks the field values on PublishItemStatisticsDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemStatisticsDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsDetailResponseMultiError, or nil if none found.
func (m *PublishItemStatisticsDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for TotalUsers

	// no validation rules for TotalUsersGrowth

	// no validation rules for NewUsers

	// no validation rules for ActiveUsers

	// no validation rules for ActiveUsersGrowth

	// no validation rules for Launches

	// no validation rules for UpgradeUser

	if len(errors) > 0 {
		return PublishItemStatisticsDetailResponseMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsDetailResponseMultiError) AllErrors() []error { return m }

// PublishItemStatisticsDetailResponseValidationError is the validation error
// returned by PublishItemStatisticsDetailResponse.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsDetailResponseValidationError) ErrorName() string {
	return "PublishItemStatisticsDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsDetailResponseValidationError{}

// Validate checks the field values on PublishItemStatisticsErrListData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemStatisticsErrListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsErrListData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsErrListDataMultiError, or nil if none found.
func (m *PublishItemStatisticsErrListData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsErrListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishItemStatisticsErrListDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishItemStatisticsErrListDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishItemStatisticsErrListDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublishItemStatisticsErrListDataMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsErrListDataMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsErrListData.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsErrListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsErrListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsErrListDataMultiError) AllErrors() []error { return m }

// PublishItemStatisticsErrListDataValidationError is the validation error
// returned by PublishItemStatisticsErrListData.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsErrListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsErrListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsErrListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsErrListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsErrListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsErrListDataValidationError) ErrorName() string {
	return "PublishItemStatisticsErrListDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsErrListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsErrListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsErrListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsErrListDataValidationError{}

// Validate checks the field values on PublishItemStatisticsErrListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PublishItemStatisticsErrListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsErrListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsErrListResponseMultiError, or nil if none found.
func (m *PublishItemStatisticsErrListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsErrListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrSummary

	// no validation rules for AppVersion

	if all {
		switch v := interface{}(m.GetTimeOfFirst()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemStatisticsErrListResponseValidationError{
					field:  "TimeOfFirst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemStatisticsErrListResponseValidationError{
					field:  "TimeOfFirst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeOfFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemStatisticsErrListResponseValidationError{
				field:  "TimeOfFirst",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeOfRecent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemStatisticsErrListResponseValidationError{
					field:  "TimeOfRecent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemStatisticsErrListResponseValidationError{
					field:  "TimeOfRecent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeOfRecent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemStatisticsErrListResponseValidationError{
				field:  "TimeOfRecent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalErr

	// no validation rules for AffectUsers

	if len(errors) > 0 {
		return PublishItemStatisticsErrListResponseMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsErrListResponseMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsErrListResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsErrListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsErrListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsErrListResponseMultiError) AllErrors() []error { return m }

// PublishItemStatisticsErrListResponseValidationError is the validation error
// returned by PublishItemStatisticsErrListResponse.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsErrListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsErrListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsErrListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsErrListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsErrListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsErrListResponseValidationError) ErrorName() string {
	return "PublishItemStatisticsErrListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsErrListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsErrListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsErrListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsErrListResponseValidationError{}

// Validate checks the field values on PublishItemStatisticsErrTrendData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemStatisticsErrTrendData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsErrTrendData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsErrTrendDataMultiError, or nil if none found.
func (m *PublishItemStatisticsErrTrendData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsErrTrendData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemStatisticsErrTrendDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemStatisticsErrTrendDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemStatisticsErrTrendDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemStatisticsErrTrendDataMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsErrTrendDataMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsErrTrendData.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsErrTrendDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsErrTrendDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsErrTrendDataMultiError) AllErrors() []error { return m }

// PublishItemStatisticsErrTrendDataValidationError is the validation error
// returned by PublishItemStatisticsErrTrendData.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsErrTrendDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsErrTrendDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsErrTrendDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsErrTrendDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsErrTrendDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsErrTrendDataValidationError) ErrorName() string {
	return "PublishItemStatisticsErrTrendDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsErrTrendDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsErrTrendData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsErrTrendDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsErrTrendDataValidationError{}

// Validate checks the field values on PublishItemStatisticsErrTrendResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PublishItemStatisticsErrTrendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsErrTrendResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsErrTrendResponseMultiError, or nil if none found.
func (m *PublishItemStatisticsErrTrendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsErrTrendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CrashTimes

	// no validation rules for CrashRate

	// no validation rules for CrashRateGrowth

	// no validation rules for AffectUsers

	// no validation rules for AffectUsersProportion

	// no validation rules for AffectUsersProportionGrowth

	if len(errors) > 0 {
		return PublishItemStatisticsErrTrendResponseMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsErrTrendResponseMultiError is an error wrapping
// multiple validation errors returned by
// PublishItemStatisticsErrTrendResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsErrTrendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsErrTrendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsErrTrendResponseMultiError) AllErrors() []error { return m }

// PublishItemStatisticsErrTrendResponseValidationError is the validation error
// returned by PublishItemStatisticsErrTrendResponse.Validate if the
// designated constraints aren't met.
type PublishItemStatisticsErrTrendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsErrTrendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsErrTrendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsErrTrendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsErrTrendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsErrTrendResponseValidationError) ErrorName() string {
	return "PublishItemStatisticsErrTrendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsErrTrendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsErrTrendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsErrTrendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsErrTrendResponseValidationError{}

// Validate checks the field values on PublishItemStatisticsTrendData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemStatisticsTrendData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsTrendData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsTrendDataMultiError, or nil if none found.
func (m *PublishItemStatisticsTrendData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsTrendData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemStatisticsTrendDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemStatisticsTrendDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemStatisticsTrendDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemStatisticsTrendDataMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsTrendDataMultiError is an error wrapping multiple
// validation errors returned by PublishItemStatisticsTrendData.ValidateAll()
// if the designated constraints aren't met.
type PublishItemStatisticsTrendDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsTrendDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsTrendDataMultiError) AllErrors() []error { return m }

// PublishItemStatisticsTrendDataValidationError is the validation error
// returned by PublishItemStatisticsTrendData.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsTrendDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsTrendDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsTrendDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsTrendDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsTrendDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsTrendDataValidationError) ErrorName() string {
	return "PublishItemStatisticsTrendDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsTrendDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsTrendData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsTrendDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsTrendDataValidationError{}

// Validate checks the field values on PublishItemStatisticsTrendResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemStatisticsTrendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemStatisticsTrendResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemStatisticsTrendResponseMultiError, or nil if none found.
func (m *PublishItemStatisticsTrendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemStatisticsTrendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SevenDayAvgNewUsers

	// no validation rules for SevenDayAvgNewUsersGrowth

	// no validation rules for SevenDayAvgActiveUsers

	// no validation rules for SevenDayAvgActiveUsersGrowth

	// no validation rules for SevenDayAvgNewUsersRetention

	// no validation rules for SevenDayAvgNewUsersRetentionGrowth

	// no validation rules for SevenDayAvgDuration

	// no validation rules for SevenDayAvgDurationGrowth

	// no validation rules for SevenDayTotalActiveUsers

	// no validation rules for SevenDayTotalActiveUsersGrowth

	// no validation rules for MonthTotalActiveUsers

	// no validation rules for MonthTotalActiveUsersGrowth

	// no validation rules for TotalUsers

	// no validation rules for TotalCrashRate

	if len(errors) > 0 {
		return PublishItemStatisticsTrendResponseMultiError(errors)
	}

	return nil
}

// PublishItemStatisticsTrendResponseMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemStatisticsTrendResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishItemStatisticsTrendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemStatisticsTrendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemStatisticsTrendResponseMultiError) AllErrors() []error { return m }

// PublishItemStatisticsTrendResponseValidationError is the validation error
// returned by PublishItemStatisticsTrendResponse.Validate if the designated
// constraints aren't met.
type PublishItemStatisticsTrendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemStatisticsTrendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemStatisticsTrendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemStatisticsTrendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemStatisticsTrendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemStatisticsTrendResponseValidationError) ErrorName() string {
	return "PublishItemStatisticsTrendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemStatisticsTrendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemStatisticsTrendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemStatisticsTrendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemStatisticsTrendResponseValidationError{}

// Validate checks the field values on PublisherCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherCreateRequestMultiError, or nil if none found.
func (m *PublisherCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PublisherType

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for OrgID

	if len(errors) > 0 {
		return PublisherCreateRequestMultiError(errors)
	}

	return nil
}

// PublisherCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PublisherCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PublisherCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherCreateRequestMultiError) AllErrors() []error { return m }

// PublisherCreateRequestValidationError is the validation error returned by
// PublisherCreateRequest.Validate if the designated constraints aren't met.
type PublisherCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherCreateRequestValidationError) ErrorName() string {
	return "PublisherCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherCreateRequestValidationError{}

// Validate checks the field values on PublisherCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherCreateResponseMultiError, or nil if none found.
func (m *PublisherCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PublisherCreateResponseMultiError(errors)
	}

	return nil
}

// PublisherCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PublisherCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PublisherCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherCreateResponseMultiError) AllErrors() []error { return m }

// PublisherCreateResponseValidationError is the validation error returned by
// PublisherCreateResponse.Validate if the designated constraints aren't met.
type PublisherCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherCreateResponseValidationError) ErrorName() string {
	return "PublisherCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherCreateResponseValidationError{}

// Validate checks the field values on PublisherDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublisherDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublisherDTOMultiError, or
// nil if none found.
func (m *PublisherDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for PublisherType

	// no validation rules for PublisherKey

	// no validation rules for OrgID

	// no validation rules for Creator

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for Joined

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNexusRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublisherDTOValidationError{
						field:  fmt.Sprintf("NexusRepositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublisherDTOValidationError{
						field:  fmt.Sprintf("NexusRepositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublisherDTOValidationError{
					field:  fmt.Sprintf("NexusRepositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublisherDTOMultiError(errors)
	}

	return nil
}

// PublisherDTOMultiError is an error wrapping multiple validation errors
// returned by PublisherDTO.ValidateAll() if the designated constraints aren't met.
type PublisherDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherDTOMultiError) AllErrors() []error { return m }

// PublisherDTOValidationError is the validation error returned by
// PublisherDTO.Validate if the designated constraints aren't met.
type PublisherDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherDTOValidationError) ErrorName() string { return "PublisherDTOValidationError" }

// Error satisfies the builtin error interface
func (e PublisherDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherDTOValidationError{}

// Validate checks the field values on PublisherDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherDeleteResponseMultiError, or nil if none found.
func (m *PublisherDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PublisherDeleteResponseMultiError(errors)
	}

	return nil
}

// PublisherDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by PublisherDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PublisherDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherDeleteResponseMultiError) AllErrors() []error { return m }

// PublisherDeleteResponseValidationError is the validation error returned by
// PublisherDeleteResponse.Validate if the designated constraints aren't met.
type PublisherDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherDeleteResponseValidationError) ErrorName() string {
	return "PublisherDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherDeleteResponseValidationError{}

// Validate checks the field values on PublisherDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherDetailResponseMultiError, or nil if none found.
func (m *PublisherDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublisherDetailResponseMultiError(errors)
	}

	return nil
}

// PublisherDetailResponseMultiError is an error wrapping multiple validation
// errors returned by PublisherDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type PublisherDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherDetailResponseMultiError) AllErrors() []error { return m }

// PublisherDetailResponseValidationError is the validation error returned by
// PublisherDetailResponse.Validate if the designated constraints aren't met.
type PublisherDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherDetailResponseValidationError) ErrorName() string {
	return "PublisherDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherDetailResponseValidationError{}

// Validate checks the field values on PublisherListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherListRequestMultiError, or nil if none found.
func (m *PublisherListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Joined

	// no validation rules for Query

	// no validation rules for Name

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PublisherListRequestMultiError(errors)
	}

	return nil
}

// PublisherListRequestMultiError is an error wrapping multiple validation
// errors returned by PublisherListRequest.ValidateAll() if the designated
// constraints aren't met.
type PublisherListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherListRequestMultiError) AllErrors() []error { return m }

// PublisherListRequestValidationError is the validation error returned by
// PublisherListRequest.Validate if the designated constraints aren't met.
type PublisherListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherListRequestValidationError) ErrorName() string {
	return "PublisherListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherListRequestValidationError{}

// Validate checks the field values on PublisherListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherListResponseMultiError, or nil if none found.
func (m *PublisherListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublisherListResponseMultiError(errors)
	}

	return nil
}

// PublisherListResponseMultiError is an error wrapping multiple validation
// errors returned by PublisherListResponse.ValidateAll() if the designated
// constraints aren't met.
type PublisherListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherListResponseMultiError) AllErrors() []error { return m }

// PublisherListResponseValidationError is the validation error returned by
// PublisherListResponse.Validate if the designated constraints aren't met.
type PublisherListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherListResponseValidationError) ErrorName() string {
	return "PublisherListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherListResponseValidationError{}

// Validate checks the field values on PublisherUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherUpdateRequestMultiError, or nil if none found.
func (m *PublisherUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Logo

	// no validation rules for Desc

	if len(errors) > 0 {
		return PublisherUpdateRequestMultiError(errors)
	}

	return nil
}

// PublisherUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PublisherUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PublisherUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherUpdateRequestMultiError) AllErrors() []error { return m }

// PublisherUpdateRequestValidationError is the validation error returned by
// PublisherUpdateRequest.Validate if the designated constraints aren't met.
type PublisherUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherUpdateRequestValidationError) ErrorName() string {
	return "PublisherUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherUpdateRequestValidationError{}

// Validate checks the field values on PublisherUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherUpdateResponseMultiError, or nil if none found.
func (m *PublisherUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublisherUpdateResponseMultiError(errors)
	}

	return nil
}

// PublisherUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by PublisherUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PublisherUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherUpdateResponseMultiError) AllErrors() []error { return m }

// PublisherUpdateResponseValidationError is the validation error returned by
// PublisherUpdateResponse.Validate if the designated constraints aren't met.
type PublisherUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherUpdateResponseValidationError) ErrorName() string {
	return "PublisherUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherUpdateResponseValidationError{}

// Validate checks the field values on PushCertificateConfigs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushCertificateConfigs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCertificateConfigs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushCertificateConfigsMultiError, or nil if none found.
func (m *PushCertificateConfigs) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCertificateConfigs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for CertificateType

	if all {
		switch v := interface{}(m.GetIOSKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "IOSKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "IOSKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIOSKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsValidationError{
				field:  "IOSKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAndroidKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "AndroidKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "AndroidKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsValidationError{
				field:  "AndroidKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "MessageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsValidationError{
					field:  "MessageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsValidationError{
				field:  "MessageKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushCertificateConfigsMultiError(errors)
	}

	return nil
}

// PushCertificateConfigsMultiError is an error wrapping multiple validation
// errors returned by PushCertificateConfigs.ValidateAll() if the designated
// constraints aren't met.
type PushCertificateConfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCertificateConfigsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCertificateConfigsMultiError) AllErrors() []error { return m }

// PushCertificateConfigsValidationError is the validation error returned by
// PushCertificateConfigs.Validate if the designated constraints aren't met.
type PushCertificateConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCertificateConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCertificateConfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCertificateConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCertificateConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCertificateConfigsValidationError) ErrorName() string {
	return "PushCertificateConfigsValidationError"
}

// Error satisfies the builtin error interface
func (e PushCertificateConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCertificateConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCertificateConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCertificateConfigsValidationError{}

// Validate checks the field values on PushCertificateConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushCertificateConfigsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushCertificateConfigsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PushCertificateConfigsRequestMultiError, or nil if none found.
func (m *PushCertificateConfigsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushCertificateConfigsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for AppID

	// no validation rules for CertificateID

	// no validation rules for CertificateType

	if all {
		switch v := interface{}(m.GetIOSKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "IOSKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "IOSKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIOSKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsRequestValidationError{
				field:  "IOSKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAndroidKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "AndroidKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "AndroidKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroidKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsRequestValidationError{
				field:  "AndroidKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "MessageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushCertificateConfigsRequestValidationError{
					field:  "MessageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushCertificateConfigsRequestValidationError{
				field:  "MessageKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushCertificateConfigsRequestMultiError(errors)
	}

	return nil
}

// PushCertificateConfigsRequestMultiError is an error wrapping multiple
// validation errors returned by PushCertificateConfigsRequest.ValidateAll()
// if the designated constraints aren't met.
type PushCertificateConfigsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushCertificateConfigsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushCertificateConfigsRequestMultiError) AllErrors() []error { return m }

// PushCertificateConfigsRequestValidationError is the validation error
// returned by PushCertificateConfigsRequest.Validate if the designated
// constraints aren't met.
type PushCertificateConfigsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushCertificateConfigsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushCertificateConfigsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushCertificateConfigsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushCertificateConfigsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushCertificateConfigsRequestValidationError) ErrorName() string {
	return "PushCertificateConfigsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushCertificateConfigsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushCertificateConfigsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushCertificateConfigsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushCertificateConfigsRequestValidationError{}

// Validate checks the field values on QA_APITESTS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_APITESTS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_APITESTS_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_APITESTS_GET_RequestMultiError, or nil if none found.
func (m *QA_APITESTS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_APITESTS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_APITESTS_GET_RequestMultiError(errors)
	}

	return nil
}

// QA_APITESTS_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_APITESTS_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_APITESTS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_APITESTS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_APITESTS_GET_RequestMultiError) AllErrors() []error { return m }

// QA_APITESTS_GET_RequestValidationError is the validation error returned by
// QA_APITESTS_GET_Request.Validate if the designated constraints aren't met.
type QA_APITESTS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_APITESTS_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_APITESTS_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_APITESTS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_APITESTS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_APITESTS_GET_RequestValidationError) ErrorName() string {
	return "QA_APITESTS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_APITESTS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_APITESTS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_APITESTS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_APITESTS_GET_RequestValidationError{}

// Validate checks the field values on QA_AUTOTEST_SPACE_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_AUTOTEST_SPACE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_AUTOTEST_SPACE_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QA_AUTOTEST_SPACE_GET_RequestMultiError, or nil if none found.
func (m *QA_AUTOTEST_SPACE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_AUTOTEST_SPACE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_AUTOTEST_SPACE_GET_RequestMultiError(errors)
	}

	return nil
}

// QA_AUTOTEST_SPACE_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by QA_AUTOTEST_SPACE_GET_Request.ValidateAll()
// if the designated constraints aren't met.
type QA_AUTOTEST_SPACE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_AUTOTEST_SPACE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_AUTOTEST_SPACE_GET_RequestMultiError) AllErrors() []error { return m }

// QA_AUTOTEST_SPACE_GET_RequestValidationError is the validation error
// returned by QA_AUTOTEST_SPACE_GET_Request.Validate if the designated
// constraints aren't met.
type QA_AUTOTEST_SPACE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) ErrorName() string {
	return "QA_AUTOTEST_SPACE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_AUTOTEST_SPACE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_AUTOTEST_SPACE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_AUTOTEST_SPACE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_AUTOTEST_SPACE_GET_RequestValidationError{}

// Validate checks the field values on QA_PIPELINE_TASK_LOGS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_PIPELINE_TASK_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_PIPELINE_TASK_LOGS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QA_PIPELINE_TASK_LOGS_RequestMultiError, or nil if none found.
func (m *QA_PIPELINE_TASK_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_PIPELINE_TASK_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for TaskID

	if len(errors) > 0 {
		return QA_PIPELINE_TASK_LOGS_RequestMultiError(errors)
	}

	return nil
}

// QA_PIPELINE_TASK_LOGS_RequestMultiError is an error wrapping multiple
// validation errors returned by QA_PIPELINE_TASK_LOGS_Request.ValidateAll()
// if the designated constraints aren't met.
type QA_PIPELINE_TASK_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_PIPELINE_TASK_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_PIPELINE_TASK_LOGS_RequestMultiError) AllErrors() []error { return m }

// QA_PIPELINE_TASK_LOGS_RequestValidationError is the validation error
// returned by QA_PIPELINE_TASK_LOGS_Request.Validate if the designated
// constraints aren't met.
type QA_PIPELINE_TASK_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) ErrorName() string {
	return "QA_PIPELINE_TASK_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_PIPELINE_TASK_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_PIPELINE_TASK_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_PIPELINE_TASK_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_PIPELINE_TASK_LOGS_RequestValidationError{}

// Validate checks the field values on QA_RECORDS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_RECORDS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_RECORDS_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_RECORDS_GET_RequestMultiError, or nil if none found.
func (m *QA_RECORDS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_RECORDS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_RECORDS_GET_RequestMultiError(errors)
	}

	return nil
}

// QA_RECORDS_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_RECORDS_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_RECORDS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_RECORDS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_RECORDS_GET_RequestMultiError) AllErrors() []error { return m }

// QA_RECORDS_GET_RequestValidationError is the validation error returned by
// QA_RECORDS_GET_Request.Validate if the designated constraints aren't met.
type QA_RECORDS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_RECORDS_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_RECORDS_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_RECORDS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_RECORDS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_RECORDS_GET_RequestValidationError) ErrorName() string {
	return "QA_RECORDS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_RECORDS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_RECORDS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_RECORDS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_RECORDS_GET_RequestValidationError{}

// Validate checks the field values on QA_SONAR_GET_CREDENTIAL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_SONAR_GET_CREDENTIAL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_SONAR_GET_CREDENTIAL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QA_SONAR_GET_CREDENTIAL_RequestMultiError, or nil if none found.
func (m *QA_SONAR_GET_CREDENTIAL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_SONAR_GET_CREDENTIAL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QA_SONAR_GET_CREDENTIAL_RequestMultiError(errors)
	}

	return nil
}

// QA_SONAR_GET_CREDENTIAL_RequestMultiError is an error wrapping multiple
// validation errors returned by QA_SONAR_GET_CREDENTIAL_Request.ValidateAll()
// if the designated constraints aren't met.
type QA_SONAR_GET_CREDENTIAL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_SONAR_GET_CREDENTIAL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_SONAR_GET_CREDENTIAL_RequestMultiError) AllErrors() []error { return m }

// QA_SONAR_GET_CREDENTIAL_RequestValidationError is the validation error
// returned by QA_SONAR_GET_CREDENTIAL_Request.Validate if the designated
// constraints aren't met.
type QA_SONAR_GET_CREDENTIAL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) ErrorName() string {
	return "QA_SONAR_GET_CREDENTIAL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_SONAR_GET_CREDENTIAL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_SONAR_GET_CREDENTIAL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_SONAR_GET_CREDENTIAL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_SONAR_GET_CREDENTIAL_RequestValidationError{}

// Validate checks the field values on QA_SONAR_ISSUES_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_SONAR_ISSUES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_SONAR_ISSUES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_SONAR_ISSUES_RequestMultiError, or nil if none found.
func (m *QA_SONAR_ISSUES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_SONAR_ISSUES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QA_SONAR_ISSUES_RequestMultiError(errors)
	}

	return nil
}

// QA_SONAR_ISSUES_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_SONAR_ISSUES_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_SONAR_ISSUES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_SONAR_ISSUES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_SONAR_ISSUES_RequestMultiError) AllErrors() []error { return m }

// QA_SONAR_ISSUES_RequestValidationError is the validation error returned by
// QA_SONAR_ISSUES_Request.Validate if the designated constraints aren't met.
type QA_SONAR_ISSUES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_SONAR_ISSUES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_SONAR_ISSUES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_SONAR_ISSUES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_SONAR_ISSUES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_SONAR_ISSUES_RequestValidationError) ErrorName() string {
	return "QA_SONAR_ISSUES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_SONAR_ISSUES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_SONAR_ISSUES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_SONAR_ISSUES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_SONAR_ISSUES_RequestValidationError{}

// Validate checks the field values on QA_SONAR_METRIC_RULES_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QA_SONAR_METRIC_RULES_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_SONAR_METRIC_RULES_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QA_SONAR_METRIC_RULES_GET_RequestMultiError, or nil if none found.
func (m *QA_SONAR_METRIC_RULES_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_SONAR_METRIC_RULES_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_SONAR_METRIC_RULES_GET_RequestMultiError(errors)
	}

	return nil
}

// QA_SONAR_METRIC_RULES_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// QA_SONAR_METRIC_RULES_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_SONAR_METRIC_RULES_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_SONAR_METRIC_RULES_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_SONAR_METRIC_RULES_GET_RequestMultiError) AllErrors() []error { return m }

// QA_SONAR_METRIC_RULES_GET_RequestValidationError is the validation error
// returned by QA_SONAR_METRIC_RULES_GET_Request.Validate if the designated
// constraints aren't met.
type QA_SONAR_METRIC_RULES_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) ErrorName() string {
	return "QA_SONAR_METRIC_RULES_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_SONAR_METRIC_RULES_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_SONAR_METRIC_RULES_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_SONAR_METRIC_RULES_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_SONAR_METRIC_RULES_GET_RequestValidationError{}

// Validate checks the field values on QA_TESTENV_CREATE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_TESTENV_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_TESTENV_CREATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_TESTENV_CREATE_RequestMultiError, or nil if none found.
func (m *QA_TESTENV_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_TESTENV_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QA_TESTENV_CREATE_RequestMultiError(errors)
	}

	return nil
}

// QA_TESTENV_CREATE_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_TESTENV_CREATE_Request.ValidateAll() if the
// designated constraints aren't met.
type QA_TESTENV_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_TESTENV_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_TESTENV_CREATE_RequestMultiError) AllErrors() []error { return m }

// QA_TESTENV_CREATE_RequestValidationError is the validation error returned by
// QA_TESTENV_CREATE_Request.Validate if the designated constraints aren't met.
type QA_TESTENV_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_TESTENV_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_TESTENV_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_TESTENV_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_TESTENV_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_TESTENV_CREATE_RequestValidationError) ErrorName() string {
	return "QA_TESTENV_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_TESTENV_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_TESTENV_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_TESTENV_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_TESTENV_CREATE_RequestValidationError{}

// Validate checks the field values on QA_TESTENV_DELETE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_TESTENV_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_TESTENV_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_TESTENV_DELETE_RequestMultiError, or nil if none found.
func (m *QA_TESTENV_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_TESTENV_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_TESTENV_DELETE_RequestMultiError(errors)
	}

	return nil
}

// QA_TESTENV_DELETE_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_TESTENV_DELETE_Request.ValidateAll() if the
// designated constraints aren't met.
type QA_TESTENV_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_TESTENV_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_TESTENV_DELETE_RequestMultiError) AllErrors() []error { return m }

// QA_TESTENV_DELETE_RequestValidationError is the validation error returned by
// QA_TESTENV_DELETE_Request.Validate if the designated constraints aren't met.
type QA_TESTENV_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_TESTENV_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_TESTENV_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_TESTENV_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_TESTENV_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_TESTENV_DELETE_RequestValidationError) ErrorName() string {
	return "QA_TESTENV_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_TESTENV_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_TESTENV_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_TESTENV_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_TESTENV_DELETE_RequestValidationError{}

// Validate checks the field values on QA_TESTENV_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_TESTENV_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_TESTENV_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_TESTENV_GET_RequestMultiError, or nil if none found.
func (m *QA_TESTENV_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_TESTENV_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QA_TESTENV_GET_RequestMultiError(errors)
	}

	return nil
}

// QA_TESTENV_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_TESTENV_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_TESTENV_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_TESTENV_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_TESTENV_GET_RequestMultiError) AllErrors() []error { return m }

// QA_TESTENV_GET_RequestValidationError is the validation error returned by
// QA_TESTENV_GET_Request.Validate if the designated constraints aren't met.
type QA_TESTENV_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_TESTENV_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_TESTENV_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_TESTENV_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_TESTENV_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_TESTENV_GET_RequestValidationError) ErrorName() string {
	return "QA_TESTENV_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_TESTENV_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_TESTENV_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_TESTENV_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_TESTENV_GET_RequestValidationError{}

// Validate checks the field values on QA_TESTENV_LIST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_TESTENV_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_TESTENV_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_TESTENV_LIST_RequestMultiError, or nil if none found.
func (m *QA_TESTENV_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_TESTENV_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QA_TESTENV_LIST_RequestMultiError(errors)
	}

	return nil
}

// QA_TESTENV_LIST_RequestMultiError is an error wrapping multiple validation
// errors returned by QA_TESTENV_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_TESTENV_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_TESTENV_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_TESTENV_LIST_RequestMultiError) AllErrors() []error { return m }

// QA_TESTENV_LIST_RequestValidationError is the validation error returned by
// QA_TESTENV_LIST_Request.Validate if the designated constraints aren't met.
type QA_TESTENV_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_TESTENV_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_TESTENV_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_TESTENV_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_TESTENV_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_TESTENV_LIST_RequestValidationError) ErrorName() string {
	return "QA_TESTENV_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_TESTENV_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_TESTENV_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_TESTENV_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_TESTENV_LIST_RequestValidationError{}

// Validate checks the field values on QA_TESTPLAN_PIPELINE_DETAIL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QA_TESTPLAN_PIPELINE_DETAIL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_TESTPLAN_PIPELINE_DETAIL_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError, or nil if none found.
func (m *QA_TESTPLAN_PIPELINE_DETAIL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_TESTPLAN_PIPELINE_DETAIL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineId

	if len(errors) > 0 {
		return QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError(errors)
	}

	return nil
}

// QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError is an error wrapping multiple
// validation errors returned by
// QA_TESTPLAN_PIPELINE_DETAIL_Request.ValidateAll() if the designated
// constraints aren't met.
type QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_TESTPLAN_PIPELINE_DETAIL_RequestMultiError) AllErrors() []error { return m }

// QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError is the validation error
// returned by QA_TESTPLAN_PIPELINE_DETAIL_Request.Validate if the designated
// constraints aren't met.
type QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) ErrorName() string {
	return "QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_TESTPLAN_PIPELINE_DETAIL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_TESTPLAN_PIPELINE_DETAIL_RequestValidationError{}

// Validate checks the field values on QueryAppPublishItemRelationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryAppPublishItemRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAppPublishItemRelationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryAppPublishItemRelationResponseMultiError, or nil if none found.
func (m *QueryAppPublishItemRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAppPublishItemRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAppPublishItemRelationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAppPublishItemRelationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAppPublishItemRelationResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryAppPublishItemRelationResponseMultiError(errors)
	}

	return nil
}

// QueryAppPublishItemRelationResponseMultiError is an error wrapping multiple
// validation errors returned by
// QueryAppPublishItemRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAppPublishItemRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAppPublishItemRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAppPublishItemRelationResponseMultiError) AllErrors() []error { return m }

// QueryAppPublishItemRelationResponseValidationError is the validation error
// returned by QueryAppPublishItemRelationResponse.Validate if the designated
// constraints aren't met.
type QueryAppPublishItemRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAppPublishItemRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAppPublishItemRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAppPublishItemRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAppPublishItemRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAppPublishItemRelationResponseValidationError) ErrorName() string {
	return "QueryAppPublishItemRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAppPublishItemRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAppPublishItemRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAppPublishItemRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAppPublishItemRelationResponseValidationError{}

// Validate checks the field values on QueryBranchRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBranchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBranchRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBranchRuleRequestMultiError, or nil if none found.
func (m *QueryBranchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBranchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for AppID

	if len(errors) > 0 {
		return QueryBranchRuleRequestMultiError(errors)
	}

	return nil
}

// QueryBranchRuleRequestMultiError is an error wrapping multiple validation
// errors returned by QueryBranchRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryBranchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBranchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBranchRuleRequestMultiError) AllErrors() []error { return m }

// QueryBranchRuleRequestValidationError is the validation error returned by
// QueryBranchRuleRequest.Validate if the designated constraints aren't met.
type QueryBranchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBranchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBranchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBranchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBranchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBranchRuleRequestValidationError) ErrorName() string {
	return "QueryBranchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBranchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBranchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBranchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBranchRuleRequestValidationError{}

// Validate checks the field values on QueryBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBranchRuleResponseMultiError, or nil if none found.
func (m *QueryBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryBranchRuleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryBranchRuleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryBranchRuleResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryBranchRuleResponseMultiError(errors)
	}

	return nil
}

// QueryBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by QueryBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBranchRuleResponseMultiError) AllErrors() []error { return m }

// QueryBranchRuleResponseValidationError is the validation error returned by
// QueryBranchRuleResponse.Validate if the designated constraints aren't met.
type QueryBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBranchRuleResponseValidationError) ErrorName() string {
	return "QueryBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBranchRuleResponseValidationError{}

// Validate checks the field values on RoleInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoMultiError, or nil
// if none found.
func (m *RoleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Name

	if len(errors) > 0 {
		return RoleInfoMultiError(errors)
	}

	return nil
}

// RoleInfoMultiError is an error wrapping multiple validation errors returned
// by RoleInfo.ValidateAll() if the designated constraints aren't met.
type RoleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoMultiError) AllErrors() []error { return m }

// RoleInfoValidationError is the validation error returned by
// RoleInfo.Validate if the designated constraints aren't met.
type RoleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoValidationError) ErrorName() string { return "RoleInfoValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoValidationError{}

// Validate checks the field values on RoleList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleListMultiError, or nil
// if none found.
func (m *RoleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return RoleListMultiError(errors)
	}

	return nil
}

// RoleListMultiError is an error wrapping multiple validation errors returned
// by RoleList.ValidateAll() if the designated constraints aren't met.
type RoleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListMultiError) AllErrors() []error { return m }

// RoleListValidationError is the validation error returned by
// RoleList.Validate if the designated constraints aren't met.
type RoleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListValidationError) ErrorName() string { return "RoleListValidationError" }

// Error satisfies the builtin error interface
func (e RoleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListValidationError{}

// Validate checks the field values on SLAModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SLAModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SLAModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SLAModelMultiError, or nil
// if none found.
func (m *SLAModel) ValidateAll() error {
	return m.validate(true)
}

func (m *SLAModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SLAModelValidationError{
					field:  "BaseModel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SLAModelValidationError{
					field:  "BaseModel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SLAModelValidationError{
				field:  "BaseModel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Approval

	// no validation rules for AccessID

	// no validation rules for Source

	if len(errors) > 0 {
		return SLAModelMultiError(errors)
	}

	return nil
}

// SLAModelMultiError is an error wrapping multiple validation errors returned
// by SLAModel.ValidateAll() if the designated constraints aren't met.
type SLAModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SLAModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SLAModelMultiError) AllErrors() []error { return m }

// SLAModelValidationError is the validation error returned by
// SLAModel.Validate if the designated constraints aren't met.
type SLAModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SLAModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SLAModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SLAModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SLAModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SLAModelValidationError) ErrorName() string { return "SLAModelValidationError" }

// Error satisfies the builtin error interface
func (e SLAModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSLAModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SLAModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SLAModelValidationError{}

// Validate checks the field values on SPOT_APITESTS_LOGS_DOWNLOAD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SPOT_APITESTS_LOGS_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_APITESTS_LOGS_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *SPOT_APITESTS_LOGS_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_APITESTS_LOGS_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// SPOT_APITESTS_LOGS_DOWNLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_APITESTS_LOGS_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError is the validation error
// returned by SPOT_APITESTS_LOGS_DOWNLOAD_Request.Validate if the designated
// constraints aren't met.
type SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_APITESTS_LOGS_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_APITESTS_LOGS_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on SPOT_APITESTS_LOGS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SPOT_APITESTS_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SPOT_APITESTS_LOGS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SPOT_APITESTS_LOGS_RequestMultiError, or nil if none found.
func (m *SPOT_APITESTS_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SPOT_APITESTS_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SPOT_APITESTS_LOGS_RequestMultiError(errors)
	}

	return nil
}

// SPOT_APITESTS_LOGS_RequestMultiError is an error wrapping multiple
// validation errors returned by SPOT_APITESTS_LOGS_Request.ValidateAll() if
// the designated constraints aren't met.
type SPOT_APITESTS_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SPOT_APITESTS_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SPOT_APITESTS_LOGS_RequestMultiError) AllErrors() []error { return m }

// SPOT_APITESTS_LOGS_RequestValidationError is the validation error returned
// by SPOT_APITESTS_LOGS_Request.Validate if the designated constraints aren't met.
type SPOT_APITESTS_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SPOT_APITESTS_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SPOT_APITESTS_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SPOT_APITESTS_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SPOT_APITESTS_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SPOT_APITESTS_LOGS_RequestValidationError) ErrorName() string {
	return "SPOT_APITESTS_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SPOT_APITESTS_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSPOT_APITESTS_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SPOT_APITESTS_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SPOT_APITESTS_LOGS_RequestValidationError{}

// Validate checks the field values on SearchOperationQueryParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOperationQueryParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOperationQueryParameters with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchOperationQueryParametersMultiError, or nil if none found.
func (m *SearchOperationQueryParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOperationQueryParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return SearchOperationQueryParametersMultiError(errors)
	}

	return nil
}

// SearchOperationQueryParametersMultiError is an error wrapping multiple
// validation errors returned by SearchOperationQueryParameters.ValidateAll()
// if the designated constraints aren't met.
type SearchOperationQueryParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOperationQueryParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOperationQueryParametersMultiError) AllErrors() []error { return m }

// SearchOperationQueryParametersValidationError is the validation error
// returned by SearchOperationQueryParameters.Validate if the designated
// constraints aren't met.
type SearchOperationQueryParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOperationQueryParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOperationQueryParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOperationQueryParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOperationQueryParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOperationQueryParametersValidationError) ErrorName() string {
	return "SearchOperationQueryParametersValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOperationQueryParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOperationQueryParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOperationQueryParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOperationQueryParametersValidationError{}

// Validate checks the field values on SearchOperationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOperationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOperationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchOperationsReqMultiError, or nil if none found.
func (m *SearchOperationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOperationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if all {
		switch v := interface{}(m.GetQueryParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOperationsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOperationsReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOperationsReqValidationError{
				field:  "QueryParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchOperationsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchOperationsReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchOperationsReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchOperationsReqMultiError(errors)
	}

	return nil
}

// SearchOperationsReqMultiError is an error wrapping multiple validation
// errors returned by SearchOperationsReq.ValidateAll() if the designated
// constraints aren't met.
type SearchOperationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOperationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOperationsReqMultiError) AllErrors() []error { return m }

// SearchOperationsReqValidationError is the validation error returned by
// SearchOperationsReq.Validate if the designated constraints aren't met.
type SearchOperationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOperationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOperationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOperationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOperationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOperationsReqValidationError) ErrorName() string {
	return "SearchOperationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOperationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOperationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOperationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOperationsReqValidationError{}

// Validate checks the field values on SonarCredentialGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarCredentialGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarCredentialGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarCredentialGetResponseMultiError, or nil if none found.
func (m *SonarCredentialGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarCredentialGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarCredentialGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarCredentialGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarCredentialGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SonarCredentialGetResponseMultiError(errors)
	}

	return nil
}

// SonarCredentialGetResponseMultiError is an error wrapping multiple
// validation errors returned by SonarCredentialGetResponse.ValidateAll() if
// the designated constraints aren't met.
type SonarCredentialGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarCredentialGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarCredentialGetResponseMultiError) AllErrors() []error { return m }

// SonarCredentialGetResponseValidationError is the validation error returned
// by SonarCredentialGetResponse.Validate if the designated constraints aren't met.
type SonarCredentialGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarCredentialGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarCredentialGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarCredentialGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarCredentialGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarCredentialGetResponseValidationError) ErrorName() string {
	return "SonarCredentialGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SonarCredentialGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarCredentialGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarCredentialGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarCredentialGetResponseValidationError{}

// Validate checks the field values on SonarIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarIssueResponseMultiError, or nil if none found.
func (m *SonarIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SonarIssueResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SonarIssueResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SonarIssueResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SonarIssueResponseMultiError(errors)
	}

	return nil
}

// SonarIssueResponseMultiError is an error wrapping multiple validation errors
// returned by SonarIssueResponse.ValidateAll() if the designated constraints
// aren't met.
type SonarIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarIssueResponseMultiError) AllErrors() []error { return m }

// SonarIssueResponseValidationError is the validation error returned by
// SonarIssueResponse.Validate if the designated constraints aren't met.
type SonarIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarIssueResponseValidationError) ErrorName() string {
	return "SonarIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SonarIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarIssueResponseValidationError{}

// Validate checks the field values on SonarMetricRuleDto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarMetricRuleDto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRuleDto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarMetricRuleDtoMultiError, or nil if none found.
func (m *SonarMetricRuleDto) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRuleDto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SonarMetricRuleDtoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SonarMetricRuleDtoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SonarMetricRuleDtoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SonarMetricRuleDtoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SonarMetricRuleDtoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SonarMetricRuleDtoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for MetricKey

	// no validation rules for MetricKeyID

	// no validation rules for Operational

	// no validation rules for MetricValue

	// no validation rules for MetricKeyDesc

	// no validation rules for DecimalScale

	// no validation rules for ValueType

	if len(errors) > 0 {
		return SonarMetricRuleDtoMultiError(errors)
	}

	return nil
}

// SonarMetricRuleDtoMultiError is an error wrapping multiple validation errors
// returned by SonarMetricRuleDto.ValidateAll() if the designated constraints
// aren't met.
type SonarMetricRuleDtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRuleDtoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRuleDtoMultiError) AllErrors() []error { return m }

// SonarMetricRuleDtoValidationError is the validation error returned by
// SonarMetricRuleDto.Validate if the designated constraints aren't met.
type SonarMetricRuleDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRuleDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRuleDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRuleDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRuleDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRuleDtoValidationError) ErrorName() string {
	return "SonarMetricRuleDtoValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRuleDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRuleDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRuleDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRuleDtoValidationError{}

// Validate checks the field values on SonarMetricRulesBatchDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SonarMetricRulesBatchDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesBatchDeleteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesBatchDeleteRequestMultiError, or nil if none found.
func (m *SonarMetricRulesBatchDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesBatchDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return SonarMetricRulesBatchDeleteRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesBatchDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// SonarMetricRulesBatchDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SonarMetricRulesBatchDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesBatchDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesBatchDeleteRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesBatchDeleteRequestValidationError is the validation error
// returned by SonarMetricRulesBatchDeleteRequest.Validate if the designated
// constraints aren't met.
type SonarMetricRulesBatchDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesBatchDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesBatchDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesBatchDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesBatchDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesBatchDeleteRequestValidationError) ErrorName() string {
	return "SonarMetricRulesBatchDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesBatchDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesBatchDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesBatchDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesBatchDeleteRequestValidationError{}

// Validate checks the field values on SonarMetricRulesBatchInsertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SonarMetricRulesBatchInsertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesBatchInsertRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesBatchInsertRequestMultiError, or nil if none found.
func (m *SonarMetricRulesBatchInsertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesBatchInsertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarMetricRulesBatchInsertRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarMetricRulesBatchInsertRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarMetricRulesBatchInsertRequestValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SonarMetricRulesBatchInsertRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesBatchInsertRequestMultiError is an error wrapping multiple
// validation errors returned by
// SonarMetricRulesBatchInsertRequest.ValidateAll() if the designated
// constraints aren't met.
type SonarMetricRulesBatchInsertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesBatchInsertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesBatchInsertRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesBatchInsertRequestValidationError is the validation error
// returned by SonarMetricRulesBatchInsertRequest.Validate if the designated
// constraints aren't met.
type SonarMetricRulesBatchInsertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesBatchInsertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesBatchInsertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesBatchInsertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesBatchInsertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesBatchInsertRequestValidationError) ErrorName() string {
	return "SonarMetricRulesBatchInsertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesBatchInsertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesBatchInsertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesBatchInsertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesBatchInsertRequestValidationError{}

// Validate checks the field values on SonarMetricRulesDefinitionListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SonarMetricRulesDefinitionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesDefinitionListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesDefinitionListRequestMultiError, or nil if none found.
func (m *SonarMetricRulesDefinitionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesDefinitionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return SonarMetricRulesDefinitionListRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesDefinitionListRequestMultiError is an error wrapping
// multiple validation errors returned by
// SonarMetricRulesDefinitionListRequest.ValidateAll() if the designated
// constraints aren't met.
type SonarMetricRulesDefinitionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesDefinitionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesDefinitionListRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesDefinitionListRequestValidationError is the validation error
// returned by SonarMetricRulesDefinitionListRequest.Validate if the
// designated constraints aren't met.
type SonarMetricRulesDefinitionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesDefinitionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesDefinitionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesDefinitionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesDefinitionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesDefinitionListRequestValidationError) ErrorName() string {
	return "SonarMetricRulesDefinitionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesDefinitionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesDefinitionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesDefinitionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesDefinitionListRequestValidationError{}

// Validate checks the field values on SonarMetricRulesDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarMetricRulesDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesDeleteRequestMultiError, or nil if none found.
func (m *SonarMetricRulesDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return SonarMetricRulesDeleteRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by SonarMetricRulesDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type SonarMetricRulesDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesDeleteRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesDeleteRequestValidationError is the validation error
// returned by SonarMetricRulesDeleteRequest.Validate if the designated
// constraints aren't met.
type SonarMetricRulesDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesDeleteRequestValidationError) ErrorName() string {
	return "SonarMetricRulesDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesDeleteRequestValidationError{}

// Validate checks the field values on SonarMetricRulesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarMetricRulesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarMetricRulesListRequestMultiError, or nil if none found.
func (m *SonarMetricRulesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return SonarMetricRulesListRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesListRequestMultiError is an error wrapping multiple
// validation errors returned by SonarMetricRulesListRequest.ValidateAll() if
// the designated constraints aren't met.
type SonarMetricRulesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesListRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesListRequestValidationError is the validation error returned
// by SonarMetricRulesListRequest.Validate if the designated constraints
// aren't met.
type SonarMetricRulesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesListRequestValidationError) ErrorName() string {
	return "SonarMetricRulesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesListRequestValidationError{}

// Validate checks the field values on SonarMetricRulesPagingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarMetricRulesPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesPagingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesPagingRequestMultiError, or nil if none found.
func (m *SonarMetricRulesPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return SonarMetricRulesPagingRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesPagingRequestMultiError is an error wrapping multiple
// validation errors returned by SonarMetricRulesPagingRequest.ValidateAll()
// if the designated constraints aren't met.
type SonarMetricRulesPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesPagingRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesPagingRequestValidationError is the validation error
// returned by SonarMetricRulesPagingRequest.Validate if the designated
// constraints aren't met.
type SonarMetricRulesPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesPagingRequestValidationError) ErrorName() string {
	return "SonarMetricRulesPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesPagingRequestValidationError{}

// Validate checks the field values on SonarMetricRulesUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarMetricRulesUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarMetricRulesUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SonarMetricRulesUpdateRequestMultiError, or nil if none found.
func (m *SonarMetricRulesUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarMetricRulesUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Description

	// no validation rules for MetricValue

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return SonarMetricRulesUpdateRequestMultiError(errors)
	}

	return nil
}

// SonarMetricRulesUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by SonarMetricRulesUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type SonarMetricRulesUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarMetricRulesUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarMetricRulesUpdateRequestMultiError) AllErrors() []error { return m }

// SonarMetricRulesUpdateRequestValidationError is the validation error
// returned by SonarMetricRulesUpdateRequest.Validate if the designated
// constraints aren't met.
type SonarMetricRulesUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarMetricRulesUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarMetricRulesUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarMetricRulesUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarMetricRulesUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarMetricRulesUpdateRequestValidationError) ErrorName() string {
	return "SonarMetricRulesUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarMetricRulesUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarMetricRulesUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarMetricRulesUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarMetricRulesUpdateRequestValidationError{}

// Validate checks the field values on SonarStoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SonarStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarStoreRequestMultiError, or nil if none found.
func (m *SonarStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationID

	// no validation rules for BuildID

	// no validation rules for ProjectID

	// no validation rules for ApplicationName

	// no validation rules for Branch

	// no validation rules for GitRepo

	// no validation rules for CommitID

	// no validation rules for ProjectName

	// no validation rules for OperatorID

	// no validation rules for LogID

	// no validation rules for Key

	for idx, item := range m.GetBugs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Bugs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Bugs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarStoreRequestValidationError{
					field:  fmt.Sprintf("Bugs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCodeSmells() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("CodeSmells[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("CodeSmells[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarStoreRequestValidationError{
					field:  fmt.Sprintf("CodeSmells[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVulnerabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Vulnerabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Vulnerabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarStoreRequestValidationError{
					field:  fmt.Sprintf("Vulnerabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCoverage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Coverage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Coverage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarStoreRequestValidationError{
					field:  fmt.Sprintf("Coverage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Duplications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SonarStoreRequestValidationError{
						field:  fmt.Sprintf("Duplications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SonarStoreRequestValidationError{
					field:  fmt.Sprintf("Duplications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetIssuesStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SonarStoreRequestValidationError{
					field:  "IssuesStatistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SonarStoreRequestValidationError{
					field:  "IssuesStatistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuesStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SonarStoreRequestValidationError{
				field:  "IssuesStatistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SonarStoreRequestMultiError(errors)
	}

	return nil
}

// SonarStoreRequestMultiError is an error wrapping multiple validation errors
// returned by SonarStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type SonarStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarStoreRequestMultiError) AllErrors() []error { return m }

// SonarStoreRequestValidationError is the validation error returned by
// SonarStoreRequest.Validate if the designated constraints aren't met.
type SonarStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarStoreRequestValidationError) ErrorName() string {
	return "SonarStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SonarStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarStoreRequestValidationError{}

// Validate checks the field values on SonarStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SonarStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SonarStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SonarStoreResponseMultiError, or nil if none found.
func (m *SonarStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SonarStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SonarStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SonarStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SonarStoreResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SonarStoreResponseMultiError(errors)
	}

	return nil
}

// SonarStoreResponseMultiError is an error wrapping multiple validation errors
// returned by SonarStoreResponse.ValidateAll() if the designated constraints
// aren't met.
type SonarStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SonarStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SonarStoreResponseMultiError) AllErrors() []error { return m }

// SonarStoreResponseValidationError is the validation error returned by
// SonarStoreResponse.Validate if the designated constraints aren't met.
type SonarStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SonarStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SonarStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SonarStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SonarStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SonarStoreResponseValidationError) ErrorName() string {
	return "SonarStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SonarStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSonarStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SonarStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SonarStoreResponseValidationError{}

// Validate checks the field values on TestFileRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestFileRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestFileRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestFileRecordMultiError,
// or nil if none found.
func (m *TestFileRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *TestFileRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for FileName

	// no validation rules for Description

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for TestSetID

	// no validation rules for ApiFileUUID

	// no validation rules for SpaceID

	// no validation rules for Type

	// no validation rules for State

	// no validation rules for ErrorInfo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestFileRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestFileRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestFileRecordValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestFileRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestFileRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestFileRecordValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorID

	if len(errors) > 0 {
		return TestFileRecordMultiError(errors)
	}

	return nil
}

// TestFileRecordMultiError is an error wrapping multiple validation errors
// returned by TestFileRecord.ValidateAll() if the designated constraints
// aren't met.
type TestFileRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestFileRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestFileRecordMultiError) AllErrors() []error { return m }

// TestFileRecordValidationError is the validation error returned by
// TestFileRecord.Validate if the designated constraints aren't met.
type TestFileRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestFileRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestFileRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestFileRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestFileRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestFileRecordValidationError) ErrorName() string { return "TestFileRecordValidationError" }

// Error satisfies the builtin error interface
func (e TestFileRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestFileRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestFileRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestFileRecordValidationError{}

// Validate checks the field values on TestIssuesStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestIssuesStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestIssuesStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestIssuesStatisticsMultiError, or nil if none found.
func (m *TestIssuesStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *TestIssuesStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bugs

	// no validation rules for Coverage

	// no validation rules for Vulnerabilities

	// no validation rules for CodeSmells

	// no validation rules for Duplications

	// no validation rules for SonarKey

	// no validation rules for Path

	// no validation rules for UT

	// no validation rules for CommitID

	// no validation rules for Branch

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestIssuesStatisticsValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestIssuesStatisticsValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestIssuesStatisticsValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Rating != nil {

		if all {
			switch v := interface{}(m.GetRating()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestIssuesStatisticsValidationError{
						field:  "Rating",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestIssuesStatisticsValidationError{
						field:  "Rating",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRating()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestIssuesStatisticsValidationError{
					field:  "Rating",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestIssuesStatisticsMultiError(errors)
	}

	return nil
}

// TestIssuesStatisticsMultiError is an error wrapping multiple validation
// errors returned by TestIssuesStatistics.ValidateAll() if the designated
// constraints aren't met.
type TestIssuesStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestIssuesStatisticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestIssuesStatisticsMultiError) AllErrors() []error { return m }

// TestIssuesStatisticsValidationError is the validation error returned by
// TestIssuesStatistics.Validate if the designated constraints aren't met.
type TestIssuesStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestIssuesStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestIssuesStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestIssuesStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestIssuesStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestIssuesStatisticsValidationError) ErrorName() string {
	return "TestIssuesStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e TestIssuesStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestIssuesStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestIssuesStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestIssuesStatisticsValidationError{}

// Validate checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TicketMultiError, or nil if none found.
func (m *Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for Priority

	// no validation rules for Status

	// no validation rules for Key

	// no validation rules for OrgID

	// no validation rules for Metric

	// no validation rules for MetricID

	// no validation rules for Count

	// no validation rules for Creator

	// no validation rules for LastOperator

	{
		sorted_keys := make([]string, len(m.GetLabel()))
		i := 0
		for key := range m.GetLabel() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabel()[key]
			_ = val

			// no validation rules for Label[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TicketValidationError{
							field:  fmt.Sprintf("Label[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TicketValidationError{
							field:  fmt.Sprintf("Label[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TicketValidationError{
						field:  fmt.Sprintf("Label[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for TargetType

	// no validation rules for TargetID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClosedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "ClosedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "ClosedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClosedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "ClosedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTriggeredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LastComment != nil {

		if all {
			switch v := interface{}(m.GetLastComment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  "LastComment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  "LastComment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastComment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketValidationError{
					field:  "LastComment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketMultiError(errors)
	}

	return nil
}

// TicketMultiError is an error wrapping multiple validation errors returned by
// Ticket.ValidateAll() if the designated constraints aren't met.
type TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketMultiError) AllErrors() []error { return m }

// TicketValidationError is the validation error returned by Ticket.Validate if
// the designated constraints aren't met.
type TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketValidationError) ErrorName() string { return "TicketValidationError" }

// Error satisfies the builtin error interface
func (e TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketValidationError{}

// Validate checks the field values on TicketCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCloseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCloseRequestMultiError, or nil if none found.
func (m *TicketCloseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCloseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if len(errors) > 0 {
		return TicketCloseRequestMultiError(errors)
	}

	return nil
}

// TicketCloseRequestMultiError is an error wrapping multiple validation errors
// returned by TicketCloseRequest.ValidateAll() if the designated constraints
// aren't met.
type TicketCloseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCloseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCloseRequestMultiError) AllErrors() []error { return m }

// TicketCloseRequestValidationError is the validation error returned by
// TicketCloseRequest.Validate if the designated constraints aren't met.
type TicketCloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCloseRequestValidationError) ErrorName() string {
	return "TicketCloseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCloseRequestValidationError{}

// Validate checks the field values on TicketCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCloseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCloseResponseMultiError, or nil if none found.
func (m *TicketCloseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCloseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TicketCloseResponseMultiError(errors)
	}

	return nil
}

// TicketCloseResponseMultiError is an error wrapping multiple validation
// errors returned by TicketCloseResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketCloseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCloseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCloseResponseMultiError) AllErrors() []error { return m }

// TicketCloseResponseValidationError is the validation error returned by
// TicketCloseResponse.Validate if the designated constraints aren't met.
type TicketCloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCloseResponseValidationError) ErrorName() string {
	return "TicketCloseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCloseResponseValidationError{}

// Validate checks the field values on TicketCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCreateRequestMultiError, or nil if none found.
func (m *TicketCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for Priority

	// no validation rules for Key

	// no validation rules for OrgID

	// no validation rules for Metric

	// no validation rules for MetricID

	// no validation rules for UserID

	{
		sorted_keys := make([]string, len(m.GetLabel()))
		i := 0
		for key := range m.GetLabel() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabel()[key]
			_ = val

			// no validation rules for Label[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TicketCreateRequestValidationError{
							field:  fmt.Sprintf("Label[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TicketCreateRequestValidationError{
							field:  fmt.Sprintf("Label[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TicketCreateRequestValidationError{
						field:  fmt.Sprintf("Label[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for TargetType

	// no validation rules for TargetID

	// no validation rules for TriggeredAt

	// no validation rules for ClosedAt

	if len(errors) > 0 {
		return TicketCreateRequestMultiError(errors)
	}

	return nil
}

// TicketCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TicketCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCreateRequestMultiError) AllErrors() []error { return m }

// TicketCreateRequestValidationError is the validation error returned by
// TicketCreateRequest.Validate if the designated constraints aren't met.
type TicketCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCreateRequestValidationError) ErrorName() string {
	return "TicketCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCreateRequestValidationError{}

// Validate checks the field values on TicketCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCreateResponseMultiError, or nil if none found.
func (m *TicketCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TicketCreateResponseMultiError(errors)
	}

	return nil
}

// TicketCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TicketCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCreateResponseMultiError) AllErrors() []error { return m }

// TicketCreateResponseValidationError is the validation error returned by
// TicketCreateResponse.Validate if the designated constraints aren't met.
type TicketCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCreateResponseValidationError) ErrorName() string {
	return "TicketCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCreateResponseValidationError{}

// Validate checks the field values on TicketDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketDeleteRequestMultiError, or nil if none found.
func (m *TicketDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if len(errors) > 0 {
		return TicketDeleteRequestMultiError(errors)
	}

	return nil
}

// TicketDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by TicketDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketDeleteRequestMultiError) AllErrors() []error { return m }

// TicketDeleteRequestValidationError is the validation error returned by
// TicketDeleteRequest.Validate if the designated constraints aren't met.
type TicketDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketDeleteRequestValidationError) ErrorName() string {
	return "TicketDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketDeleteRequestValidationError{}

// Validate checks the field values on TicketDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketDeleteResponseMultiError, or nil if none found.
func (m *TicketDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TicketDeleteResponseMultiError(errors)
	}

	return nil
}

// TicketDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by TicketDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketDeleteResponseMultiError) AllErrors() []error { return m }

// TicketDeleteResponseValidationError is the validation error returned by
// TicketDeleteResponse.Validate if the designated constraints aren't met.
type TicketDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketDeleteResponseValidationError) ErrorName() string {
	return "TicketDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketDeleteResponseValidationError{}

// Validate checks the field values on TicketFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketFetchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketFetchRequestMultiError, or nil if none found.
func (m *TicketFetchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketFetchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if len(errors) > 0 {
		return TicketFetchRequestMultiError(errors)
	}

	return nil
}

// TicketFetchRequestMultiError is an error wrapping multiple validation errors
// returned by TicketFetchRequest.ValidateAll() if the designated constraints
// aren't met.
type TicketFetchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketFetchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketFetchRequestMultiError) AllErrors() []error { return m }

// TicketFetchRequestValidationError is the validation error returned by
// TicketFetchRequest.Validate if the designated constraints aren't met.
type TicketFetchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketFetchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketFetchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketFetchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketFetchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketFetchRequestValidationError) ErrorName() string {
	return "TicketFetchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketFetchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketFetchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketFetchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketFetchRequestValidationError{}

// Validate checks the field values on TicketFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketFetchResponseMultiError, or nil if none found.
func (m *TicketFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketFetchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketFetchResponseMultiError(errors)
	}

	return nil
}

// TicketFetchResponseMultiError is an error wrapping multiple validation
// errors returned by TicketFetchResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketFetchResponseMultiError) AllErrors() []error { return m }

// TicketFetchResponseValidationError is the validation error returned by
// TicketFetchResponse.Validate if the designated constraints aren't met.
type TicketFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketFetchResponseValidationError) ErrorName() string {
	return "TicketFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketFetchResponseValidationError{}

// Validate checks the field values on TicketListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TicketListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketListRequestMultiError, or nil if none found.
func (m *TicketListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Priority

	// no validation rules for Status

	// no validation rules for TargetType

	// no validation rules for TargetID

	// no validation rules for Key

	// no validation rules for OrgID

	// no validation rules for Metric

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Comment

	// no validation rules for Q

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return TicketListRequestMultiError(errors)
	}

	return nil
}

// TicketListRequestMultiError is an error wrapping multiple validation errors
// returned by TicketListRequest.ValidateAll() if the designated constraints
// aren't met.
type TicketListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketListRequestMultiError) AllErrors() []error { return m }

// TicketListRequestValidationError is the validation error returned by
// TicketListRequest.Validate if the designated constraints aren't met.
type TicketListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketListRequestValidationError) ErrorName() string {
	return "TicketListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketListRequestValidationError{}

// Validate checks the field values on TicketListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketListResponseMultiError, or nil if none found.
func (m *TicketListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketListResponseMultiError(errors)
	}

	return nil
}

// TicketListResponseMultiError is an error wrapping multiple validation errors
// returned by TicketListResponse.ValidateAll() if the designated constraints
// aren't met.
type TicketListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketListResponseMultiError) AllErrors() []error { return m }

// TicketListResponseValidationError is the validation error returned by
// TicketListResponse.Validate if the designated constraints aren't met.
type TicketListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketListResponseValidationError) ErrorName() string {
	return "TicketListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketListResponseValidationError{}

// Validate checks the field values on TicketListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketListResponseDataMultiError, or nil if none found.
func (m *TicketListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTickets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketListResponseDataValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketListResponseDataValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketListResponseDataValidationError{
					field:  fmt.Sprintf("Tickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketListResponseDataMultiError(errors)
	}

	return nil
}

// TicketListResponseDataMultiError is an error wrapping multiple validation
// errors returned by TicketListResponseData.ValidateAll() if the designated
// constraints aren't met.
type TicketListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketListResponseDataMultiError) AllErrors() []error { return m }

// TicketListResponseDataValidationError is the validation error returned by
// TicketListResponseData.Validate if the designated constraints aren't met.
type TicketListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketListResponseDataValidationError) ErrorName() string {
	return "TicketListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e TicketListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketListResponseDataValidationError{}

// Validate checks the field values on TicketReopenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketReopenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketReopenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketReopenRequestMultiError, or nil if none found.
func (m *TicketReopenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketReopenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if len(errors) > 0 {
		return TicketReopenRequestMultiError(errors)
	}

	return nil
}

// TicketReopenRequestMultiError is an error wrapping multiple validation
// errors returned by TicketReopenRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketReopenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketReopenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketReopenRequestMultiError) AllErrors() []error { return m }

// TicketReopenRequestValidationError is the validation error returned by
// TicketReopenRequest.Validate if the designated constraints aren't met.
type TicketReopenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketReopenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketReopenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketReopenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketReopenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketReopenRequestValidationError) ErrorName() string {
	return "TicketReopenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketReopenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketReopenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketReopenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketReopenRequestValidationError{}

// Validate checks the field values on TicketReopenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketReopenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketReopenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketReopenResponseMultiError, or nil if none found.
func (m *TicketReopenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketReopenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TicketReopenResponseMultiError(errors)
	}

	return nil
}

// TicketReopenResponseMultiError is an error wrapping multiple validation
// errors returned by TicketReopenResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketReopenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketReopenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketReopenResponseMultiError) AllErrors() []error { return m }

// TicketReopenResponseValidationError is the validation error returned by
// TicketReopenResponse.Validate if the designated constraints aren't met.
type TicketReopenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketReopenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketReopenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketReopenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketReopenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketReopenResponseValidationError) ErrorName() string {
	return "TicketReopenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketReopenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketReopenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketReopenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketReopenResponseValidationError{}

// Validate checks the field values on TicketUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketUpdateRequestMultiError, or nil if none found.
func (m *TicketUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketID

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketUpdateRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketUpdateRequestMultiError(errors)
	}

	return nil
}

// TicketUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by TicketUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketUpdateRequestMultiError) AllErrors() []error { return m }

// TicketUpdateRequestValidationError is the validation error returned by
// TicketUpdateRequest.Validate if the designated constraints aren't met.
type TicketUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketUpdateRequestValidationError) ErrorName() string {
	return "TicketUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketUpdateRequestValidationError{}

// Validate checks the field values on TicketUpdateRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketUpdateRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketUpdateRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketUpdateRequestBodyMultiError, or nil if none found.
func (m *TicketUpdateRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketUpdateRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for Priority

	if len(errors) > 0 {
		return TicketUpdateRequestBodyMultiError(errors)
	}

	return nil
}

// TicketUpdateRequestBodyMultiError is an error wrapping multiple validation
// errors returned by TicketUpdateRequestBody.ValidateAll() if the designated
// constraints aren't met.
type TicketUpdateRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketUpdateRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketUpdateRequestBodyMultiError) AllErrors() []error { return m }

// TicketUpdateRequestBodyValidationError is the validation error returned by
// TicketUpdateRequestBody.Validate if the designated constraints aren't met.
type TicketUpdateRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketUpdateRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketUpdateRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketUpdateRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketUpdateRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketUpdateRequestBodyValidationError) ErrorName() string {
	return "TicketUpdateRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e TicketUpdateRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketUpdateRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketUpdateRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketUpdateRequestBodyValidationError{}

// Validate checks the field values on TicketUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketUpdateResponseMultiError, or nil if none found.
func (m *TicketUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TicketUpdateResponseMultiError(errors)
	}

	return nil
}

// TicketUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by TicketUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketUpdateResponseMultiError) AllErrors() []error { return m }

// TicketUpdateResponseValidationError is the validation error returned by
// TicketUpdateResponse.Validate if the designated constraints aren't met.
type TicketUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketUpdateResponseValidationError) ErrorName() string {
	return "TicketUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketUpdateResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeCreateRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Pinode

	// no validation rules for Name

	// no validation rules for Desc

	if len(errors) > 0 {
		return UnifiedFileTreeNodeCreateRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeCreateRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeCreateRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeCreateRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeCreateRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeCreateRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeDeleteRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeDeleteRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeDeleteRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeDeleteRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeDeleteRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeDeleteRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFindAncestorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFindAncestorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeFindAncestorsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnifiedFileTreeNodeFindAncestorsRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFindAncestorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFindAncestorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFindAncestorsRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFindAncestorsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFindAncestorsRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFindAncestorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFindAncestorsRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFindAncestorsRequestValidationError is the validation
// error returned by UnifiedFileTreeNodeFindAncestorsRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFindAncestorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFindAncestorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFindAncestorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFindAncestorsRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFuzzySearchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFuzzySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeFuzzySearchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeFuzzySearchRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFuzzySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFuzzySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for FromPinode

	// no validation rules for Recursive

	// no validation rules for PrefixFuzzy

	// no validation rules for SuffixFuzzy

	// no validation rules for Fuzzy

	// no validation rules for CreatorID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFuzzySearchRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFuzzySearchRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFuzzySearchRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFuzzySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFuzzySearchRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFuzzySearchRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeFuzzySearchRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFuzzySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFuzzySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFuzzySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFuzzySearchRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeGetRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeGetRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeGetRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeGetRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeGetRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeGetRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeGetRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeGetRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeGetRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeListRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Pinode

	// no validation rules for PipelineCategoryKey

	if len(errors) > 0 {
		return UnifiedFileTreeNodeListRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeListRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeListRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeListRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeListRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeListRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeListRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeListRequestValidationError{}

// Validate checks the field values on UpdateAPIAssetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAPIAssetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAPIAssetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAPIAssetReqMultiError, or nil if none found.
func (m *UpdateAPIAssetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAPIAssetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	{
		sorted_keys := make([]string, len(m.GetKeys()))
		i := 0
		for key := range m.GetKeys() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetKeys()[key]
			_ = val

			// no validation rules for Keys[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAPIAssetReqValidationError{
							field:  fmt.Sprintf("Keys[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAPIAssetReqValidationError{
							field:  fmt.Sprintf("Keys[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAPIAssetReqValidationError{
						field:  fmt.Sprintf("Keys[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for AssetID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAPIAssetReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAPIAssetReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAPIAssetReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAPIAssetReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAPIAssetReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAPIAssetReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAPIAssetReqMultiError(errors)
	}

	return nil
}

// UpdateAPIAssetReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAPIAssetReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAPIAssetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAPIAssetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAPIAssetReqMultiError) AllErrors() []error { return m }

// UpdateAPIAssetReqValidationError is the validation error returned by
// UpdateAPIAssetReq.Validate if the designated constraints aren't met.
type UpdateAPIAssetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAPIAssetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAPIAssetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAPIAssetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAPIAssetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAPIAssetReqValidationError) ErrorName() string {
	return "UpdateAPIAssetReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAPIAssetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAPIAssetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAPIAssetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAPIAssetReqValidationError{}

// Validate checks the field values on UpdateAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccess_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccess_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccess_RequestMultiError, or nil if none found.
func (m *UpdateAccess_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccess_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessID

	if len(errors) > 0 {
		return UpdateAccess_RequestMultiError(errors)
	}

	return nil
}

// UpdateAccess_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccess_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccess_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccess_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccess_RequestMultiError) AllErrors() []error { return m }

// UpdateAccess_RequestValidationError is the validation error returned by
// UpdateAccess_Request.Validate if the designated constraints aren't met.
type UpdateAccess_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccess_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccess_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccess_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccess_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccess_RequestValidationError) ErrorName() string {
	return "UpdateAccess_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccess_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccess_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccess_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccess_RequestValidationError{}

// Validate checks the field values on UpdateAppPublishItemRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateAppPublishItemRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppPublishItemRelationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAppPublishItemRelationRequestMultiError, or nil if none found.
func (m *UpdateAppPublishItemRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppPublishItemRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for UserID

	// no validation rules for ProdItemID

	// no validation rules for STAGINGItemID

	// no validation rules for TESTItemID

	// no validation rules for DEVItemID

	{
		sorted_keys := make([]string, len(m.GetAKAIMap()))
		i := 0
		for key := range m.GetAKAIMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAKAIMap()[key]
			_ = val

			// no validation rules for AKAIMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAppPublishItemRelationRequestValidationError{
							field:  fmt.Sprintf("AKAIMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAppPublishItemRelationRequestValidationError{
							field:  fmt.Sprintf("AKAIMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAppPublishItemRelationRequestValidationError{
						field:  fmt.Sprintf("AKAIMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Application

	if len(errors) > 0 {
		return UpdateAppPublishItemRelationRequestMultiError(errors)
	}

	return nil
}

// UpdateAppPublishItemRelationRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAppPublishItemRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppPublishItemRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppPublishItemRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppPublishItemRelationRequestMultiError) AllErrors() []error { return m }

// UpdateAppPublishItemRelationRequestValidationError is the validation error
// returned by UpdateAppPublishItemRelationRequest.Validate if the designated
// constraints aren't met.
type UpdateAppPublishItemRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppPublishItemRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppPublishItemRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppPublishItemRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppPublishItemRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppPublishItemRelationRequestValidationError) ErrorName() string {
	return "UpdateAppPublishItemRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppPublishItemRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppPublishItemRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppPublishItemRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppPublishItemRelationRequestValidationError{}

// Validate checks the field values on UpdateAppPublishItemRelationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateAppPublishItemRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppPublishItemRelationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAppPublishItemRelationResponseMultiError, or nil if none found.
func (m *UpdateAppPublishItemRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppPublishItemRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppPublishItemRelationResponseMultiError(errors)
	}

	return nil
}

// UpdateAppPublishItemRelationResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAppPublishItemRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppPublishItemRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppPublishItemRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppPublishItemRelationResponseMultiError) AllErrors() []error { return m }

// UpdateAppPublishItemRelationResponseValidationError is the validation error
// returned by UpdateAppPublishItemRelationResponse.Validate if the designated
// constraints aren't met.
type UpdateAppPublishItemRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppPublishItemRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppPublishItemRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppPublishItemRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppPublishItemRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppPublishItemRelationResponseValidationError) ErrorName() string {
	return "UpdateAppPublishItemRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppPublishItemRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppPublishItemRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppPublishItemRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppPublishItemRelationResponseValidationError{}

// Validate checks the field values on UpdateAssetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssetVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssetVersionReqMultiError, or nil if none found.
func (m *UpdateAssetVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssetVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for VersionID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAssetVersionReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAssetVersionReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAssetVersionReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAssetVersionReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAssetVersionReqMultiError(errors)
	}

	return nil
}

// UpdateAssetVersionReqMultiError is an error wrapping multiple validation
// errors returned by UpdateAssetVersionReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateAssetVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssetVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssetVersionReqMultiError) AllErrors() []error { return m }

// UpdateAssetVersionReqValidationError is the validation error returned by
// UpdateAssetVersionReq.Validate if the designated constraints aren't met.
type UpdateAssetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetVersionReqValidationError) ErrorName() string {
	return "UpdateAssetVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetVersionReqValidationError{}

// Validate checks the field values on UpdateBranchRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBranchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBranchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBranchRuleRequestMultiError, or nil if none found.
func (m *UpdateBranchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBranchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Rule

	// no validation rules for IsProtect

	// no validation rules for NeedApproval

	// no validation rules for IsTriggerPipeline

	// no validation rules for Desc

	// no validation rules for Workspace

	// no validation rules for ArtifactWorkspace

	if len(errors) > 0 {
		return UpdateBranchRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateBranchRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBranchRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBranchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBranchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBranchRuleRequestMultiError) AllErrors() []error { return m }

// UpdateBranchRuleRequestValidationError is the validation error returned by
// UpdateBranchRuleRequest.Validate if the designated constraints aren't met.
type UpdateBranchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBranchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBranchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBranchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBranchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBranchRuleRequestValidationError) ErrorName() string {
	return "UpdateBranchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBranchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBranchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBranchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBranchRuleRequestValidationError{}

// Validate checks the field values on UpdateBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBranchRuleResponseMultiError, or nil if none found.
func (m *UpdateBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBranchRuleResponseMultiError(errors)
	}

	return nil
}

// UpdateBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBranchRuleResponseMultiError) AllErrors() []error { return m }

// UpdateBranchRuleResponseValidationError is the validation error returned by
// UpdateBranchRuleResponse.Validate if the designated constraints aren't met.
type UpdateBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBranchRuleResponseValidationError) ErrorName() string {
	return "UpdateBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBranchRuleResponseValidationError{}

// Validate checks the field values on UpdateClientReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateClientReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClientReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClientReqMultiError, or nil if none found.
func (m *UpdateClientReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClientReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClientID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClientReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClientReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.QueryParams != nil {

		if all {
			switch v := interface{}(m.GetQueryParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "QueryParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClientReqValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateClientReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClientReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateClientReqMultiError(errors)
	}

	return nil
}

// UpdateClientReqMultiError is an error wrapping multiple validation errors
// returned by UpdateClientReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateClientReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientReqMultiError) AllErrors() []error { return m }

// UpdateClientReqValidationError is the validation error returned by
// UpdateClientReq.Validate if the designated constraints aren't met.
type UpdateClientReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientReqValidationError) ErrorName() string { return "UpdateClientReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateClientReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientReqValidationError{}

// Validate checks the field values on UpdateContract_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContract_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContract_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContract_RequestMultiError, or nil if none found.
func (m *UpdateContract_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContract_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for ContractID

	if len(errors) > 0 {
		return UpdateContract_RequestMultiError(errors)
	}

	return nil
}

// UpdateContract_RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContract_Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateContract_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContract_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContract_RequestMultiError) AllErrors() []error { return m }

// UpdateContract_RequestValidationError is the validation error returned by
// UpdateContract_Request.Validate if the designated constraints aren't met.
type UpdateContract_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContract_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContract_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContract_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContract_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContract_RequestValidationError) ErrorName() string {
	return "UpdateContract_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContract_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContract_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContract_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContract_RequestValidationError{}

// Validate checks the field values on UpdateInstantiationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInstantiationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInstantiationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInstantiationReqMultiError, or nil if none found.
func (m *UpdateInstantiationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInstantiationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for Minor

	// no validation rules for InstantiationID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateInstantiationReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateInstantiationReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateInstantiationReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateInstantiationReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateInstantiationReqMultiError(errors)
	}

	return nil
}

// UpdateInstantiationReqMultiError is an error wrapping multiple validation
// errors returned by UpdateInstantiationReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateInstantiationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInstantiationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInstantiationReqMultiError) AllErrors() []error { return m }

// UpdateInstantiationReqValidationError is the validation error returned by
// UpdateInstantiationReq.Validate if the designated constraints aren't met.
type UpdateInstantiationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstantiationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInstantiationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInstantiationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInstantiationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstantiationReqValidationError) ErrorName() string {
	return "UpdateInstantiationReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstantiationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstantiationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstantiationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstantiationReqValidationError{}

// Validate checks the field values on UpdateSLAReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSLAReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSLAReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSLAReqMultiError, or
// nil if none found.
func (m *UpdateSLAReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSLAReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for AssetID

	// no validation rules for SwaggerVersion

	// no validation rules for SlaID

	if m.Identity != nil {

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSLAReqValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.URIParams != nil {

		if all {
			switch v := interface{}(m.GetURIParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "URIParams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetURIParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSLAReqValidationError{
					field:  "URIParams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSLAReqValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSLAReqValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateSLAReqMultiError(errors)
	}

	return nil
}

// UpdateSLAReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSLAReq.ValidateAll() if the designated constraints aren't met.
type UpdateSLAReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSLAReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSLAReqMultiError) AllErrors() []error { return m }

// UpdateSLAReqValidationError is the validation error returned by
// UpdateSLAReq.Validate if the designated constraints aren't met.
type UpdateSLAReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSLAReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSLAReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSLAReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSLAReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSLAReqValidationError) ErrorName() string { return "UpdateSLAReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSLAReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSLAReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSLAReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSLAReqValidationError{}

// Validate checks the field values on ValidBranch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidBranch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidBranch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ValidBranchMultiError, or
// nil if none found.
func (m *ValidBranch) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidBranch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsProtect

	// no validation rules for NeedApproval

	// no validation rules for IsTriggerPipeline

	// no validation rules for Workspace

	// no validation rules for ArtifactWorkspace

	if len(errors) > 0 {
		return ValidBranchMultiError(errors)
	}

	return nil
}

// ValidBranchMultiError is an error wrapping multiple validation errors
// returned by ValidBranch.ValidateAll() if the designated constraints aren't met.
type ValidBranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidBranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidBranchMultiError) AllErrors() []error { return m }

// ValidBranchValidationError is the validation error returned by
// ValidBranch.Validate if the designated constraints aren't met.
type ValidBranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidBranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidBranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidBranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidBranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidBranchValidationError) ErrorName() string { return "ValidBranchValidationError" }

// Error satisfies the builtin error interface
func (e ValidBranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidBranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidBranchValidationError{}

// Validate checks the field values on ValidateSwagger_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateSwagger_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateSwagger_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateSwagger_RequestMultiError, or nil if none found.
func (m *ValidateSwagger_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateSwagger_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ValidateSwagger_RequestMultiError(errors)
	}

	return nil
}

// ValidateSwagger_RequestMultiError is an error wrapping multiple validation
// errors returned by ValidateSwagger_Request.ValidateAll() if the designated
// constraints aren't met.
type ValidateSwagger_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateSwagger_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateSwagger_RequestMultiError) AllErrors() []error { return m }

// ValidateSwagger_RequestValidationError is the validation error returned by
// ValidateSwagger_Request.Validate if the designated constraints aren't met.
type ValidateSwagger_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateSwagger_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateSwagger_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateSwagger_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateSwagger_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateSwagger_RequestValidationError) ErrorName() string {
	return "ValidateSwagger_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateSwagger_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateSwagger_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateSwagger_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateSwagger_RequestValidationError{}
