// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: dop.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DopClient is the client API for Dop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DopClient interface {
	AADAPTOR_CICD_CRON_LIST(ctx context.Context, in *AADAPTOR_CICD_CRON_LIST_Request, opts ...grpc.CallOption) (*PipelineCronListResponse, error)
	ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx context.Context, in *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request, opts ...grpc.CallOption) (*PipelineAppAllValidBranchWorkspaceResponse, error)
	ADAPTOR_CICD_CANCEL(ctx context.Context, in *ADAPTOR_CICD_CANCEL_Request, opts ...grpc.CallOption) (*PipelineCancelResponse, error)
	ADAPTOR_CICD_CONFIG_GET(ctx context.Context, in *ADAPTOR_CICD_CONFIG_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_CONFIG_NAMESPACES(ctx context.Context, in *ADAPTOR_CICD_CONFIG_NAMESPACES_Request, opts ...grpc.CallOption) (*PipelineConfigNamespacesFetchResponse, error)
	ADAPTOR_CICD_CONFIG_WORKSPACES(ctx context.Context, in *ADAPTOR_CICD_CONFIG_WORKSPACES_Request, opts ...grpc.CallOption) (*PipelineConfigNamespacesFetchResponse, error)
	ADAPTOR_CICD_CREATE(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error)
	ADAPTOR_CICD_CRON_START(ctx context.Context, in *ADAPTOR_CICD_CRON_START_Request, opts ...grpc.CallOption) (*PipelineCronStartResponse, error)
	ADAPTOR_CICD_CRON_STOP(ctx context.Context, in *ADAPTOR_CICD_CRON_STOP_Request, opts ...grpc.CallOption) (*PipelineCronStopResponse, error)
	ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx context.Context, in *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_CREATE(ctx context.Context, in *UnifiedFileTreeNodeCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_DELETE(ctx context.Context, in *UnifiedFileTreeNodeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx context.Context, in *UnifiedFileTreeNodeFindAncestorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx context.Context, in *UnifiedFileTreeNodeFuzzySearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_GET(ctx context.Context, in *UnifiedFileTreeNodeGetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx context.Context, in *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_LIST(ctx context.Context, in *UnifiedFileTreeNodeListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_GET_BRANCH_RULE(ctx context.Context, in *ADAPTOR_CICD_GET_BRANCH_RULE_Request, opts ...grpc.CallOption) (*PipelineGetBranchRuleResponse, error)
	ADAPTOR_CICD_INVOKED_COMBO(ctx context.Context, in *PipelineInvokedComboRequest, opts ...grpc.CallOption) (*PipelineInvokedComboResponse, error)
	ADAPTOR_CICD_LIST(ctx context.Context, in *PipelinePageListRequest, opts ...grpc.CallOption) (*PipelinePageListResponse, error)
	ADAPTOR_CICD_OPERATE(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error)
	ADAPTOR_CICD_PIPELINE_DETAIL(ctx context.Context, in *ADAPTOR_CICD_PIPELINE_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_PIPELINE_YML_LIST(ctx context.Context, in *CICDPipelineYmlListRequest, opts ...grpc.CallOption) (*CICDPipelineYmlListResponse, error)
	ADAPTOR_CICD_PROJECT_CREATE(ctx context.Context, in *ADAPTOR_CICD_PROJECT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_PROJECT_DETAIL(ctx context.Context, in *ADAPTOR_CICD_PROJECT_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_RERUN(ctx context.Context, in *ADAPTOR_CICD_RERUN_Request, opts ...grpc.CallOption) (*PipelineRerunResponse, error)
	ADAPTOR_CICD_RERUN_FAILED(ctx context.Context, in *PipelineRerunFailedResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_RUN(ctx context.Context, in *ADAPTOR_CICD_RUN_Request, opts ...grpc.CallOption) (*PipelineRunResponse, error)
	ADAPTOR_CICD_TASK_LOG(ctx context.Context, in *ADAPTOR_CICD_TASK_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx context.Context, in *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APIDocWebsocket(ctx context.Context, in *APIDocWebsocket_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APITEST_ATTEMPT(ctx context.Context, in *APITestsAttemptRequest, opts ...grpc.CallOption) (*APITestsAttemptResponse, error)
	APPLICATIONS_RESOURCES_LIST(ctx context.Context, in *APPLICATIONS_RESOURCES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APP_PUBLISH_ITEM_RELATION_GET(ctx context.Context, in *APP_PUBLISH_ITEM_RELATION_GET_Request, opts ...grpc.CallOption) (*QueryAppPublishItemRelationResponse, error)
	APP_PUBLISH_ITEM_RELATION_UPDATE(ctx context.Context, in *UpdateAppPublishItemRelationRequest, opts ...grpc.CallOption) (*UpdateAppPublishItemRelationResponse, error)
	CI_SONAR_STORE(ctx context.Context, in *SonarStoreRequest, opts ...grpc.CallOption) (*SonarStoreResponse, error)
	CMDB_APPLICATION_CREATE(ctx context.Context, in *ApplicationCreateRequest, opts ...grpc.CallOption) (*ApplicationCreateResponse, error)
	CMDB_APPLICATION_DELETE(ctx context.Context, in *ApplicationDeleteRequest, opts ...grpc.CallOption) (*ApplicationDeleteResponse, error)
	CMDB_APPLICATION_INIT(ctx context.Context, in *ApplicationInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_APPLICATION_UPDATE(ctx context.Context, in *ApplicationUpdateRequest, opts ...grpc.CallOption) (*ApplicationUpdateResponse, error)
	CMDB_BRANCH_RULE_CREATE(ctx context.Context, in *CreateBranchRuleRequest, opts ...grpc.CallOption) (*CreateBranchRuleResponse, error)
	CMDB_BRANCH_RULE_DELETE(ctx context.Context, in *CMDB_BRANCH_RULE_DELETE_Request, opts ...grpc.CallOption) (*DeleteBranchRuleResponse, error)
	CMDB_BRANCH_RULE_QUERY(ctx context.Context, in *QueryBranchRuleRequest, opts ...grpc.CallOption) (*QueryBranchRuleResponse, error)
	CMDB_BRANCH_RULE_UPDATE(ctx context.Context, in *UpdateBranchRuleRequest, opts ...grpc.CallOption) (*UpdateBranchRuleResponse, error)
	CMDB_CERTIFICATES_APP_LIST(ctx context.Context, in *AppCertificateListRequest, opts ...grpc.CallOption) (*PagingAppCertificateDTO, error)
	CMDB_CERTIFICATES_LIST(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListResponse, error)
	CMDB_CERTIFICATE_APP_CANCEL(ctx context.Context, in *CMDB_CERTIFICATE_APP_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_APP_CONFIG(ctx context.Context, in *PushCertificateConfigsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_APP_QUOTE(ctx context.Context, in *CertificateQuoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_CREATE(ctx context.Context, in *CertificateCreateRequest, opts ...grpc.CallOption) (*CertificateCreateResponse, error)
	CMDB_CERTIFICATE_DELETE(ctx context.Context, in *CMDB_CERTIFICATE_DELETE_Request, opts ...grpc.CallOption) (*CertificateDeleteResponse, error)
	CMDB_CERTIFICATE_GET(ctx context.Context, in *CMDB_CERTIFICATE_GET_Request, opts ...grpc.CallOption) (*CertificateDetailResponse, error)
	CMDB_CERTIFICATE_UPDATE(ctx context.Context, in *CertificateUpdateRequest, opts ...grpc.CallOption) (*CertificateUpdateResponse, error)
	CMDB_COMMENT_CREATE(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentCreateResponse, error)
	CMDB_COMMENT_LIST(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	CMDB_COMMENT_UPDATE(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*CommentUpdateResponse, error)
	CMDB_ITERATION_CREATE(ctx context.Context, in *IterationCreateRequest, opts ...grpc.CallOption) (*IterationCreateResponse, error)
	CMDB_ITERATION_DELETE(ctx context.Context, in *CMDB_ITERATION_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_ITERATION_GET(ctx context.Context, in *CMDB_ITERATION_GET_Request, opts ...grpc.CallOption) (*IterationGetResponse, error)
	CMDB_ITERATION_PAGING(ctx context.Context, in *IterationPagingRequest, opts ...grpc.CallOption) (*IterationPagingResponse, error)
	CMDB_ITERATION_UPDATE(ctx context.Context, in *IterationUpdateRequest, opts ...grpc.CallOption) (*IterationUpdateResponse, error)
	CMDB_LIBREFERENCE_CREATE(ctx context.Context, in *LibReferenceCreateRequest, opts ...grpc.CallOption) (*LibReferenceCreateResponse, error)
	CMDB_LIBREFERENCE_DELETE(ctx context.Context, in *CMDB_LIBREFERENCE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_LIBREFERENCE_LIST(ctx context.Context, in *LibReferenceListRequest, opts ...grpc.CallOption) (*LibReferenceListResponse, error)
	CMDB_LIBREFERENCE_LIST_VERSION(ctx context.Context, in *CMDB_LIBREFERENCE_LIST_VERSION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MY_PUBLISHERS_LIST(ctx context.Context, in *PublisherListRequest, opts ...grpc.CallOption) (*PublisherListResponse, error)
	CMDB_ORG_CREATE(ctx context.Context, in *OrgCreateRequest, opts ...grpc.CallOption) (*OrgCreateResponse, error)
	CMDB_ORG_DELETE(ctx context.Context, in *CMDB_ORG_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_ORG_FETCH(ctx context.Context, in *OrgFetchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error)
	CMDB_ORG_GET_BY_DOMAIN(ctx context.Context, in *OrgGetByDomainRequest, opts ...grpc.CallOption) (*OrgGetByDomainResponse, error)
	CMDB_ORG_NEXUS_FETCH(ctx context.Context, in *OrgNexusGetRequest, opts ...grpc.CallOption) (*OrgNexusGetResponse, error)
	CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx context.Context, in *OrgNexusShowPasswordRequest, opts ...grpc.CallOption) (*OrgNexusShowPasswordResponse, error)
	CMDB_ORG_PUBLIC(ctx context.Context, in *OrgSearchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error)
	CMDB_ORG_PUBLISHER_CREATE(ctx context.Context, in *CMDB_ORG_PUBLISHER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_ORG_PUBLISHER_CREATE_GET(ctx context.Context, in *CMDB_ORG_PUBLISHER_CREATE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_ORG_RESOURCE_GET(ctx context.Context, in *CMDB_ORG_RESOURCE_GET_Request, opts ...grpc.CallOption) (*OrgResourceInfo, error)
	CMDB_ORG_SEARCH(ctx context.Context, in *OrgSearchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error)
	CMDB_ORG_UPDATE(ctx context.Context, in *OrgUpdateRequest, opts ...grpc.CallOption) (*OrgUpdateRequestBody, error)
	CMDB_PROJECTS_FETCH(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error)
	CMDB_PROJECT_CREATE(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*ProjectCreateResponse, error)
	CMDB_PROJECT_DELETE(ctx context.Context, in *ProjectDeleteRequest, opts ...grpc.CallOption) (*ProjectDeleteResponse, error)
	CMDB_PROJECT_DETAIL(ctx context.Context, in *ProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error)
	CMDB_PUBLISHERS_LIST(ctx context.Context, in *PublisherListRequest, opts ...grpc.CallOption) (*PublisherListResponse, error)
	CMDB_PUBLISHER_CREATE(ctx context.Context, in *PublisherCreateRequest, opts ...grpc.CallOption) (*PublisherCreateResponse, error)
	CMDB_PUBLISHER_DELETE(ctx context.Context, in *CMDB_PUBLISHER_DELETE_Request, opts ...grpc.CallOption) (*PublisherDeleteResponse, error)
	CMDB_PUBLISHER_GET(ctx context.Context, in *CMDB_PUBLISHER_GET_Request, opts ...grpc.CallOption) (*PublisherDetailResponse, error)
	CMDB_PUBLISHER_UPDATE(ctx context.Context, in *PublisherUpdateRequest, opts ...grpc.CallOption) (*PublisherUpdateResponse, error)
	CMDB_ROLES_LIST(ctx context.Context, in *CMDB_ROLES_LIST_Request, opts ...grpc.CallOption) (*MemberRoleListResponse, error)
	CMDB_TICKET_CLOSE(ctx context.Context, in *TicketCloseRequest, opts ...grpc.CallOption) (*TicketCloseResponse, error)
	CMDB_TICKET_CREATE(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error)
	CMDB_TICKET_DELETE(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error)
	CMDB_TICKET_FETCH(ctx context.Context, in *TicketFetchRequest, opts ...grpc.CallOption) (*TicketFetchResponse, error)
	CMDB_TICKET_LIST(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*TicketListResponse, error)
	CMDB_TICKET_REOPEN(ctx context.Context, in *TicketReopenRequest, opts ...grpc.CallOption) (*TicketReopenResponse, error)
	CMDB_TICKET_UPDATE(ctx context.Context, in *TicketUpdateRequest, opts ...grpc.CallOption) (*TicketUpdateResponse, error)
	CODE_COVERAGE_END_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CODE_COVERAGE_READY_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CODE_COVERAGE_READY_STATUS(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CODE_COVERAGE_REPORT_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAPIAsset(ctx context.Context, in *APIAssetCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAPIAssetVersion(ctx context.Context, in *APIAssetVersionCreateRequest, opts ...grpc.CallOption) (*CreateAPIAssetVersionBody, error)
	CreateAccess(ctx context.Context, in *CreateAccessReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAttempTest(ctx context.Context, in *APITestReq, opts ...grpc.CallOption) (*Header, error)
	CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateContract(ctx context.Context, in *CreateContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateInstantiation(ctx context.Context, in *CreateInstantiationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSLA(ctx context.Context, in *CreateSLAReq, opts ...grpc.CallOption) (*Header, error)
	DeleteAPIAssetVersion(ctx context.Context, in *DeleteAPIAssetVersion_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAPIAssets(ctx context.Context, in *DeleteAPIAssets_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAccess(ctx context.Context, in *DeleteAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteClient(ctx context.Context, in *DeleteClient_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSLA(ctx context.Context, in *DeleteSLAReq, opts ...grpc.CallOption) (*Header, error)
	ExportSpec(ctx context.Context, in *DownloadSpecTextReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeCreateNode(ctx context.Context, in *APIDocCreateNodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeDeleteNode(ctx context.Context, in *FileTreeDeleteNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeGetNode(ctx context.Context, in *FileTreeGetNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeListNodes(ctx context.Context, in *FileTreeListNodes_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeMvCpNode(ctx context.Context, in *FileTreeMvCpNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileTreeUpdateNode(ctx context.Context, in *FileTreeUpdateNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAPIAssetVersion(ctx context.Context, in *GetAPIAssetVersionReq, opts ...grpc.CallOption) (*GetAssetVersionRsp, error)
	GetAPIAssets(ctx context.Context, in *GetAPIAssetReq, opts ...grpc.CallOption) (*APIAssetGetResponse, error)
	GetAccess(ctx context.Context, in *GetAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClient(ctx context.Context, in *GetClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInstantiations(ctx context.Context, in *GetInstantiationsReq, opts ...grpc.CallOption) (*GetAddonInstanceDetailResponse, error)
	GetOperation(ctx context.Context, in *GetOperationReq, opts ...grpc.CallOption) (*BaseResponse, error)
	GetSLA(ctx context.Context, in *ListSLAsReq, opts ...grpc.CallOption) (*ListSLAsRsp, error)
	ListAPIAssetVersions(ctx context.Context, in *GetAPIAssetVersionReq, opts ...grpc.CallOption) (*GetAssetVersionRsp, error)
	ListAPIGateways(ctx context.Context, in *ListAPIGatewaysReq, opts ...grpc.CallOption) (*ListAPIGatewaysResp, error)
	ListAccess(ctx context.Context, in *ListAccessReq, opts ...grpc.CallOption) (*ListAccessRsp, error)
	ListContract(ctx context.Context, in *ListContractsReq, opts ...grpc.CallOption) (*ListContractsRsp, error)
	ListContractRecords(ctx context.Context, in *ListContractRecordsReq, opts ...grpc.CallOption) (*ListContractRecordsRsp, error)
	ListInstantiations(ctx context.Context, in *ListInstantiations_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMyClients(ctx context.Context, in *ListMyClientsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListProjectAPIGateways(ctx context.Context, in *ListProjectAPIGatewaysReq, opts ...grpc.CallOption) (*ListAPIGatewaysResp, error)
	ListRuntimeServices(ctx context.Context, in *ListRuntimeServices_Request, opts ...grpc.CallOption) (*Header, error)
	ListSLA(ctx context.Context, in *GetSLAReq, opts ...grpc.CallOption) (*GetSLARsp, error)
	ListSwaggerVersionClients(ctx context.Context, in *ListSwaggerVersionClientsReq, opts ...grpc.CallOption) (*ListSwaggerVersionRsp, error)
	ListSwaggerVersions(ctx context.Context, in *ListSwaggerVersionsReq, opts ...grpc.CallOption) (*ListSwaggerVersionRsp, error)
	PUBLISH_ITEM_CERTIFICATION_GET(ctx context.Context, in *PUBLISH_ITEM_CERTIFICATION_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_CHANNELS(ctx context.Context, in *PublishItemStatisticsDetailRequest, opts ...grpc.CallOption) (*PublishItemStatisticsDetailData, error)
	PUBLISH_ITEM_ERR_EFFACTS(ctx context.Context, in *PUBLISH_ITEM_ERR_EFFACTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_ERR_LIST(ctx context.Context, in *PUBLISH_ITEM_ERR_LIST_Request, opts ...grpc.CallOption) (*PublishItemStatisticsErrListData, error)
	PUBLISH_ITEM_ERR_RATE(ctx context.Context, in *PUBLISH_ITEM_ERR_RATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_ERR_TREND(ctx context.Context, in *PUBLISH_ITEM_ERR_TREND_Request, opts ...grpc.CallOption) (*PublishItemStatisticsErrTrendData, error)
	PUBLISH_ITEM_METIRCS_COMMON(ctx context.Context, in *PUBLISH_ITEM_METIRCS_COMMON_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx context.Context, in *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_STATISTICS_TREND(ctx context.Context, in *PUBLISH_ITEM_STATISTICS_TREND_Request, opts ...grpc.CallOption) (*PublishItemStatisticsTrendData, error)
	PUBLISH_ITEM_USERS(ctx context.Context, in *PUBLISH_ITEM_USERS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUBLISH_ITEM_VERSION_INFO_LIST(ctx context.Context, in *PublishItemStatisticsDetailRequest, opts ...grpc.CallOption) (*PublishItemStatisticsDetailData, error)
	PagingAPIAssets(ctx context.Context, in *PagingAPIAssetsReq, opts ...grpc.CallOption) (*APIAssetPagingResponse, error)
	ProjectPackageExport(ctx context.Context, in *ExportProjectPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProjectPackageImport(ctx context.Context, in *ImportProjectPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProjectPackageParse(ctx context.Context, in *ProjectPackageParse_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProjectTemplateExport(ctx context.Context, in *ExportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProjectTemplateImport(ctx context.Context, in *ImportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProjectTemplateParse(ctx context.Context, in *ImportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProxyMetrics(ctx context.Context, in *ProxyMetrics_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_APITESTS_CANCEL(ctx context.Context, in *ApiTestCancelRequest, opts ...grpc.CallOption) (*ApiTestCancelResponse, error)
	QA_APITESTS_GET(ctx context.Context, in *QA_APITESTS_GET_Request, opts ...grpc.CallOption) (*ApiTestsGetResponse, error)
	QA_APITESTS_UPDATE(ctx context.Context, in *ApiTestsUpdateRequest, opts ...grpc.CallOption) (*ApiTestsUpdateResponse, error)
	QA_AUTOTEST_SPACE_GET(ctx context.Context, in *QA_AUTOTEST_SPACE_GET_Request, opts ...grpc.CallOption) (*AutoTestSpaceResponse, error)
	QA_PIPELINE_TASK_LOGS(ctx context.Context, in *QA_PIPELINE_TASK_LOGS_Request, opts ...grpc.CallOption) (*DashboardSpotLogResponse, error)
	QA_RECORDS_GET(ctx context.Context, in *QA_RECORDS_GET_Request, opts ...grpc.CallOption) (*GetTestFileRecordResponse, error)
	QA_RECORDS_LIST(ctx context.Context, in *ListTestFileRecordsRequest, opts ...grpc.CallOption) (*ListTestFileRecordsResponse, error)
	QA_SONAR_GET_CREDENTIAL(ctx context.Context, in *QA_SONAR_GET_CREDENTIAL_Request, opts ...grpc.CallOption) (*SonarCredentialGetResponse, error)
	QA_SONAR_ISSUES(ctx context.Context, in *QA_SONAR_ISSUES_Request, opts ...grpc.CallOption) (*SonarIssueResponse, error)
	QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx context.Context, in *SonarMetricRulesBatchDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx context.Context, in *SonarMetricRulesBatchInsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_DELETE(ctx context.Context, in *SonarMetricRulesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_GET(ctx context.Context, in *QA_SONAR_METRIC_RULES_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_PAGING(ctx context.Context, in *SonarMetricRulesPagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx context.Context, in *SonarMetricRulesDefinitionListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_QUERY_LIST(ctx context.Context, in *SonarMetricRulesListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_UPDATE(ctx context.Context, in *SonarMetricRulesUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QA_TESTENV_CREATE(ctx context.Context, in *QA_TESTENV_CREATE_Request, opts ...grpc.CallOption) (*APITestEnvCreateRequest, error)
	QA_TESTENV_DELETE(ctx context.Context, in *QA_TESTENV_DELETE_Request, opts ...grpc.CallOption) (*APITestEnvDeleteResponse, error)
	QA_TESTENV_GET(ctx context.Context, in *QA_TESTENV_GET_Request, opts ...grpc.CallOption) (*APITestEnvGetResponse, error)
	QA_TESTENV_LIST(ctx context.Context, in *QA_TESTENV_LIST_Request, opts ...grpc.CallOption) (*APITestEnvListResponse, error)
	QA_TESTENV_UPDATE(ctx context.Context, in *APITestEnvUpdateRequest, opts ...grpc.CallOption) (*APITestEnvUpdateResponse, error)
	QA_TESTPLAN_PIPELINE_DETAIL(ctx context.Context, in *QA_TESTPLAN_PIPELINE_DETAIL_Request, opts ...grpc.CallOption) (*PipelineDetailResponse, error)
	SPOT_APITESTS_LOGS(ctx context.Context, in *SPOT_APITESTS_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_APITESTS_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_APITESTS_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchOperations(ctx context.Context, in *SearchOperationsReq, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateAPIAssset(ctx context.Context, in *UpdateAPIAssetReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAccess(ctx context.Context, in *UpdateAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAssetVersion(ctx context.Context, in *UpdateAssetVersionReq, opts ...grpc.CallOption) (*Header, error)
	UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateContract(ctx context.Context, in *UpdateContract_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInstantiation(ctx context.Context, in *UpdateInstantiationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSLA(ctx context.Context, in *UpdateSLAReq, opts ...grpc.CallOption) (*Header, error)
	ValidateSwagger(ctx context.Context, in *ValidateSwagger_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dopClient struct {
	cc grpc1.ClientConnInterface
}

func NewDopClient(cc grpc1.ClientConnInterface) DopClient {
	return &dopClient{cc}
}

func (c *dopClient) AADAPTOR_CICD_CRON_LIST(ctx context.Context, in *AADAPTOR_CICD_CRON_LIST_Request, opts ...grpc.CallOption) (*PipelineCronListResponse, error) {
	out := new(PipelineCronListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/AADAPTOR_CICD_CRON_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx context.Context, in *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request, opts ...grpc.CallOption) (*PipelineAppAllValidBranchWorkspaceResponse, error) {
	out := new(PipelineAppAllValidBranchWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_BRANCHES_ALL_VALID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CANCEL(ctx context.Context, in *ADAPTOR_CICD_CANCEL_Request, opts ...grpc.CallOption) (*PipelineCancelResponse, error) {
	out := new(PipelineCancelResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CONFIG_GET(ctx context.Context, in *ADAPTOR_CICD_CONFIG_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CONFIG_NAMESPACES(ctx context.Context, in *ADAPTOR_CICD_CONFIG_NAMESPACES_Request, opts ...grpc.CallOption) (*PipelineConfigNamespacesFetchResponse, error) {
	out := new(PipelineConfigNamespacesFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_NAMESPACES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CONFIG_WORKSPACES(ctx context.Context, in *ADAPTOR_CICD_CONFIG_WORKSPACES_Request, opts ...grpc.CallOption) (*PipelineConfigNamespacesFetchResponse, error) {
	out := new(PipelineConfigNamespacesFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_WORKSPACES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CREATE(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error) {
	out := new(PipelineCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CRON_START(ctx context.Context, in *ADAPTOR_CICD_CRON_START_Request, opts ...grpc.CallOption) (*PipelineCronStartResponse, error) {
	out := new(PipelineCronStartResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CRON_START", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_CRON_STOP(ctx context.Context, in *ADAPTOR_CICD_CRON_STOP_Request, opts ...grpc.CallOption) (*PipelineCronStopResponse, error) {
	out := new(PipelineCronStopResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CRON_STOP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx context.Context, in *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FETCH_PIPELINE_ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_CREATE(ctx context.Context, in *UnifiedFileTreeNodeCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_DELETE(ctx context.Context, in *UnifiedFileTreeNodeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx context.Context, in *UnifiedFileTreeNodeFindAncestorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_FIND_ANCESTORS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx context.Context, in *UnifiedFileTreeNodeFuzzySearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_FUZZY_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_GET(ctx context.Context, in *UnifiedFileTreeNodeGetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx context.Context, in *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_FILETREE_LIST(ctx context.Context, in *UnifiedFileTreeNodeListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_GET_BRANCH_RULE(ctx context.Context, in *ADAPTOR_CICD_GET_BRANCH_RULE_Request, opts ...grpc.CallOption) (*PipelineGetBranchRuleResponse, error) {
	out := new(PipelineGetBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_GET_BRANCH_RULE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_INVOKED_COMBO(ctx context.Context, in *PipelineInvokedComboRequest, opts ...grpc.CallOption) (*PipelineInvokedComboResponse, error) {
	out := new(PipelineInvokedComboResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_INVOKED_COMBO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_LIST(ctx context.Context, in *PipelinePageListRequest, opts ...grpc.CallOption) (*PipelinePageListResponse, error) {
	out := new(PipelinePageListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_OPERATE(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error) {
	out := new(PipelineOperateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_OPERATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_PIPELINE_DETAIL(ctx context.Context, in *ADAPTOR_CICD_PIPELINE_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PIPELINE_DETAIL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_PIPELINE_YML_LIST(ctx context.Context, in *CICDPipelineYmlListRequest, opts ...grpc.CallOption) (*CICDPipelineYmlListResponse, error) {
	out := new(CICDPipelineYmlListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PIPELINE_YML_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_PROJECT_CREATE(ctx context.Context, in *ADAPTOR_CICD_PROJECT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PROJECT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_PROJECT_DETAIL(ctx context.Context, in *ADAPTOR_CICD_PROJECT_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PROJECT_DETAIL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_RERUN(ctx context.Context, in *ADAPTOR_CICD_RERUN_Request, opts ...grpc.CallOption) (*PipelineRerunResponse, error) {
	out := new(PipelineRerunResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RERUN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_RERUN_FAILED(ctx context.Context, in *PipelineRerunFailedResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RERUN_FAILED", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_RUN(ctx context.Context, in *ADAPTOR_CICD_RUN_Request, opts ...grpc.CallOption) (*PipelineRunResponse, error) {
	out := new(PipelineRunResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RUN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_TASK_LOG(ctx context.Context, in *ADAPTOR_CICD_TASK_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_TASK_LOG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx context.Context, in *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ADAPTOR_CICD_TASK_LOG_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) APIDocWebsocket(ctx context.Context, in *APIDocWebsocket_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/APIDocWebsocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) APITEST_ATTEMPT(ctx context.Context, in *APITestsAttemptRequest, opts ...grpc.CallOption) (*APITestsAttemptResponse, error) {
	out := new(APITestsAttemptResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/APITEST_ATTEMPT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) APPLICATIONS_RESOURCES_LIST(ctx context.Context, in *APPLICATIONS_RESOURCES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/APPLICATIONS_RESOURCES_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) APP_PUBLISH_ITEM_RELATION_GET(ctx context.Context, in *APP_PUBLISH_ITEM_RELATION_GET_Request, opts ...grpc.CallOption) (*QueryAppPublishItemRelationResponse, error) {
	out := new(QueryAppPublishItemRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/APP_PUBLISH_ITEM_RELATION_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) APP_PUBLISH_ITEM_RELATION_UPDATE(ctx context.Context, in *UpdateAppPublishItemRelationRequest, opts ...grpc.CallOption) (*UpdateAppPublishItemRelationResponse, error) {
	out := new(UpdateAppPublishItemRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/APP_PUBLISH_ITEM_RELATION_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CI_SONAR_STORE(ctx context.Context, in *SonarStoreRequest, opts ...grpc.CallOption) (*SonarStoreResponse, error) {
	out := new(SonarStoreResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CI_SONAR_STORE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_APPLICATION_CREATE(ctx context.Context, in *ApplicationCreateRequest, opts ...grpc.CallOption) (*ApplicationCreateResponse, error) {
	out := new(ApplicationCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_APPLICATION_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_APPLICATION_DELETE(ctx context.Context, in *ApplicationDeleteRequest, opts ...grpc.CallOption) (*ApplicationDeleteResponse, error) {
	out := new(ApplicationDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_APPLICATION_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_APPLICATION_INIT(ctx context.Context, in *ApplicationInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_APPLICATION_INIT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_APPLICATION_UPDATE(ctx context.Context, in *ApplicationUpdateRequest, opts ...grpc.CallOption) (*ApplicationUpdateResponse, error) {
	out := new(ApplicationUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_APPLICATION_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_BRANCH_RULE_CREATE(ctx context.Context, in *CreateBranchRuleRequest, opts ...grpc.CallOption) (*CreateBranchRuleResponse, error) {
	out := new(CreateBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_BRANCH_RULE_DELETE(ctx context.Context, in *CMDB_BRANCH_RULE_DELETE_Request, opts ...grpc.CallOption) (*DeleteBranchRuleResponse, error) {
	out := new(DeleteBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_BRANCH_RULE_QUERY(ctx context.Context, in *QueryBranchRuleRequest, opts ...grpc.CallOption) (*QueryBranchRuleResponse, error) {
	out := new(QueryBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_BRANCH_RULE_UPDATE(ctx context.Context, in *UpdateBranchRuleRequest, opts ...grpc.CallOption) (*UpdateBranchRuleResponse, error) {
	out := new(UpdateBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATES_APP_LIST(ctx context.Context, in *AppCertificateListRequest, opts ...grpc.CallOption) (*PagingAppCertificateDTO, error) {
	out := new(PagingAppCertificateDTO)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATES_APP_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATES_LIST(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListResponse, error) {
	out := new(CertificateListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATES_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_APP_CANCEL(ctx context.Context, in *CMDB_CERTIFICATE_APP_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_APP_CONFIG(ctx context.Context, in *PushCertificateConfigsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_CONFIG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_APP_QUOTE(ctx context.Context, in *CertificateQuoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_QUOTE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_CREATE(ctx context.Context, in *CertificateCreateRequest, opts ...grpc.CallOption) (*CertificateCreateResponse, error) {
	out := new(CertificateCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_DELETE(ctx context.Context, in *CMDB_CERTIFICATE_DELETE_Request, opts ...grpc.CallOption) (*CertificateDeleteResponse, error) {
	out := new(CertificateDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_GET(ctx context.Context, in *CMDB_CERTIFICATE_GET_Request, opts ...grpc.CallOption) (*CertificateDetailResponse, error) {
	out := new(CertificateDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_CERTIFICATE_UPDATE(ctx context.Context, in *CertificateUpdateRequest, opts ...grpc.CallOption) (*CertificateUpdateResponse, error) {
	out := new(CertificateUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_COMMENT_CREATE(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentCreateResponse, error) {
	out := new(CommentCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_COMMENT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_COMMENT_LIST(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_COMMENT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_COMMENT_UPDATE(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*CommentUpdateResponse, error) {
	out := new(CommentUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_COMMENT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ITERATION_CREATE(ctx context.Context, in *IterationCreateRequest, opts ...grpc.CallOption) (*IterationCreateResponse, error) {
	out := new(IterationCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ITERATION_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ITERATION_DELETE(ctx context.Context, in *CMDB_ITERATION_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ITERATION_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ITERATION_GET(ctx context.Context, in *CMDB_ITERATION_GET_Request, opts ...grpc.CallOption) (*IterationGetResponse, error) {
	out := new(IterationGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ITERATION_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ITERATION_PAGING(ctx context.Context, in *IterationPagingRequest, opts ...grpc.CallOption) (*IterationPagingResponse, error) {
	out := new(IterationPagingResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ITERATION_PAGING", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ITERATION_UPDATE(ctx context.Context, in *IterationUpdateRequest, opts ...grpc.CallOption) (*IterationUpdateResponse, error) {
	out := new(IterationUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ITERATION_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_LIBREFERENCE_CREATE(ctx context.Context, in *LibReferenceCreateRequest, opts ...grpc.CallOption) (*LibReferenceCreateResponse, error) {
	out := new(LibReferenceCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_LIBREFERENCE_DELETE(ctx context.Context, in *CMDB_LIBREFERENCE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_LIBREFERENCE_LIST(ctx context.Context, in *LibReferenceListRequest, opts ...grpc.CallOption) (*LibReferenceListResponse, error) {
	out := new(LibReferenceListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_LIBREFERENCE_LIST_VERSION(ctx context.Context, in *CMDB_LIBREFERENCE_LIST_VERSION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_LIST_VERSION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_MY_PUBLISHERS_LIST(ctx context.Context, in *PublisherListRequest, opts ...grpc.CallOption) (*PublisherListResponse, error) {
	out := new(PublisherListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_MY_PUBLISHERS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_CREATE(ctx context.Context, in *OrgCreateRequest, opts ...grpc.CallOption) (*OrgCreateResponse, error) {
	out := new(OrgCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_DELETE(ctx context.Context, in *CMDB_ORG_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_FETCH(ctx context.Context, in *OrgFetchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error) {
	out := new(OrgSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_GET_BY_DOMAIN(ctx context.Context, in *OrgGetByDomainRequest, opts ...grpc.CallOption) (*OrgGetByDomainResponse, error) {
	out := new(OrgGetByDomainResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_GET_BY_DOMAIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_NEXUS_FETCH(ctx context.Context, in *OrgNexusGetRequest, opts ...grpc.CallOption) (*OrgNexusGetResponse, error) {
	out := new(OrgNexusGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_NEXUS_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx context.Context, in *OrgNexusShowPasswordRequest, opts ...grpc.CallOption) (*OrgNexusShowPasswordResponse, error) {
	out := new(OrgNexusShowPasswordResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_NEXUS_SHOW_PASSWORD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_PUBLIC(ctx context.Context, in *OrgSearchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error) {
	out := new(OrgSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_PUBLISHER_CREATE(ctx context.Context, in *CMDB_ORG_PUBLISHER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLISHER_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_PUBLISHER_CREATE_GET(ctx context.Context, in *CMDB_ORG_PUBLISHER_CREATE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLISHER_CREATE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_RESOURCE_GET(ctx context.Context, in *CMDB_ORG_RESOURCE_GET_Request, opts ...grpc.CallOption) (*OrgResourceInfo, error) {
	out := new(OrgResourceInfo)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_RESOURCE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_SEARCH(ctx context.Context, in *OrgSearchRequest, opts ...grpc.CallOption) (*OrgSearchResponse, error) {
	out := new(OrgSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ORG_UPDATE(ctx context.Context, in *OrgUpdateRequest, opts ...grpc.CallOption) (*OrgUpdateRequestBody, error) {
	out := new(OrgUpdateRequestBody)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ORG_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PROJECTS_FETCH(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error) {
	out := new(ProjectListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PROJECTS_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PROJECT_CREATE(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*ProjectCreateResponse, error) {
	out := new(ProjectCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PROJECT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PROJECT_DELETE(ctx context.Context, in *ProjectDeleteRequest, opts ...grpc.CallOption) (*ProjectDeleteResponse, error) {
	out := new(ProjectDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PROJECT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PROJECT_DETAIL(ctx context.Context, in *ProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error) {
	out := new(ProjectDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PROJECT_DETAIL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PUBLISHERS_LIST(ctx context.Context, in *PublisherListRequest, opts ...grpc.CallOption) (*PublisherListResponse, error) {
	out := new(PublisherListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PUBLISHERS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PUBLISHER_CREATE(ctx context.Context, in *PublisherCreateRequest, opts ...grpc.CallOption) (*PublisherCreateResponse, error) {
	out := new(PublisherCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PUBLISHER_DELETE(ctx context.Context, in *CMDB_PUBLISHER_DELETE_Request, opts ...grpc.CallOption) (*PublisherDeleteResponse, error) {
	out := new(PublisherDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PUBLISHER_GET(ctx context.Context, in *CMDB_PUBLISHER_GET_Request, opts ...grpc.CallOption) (*PublisherDetailResponse, error) {
	out := new(PublisherDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_PUBLISHER_UPDATE(ctx context.Context, in *PublisherUpdateRequest, opts ...grpc.CallOption) (*PublisherUpdateResponse, error) {
	out := new(PublisherUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_ROLES_LIST(ctx context.Context, in *CMDB_ROLES_LIST_Request, opts ...grpc.CallOption) (*MemberRoleListResponse, error) {
	out := new(MemberRoleListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_ROLES_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_CLOSE(ctx context.Context, in *TicketCloseRequest, opts ...grpc.CallOption) (*TicketCloseResponse, error) {
	out := new(TicketCloseResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_CLOSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_CREATE(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*TicketCreateResponse, error) {
	out := new(TicketCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_DELETE(ctx context.Context, in *TicketDeleteRequest, opts ...grpc.CallOption) (*TicketDeleteResponse, error) {
	out := new(TicketDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_FETCH(ctx context.Context, in *TicketFetchRequest, opts ...grpc.CallOption) (*TicketFetchResponse, error) {
	out := new(TicketFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_LIST(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*TicketListResponse, error) {
	out := new(TicketListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_REOPEN(ctx context.Context, in *TicketReopenRequest, opts ...grpc.CallOption) (*TicketReopenResponse, error) {
	out := new(TicketReopenResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_REOPEN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CMDB_TICKET_UPDATE(ctx context.Context, in *TicketUpdateRequest, opts ...grpc.CallOption) (*TicketUpdateResponse, error) {
	out := new(TicketUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CMDB_TICKET_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CODE_COVERAGE_END_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CODE_COVERAGE_END_CALLBACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CODE_COVERAGE_READY_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CODE_COVERAGE_READY_CALLBACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CODE_COVERAGE_READY_STATUS(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CODE_COVERAGE_READY_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CODE_COVERAGE_REPORT_CALLBACK(ctx context.Context, in *CodeCoverageUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CODE_COVERAGE_REPORT_CALLBACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateAPIAsset(ctx context.Context, in *APIAssetCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateAPIAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateAPIAssetVersion(ctx context.Context, in *APIAssetVersionCreateRequest, opts ...grpc.CallOption) (*CreateAPIAssetVersionBody, error) {
	out := new(CreateAPIAssetVersionBody)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateAPIAssetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateAccess(ctx context.Context, in *CreateAccessReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateAttempTest(ctx context.Context, in *APITestReq, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateAttempTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateContract(ctx context.Context, in *CreateContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateInstantiation(ctx context.Context, in *CreateInstantiationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateInstantiation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) CreateSLA(ctx context.Context, in *CreateSLAReq, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/CreateSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteAPIAssetVersion(ctx context.Context, in *DeleteAPIAssetVersion_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteAPIAssetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteAPIAssets(ctx context.Context, in *DeleteAPIAssets_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteAPIAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteAccess(ctx context.Context, in *DeleteAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteClient(ctx context.Context, in *DeleteClient_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) DeleteSLA(ctx context.Context, in *DeleteSLAReq, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/DeleteSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ExportSpec(ctx context.Context, in *DownloadSpecTextReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ExportSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeCreateNode(ctx context.Context, in *APIDocCreateNodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeCreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeDeleteNode(ctx context.Context, in *FileTreeDeleteNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeDeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeGetNode(ctx context.Context, in *FileTreeGetNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeGetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeListNodes(ctx context.Context, in *FileTreeListNodes_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeMvCpNode(ctx context.Context, in *FileTreeMvCpNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeMvCpNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) FileTreeUpdateNode(ctx context.Context, in *FileTreeUpdateNode_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/FileTreeUpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetAPIAssetVersion(ctx context.Context, in *GetAPIAssetVersionReq, opts ...grpc.CallOption) (*GetAssetVersionRsp, error) {
	out := new(GetAssetVersionRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetAPIAssetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetAPIAssets(ctx context.Context, in *GetAPIAssetReq, opts ...grpc.CallOption) (*APIAssetGetResponse, error) {
	out := new(APIAssetGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetAPIAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetAccess(ctx context.Context, in *GetAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetClient(ctx context.Context, in *GetClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetContract(ctx context.Context, in *GetContractReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetInstantiations(ctx context.Context, in *GetInstantiationsReq, opts ...grpc.CallOption) (*GetAddonInstanceDetailResponse, error) {
	out := new(GetAddonInstanceDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetInstantiations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetOperation(ctx context.Context, in *GetOperationReq, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) GetSLA(ctx context.Context, in *ListSLAsReq, opts ...grpc.CallOption) (*ListSLAsRsp, error) {
	out := new(ListSLAsRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/GetSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListAPIAssetVersions(ctx context.Context, in *GetAPIAssetVersionReq, opts ...grpc.CallOption) (*GetAssetVersionRsp, error) {
	out := new(GetAssetVersionRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListAPIAssetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListAPIGateways(ctx context.Context, in *ListAPIGatewaysReq, opts ...grpc.CallOption) (*ListAPIGatewaysResp, error) {
	out := new(ListAPIGatewaysResp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListAPIGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListAccess(ctx context.Context, in *ListAccessReq, opts ...grpc.CallOption) (*ListAccessRsp, error) {
	out := new(ListAccessRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListContract(ctx context.Context, in *ListContractsReq, opts ...grpc.CallOption) (*ListContractsRsp, error) {
	out := new(ListContractsRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListContractRecords(ctx context.Context, in *ListContractRecordsReq, opts ...grpc.CallOption) (*ListContractRecordsRsp, error) {
	out := new(ListContractRecordsRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListContractRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListInstantiations(ctx context.Context, in *ListInstantiations_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListInstantiations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListMyClients(ctx context.Context, in *ListMyClientsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListMyClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListProjectAPIGateways(ctx context.Context, in *ListProjectAPIGatewaysReq, opts ...grpc.CallOption) (*ListAPIGatewaysResp, error) {
	out := new(ListAPIGatewaysResp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListProjectAPIGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListRuntimeServices(ctx context.Context, in *ListRuntimeServices_Request, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListRuntimeServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListSLA(ctx context.Context, in *GetSLAReq, opts ...grpc.CallOption) (*GetSLARsp, error) {
	out := new(GetSLARsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListSwaggerVersionClients(ctx context.Context, in *ListSwaggerVersionClientsReq, opts ...grpc.CallOption) (*ListSwaggerVersionRsp, error) {
	out := new(ListSwaggerVersionRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListSwaggerVersionClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ListSwaggerVersions(ctx context.Context, in *ListSwaggerVersionsReq, opts ...grpc.CallOption) (*ListSwaggerVersionRsp, error) {
	out := new(ListSwaggerVersionRsp)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ListSwaggerVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_CERTIFICATION_GET(ctx context.Context, in *PUBLISH_ITEM_CERTIFICATION_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_CERTIFICATION_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_CHANNELS(ctx context.Context, in *PublishItemStatisticsDetailRequest, opts ...grpc.CallOption) (*PublishItemStatisticsDetailData, error) {
	out := new(PublishItemStatisticsDetailData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_CHANNELS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_ERR_EFFACTS(ctx context.Context, in *PUBLISH_ITEM_ERR_EFFACTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_EFFACTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_ERR_LIST(ctx context.Context, in *PUBLISH_ITEM_ERR_LIST_Request, opts ...grpc.CallOption) (*PublishItemStatisticsErrListData, error) {
	out := new(PublishItemStatisticsErrListData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_ERR_RATE(ctx context.Context, in *PUBLISH_ITEM_ERR_RATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_RATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_ERR_TREND(ctx context.Context, in *PUBLISH_ITEM_ERR_TREND_Request, opts ...grpc.CallOption) (*PublishItemStatisticsErrTrendData, error) {
	out := new(PublishItemStatisticsErrTrendData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_TREND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_METIRCS_COMMON(ctx context.Context, in *PUBLISH_ITEM_METIRCS_COMMON_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_METIRCS_COMMON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx context.Context, in *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_STATISTICS_TREND(ctx context.Context, in *PUBLISH_ITEM_STATISTICS_TREND_Request, opts ...grpc.CallOption) (*PublishItemStatisticsTrendData, error) {
	out := new(PublishItemStatisticsTrendData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_STATISTICS_TREND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_USERS(ctx context.Context, in *PUBLISH_ITEM_USERS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_USERS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PUBLISH_ITEM_VERSION_INFO_LIST(ctx context.Context, in *PublishItemStatisticsDetailRequest, opts ...grpc.CallOption) (*PublishItemStatisticsDetailData, error) {
	out := new(PublishItemStatisticsDetailData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PUBLISH_ITEM_VERSION_INFO_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) PagingAPIAssets(ctx context.Context, in *PagingAPIAssetsReq, opts ...grpc.CallOption) (*APIAssetPagingResponse, error) {
	out := new(APIAssetPagingResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/PagingAPIAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectPackageExport(ctx context.Context, in *ExportProjectPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectPackageExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectPackageImport(ctx context.Context, in *ImportProjectPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectPackageImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectPackageParse(ctx context.Context, in *ProjectPackageParse_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectPackageParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectTemplateExport(ctx context.Context, in *ExportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectTemplateExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectTemplateImport(ctx context.Context, in *ImportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectTemplateImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProjectTemplateParse(ctx context.Context, in *ImportProjectTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProjectTemplateParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ProxyMetrics(ctx context.Context, in *ProxyMetrics_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ProxyMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_APITESTS_CANCEL(ctx context.Context, in *ApiTestCancelRequest, opts ...grpc.CallOption) (*ApiTestCancelResponse, error) {
	out := new(ApiTestCancelResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_APITESTS_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_APITESTS_GET(ctx context.Context, in *QA_APITESTS_GET_Request, opts ...grpc.CallOption) (*ApiTestsGetResponse, error) {
	out := new(ApiTestsGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_APITESTS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_APITESTS_UPDATE(ctx context.Context, in *ApiTestsUpdateRequest, opts ...grpc.CallOption) (*ApiTestsUpdateResponse, error) {
	out := new(ApiTestsUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_APITESTS_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_AUTOTEST_SPACE_GET(ctx context.Context, in *QA_AUTOTEST_SPACE_GET_Request, opts ...grpc.CallOption) (*AutoTestSpaceResponse, error) {
	out := new(AutoTestSpaceResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_AUTOTEST_SPACE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_PIPELINE_TASK_LOGS(ctx context.Context, in *QA_PIPELINE_TASK_LOGS_Request, opts ...grpc.CallOption) (*DashboardSpotLogResponse, error) {
	out := new(DashboardSpotLogResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_PIPELINE_TASK_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_RECORDS_GET(ctx context.Context, in *QA_RECORDS_GET_Request, opts ...grpc.CallOption) (*GetTestFileRecordResponse, error) {
	out := new(GetTestFileRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_RECORDS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_RECORDS_LIST(ctx context.Context, in *ListTestFileRecordsRequest, opts ...grpc.CallOption) (*ListTestFileRecordsResponse, error) {
	out := new(ListTestFileRecordsResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_RECORDS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_GET_CREDENTIAL(ctx context.Context, in *QA_SONAR_GET_CREDENTIAL_Request, opts ...grpc.CallOption) (*SonarCredentialGetResponse, error) {
	out := new(SonarCredentialGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_GET_CREDENTIAL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_ISSUES(ctx context.Context, in *QA_SONAR_ISSUES_Request, opts ...grpc.CallOption) (*SonarIssueResponse, error) {
	out := new(SonarIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_ISSUES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx context.Context, in *SonarMetricRulesBatchDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_BATCH_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx context.Context, in *SonarMetricRulesBatchInsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_BATCH_INSERT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_DELETE(ctx context.Context, in *SonarMetricRulesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_GET(ctx context.Context, in *QA_SONAR_METRIC_RULES_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_PAGING(ctx context.Context, in *SonarMetricRulesPagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_PAGING", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx context.Context, in *SonarMetricRulesDefinitionListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_QUERY_DEFINITION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_QUERY_LIST(ctx context.Context, in *SonarMetricRulesListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_QUERY_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_SONAR_METRIC_RULES_UPDATE(ctx context.Context, in *SonarMetricRulesUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTENV_CREATE(ctx context.Context, in *QA_TESTENV_CREATE_Request, opts ...grpc.CallOption) (*APITestEnvCreateRequest, error) {
	out := new(APITestEnvCreateRequest)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTENV_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTENV_DELETE(ctx context.Context, in *QA_TESTENV_DELETE_Request, opts ...grpc.CallOption) (*APITestEnvDeleteResponse, error) {
	out := new(APITestEnvDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTENV_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTENV_GET(ctx context.Context, in *QA_TESTENV_GET_Request, opts ...grpc.CallOption) (*APITestEnvGetResponse, error) {
	out := new(APITestEnvGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTENV_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTENV_LIST(ctx context.Context, in *QA_TESTENV_LIST_Request, opts ...grpc.CallOption) (*APITestEnvListResponse, error) {
	out := new(APITestEnvListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTENV_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTENV_UPDATE(ctx context.Context, in *APITestEnvUpdateRequest, opts ...grpc.CallOption) (*APITestEnvUpdateResponse, error) {
	out := new(APITestEnvUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTENV_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) QA_TESTPLAN_PIPELINE_DETAIL(ctx context.Context, in *QA_TESTPLAN_PIPELINE_DETAIL_Request, opts ...grpc.CallOption) (*PipelineDetailResponse, error) {
	out := new(PipelineDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/QA_TESTPLAN_PIPELINE_DETAIL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) SPOT_APITESTS_LOGS(ctx context.Context, in *SPOT_APITESTS_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/SPOT_APITESTS_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) SPOT_APITESTS_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_APITESTS_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/SPOT_APITESTS_LOGS_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) SearchOperations(ctx context.Context, in *SearchOperationsReq, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/SearchOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateAPIAssset(ctx context.Context, in *UpdateAPIAssetReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateAPIAssset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateAccess(ctx context.Context, in *UpdateAccess_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateAssetVersion(ctx context.Context, in *UpdateAssetVersionReq, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateAssetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateContract(ctx context.Context, in *UpdateContract_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateInstantiation(ctx context.Context, in *UpdateInstantiationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateInstantiation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) UpdateSLA(ctx context.Context, in *UpdateSLAReq, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/UpdateSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopClient) ValidateSwagger(ctx context.Context, in *ValidateSwagger_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dop.dop/ValidateSwagger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DopServer is the server API for Dop service.
// All implementations should embed UnimplementedDopServer
// for forward compatibility
type DopServer interface {
	AADAPTOR_CICD_CRON_LIST(context.Context, *AADAPTOR_CICD_CRON_LIST_Request) (*PipelineCronListResponse, error)
	ADAPTOR_CICD_BRANCHES_ALL_VALID(context.Context, *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) (*PipelineAppAllValidBranchWorkspaceResponse, error)
	ADAPTOR_CICD_CANCEL(context.Context, *ADAPTOR_CICD_CANCEL_Request) (*PipelineCancelResponse, error)
	ADAPTOR_CICD_CONFIG_GET(context.Context, *ADAPTOR_CICD_CONFIG_GET_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_CONFIG_NAMESPACES(context.Context, *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) (*PipelineConfigNamespacesFetchResponse, error)
	ADAPTOR_CICD_CONFIG_WORKSPACES(context.Context, *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) (*PipelineConfigNamespacesFetchResponse, error)
	ADAPTOR_CICD_CREATE(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error)
	ADAPTOR_CICD_CRON_START(context.Context, *ADAPTOR_CICD_CRON_START_Request) (*PipelineCronStartResponse, error)
	ADAPTOR_CICD_CRON_STOP(context.Context, *ADAPTOR_CICD_CRON_STOP_Request) (*PipelineCronStopResponse, error)
	ADAPTOR_CICD_FETCH_PIPELINE_ID(context.Context, *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_CREATE(context.Context, *UnifiedFileTreeNodeCreateRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_DELETE(context.Context, *UnifiedFileTreeNodeDeleteRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(context.Context, *UnifiedFileTreeNodeFindAncestorsRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(context.Context, *UnifiedFileTreeNodeFuzzySearchRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_GET(context.Context, *UnifiedFileTreeNodeGetRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(context.Context, *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_FILETREE_LIST(context.Context, *UnifiedFileTreeNodeListRequest) (*emptypb.Empty, error)
	ADAPTOR_CICD_GET_BRANCH_RULE(context.Context, *ADAPTOR_CICD_GET_BRANCH_RULE_Request) (*PipelineGetBranchRuleResponse, error)
	ADAPTOR_CICD_INVOKED_COMBO(context.Context, *PipelineInvokedComboRequest) (*PipelineInvokedComboResponse, error)
	ADAPTOR_CICD_LIST(context.Context, *PipelinePageListRequest) (*PipelinePageListResponse, error)
	ADAPTOR_CICD_OPERATE(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error)
	ADAPTOR_CICD_PIPELINE_DETAIL(context.Context, *ADAPTOR_CICD_PIPELINE_DETAIL_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_PIPELINE_YML_LIST(context.Context, *CICDPipelineYmlListRequest) (*CICDPipelineYmlListResponse, error)
	ADAPTOR_CICD_PROJECT_CREATE(context.Context, *ADAPTOR_CICD_PROJECT_CREATE_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_PROJECT_DETAIL(context.Context, *ADAPTOR_CICD_PROJECT_DETAIL_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_RERUN(context.Context, *ADAPTOR_CICD_RERUN_Request) (*PipelineRerunResponse, error)
	ADAPTOR_CICD_RERUN_FAILED(context.Context, *PipelineRerunFailedResponse) (*emptypb.Empty, error)
	ADAPTOR_CICD_RUN(context.Context, *ADAPTOR_CICD_RUN_Request) (*PipelineRunResponse, error)
	ADAPTOR_CICD_TASK_LOG(context.Context, *ADAPTOR_CICD_TASK_LOG_Request) (*emptypb.Empty, error)
	ADAPTOR_CICD_TASK_LOG_DOWNLOAD(context.Context, *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) (*emptypb.Empty, error)
	APIDocWebsocket(context.Context, *APIDocWebsocket_Request) (*emptypb.Empty, error)
	APITEST_ATTEMPT(context.Context, *APITestsAttemptRequest) (*APITestsAttemptResponse, error)
	APPLICATIONS_RESOURCES_LIST(context.Context, *APPLICATIONS_RESOURCES_LIST_Request) (*emptypb.Empty, error)
	APP_PUBLISH_ITEM_RELATION_GET(context.Context, *APP_PUBLISH_ITEM_RELATION_GET_Request) (*QueryAppPublishItemRelationResponse, error)
	APP_PUBLISH_ITEM_RELATION_UPDATE(context.Context, *UpdateAppPublishItemRelationRequest) (*UpdateAppPublishItemRelationResponse, error)
	CI_SONAR_STORE(context.Context, *SonarStoreRequest) (*SonarStoreResponse, error)
	CMDB_APPLICATION_CREATE(context.Context, *ApplicationCreateRequest) (*ApplicationCreateResponse, error)
	CMDB_APPLICATION_DELETE(context.Context, *ApplicationDeleteRequest) (*ApplicationDeleteResponse, error)
	CMDB_APPLICATION_INIT(context.Context, *ApplicationInitRequest) (*emptypb.Empty, error)
	CMDB_APPLICATION_UPDATE(context.Context, *ApplicationUpdateRequest) (*ApplicationUpdateResponse, error)
	CMDB_BRANCH_RULE_CREATE(context.Context, *CreateBranchRuleRequest) (*CreateBranchRuleResponse, error)
	CMDB_BRANCH_RULE_DELETE(context.Context, *CMDB_BRANCH_RULE_DELETE_Request) (*DeleteBranchRuleResponse, error)
	CMDB_BRANCH_RULE_QUERY(context.Context, *QueryBranchRuleRequest) (*QueryBranchRuleResponse, error)
	CMDB_BRANCH_RULE_UPDATE(context.Context, *UpdateBranchRuleRequest) (*UpdateBranchRuleResponse, error)
	CMDB_CERTIFICATES_APP_LIST(context.Context, *AppCertificateListRequest) (*PagingAppCertificateDTO, error)
	CMDB_CERTIFICATES_LIST(context.Context, *CertificateListRequest) (*CertificateListResponse, error)
	CMDB_CERTIFICATE_APP_CANCEL(context.Context, *CMDB_CERTIFICATE_APP_CANCEL_Request) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_APP_CONFIG(context.Context, *PushCertificateConfigsRequest) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_APP_QUOTE(context.Context, *CertificateQuoteRequest) (*emptypb.Empty, error)
	CMDB_CERTIFICATE_CREATE(context.Context, *CertificateCreateRequest) (*CertificateCreateResponse, error)
	CMDB_CERTIFICATE_DELETE(context.Context, *CMDB_CERTIFICATE_DELETE_Request) (*CertificateDeleteResponse, error)
	CMDB_CERTIFICATE_GET(context.Context, *CMDB_CERTIFICATE_GET_Request) (*CertificateDetailResponse, error)
	CMDB_CERTIFICATE_UPDATE(context.Context, *CertificateUpdateRequest) (*CertificateUpdateResponse, error)
	CMDB_COMMENT_CREATE(context.Context, *CommentCreateRequest) (*CommentCreateResponse, error)
	CMDB_COMMENT_LIST(context.Context, *CommentListRequest) (*CommentListResponse, error)
	CMDB_COMMENT_UPDATE(context.Context, *CommentUpdateRequest) (*CommentUpdateResponse, error)
	CMDB_ITERATION_CREATE(context.Context, *IterationCreateRequest) (*IterationCreateResponse, error)
	CMDB_ITERATION_DELETE(context.Context, *CMDB_ITERATION_DELETE_Request) (*emptypb.Empty, error)
	CMDB_ITERATION_GET(context.Context, *CMDB_ITERATION_GET_Request) (*IterationGetResponse, error)
	CMDB_ITERATION_PAGING(context.Context, *IterationPagingRequest) (*IterationPagingResponse, error)
	CMDB_ITERATION_UPDATE(context.Context, *IterationUpdateRequest) (*IterationUpdateResponse, error)
	CMDB_LIBREFERENCE_CREATE(context.Context, *LibReferenceCreateRequest) (*LibReferenceCreateResponse, error)
	CMDB_LIBREFERENCE_DELETE(context.Context, *CMDB_LIBREFERENCE_DELETE_Request) (*emptypb.Empty, error)
	CMDB_LIBREFERENCE_LIST(context.Context, *LibReferenceListRequest) (*LibReferenceListResponse, error)
	CMDB_LIBREFERENCE_LIST_VERSION(context.Context, *CMDB_LIBREFERENCE_LIST_VERSION_Request) (*emptypb.Empty, error)
	CMDB_MY_PUBLISHERS_LIST(context.Context, *PublisherListRequest) (*PublisherListResponse, error)
	CMDB_ORG_CREATE(context.Context, *OrgCreateRequest) (*OrgCreateResponse, error)
	CMDB_ORG_DELETE(context.Context, *CMDB_ORG_DELETE_Request) (*emptypb.Empty, error)
	CMDB_ORG_FETCH(context.Context, *OrgFetchRequest) (*OrgSearchResponse, error)
	CMDB_ORG_GET_BY_DOMAIN(context.Context, *OrgGetByDomainRequest) (*OrgGetByDomainResponse, error)
	CMDB_ORG_NEXUS_FETCH(context.Context, *OrgNexusGetRequest) (*OrgNexusGetResponse, error)
	CMDB_ORG_NEXUS_SHOW_PASSWORD(context.Context, *OrgNexusShowPasswordRequest) (*OrgNexusShowPasswordResponse, error)
	CMDB_ORG_PUBLIC(context.Context, *OrgSearchRequest) (*OrgSearchResponse, error)
	CMDB_ORG_PUBLISHER_CREATE(context.Context, *CMDB_ORG_PUBLISHER_CREATE_Request) (*emptypb.Empty, error)
	CMDB_ORG_PUBLISHER_CREATE_GET(context.Context, *CMDB_ORG_PUBLISHER_CREATE_GET_Request) (*emptypb.Empty, error)
	CMDB_ORG_RESOURCE_GET(context.Context, *CMDB_ORG_RESOURCE_GET_Request) (*OrgResourceInfo, error)
	CMDB_ORG_SEARCH(context.Context, *OrgSearchRequest) (*OrgSearchResponse, error)
	CMDB_ORG_UPDATE(context.Context, *OrgUpdateRequest) (*OrgUpdateRequestBody, error)
	CMDB_PROJECTS_FETCH(context.Context, *ProjectListRequest) (*ProjectListResponse, error)
	CMDB_PROJECT_CREATE(context.Context, *ProjectCreateRequest) (*ProjectCreateResponse, error)
	CMDB_PROJECT_DELETE(context.Context, *ProjectDeleteRequest) (*ProjectDeleteResponse, error)
	CMDB_PROJECT_DETAIL(context.Context, *ProjectDetailRequest) (*ProjectDetailResponse, error)
	CMDB_PUBLISHERS_LIST(context.Context, *PublisherListRequest) (*PublisherListResponse, error)
	CMDB_PUBLISHER_CREATE(context.Context, *PublisherCreateRequest) (*PublisherCreateResponse, error)
	CMDB_PUBLISHER_DELETE(context.Context, *CMDB_PUBLISHER_DELETE_Request) (*PublisherDeleteResponse, error)
	CMDB_PUBLISHER_GET(context.Context, *CMDB_PUBLISHER_GET_Request) (*PublisherDetailResponse, error)
	CMDB_PUBLISHER_UPDATE(context.Context, *PublisherUpdateRequest) (*PublisherUpdateResponse, error)
	CMDB_ROLES_LIST(context.Context, *CMDB_ROLES_LIST_Request) (*MemberRoleListResponse, error)
	CMDB_TICKET_CLOSE(context.Context, *TicketCloseRequest) (*TicketCloseResponse, error)
	CMDB_TICKET_CREATE(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error)
	CMDB_TICKET_DELETE(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error)
	CMDB_TICKET_FETCH(context.Context, *TicketFetchRequest) (*TicketFetchResponse, error)
	CMDB_TICKET_LIST(context.Context, *TicketListRequest) (*TicketListResponse, error)
	CMDB_TICKET_REOPEN(context.Context, *TicketReopenRequest) (*TicketReopenResponse, error)
	CMDB_TICKET_UPDATE(context.Context, *TicketUpdateRequest) (*TicketUpdateResponse, error)
	CODE_COVERAGE_END_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error)
	CODE_COVERAGE_READY_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error)
	CODE_COVERAGE_READY_STATUS(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error)
	CODE_COVERAGE_REPORT_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error)
	CreateAPIAsset(context.Context, *APIAssetCreateRequest) (*emptypb.Empty, error)
	CreateAPIAssetVersion(context.Context, *APIAssetVersionCreateRequest) (*CreateAPIAssetVersionBody, error)
	CreateAccess(context.Context, *CreateAccessReq) (*emptypb.Empty, error)
	CreateAttempTest(context.Context, *APITestReq) (*Header, error)
	CreateClient(context.Context, *CreateClientReq) (*emptypb.Empty, error)
	CreateContract(context.Context, *CreateContractReq) (*emptypb.Empty, error)
	CreateInstantiation(context.Context, *CreateInstantiationReq) (*emptypb.Empty, error)
	CreateSLA(context.Context, *CreateSLAReq) (*Header, error)
	DeleteAPIAssetVersion(context.Context, *DeleteAPIAssetVersion_Request) (*emptypb.Empty, error)
	DeleteAPIAssets(context.Context, *DeleteAPIAssets_Request) (*emptypb.Empty, error)
	DeleteAccess(context.Context, *DeleteAccess_Request) (*emptypb.Empty, error)
	DeleteClient(context.Context, *DeleteClient_Request) (*emptypb.Empty, error)
	DeleteContract(context.Context, *GetContractReq) (*emptypb.Empty, error)
	DeleteSLA(context.Context, *DeleteSLAReq) (*Header, error)
	ExportSpec(context.Context, *DownloadSpecTextReq) (*emptypb.Empty, error)
	FileTreeCreateNode(context.Context, *APIDocCreateNodeReq) (*emptypb.Empty, error)
	FileTreeDeleteNode(context.Context, *FileTreeDeleteNode_Request) (*emptypb.Empty, error)
	FileTreeGetNode(context.Context, *FileTreeGetNode_Request) (*emptypb.Empty, error)
	FileTreeListNodes(context.Context, *FileTreeListNodes_Request) (*emptypb.Empty, error)
	FileTreeMvCpNode(context.Context, *FileTreeMvCpNode_Request) (*emptypb.Empty, error)
	FileTreeUpdateNode(context.Context, *FileTreeUpdateNode_Request) (*emptypb.Empty, error)
	GetAPIAssetVersion(context.Context, *GetAPIAssetVersionReq) (*GetAssetVersionRsp, error)
	GetAPIAssets(context.Context, *GetAPIAssetReq) (*APIAssetGetResponse, error)
	GetAccess(context.Context, *GetAccess_Request) (*emptypb.Empty, error)
	GetClient(context.Context, *GetClientReq) (*emptypb.Empty, error)
	GetContract(context.Context, *GetContractReq) (*emptypb.Empty, error)
	GetInstantiations(context.Context, *GetInstantiationsReq) (*GetAddonInstanceDetailResponse, error)
	GetOperation(context.Context, *GetOperationReq) (*BaseResponse, error)
	GetSLA(context.Context, *ListSLAsReq) (*ListSLAsRsp, error)
	ListAPIAssetVersions(context.Context, *GetAPIAssetVersionReq) (*GetAssetVersionRsp, error)
	ListAPIGateways(context.Context, *ListAPIGatewaysReq) (*ListAPIGatewaysResp, error)
	ListAccess(context.Context, *ListAccessReq) (*ListAccessRsp, error)
	ListContract(context.Context, *ListContractsReq) (*ListContractsRsp, error)
	ListContractRecords(context.Context, *ListContractRecordsReq) (*ListContractRecordsRsp, error)
	ListInstantiations(context.Context, *ListInstantiations_Request) (*emptypb.Empty, error)
	ListMyClients(context.Context, *ListMyClientsReq) (*emptypb.Empty, error)
	ListProjectAPIGateways(context.Context, *ListProjectAPIGatewaysReq) (*ListAPIGatewaysResp, error)
	ListRuntimeServices(context.Context, *ListRuntimeServices_Request) (*Header, error)
	ListSLA(context.Context, *GetSLAReq) (*GetSLARsp, error)
	ListSwaggerVersionClients(context.Context, *ListSwaggerVersionClientsReq) (*ListSwaggerVersionRsp, error)
	ListSwaggerVersions(context.Context, *ListSwaggerVersionsReq) (*ListSwaggerVersionRsp, error)
	PUBLISH_ITEM_CERTIFICATION_GET(context.Context, *PUBLISH_ITEM_CERTIFICATION_GET_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_CHANNELS(context.Context, *PublishItemStatisticsDetailRequest) (*PublishItemStatisticsDetailData, error)
	PUBLISH_ITEM_ERR_EFFACTS(context.Context, *PUBLISH_ITEM_ERR_EFFACTS_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_ERR_LIST(context.Context, *PUBLISH_ITEM_ERR_LIST_Request) (*PublishItemStatisticsErrListData, error)
	PUBLISH_ITEM_ERR_RATE(context.Context, *PUBLISH_ITEM_ERR_RATE_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_ERR_TREND(context.Context, *PUBLISH_ITEM_ERR_TREND_Request) (*PublishItemStatisticsErrTrendData, error)
	PUBLISH_ITEM_METIRCS_COMMON(context.Context, *PUBLISH_ITEM_METIRCS_COMMON_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(context.Context, *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_STATISTICS_TREND(context.Context, *PUBLISH_ITEM_STATISTICS_TREND_Request) (*PublishItemStatisticsTrendData, error)
	PUBLISH_ITEM_USERS(context.Context, *PUBLISH_ITEM_USERS_Request) (*emptypb.Empty, error)
	PUBLISH_ITEM_VERSION_INFO_LIST(context.Context, *PublishItemStatisticsDetailRequest) (*PublishItemStatisticsDetailData, error)
	PagingAPIAssets(context.Context, *PagingAPIAssetsReq) (*APIAssetPagingResponse, error)
	ProjectPackageExport(context.Context, *ExportProjectPackageRequest) (*emptypb.Empty, error)
	ProjectPackageImport(context.Context, *ImportProjectPackageRequest) (*emptypb.Empty, error)
	ProjectPackageParse(context.Context, *ProjectPackageParse_Request) (*emptypb.Empty, error)
	ProjectTemplateExport(context.Context, *ExportProjectTemplateRequest) (*emptypb.Empty, error)
	ProjectTemplateImport(context.Context, *ImportProjectTemplateRequest) (*emptypb.Empty, error)
	ProjectTemplateParse(context.Context, *ImportProjectTemplateRequest) (*emptypb.Empty, error)
	ProxyMetrics(context.Context, *ProxyMetrics_Request) (*emptypb.Empty, error)
	QA_APITESTS_CANCEL(context.Context, *ApiTestCancelRequest) (*ApiTestCancelResponse, error)
	QA_APITESTS_GET(context.Context, *QA_APITESTS_GET_Request) (*ApiTestsGetResponse, error)
	QA_APITESTS_UPDATE(context.Context, *ApiTestsUpdateRequest) (*ApiTestsUpdateResponse, error)
	QA_AUTOTEST_SPACE_GET(context.Context, *QA_AUTOTEST_SPACE_GET_Request) (*AutoTestSpaceResponse, error)
	QA_PIPELINE_TASK_LOGS(context.Context, *QA_PIPELINE_TASK_LOGS_Request) (*DashboardSpotLogResponse, error)
	QA_RECORDS_GET(context.Context, *QA_RECORDS_GET_Request) (*GetTestFileRecordResponse, error)
	QA_RECORDS_LIST(context.Context, *ListTestFileRecordsRequest) (*ListTestFileRecordsResponse, error)
	QA_SONAR_GET_CREDENTIAL(context.Context, *QA_SONAR_GET_CREDENTIAL_Request) (*SonarCredentialGetResponse, error)
	QA_SONAR_ISSUES(context.Context, *QA_SONAR_ISSUES_Request) (*SonarIssueResponse, error)
	QA_SONAR_METRIC_RULES_BATCH_DELETE(context.Context, *SonarMetricRulesBatchDeleteRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_BATCH_INSERT(context.Context, *SonarMetricRulesBatchInsertRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_DELETE(context.Context, *SonarMetricRulesDeleteRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_GET(context.Context, *QA_SONAR_METRIC_RULES_GET_Request) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_PAGING(context.Context, *SonarMetricRulesPagingRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_QUERY_DEFINITION(context.Context, *SonarMetricRulesDefinitionListRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_QUERY_LIST(context.Context, *SonarMetricRulesListRequest) (*emptypb.Empty, error)
	QA_SONAR_METRIC_RULES_UPDATE(context.Context, *SonarMetricRulesUpdateRequest) (*emptypb.Empty, error)
	QA_TESTENV_CREATE(context.Context, *QA_TESTENV_CREATE_Request) (*APITestEnvCreateRequest, error)
	QA_TESTENV_DELETE(context.Context, *QA_TESTENV_DELETE_Request) (*APITestEnvDeleteResponse, error)
	QA_TESTENV_GET(context.Context, *QA_TESTENV_GET_Request) (*APITestEnvGetResponse, error)
	QA_TESTENV_LIST(context.Context, *QA_TESTENV_LIST_Request) (*APITestEnvListResponse, error)
	QA_TESTENV_UPDATE(context.Context, *APITestEnvUpdateRequest) (*APITestEnvUpdateResponse, error)
	QA_TESTPLAN_PIPELINE_DETAIL(context.Context, *QA_TESTPLAN_PIPELINE_DETAIL_Request) (*PipelineDetailResponse, error)
	SPOT_APITESTS_LOGS(context.Context, *SPOT_APITESTS_LOGS_Request) (*emptypb.Empty, error)
	SPOT_APITESTS_LOGS_DOWNLOAD(context.Context, *SPOT_APITESTS_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	SearchOperations(context.Context, *SearchOperationsReq) (*BaseResponse, error)
	UpdateAPIAssset(context.Context, *UpdateAPIAssetReq) (*emptypb.Empty, error)
	UpdateAccess(context.Context, *UpdateAccess_Request) (*emptypb.Empty, error)
	UpdateAssetVersion(context.Context, *UpdateAssetVersionReq) (*Header, error)
	UpdateClient(context.Context, *UpdateClientReq) (*emptypb.Empty, error)
	UpdateContract(context.Context, *UpdateContract_Request) (*emptypb.Empty, error)
	UpdateInstantiation(context.Context, *UpdateInstantiationReq) (*emptypb.Empty, error)
	UpdateSLA(context.Context, *UpdateSLAReq) (*Header, error)
	ValidateSwagger(context.Context, *ValidateSwagger_Request) (*emptypb.Empty, error)
}

// UnimplementedDopServer should be embedded to have forward compatible implementations.
type UnimplementedDopServer struct {
}

func (*UnimplementedDopServer) AADAPTOR_CICD_CRON_LIST(context.Context, *AADAPTOR_CICD_CRON_LIST_Request) (*PipelineCronListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AADAPTOR_CICD_CRON_LIST not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_BRANCHES_ALL_VALID(context.Context, *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) (*PipelineAppAllValidBranchWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_BRANCHES_ALL_VALID not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CANCEL(context.Context, *ADAPTOR_CICD_CANCEL_Request) (*PipelineCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CANCEL not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CONFIG_GET(context.Context, *ADAPTOR_CICD_CONFIG_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CONFIG_GET not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CONFIG_NAMESPACES(context.Context, *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) (*PipelineConfigNamespacesFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CONFIG_NAMESPACES not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CONFIG_WORKSPACES(context.Context, *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) (*PipelineConfigNamespacesFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CONFIG_WORKSPACES not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CREATE(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CREATE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CRON_START(context.Context, *ADAPTOR_CICD_CRON_START_Request) (*PipelineCronStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CRON_START not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_CRON_STOP(context.Context, *ADAPTOR_CICD_CRON_STOP_Request) (*PipelineCronStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_CRON_STOP not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FETCH_PIPELINE_ID(context.Context, *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FETCH_PIPELINE_ID not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_CREATE(context.Context, *UnifiedFileTreeNodeCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_CREATE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_DELETE(context.Context, *UnifiedFileTreeNodeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_DELETE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(context.Context, *UnifiedFileTreeNodeFindAncestorsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_FIND_ANCESTORS not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(context.Context, *UnifiedFileTreeNodeFuzzySearchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_FUZZY_SEARCH not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_GET(context.Context, *UnifiedFileTreeNodeGetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_GET not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(context.Context, *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_FILETREE_LIST(context.Context, *UnifiedFileTreeNodeListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_FILETREE_LIST not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_GET_BRANCH_RULE(context.Context, *ADAPTOR_CICD_GET_BRANCH_RULE_Request) (*PipelineGetBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_GET_BRANCH_RULE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_INVOKED_COMBO(context.Context, *PipelineInvokedComboRequest) (*PipelineInvokedComboResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_INVOKED_COMBO not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_LIST(context.Context, *PipelinePageListRequest) (*PipelinePageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_LIST not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_OPERATE(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_OPERATE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_PIPELINE_DETAIL(context.Context, *ADAPTOR_CICD_PIPELINE_DETAIL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_PIPELINE_DETAIL not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_PIPELINE_YML_LIST(context.Context, *CICDPipelineYmlListRequest) (*CICDPipelineYmlListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_PIPELINE_YML_LIST not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_PROJECT_CREATE(context.Context, *ADAPTOR_CICD_PROJECT_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_PROJECT_CREATE not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_PROJECT_DETAIL(context.Context, *ADAPTOR_CICD_PROJECT_DETAIL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_PROJECT_DETAIL not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_RERUN(context.Context, *ADAPTOR_CICD_RERUN_Request) (*PipelineRerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_RERUN not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_RERUN_FAILED(context.Context, *PipelineRerunFailedResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_RERUN_FAILED not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_RUN(context.Context, *ADAPTOR_CICD_RUN_Request) (*PipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_RUN not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_TASK_LOG(context.Context, *ADAPTOR_CICD_TASK_LOG_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_TASK_LOG not implemented")
}
func (*UnimplementedDopServer) ADAPTOR_CICD_TASK_LOG_DOWNLOAD(context.Context, *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADAPTOR_CICD_TASK_LOG_DOWNLOAD not implemented")
}
func (*UnimplementedDopServer) APIDocWebsocket(context.Context, *APIDocWebsocket_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIDocWebsocket not implemented")
}
func (*UnimplementedDopServer) APITEST_ATTEMPT(context.Context, *APITestsAttemptRequest) (*APITestsAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APITEST_ATTEMPT not implemented")
}
func (*UnimplementedDopServer) APPLICATIONS_RESOURCES_LIST(context.Context, *APPLICATIONS_RESOURCES_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APPLICATIONS_RESOURCES_LIST not implemented")
}
func (*UnimplementedDopServer) APP_PUBLISH_ITEM_RELATION_GET(context.Context, *APP_PUBLISH_ITEM_RELATION_GET_Request) (*QueryAppPublishItemRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APP_PUBLISH_ITEM_RELATION_GET not implemented")
}
func (*UnimplementedDopServer) APP_PUBLISH_ITEM_RELATION_UPDATE(context.Context, *UpdateAppPublishItemRelationRequest) (*UpdateAppPublishItemRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APP_PUBLISH_ITEM_RELATION_UPDATE not implemented")
}
func (*UnimplementedDopServer) CI_SONAR_STORE(context.Context, *SonarStoreRequest) (*SonarStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CI_SONAR_STORE not implemented")
}
func (*UnimplementedDopServer) CMDB_APPLICATION_CREATE(context.Context, *ApplicationCreateRequest) (*ApplicationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_APPLICATION_DELETE(context.Context, *ApplicationDeleteRequest) (*ApplicationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_APPLICATION_INIT(context.Context, *ApplicationInitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_INIT not implemented")
}
func (*UnimplementedDopServer) CMDB_APPLICATION_UPDATE(context.Context, *ApplicationUpdateRequest) (*ApplicationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_BRANCH_RULE_CREATE(context.Context, *CreateBranchRuleRequest) (*CreateBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_BRANCH_RULE_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_BRANCH_RULE_DELETE(context.Context, *CMDB_BRANCH_RULE_DELETE_Request) (*DeleteBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_BRANCH_RULE_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_BRANCH_RULE_QUERY(context.Context, *QueryBranchRuleRequest) (*QueryBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_BRANCH_RULE_QUERY not implemented")
}
func (*UnimplementedDopServer) CMDB_BRANCH_RULE_UPDATE(context.Context, *UpdateBranchRuleRequest) (*UpdateBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_BRANCH_RULE_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATES_APP_LIST(context.Context, *AppCertificateListRequest) (*PagingAppCertificateDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATES_APP_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATES_LIST(context.Context, *CertificateListRequest) (*CertificateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATES_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_APP_CANCEL(context.Context, *CMDB_CERTIFICATE_APP_CANCEL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_APP_CANCEL not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_APP_CONFIG(context.Context, *PushCertificateConfigsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_APP_CONFIG not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_APP_QUOTE(context.Context, *CertificateQuoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_APP_QUOTE not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_CREATE(context.Context, *CertificateCreateRequest) (*CertificateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_DELETE(context.Context, *CMDB_CERTIFICATE_DELETE_Request) (*CertificateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_GET(context.Context, *CMDB_CERTIFICATE_GET_Request) (*CertificateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_GET not implemented")
}
func (*UnimplementedDopServer) CMDB_CERTIFICATE_UPDATE(context.Context, *CertificateUpdateRequest) (*CertificateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CERTIFICATE_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_COMMENT_CREATE(context.Context, *CommentCreateRequest) (*CommentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_COMMENT_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_COMMENT_LIST(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_COMMENT_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_COMMENT_UPDATE(context.Context, *CommentUpdateRequest) (*CommentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_COMMENT_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_ITERATION_CREATE(context.Context, *IterationCreateRequest) (*IterationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ITERATION_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_ITERATION_DELETE(context.Context, *CMDB_ITERATION_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ITERATION_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_ITERATION_GET(context.Context, *CMDB_ITERATION_GET_Request) (*IterationGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ITERATION_GET not implemented")
}
func (*UnimplementedDopServer) CMDB_ITERATION_PAGING(context.Context, *IterationPagingRequest) (*IterationPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ITERATION_PAGING not implemented")
}
func (*UnimplementedDopServer) CMDB_ITERATION_UPDATE(context.Context, *IterationUpdateRequest) (*IterationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ITERATION_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_LIBREFERENCE_CREATE(context.Context, *LibReferenceCreateRequest) (*LibReferenceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LIBREFERENCE_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_LIBREFERENCE_DELETE(context.Context, *CMDB_LIBREFERENCE_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LIBREFERENCE_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_LIBREFERENCE_LIST(context.Context, *LibReferenceListRequest) (*LibReferenceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LIBREFERENCE_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_LIBREFERENCE_LIST_VERSION(context.Context, *CMDB_LIBREFERENCE_LIST_VERSION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LIBREFERENCE_LIST_VERSION not implemented")
}
func (*UnimplementedDopServer) CMDB_MY_PUBLISHERS_LIST(context.Context, *PublisherListRequest) (*PublisherListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MY_PUBLISHERS_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_CREATE(context.Context, *OrgCreateRequest) (*OrgCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_DELETE(context.Context, *CMDB_ORG_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_FETCH(context.Context, *OrgFetchRequest) (*OrgSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_FETCH not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_GET_BY_DOMAIN(context.Context, *OrgGetByDomainRequest) (*OrgGetByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_GET_BY_DOMAIN not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_NEXUS_FETCH(context.Context, *OrgNexusGetRequest) (*OrgNexusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_NEXUS_FETCH not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_NEXUS_SHOW_PASSWORD(context.Context, *OrgNexusShowPasswordRequest) (*OrgNexusShowPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_NEXUS_SHOW_PASSWORD not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_PUBLIC(context.Context, *OrgSearchRequest) (*OrgSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_PUBLIC not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_PUBLISHER_CREATE(context.Context, *CMDB_ORG_PUBLISHER_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_PUBLISHER_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_PUBLISHER_CREATE_GET(context.Context, *CMDB_ORG_PUBLISHER_CREATE_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_PUBLISHER_CREATE_GET not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_RESOURCE_GET(context.Context, *CMDB_ORG_RESOURCE_GET_Request) (*OrgResourceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_RESOURCE_GET not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_SEARCH(context.Context, *OrgSearchRequest) (*OrgSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_SEARCH not implemented")
}
func (*UnimplementedDopServer) CMDB_ORG_UPDATE(context.Context, *OrgUpdateRequest) (*OrgUpdateRequestBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ORG_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_PROJECTS_FETCH(context.Context, *ProjectListRequest) (*ProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECTS_FETCH not implemented")
}
func (*UnimplementedDopServer) CMDB_PROJECT_CREATE(context.Context, *ProjectCreateRequest) (*ProjectCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_PROJECT_DELETE(context.Context, *ProjectDeleteRequest) (*ProjectDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_PROJECT_DETAIL(context.Context, *ProjectDetailRequest) (*ProjectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_DETAIL not implemented")
}
func (*UnimplementedDopServer) CMDB_PUBLISHERS_LIST(context.Context, *PublisherListRequest) (*PublisherListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PUBLISHERS_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_PUBLISHER_CREATE(context.Context, *PublisherCreateRequest) (*PublisherCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PUBLISHER_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_PUBLISHER_DELETE(context.Context, *CMDB_PUBLISHER_DELETE_Request) (*PublisherDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PUBLISHER_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_PUBLISHER_GET(context.Context, *CMDB_PUBLISHER_GET_Request) (*PublisherDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PUBLISHER_GET not implemented")
}
func (*UnimplementedDopServer) CMDB_PUBLISHER_UPDATE(context.Context, *PublisherUpdateRequest) (*PublisherUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PUBLISHER_UPDATE not implemented")
}
func (*UnimplementedDopServer) CMDB_ROLES_LIST(context.Context, *CMDB_ROLES_LIST_Request) (*MemberRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ROLES_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_CLOSE(context.Context, *TicketCloseRequest) (*TicketCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_CLOSE not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_CREATE(context.Context, *TicketCreateRequest) (*TicketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_CREATE not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_DELETE(context.Context, *TicketDeleteRequest) (*TicketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_DELETE not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_FETCH(context.Context, *TicketFetchRequest) (*TicketFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_FETCH not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_LIST(context.Context, *TicketListRequest) (*TicketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_LIST not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_REOPEN(context.Context, *TicketReopenRequest) (*TicketReopenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_REOPEN not implemented")
}
func (*UnimplementedDopServer) CMDB_TICKET_UPDATE(context.Context, *TicketUpdateRequest) (*TicketUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_TICKET_UPDATE not implemented")
}
func (*UnimplementedDopServer) CODE_COVERAGE_END_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CODE_COVERAGE_END_CALLBACK not implemented")
}
func (*UnimplementedDopServer) CODE_COVERAGE_READY_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CODE_COVERAGE_READY_CALLBACK not implemented")
}
func (*UnimplementedDopServer) CODE_COVERAGE_READY_STATUS(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CODE_COVERAGE_READY_STATUS not implemented")
}
func (*UnimplementedDopServer) CODE_COVERAGE_REPORT_CALLBACK(context.Context, *CodeCoverageUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CODE_COVERAGE_REPORT_CALLBACK not implemented")
}
func (*UnimplementedDopServer) CreateAPIAsset(context.Context, *APIAssetCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIAsset not implemented")
}
func (*UnimplementedDopServer) CreateAPIAssetVersion(context.Context, *APIAssetVersionCreateRequest) (*CreateAPIAssetVersionBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIAssetVersion not implemented")
}
func (*UnimplementedDopServer) CreateAccess(context.Context, *CreateAccessReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (*UnimplementedDopServer) CreateAttempTest(context.Context, *APITestReq) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttempTest not implemented")
}
func (*UnimplementedDopServer) CreateClient(context.Context, *CreateClientReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedDopServer) CreateContract(context.Context, *CreateContractReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (*UnimplementedDopServer) CreateInstantiation(context.Context, *CreateInstantiationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstantiation not implemented")
}
func (*UnimplementedDopServer) CreateSLA(context.Context, *CreateSLAReq) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLA not implemented")
}
func (*UnimplementedDopServer) DeleteAPIAssetVersion(context.Context, *DeleteAPIAssetVersion_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIAssetVersion not implemented")
}
func (*UnimplementedDopServer) DeleteAPIAssets(context.Context, *DeleteAPIAssets_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIAssets not implemented")
}
func (*UnimplementedDopServer) DeleteAccess(context.Context, *DeleteAccess_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccess not implemented")
}
func (*UnimplementedDopServer) DeleteClient(context.Context, *DeleteClient_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (*UnimplementedDopServer) DeleteContract(context.Context, *GetContractReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContract not implemented")
}
func (*UnimplementedDopServer) DeleteSLA(context.Context, *DeleteSLAReq) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLA not implemented")
}
func (*UnimplementedDopServer) ExportSpec(context.Context, *DownloadSpecTextReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSpec not implemented")
}
func (*UnimplementedDopServer) FileTreeCreateNode(context.Context, *APIDocCreateNodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeCreateNode not implemented")
}
func (*UnimplementedDopServer) FileTreeDeleteNode(context.Context, *FileTreeDeleteNode_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeDeleteNode not implemented")
}
func (*UnimplementedDopServer) FileTreeGetNode(context.Context, *FileTreeGetNode_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeGetNode not implemented")
}
func (*UnimplementedDopServer) FileTreeListNodes(context.Context, *FileTreeListNodes_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeListNodes not implemented")
}
func (*UnimplementedDopServer) FileTreeMvCpNode(context.Context, *FileTreeMvCpNode_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeMvCpNode not implemented")
}
func (*UnimplementedDopServer) FileTreeUpdateNode(context.Context, *FileTreeUpdateNode_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTreeUpdateNode not implemented")
}
func (*UnimplementedDopServer) GetAPIAssetVersion(context.Context, *GetAPIAssetVersionReq) (*GetAssetVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIAssetVersion not implemented")
}
func (*UnimplementedDopServer) GetAPIAssets(context.Context, *GetAPIAssetReq) (*APIAssetGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIAssets not implemented")
}
func (*UnimplementedDopServer) GetAccess(context.Context, *GetAccess_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (*UnimplementedDopServer) GetClient(context.Context, *GetClientReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedDopServer) GetContract(context.Context, *GetContractReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (*UnimplementedDopServer) GetInstantiations(context.Context, *GetInstantiationsReq) (*GetAddonInstanceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstantiations not implemented")
}
func (*UnimplementedDopServer) GetOperation(context.Context, *GetOperationReq) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (*UnimplementedDopServer) GetSLA(context.Context, *ListSLAsReq) (*ListSLAsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLA not implemented")
}
func (*UnimplementedDopServer) ListAPIAssetVersions(context.Context, *GetAPIAssetVersionReq) (*GetAssetVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIAssetVersions not implemented")
}
func (*UnimplementedDopServer) ListAPIGateways(context.Context, *ListAPIGatewaysReq) (*ListAPIGatewaysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIGateways not implemented")
}
func (*UnimplementedDopServer) ListAccess(context.Context, *ListAccessReq) (*ListAccessRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccess not implemented")
}
func (*UnimplementedDopServer) ListContract(context.Context, *ListContractsReq) (*ListContractsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContract not implemented")
}
func (*UnimplementedDopServer) ListContractRecords(context.Context, *ListContractRecordsReq) (*ListContractRecordsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractRecords not implemented")
}
func (*UnimplementedDopServer) ListInstantiations(context.Context, *ListInstantiations_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstantiations not implemented")
}
func (*UnimplementedDopServer) ListMyClients(context.Context, *ListMyClientsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyClients not implemented")
}
func (*UnimplementedDopServer) ListProjectAPIGateways(context.Context, *ListProjectAPIGatewaysReq) (*ListAPIGatewaysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectAPIGateways not implemented")
}
func (*UnimplementedDopServer) ListRuntimeServices(context.Context, *ListRuntimeServices_Request) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimeServices not implemented")
}
func (*UnimplementedDopServer) ListSLA(context.Context, *GetSLAReq) (*GetSLARsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLA not implemented")
}
func (*UnimplementedDopServer) ListSwaggerVersionClients(context.Context, *ListSwaggerVersionClientsReq) (*ListSwaggerVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwaggerVersionClients not implemented")
}
func (*UnimplementedDopServer) ListSwaggerVersions(context.Context, *ListSwaggerVersionsReq) (*ListSwaggerVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwaggerVersions not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_CERTIFICATION_GET(context.Context, *PUBLISH_ITEM_CERTIFICATION_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_CERTIFICATION_GET not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_CHANNELS(context.Context, *PublishItemStatisticsDetailRequest) (*PublishItemStatisticsDetailData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_CHANNELS not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_ERR_EFFACTS(context.Context, *PUBLISH_ITEM_ERR_EFFACTS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_ERR_EFFACTS not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_ERR_LIST(context.Context, *PUBLISH_ITEM_ERR_LIST_Request) (*PublishItemStatisticsErrListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_ERR_LIST not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_ERR_RATE(context.Context, *PUBLISH_ITEM_ERR_RATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_ERR_RATE not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_ERR_TREND(context.Context, *PUBLISH_ITEM_ERR_TREND_Request) (*PublishItemStatisticsErrTrendData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_ERR_TREND not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_METIRCS_COMMON(context.Context, *PUBLISH_ITEM_METIRCS_COMMON_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_METIRCS_COMMON not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(context.Context, *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_STATISTICS_TREND(context.Context, *PUBLISH_ITEM_STATISTICS_TREND_Request) (*PublishItemStatisticsTrendData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_STATISTICS_TREND not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_USERS(context.Context, *PUBLISH_ITEM_USERS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_USERS not implemented")
}
func (*UnimplementedDopServer) PUBLISH_ITEM_VERSION_INFO_LIST(context.Context, *PublishItemStatisticsDetailRequest) (*PublishItemStatisticsDetailData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUBLISH_ITEM_VERSION_INFO_LIST not implemented")
}
func (*UnimplementedDopServer) PagingAPIAssets(context.Context, *PagingAPIAssetsReq) (*APIAssetPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingAPIAssets not implemented")
}
func (*UnimplementedDopServer) ProjectPackageExport(context.Context, *ExportProjectPackageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPackageExport not implemented")
}
func (*UnimplementedDopServer) ProjectPackageImport(context.Context, *ImportProjectPackageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPackageImport not implemented")
}
func (*UnimplementedDopServer) ProjectPackageParse(context.Context, *ProjectPackageParse_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPackageParse not implemented")
}
func (*UnimplementedDopServer) ProjectTemplateExport(context.Context, *ExportProjectTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectTemplateExport not implemented")
}
func (*UnimplementedDopServer) ProjectTemplateImport(context.Context, *ImportProjectTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectTemplateImport not implemented")
}
func (*UnimplementedDopServer) ProjectTemplateParse(context.Context, *ImportProjectTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectTemplateParse not implemented")
}
func (*UnimplementedDopServer) ProxyMetrics(context.Context, *ProxyMetrics_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyMetrics not implemented")
}
func (*UnimplementedDopServer) QA_APITESTS_CANCEL(context.Context, *ApiTestCancelRequest) (*ApiTestCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_APITESTS_CANCEL not implemented")
}
func (*UnimplementedDopServer) QA_APITESTS_GET(context.Context, *QA_APITESTS_GET_Request) (*ApiTestsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_APITESTS_GET not implemented")
}
func (*UnimplementedDopServer) QA_APITESTS_UPDATE(context.Context, *ApiTestsUpdateRequest) (*ApiTestsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_APITESTS_UPDATE not implemented")
}
func (*UnimplementedDopServer) QA_AUTOTEST_SPACE_GET(context.Context, *QA_AUTOTEST_SPACE_GET_Request) (*AutoTestSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_AUTOTEST_SPACE_GET not implemented")
}
func (*UnimplementedDopServer) QA_PIPELINE_TASK_LOGS(context.Context, *QA_PIPELINE_TASK_LOGS_Request) (*DashboardSpotLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_PIPELINE_TASK_LOGS not implemented")
}
func (*UnimplementedDopServer) QA_RECORDS_GET(context.Context, *QA_RECORDS_GET_Request) (*GetTestFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_RECORDS_GET not implemented")
}
func (*UnimplementedDopServer) QA_RECORDS_LIST(context.Context, *ListTestFileRecordsRequest) (*ListTestFileRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_RECORDS_LIST not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_GET_CREDENTIAL(context.Context, *QA_SONAR_GET_CREDENTIAL_Request) (*SonarCredentialGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_GET_CREDENTIAL not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_ISSUES(context.Context, *QA_SONAR_ISSUES_Request) (*SonarIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_ISSUES not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_BATCH_DELETE(context.Context, *SonarMetricRulesBatchDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_BATCH_DELETE not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_BATCH_INSERT(context.Context, *SonarMetricRulesBatchInsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_BATCH_INSERT not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_DELETE(context.Context, *SonarMetricRulesDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_DELETE not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_GET(context.Context, *QA_SONAR_METRIC_RULES_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_GET not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_PAGING(context.Context, *SonarMetricRulesPagingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_PAGING not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_QUERY_DEFINITION(context.Context, *SonarMetricRulesDefinitionListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_QUERY_DEFINITION not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_QUERY_LIST(context.Context, *SonarMetricRulesListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_QUERY_LIST not implemented")
}
func (*UnimplementedDopServer) QA_SONAR_METRIC_RULES_UPDATE(context.Context, *SonarMetricRulesUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_SONAR_METRIC_RULES_UPDATE not implemented")
}
func (*UnimplementedDopServer) QA_TESTENV_CREATE(context.Context, *QA_TESTENV_CREATE_Request) (*APITestEnvCreateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTENV_CREATE not implemented")
}
func (*UnimplementedDopServer) QA_TESTENV_DELETE(context.Context, *QA_TESTENV_DELETE_Request) (*APITestEnvDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTENV_DELETE not implemented")
}
func (*UnimplementedDopServer) QA_TESTENV_GET(context.Context, *QA_TESTENV_GET_Request) (*APITestEnvGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTENV_GET not implemented")
}
func (*UnimplementedDopServer) QA_TESTENV_LIST(context.Context, *QA_TESTENV_LIST_Request) (*APITestEnvListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTENV_LIST not implemented")
}
func (*UnimplementedDopServer) QA_TESTENV_UPDATE(context.Context, *APITestEnvUpdateRequest) (*APITestEnvUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTENV_UPDATE not implemented")
}
func (*UnimplementedDopServer) QA_TESTPLAN_PIPELINE_DETAIL(context.Context, *QA_TESTPLAN_PIPELINE_DETAIL_Request) (*PipelineDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_TESTPLAN_PIPELINE_DETAIL not implemented")
}
func (*UnimplementedDopServer) SPOT_APITESTS_LOGS(context.Context, *SPOT_APITESTS_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_APITESTS_LOGS not implemented")
}
func (*UnimplementedDopServer) SPOT_APITESTS_LOGS_DOWNLOAD(context.Context, *SPOT_APITESTS_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_APITESTS_LOGS_DOWNLOAD not implemented")
}
func (*UnimplementedDopServer) SearchOperations(context.Context, *SearchOperationsReq) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperations not implemented")
}
func (*UnimplementedDopServer) UpdateAPIAssset(context.Context, *UpdateAPIAssetReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIAssset not implemented")
}
func (*UnimplementedDopServer) UpdateAccess(context.Context, *UpdateAccess_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccess not implemented")
}
func (*UnimplementedDopServer) UpdateAssetVersion(context.Context, *UpdateAssetVersionReq) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetVersion not implemented")
}
func (*UnimplementedDopServer) UpdateClient(context.Context, *UpdateClientReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (*UnimplementedDopServer) UpdateContract(context.Context, *UpdateContract_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (*UnimplementedDopServer) UpdateInstantiation(context.Context, *UpdateInstantiationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstantiation not implemented")
}
func (*UnimplementedDopServer) UpdateSLA(context.Context, *UpdateSLAReq) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLA not implemented")
}
func (*UnimplementedDopServer) ValidateSwagger(context.Context, *ValidateSwagger_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSwagger not implemented")
}

func RegisterDopServer(s grpc1.ServiceRegistrar, srv DopServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Dop_serviceDesc(srv, opts...), srv)
}

var _Dop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.dop.dop",
	HandlerType: (*DopServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "dop.proto",
}

func _get_Dop_serviceDesc(srv DopServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Dop_AADAPTOR_CICD_CRON_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AADAPTOR_CICD_CRON_LIST(ctx, req.(*AADAPTOR_CICD_CRON_LIST_Request))
	}
	var _Dop_AADAPTOR_CICD_CRON_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_AADAPTOR_CICD_CRON_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "AADAPTOR_CICD_CRON_LIST", srv)
		_Dop_AADAPTOR_CICD_CRON_LIST_Handler = h.Interceptor(_Dop_AADAPTOR_CICD_CRON_LIST_Handler)
	}

	_Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx, req.(*ADAPTOR_CICD_BRANCHES_ALL_VALID_Request))
	}
	var _Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_BRANCHES_ALL_VALID", srv)
		_Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_Handler)
	}

	_Dop_ADAPTOR_CICD_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CANCEL(ctx, req.(*ADAPTOR_CICD_CANCEL_Request))
	}
	var _Dop_ADAPTOR_CICD_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CANCEL", srv)
		_Dop_ADAPTOR_CICD_CANCEL_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CANCEL_Handler)
	}

	_Dop_ADAPTOR_CICD_CONFIG_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CONFIG_GET(ctx, req.(*ADAPTOR_CICD_CONFIG_GET_Request))
	}
	var _Dop_ADAPTOR_CICD_CONFIG_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CONFIG_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CONFIG_GET", srv)
		_Dop_ADAPTOR_CICD_CONFIG_GET_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CONFIG_GET_Handler)
	}

	_Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CONFIG_NAMESPACES(ctx, req.(*ADAPTOR_CICD_CONFIG_NAMESPACES_Request))
	}
	var _Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CONFIG_NAMESPACES", srv)
		_Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_Handler)
	}

	_Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CONFIG_WORKSPACES(ctx, req.(*ADAPTOR_CICD_CONFIG_WORKSPACES_Request))
	}
	var _Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CONFIG_WORKSPACES", srv)
		_Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_Handler)
	}

	_Dop_ADAPTOR_CICD_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CREATE(ctx, req.(*PipelineCreateRequest))
	}
	var _Dop_ADAPTOR_CICD_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CREATE", srv)
		_Dop_ADAPTOR_CICD_CREATE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CREATE_Handler)
	}

	_Dop_ADAPTOR_CICD_CRON_START_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CRON_START(ctx, req.(*ADAPTOR_CICD_CRON_START_Request))
	}
	var _Dop_ADAPTOR_CICD_CRON_START_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CRON_START_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CRON_START", srv)
		_Dop_ADAPTOR_CICD_CRON_START_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CRON_START_Handler)
	}

	_Dop_ADAPTOR_CICD_CRON_STOP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_CRON_STOP(ctx, req.(*ADAPTOR_CICD_CRON_STOP_Request))
	}
	var _Dop_ADAPTOR_CICD_CRON_STOP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_CRON_STOP_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_CRON_STOP", srv)
		_Dop_ADAPTOR_CICD_CRON_STOP_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_CRON_STOP_Handler)
	}

	_Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx, req.(*ADAPTOR_CICD_FETCH_PIPELINE_ID_Request))
	}
	var _Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FETCH_PIPELINE_ID", srv)
		_Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_CREATE(ctx, req.(*UnifiedFileTreeNodeCreateRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_CREATE", srv)
		_Dop_ADAPTOR_CICD_FILETREE_CREATE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_CREATE_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_DELETE(ctx, req.(*UnifiedFileTreeNodeDeleteRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_DELETE", srv)
		_Dop_ADAPTOR_CICD_FILETREE_DELETE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_DELETE_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx, req.(*UnifiedFileTreeNodeFindAncestorsRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_FIND_ANCESTORS", srv)
		_Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx, req.(*UnifiedFileTreeNodeFuzzySearchRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_FUZZY_SEARCH", srv)
		_Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_GET(ctx, req.(*UnifiedFileTreeNodeGetRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_GET", srv)
		_Dop_ADAPTOR_CICD_FILETREE_GET_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_GET_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx, req.(*ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE", srv)
		_Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Handler)
	}

	_Dop_ADAPTOR_CICD_FILETREE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_FILETREE_LIST(ctx, req.(*UnifiedFileTreeNodeListRequest))
	}
	var _Dop_ADAPTOR_CICD_FILETREE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_FILETREE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_FILETREE_LIST", srv)
		_Dop_ADAPTOR_CICD_FILETREE_LIST_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_FILETREE_LIST_Handler)
	}

	_Dop_ADAPTOR_CICD_GET_BRANCH_RULE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_GET_BRANCH_RULE(ctx, req.(*ADAPTOR_CICD_GET_BRANCH_RULE_Request))
	}
	var _Dop_ADAPTOR_CICD_GET_BRANCH_RULE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_GET_BRANCH_RULE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_GET_BRANCH_RULE", srv)
		_Dop_ADAPTOR_CICD_GET_BRANCH_RULE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_GET_BRANCH_RULE_Handler)
	}

	_Dop_ADAPTOR_CICD_INVOKED_COMBO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_INVOKED_COMBO(ctx, req.(*PipelineInvokedComboRequest))
	}
	var _Dop_ADAPTOR_CICD_INVOKED_COMBO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_INVOKED_COMBO_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_INVOKED_COMBO", srv)
		_Dop_ADAPTOR_CICD_INVOKED_COMBO_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_INVOKED_COMBO_Handler)
	}

	_Dop_ADAPTOR_CICD_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_LIST(ctx, req.(*PipelinePageListRequest))
	}
	var _Dop_ADAPTOR_CICD_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_LIST", srv)
		_Dop_ADAPTOR_CICD_LIST_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_LIST_Handler)
	}

	_Dop_ADAPTOR_CICD_OPERATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_OPERATE(ctx, req.(*PipelineOperateRequest))
	}
	var _Dop_ADAPTOR_CICD_OPERATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_OPERATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_OPERATE", srv)
		_Dop_ADAPTOR_CICD_OPERATE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_OPERATE_Handler)
	}

	_Dop_ADAPTOR_CICD_PIPELINE_DETAIL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_PIPELINE_DETAIL(ctx, req.(*ADAPTOR_CICD_PIPELINE_DETAIL_Request))
	}
	var _Dop_ADAPTOR_CICD_PIPELINE_DETAIL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_PIPELINE_DETAIL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_PIPELINE_DETAIL", srv)
		_Dop_ADAPTOR_CICD_PIPELINE_DETAIL_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_PIPELINE_DETAIL_Handler)
	}

	_Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_PIPELINE_YML_LIST(ctx, req.(*CICDPipelineYmlListRequest))
	}
	var _Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_PIPELINE_YML_LIST", srv)
		_Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_Handler)
	}

	_Dop_ADAPTOR_CICD_PROJECT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_PROJECT_CREATE(ctx, req.(*ADAPTOR_CICD_PROJECT_CREATE_Request))
	}
	var _Dop_ADAPTOR_CICD_PROJECT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_PROJECT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_PROJECT_CREATE", srv)
		_Dop_ADAPTOR_CICD_PROJECT_CREATE_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_PROJECT_CREATE_Handler)
	}

	_Dop_ADAPTOR_CICD_PROJECT_DETAIL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_PROJECT_DETAIL(ctx, req.(*ADAPTOR_CICD_PROJECT_DETAIL_Request))
	}
	var _Dop_ADAPTOR_CICD_PROJECT_DETAIL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_PROJECT_DETAIL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_PROJECT_DETAIL", srv)
		_Dop_ADAPTOR_CICD_PROJECT_DETAIL_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_PROJECT_DETAIL_Handler)
	}

	_Dop_ADAPTOR_CICD_RERUN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_RERUN(ctx, req.(*ADAPTOR_CICD_RERUN_Request))
	}
	var _Dop_ADAPTOR_CICD_RERUN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_RERUN_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_RERUN", srv)
		_Dop_ADAPTOR_CICD_RERUN_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_RERUN_Handler)
	}

	_Dop_ADAPTOR_CICD_RERUN_FAILED_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_RERUN_FAILED(ctx, req.(*PipelineRerunFailedResponse))
	}
	var _Dop_ADAPTOR_CICD_RERUN_FAILED_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_RERUN_FAILED_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_RERUN_FAILED", srv)
		_Dop_ADAPTOR_CICD_RERUN_FAILED_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_RERUN_FAILED_Handler)
	}

	_Dop_ADAPTOR_CICD_RUN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_RUN(ctx, req.(*ADAPTOR_CICD_RUN_Request))
	}
	var _Dop_ADAPTOR_CICD_RUN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_RUN_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_RUN", srv)
		_Dop_ADAPTOR_CICD_RUN_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_RUN_Handler)
	}

	_Dop_ADAPTOR_CICD_TASK_LOG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_TASK_LOG(ctx, req.(*ADAPTOR_CICD_TASK_LOG_Request))
	}
	var _Dop_ADAPTOR_CICD_TASK_LOG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_TASK_LOG_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_TASK_LOG", srv)
		_Dop_ADAPTOR_CICD_TASK_LOG_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_TASK_LOG_Handler)
	}

	_Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx, req.(*ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request))
	}
	var _Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ADAPTOR_CICD_TASK_LOG_DOWNLOAD", srv)
		_Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Handler = h.Interceptor(_Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Handler)
	}

	_Dop_APIDocWebsocket_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APIDocWebsocket(ctx, req.(*APIDocWebsocket_Request))
	}
	var _Dop_APIDocWebsocket_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_APIDocWebsocket_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "APIDocWebsocket", srv)
		_Dop_APIDocWebsocket_Handler = h.Interceptor(_Dop_APIDocWebsocket_Handler)
	}

	_Dop_APITEST_ATTEMPT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APITEST_ATTEMPT(ctx, req.(*APITestsAttemptRequest))
	}
	var _Dop_APITEST_ATTEMPT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_APITEST_ATTEMPT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "APITEST_ATTEMPT", srv)
		_Dop_APITEST_ATTEMPT_Handler = h.Interceptor(_Dop_APITEST_ATTEMPT_Handler)
	}

	_Dop_APPLICATIONS_RESOURCES_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APPLICATIONS_RESOURCES_LIST(ctx, req.(*APPLICATIONS_RESOURCES_LIST_Request))
	}
	var _Dop_APPLICATIONS_RESOURCES_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_APPLICATIONS_RESOURCES_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "APPLICATIONS_RESOURCES_LIST", srv)
		_Dop_APPLICATIONS_RESOURCES_LIST_Handler = h.Interceptor(_Dop_APPLICATIONS_RESOURCES_LIST_Handler)
	}

	_Dop_APP_PUBLISH_ITEM_RELATION_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APP_PUBLISH_ITEM_RELATION_GET(ctx, req.(*APP_PUBLISH_ITEM_RELATION_GET_Request))
	}
	var _Dop_APP_PUBLISH_ITEM_RELATION_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_APP_PUBLISH_ITEM_RELATION_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "APP_PUBLISH_ITEM_RELATION_GET", srv)
		_Dop_APP_PUBLISH_ITEM_RELATION_GET_Handler = h.Interceptor(_Dop_APP_PUBLISH_ITEM_RELATION_GET_Handler)
	}

	_Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APP_PUBLISH_ITEM_RELATION_UPDATE(ctx, req.(*UpdateAppPublishItemRelationRequest))
	}
	var _Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "APP_PUBLISH_ITEM_RELATION_UPDATE", srv)
		_Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_Handler = h.Interceptor(_Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_Handler)
	}

	_Dop_CI_SONAR_STORE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CI_SONAR_STORE(ctx, req.(*SonarStoreRequest))
	}
	var _Dop_CI_SONAR_STORE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CI_SONAR_STORE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CI_SONAR_STORE", srv)
		_Dop_CI_SONAR_STORE_Handler = h.Interceptor(_Dop_CI_SONAR_STORE_Handler)
	}

	_Dop_CMDB_APPLICATION_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_CREATE(ctx, req.(*ApplicationCreateRequest))
	}
	var _Dop_CMDB_APPLICATION_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_APPLICATION_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_APPLICATION_CREATE", srv)
		_Dop_CMDB_APPLICATION_CREATE_Handler = h.Interceptor(_Dop_CMDB_APPLICATION_CREATE_Handler)
	}

	_Dop_CMDB_APPLICATION_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_DELETE(ctx, req.(*ApplicationDeleteRequest))
	}
	var _Dop_CMDB_APPLICATION_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_APPLICATION_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_APPLICATION_DELETE", srv)
		_Dop_CMDB_APPLICATION_DELETE_Handler = h.Interceptor(_Dop_CMDB_APPLICATION_DELETE_Handler)
	}

	_Dop_CMDB_APPLICATION_INIT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_INIT(ctx, req.(*ApplicationInitRequest))
	}
	var _Dop_CMDB_APPLICATION_INIT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_APPLICATION_INIT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_APPLICATION_INIT", srv)
		_Dop_CMDB_APPLICATION_INIT_Handler = h.Interceptor(_Dop_CMDB_APPLICATION_INIT_Handler)
	}

	_Dop_CMDB_APPLICATION_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_UPDATE(ctx, req.(*ApplicationUpdateRequest))
	}
	var _Dop_CMDB_APPLICATION_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_APPLICATION_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_APPLICATION_UPDATE", srv)
		_Dop_CMDB_APPLICATION_UPDATE_Handler = h.Interceptor(_Dop_CMDB_APPLICATION_UPDATE_Handler)
	}

	_Dop_CMDB_BRANCH_RULE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_BRANCH_RULE_CREATE(ctx, req.(*CreateBranchRuleRequest))
	}
	var _Dop_CMDB_BRANCH_RULE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_BRANCH_RULE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_BRANCH_RULE_CREATE", srv)
		_Dop_CMDB_BRANCH_RULE_CREATE_Handler = h.Interceptor(_Dop_CMDB_BRANCH_RULE_CREATE_Handler)
	}

	_Dop_CMDB_BRANCH_RULE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_BRANCH_RULE_DELETE(ctx, req.(*CMDB_BRANCH_RULE_DELETE_Request))
	}
	var _Dop_CMDB_BRANCH_RULE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_BRANCH_RULE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_BRANCH_RULE_DELETE", srv)
		_Dop_CMDB_BRANCH_RULE_DELETE_Handler = h.Interceptor(_Dop_CMDB_BRANCH_RULE_DELETE_Handler)
	}

	_Dop_CMDB_BRANCH_RULE_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_BRANCH_RULE_QUERY(ctx, req.(*QueryBranchRuleRequest))
	}
	var _Dop_CMDB_BRANCH_RULE_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_BRANCH_RULE_QUERY_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_BRANCH_RULE_QUERY", srv)
		_Dop_CMDB_BRANCH_RULE_QUERY_Handler = h.Interceptor(_Dop_CMDB_BRANCH_RULE_QUERY_Handler)
	}

	_Dop_CMDB_BRANCH_RULE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_BRANCH_RULE_UPDATE(ctx, req.(*UpdateBranchRuleRequest))
	}
	var _Dop_CMDB_BRANCH_RULE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_BRANCH_RULE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_BRANCH_RULE_UPDATE", srv)
		_Dop_CMDB_BRANCH_RULE_UPDATE_Handler = h.Interceptor(_Dop_CMDB_BRANCH_RULE_UPDATE_Handler)
	}

	_Dop_CMDB_CERTIFICATES_APP_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATES_APP_LIST(ctx, req.(*AppCertificateListRequest))
	}
	var _Dop_CMDB_CERTIFICATES_APP_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATES_APP_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATES_APP_LIST", srv)
		_Dop_CMDB_CERTIFICATES_APP_LIST_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATES_APP_LIST_Handler)
	}

	_Dop_CMDB_CERTIFICATES_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATES_LIST(ctx, req.(*CertificateListRequest))
	}
	var _Dop_CMDB_CERTIFICATES_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATES_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATES_LIST", srv)
		_Dop_CMDB_CERTIFICATES_LIST_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATES_LIST_Handler)
	}

	_Dop_CMDB_CERTIFICATE_APP_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_APP_CANCEL(ctx, req.(*CMDB_CERTIFICATE_APP_CANCEL_Request))
	}
	var _Dop_CMDB_CERTIFICATE_APP_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_APP_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_APP_CANCEL", srv)
		_Dop_CMDB_CERTIFICATE_APP_CANCEL_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_APP_CANCEL_Handler)
	}

	_Dop_CMDB_CERTIFICATE_APP_CONFIG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_APP_CONFIG(ctx, req.(*PushCertificateConfigsRequest))
	}
	var _Dop_CMDB_CERTIFICATE_APP_CONFIG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_APP_CONFIG_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_APP_CONFIG", srv)
		_Dop_CMDB_CERTIFICATE_APP_CONFIG_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_APP_CONFIG_Handler)
	}

	_Dop_CMDB_CERTIFICATE_APP_QUOTE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_APP_QUOTE(ctx, req.(*CertificateQuoteRequest))
	}
	var _Dop_CMDB_CERTIFICATE_APP_QUOTE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_APP_QUOTE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_APP_QUOTE", srv)
		_Dop_CMDB_CERTIFICATE_APP_QUOTE_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_APP_QUOTE_Handler)
	}

	_Dop_CMDB_CERTIFICATE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_CREATE(ctx, req.(*CertificateCreateRequest))
	}
	var _Dop_CMDB_CERTIFICATE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_CREATE", srv)
		_Dop_CMDB_CERTIFICATE_CREATE_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_CREATE_Handler)
	}

	_Dop_CMDB_CERTIFICATE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_DELETE(ctx, req.(*CMDB_CERTIFICATE_DELETE_Request))
	}
	var _Dop_CMDB_CERTIFICATE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_DELETE", srv)
		_Dop_CMDB_CERTIFICATE_DELETE_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_DELETE_Handler)
	}

	_Dop_CMDB_CERTIFICATE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_GET(ctx, req.(*CMDB_CERTIFICATE_GET_Request))
	}
	var _Dop_CMDB_CERTIFICATE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_GET", srv)
		_Dop_CMDB_CERTIFICATE_GET_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_GET_Handler)
	}

	_Dop_CMDB_CERTIFICATE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CERTIFICATE_UPDATE(ctx, req.(*CertificateUpdateRequest))
	}
	var _Dop_CMDB_CERTIFICATE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_CERTIFICATE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_CERTIFICATE_UPDATE", srv)
		_Dop_CMDB_CERTIFICATE_UPDATE_Handler = h.Interceptor(_Dop_CMDB_CERTIFICATE_UPDATE_Handler)
	}

	_Dop_CMDB_COMMENT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_COMMENT_CREATE(ctx, req.(*CommentCreateRequest))
	}
	var _Dop_CMDB_COMMENT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_COMMENT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_COMMENT_CREATE", srv)
		_Dop_CMDB_COMMENT_CREATE_Handler = h.Interceptor(_Dop_CMDB_COMMENT_CREATE_Handler)
	}

	_Dop_CMDB_COMMENT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_COMMENT_LIST(ctx, req.(*CommentListRequest))
	}
	var _Dop_CMDB_COMMENT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_COMMENT_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_COMMENT_LIST", srv)
		_Dop_CMDB_COMMENT_LIST_Handler = h.Interceptor(_Dop_CMDB_COMMENT_LIST_Handler)
	}

	_Dop_CMDB_COMMENT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_COMMENT_UPDATE(ctx, req.(*CommentUpdateRequest))
	}
	var _Dop_CMDB_COMMENT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_COMMENT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_COMMENT_UPDATE", srv)
		_Dop_CMDB_COMMENT_UPDATE_Handler = h.Interceptor(_Dop_CMDB_COMMENT_UPDATE_Handler)
	}

	_Dop_CMDB_ITERATION_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ITERATION_CREATE(ctx, req.(*IterationCreateRequest))
	}
	var _Dop_CMDB_ITERATION_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ITERATION_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ITERATION_CREATE", srv)
		_Dop_CMDB_ITERATION_CREATE_Handler = h.Interceptor(_Dop_CMDB_ITERATION_CREATE_Handler)
	}

	_Dop_CMDB_ITERATION_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ITERATION_DELETE(ctx, req.(*CMDB_ITERATION_DELETE_Request))
	}
	var _Dop_CMDB_ITERATION_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ITERATION_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ITERATION_DELETE", srv)
		_Dop_CMDB_ITERATION_DELETE_Handler = h.Interceptor(_Dop_CMDB_ITERATION_DELETE_Handler)
	}

	_Dop_CMDB_ITERATION_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ITERATION_GET(ctx, req.(*CMDB_ITERATION_GET_Request))
	}
	var _Dop_CMDB_ITERATION_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ITERATION_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ITERATION_GET", srv)
		_Dop_CMDB_ITERATION_GET_Handler = h.Interceptor(_Dop_CMDB_ITERATION_GET_Handler)
	}

	_Dop_CMDB_ITERATION_PAGING_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ITERATION_PAGING(ctx, req.(*IterationPagingRequest))
	}
	var _Dop_CMDB_ITERATION_PAGING_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ITERATION_PAGING_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ITERATION_PAGING", srv)
		_Dop_CMDB_ITERATION_PAGING_Handler = h.Interceptor(_Dop_CMDB_ITERATION_PAGING_Handler)
	}

	_Dop_CMDB_ITERATION_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ITERATION_UPDATE(ctx, req.(*IterationUpdateRequest))
	}
	var _Dop_CMDB_ITERATION_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ITERATION_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ITERATION_UPDATE", srv)
		_Dop_CMDB_ITERATION_UPDATE_Handler = h.Interceptor(_Dop_CMDB_ITERATION_UPDATE_Handler)
	}

	_Dop_CMDB_LIBREFERENCE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LIBREFERENCE_CREATE(ctx, req.(*LibReferenceCreateRequest))
	}
	var _Dop_CMDB_LIBREFERENCE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_LIBREFERENCE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_LIBREFERENCE_CREATE", srv)
		_Dop_CMDB_LIBREFERENCE_CREATE_Handler = h.Interceptor(_Dop_CMDB_LIBREFERENCE_CREATE_Handler)
	}

	_Dop_CMDB_LIBREFERENCE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LIBREFERENCE_DELETE(ctx, req.(*CMDB_LIBREFERENCE_DELETE_Request))
	}
	var _Dop_CMDB_LIBREFERENCE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_LIBREFERENCE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_LIBREFERENCE_DELETE", srv)
		_Dop_CMDB_LIBREFERENCE_DELETE_Handler = h.Interceptor(_Dop_CMDB_LIBREFERENCE_DELETE_Handler)
	}

	_Dop_CMDB_LIBREFERENCE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LIBREFERENCE_LIST(ctx, req.(*LibReferenceListRequest))
	}
	var _Dop_CMDB_LIBREFERENCE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_LIBREFERENCE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_LIBREFERENCE_LIST", srv)
		_Dop_CMDB_LIBREFERENCE_LIST_Handler = h.Interceptor(_Dop_CMDB_LIBREFERENCE_LIST_Handler)
	}

	_Dop_CMDB_LIBREFERENCE_LIST_VERSION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LIBREFERENCE_LIST_VERSION(ctx, req.(*CMDB_LIBREFERENCE_LIST_VERSION_Request))
	}
	var _Dop_CMDB_LIBREFERENCE_LIST_VERSION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_LIBREFERENCE_LIST_VERSION_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_LIBREFERENCE_LIST_VERSION", srv)
		_Dop_CMDB_LIBREFERENCE_LIST_VERSION_Handler = h.Interceptor(_Dop_CMDB_LIBREFERENCE_LIST_VERSION_Handler)
	}

	_Dop_CMDB_MY_PUBLISHERS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MY_PUBLISHERS_LIST(ctx, req.(*PublisherListRequest))
	}
	var _Dop_CMDB_MY_PUBLISHERS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_MY_PUBLISHERS_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_MY_PUBLISHERS_LIST", srv)
		_Dop_CMDB_MY_PUBLISHERS_LIST_Handler = h.Interceptor(_Dop_CMDB_MY_PUBLISHERS_LIST_Handler)
	}

	_Dop_CMDB_ORG_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_CREATE(ctx, req.(*OrgCreateRequest))
	}
	var _Dop_CMDB_ORG_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_CREATE", srv)
		_Dop_CMDB_ORG_CREATE_Handler = h.Interceptor(_Dop_CMDB_ORG_CREATE_Handler)
	}

	_Dop_CMDB_ORG_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_DELETE(ctx, req.(*CMDB_ORG_DELETE_Request))
	}
	var _Dop_CMDB_ORG_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_DELETE", srv)
		_Dop_CMDB_ORG_DELETE_Handler = h.Interceptor(_Dop_CMDB_ORG_DELETE_Handler)
	}

	_Dop_CMDB_ORG_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_FETCH(ctx, req.(*OrgFetchRequest))
	}
	var _Dop_CMDB_ORG_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_FETCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_FETCH", srv)
		_Dop_CMDB_ORG_FETCH_Handler = h.Interceptor(_Dop_CMDB_ORG_FETCH_Handler)
	}

	_Dop_CMDB_ORG_GET_BY_DOMAIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_GET_BY_DOMAIN(ctx, req.(*OrgGetByDomainRequest))
	}
	var _Dop_CMDB_ORG_GET_BY_DOMAIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_GET_BY_DOMAIN_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_GET_BY_DOMAIN", srv)
		_Dop_CMDB_ORG_GET_BY_DOMAIN_Handler = h.Interceptor(_Dop_CMDB_ORG_GET_BY_DOMAIN_Handler)
	}

	_Dop_CMDB_ORG_NEXUS_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_NEXUS_FETCH(ctx, req.(*OrgNexusGetRequest))
	}
	var _Dop_CMDB_ORG_NEXUS_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_NEXUS_FETCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_NEXUS_FETCH", srv)
		_Dop_CMDB_ORG_NEXUS_FETCH_Handler = h.Interceptor(_Dop_CMDB_ORG_NEXUS_FETCH_Handler)
	}

	_Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx, req.(*OrgNexusShowPasswordRequest))
	}
	var _Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_NEXUS_SHOW_PASSWORD", srv)
		_Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_Handler = h.Interceptor(_Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_Handler)
	}

	_Dop_CMDB_ORG_PUBLIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_PUBLIC(ctx, req.(*OrgSearchRequest))
	}
	var _Dop_CMDB_ORG_PUBLIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_PUBLIC_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_PUBLIC", srv)
		_Dop_CMDB_ORG_PUBLIC_Handler = h.Interceptor(_Dop_CMDB_ORG_PUBLIC_Handler)
	}

	_Dop_CMDB_ORG_PUBLISHER_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_PUBLISHER_CREATE(ctx, req.(*CMDB_ORG_PUBLISHER_CREATE_Request))
	}
	var _Dop_CMDB_ORG_PUBLISHER_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_PUBLISHER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_PUBLISHER_CREATE", srv)
		_Dop_CMDB_ORG_PUBLISHER_CREATE_Handler = h.Interceptor(_Dop_CMDB_ORG_PUBLISHER_CREATE_Handler)
	}

	_Dop_CMDB_ORG_PUBLISHER_CREATE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_PUBLISHER_CREATE_GET(ctx, req.(*CMDB_ORG_PUBLISHER_CREATE_GET_Request))
	}
	var _Dop_CMDB_ORG_PUBLISHER_CREATE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_PUBLISHER_CREATE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_PUBLISHER_CREATE_GET", srv)
		_Dop_CMDB_ORG_PUBLISHER_CREATE_GET_Handler = h.Interceptor(_Dop_CMDB_ORG_PUBLISHER_CREATE_GET_Handler)
	}

	_Dop_CMDB_ORG_RESOURCE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_RESOURCE_GET(ctx, req.(*CMDB_ORG_RESOURCE_GET_Request))
	}
	var _Dop_CMDB_ORG_RESOURCE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_RESOURCE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_RESOURCE_GET", srv)
		_Dop_CMDB_ORG_RESOURCE_GET_Handler = h.Interceptor(_Dop_CMDB_ORG_RESOURCE_GET_Handler)
	}

	_Dop_CMDB_ORG_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_SEARCH(ctx, req.(*OrgSearchRequest))
	}
	var _Dop_CMDB_ORG_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_SEARCH", srv)
		_Dop_CMDB_ORG_SEARCH_Handler = h.Interceptor(_Dop_CMDB_ORG_SEARCH_Handler)
	}

	_Dop_CMDB_ORG_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ORG_UPDATE(ctx, req.(*OrgUpdateRequest))
	}
	var _Dop_CMDB_ORG_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ORG_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ORG_UPDATE", srv)
		_Dop_CMDB_ORG_UPDATE_Handler = h.Interceptor(_Dop_CMDB_ORG_UPDATE_Handler)
	}

	_Dop_CMDB_PROJECTS_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECTS_FETCH(ctx, req.(*ProjectListRequest))
	}
	var _Dop_CMDB_PROJECTS_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PROJECTS_FETCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PROJECTS_FETCH", srv)
		_Dop_CMDB_PROJECTS_FETCH_Handler = h.Interceptor(_Dop_CMDB_PROJECTS_FETCH_Handler)
	}

	_Dop_CMDB_PROJECT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_CREATE(ctx, req.(*ProjectCreateRequest))
	}
	var _Dop_CMDB_PROJECT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PROJECT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PROJECT_CREATE", srv)
		_Dop_CMDB_PROJECT_CREATE_Handler = h.Interceptor(_Dop_CMDB_PROJECT_CREATE_Handler)
	}

	_Dop_CMDB_PROJECT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_DELETE(ctx, req.(*ProjectDeleteRequest))
	}
	var _Dop_CMDB_PROJECT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PROJECT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PROJECT_DELETE", srv)
		_Dop_CMDB_PROJECT_DELETE_Handler = h.Interceptor(_Dop_CMDB_PROJECT_DELETE_Handler)
	}

	_Dop_CMDB_PROJECT_DETAIL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_DETAIL(ctx, req.(*ProjectDetailRequest))
	}
	var _Dop_CMDB_PROJECT_DETAIL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PROJECT_DETAIL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PROJECT_DETAIL", srv)
		_Dop_CMDB_PROJECT_DETAIL_Handler = h.Interceptor(_Dop_CMDB_PROJECT_DETAIL_Handler)
	}

	_Dop_CMDB_PUBLISHERS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PUBLISHERS_LIST(ctx, req.(*PublisherListRequest))
	}
	var _Dop_CMDB_PUBLISHERS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PUBLISHERS_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PUBLISHERS_LIST", srv)
		_Dop_CMDB_PUBLISHERS_LIST_Handler = h.Interceptor(_Dop_CMDB_PUBLISHERS_LIST_Handler)
	}

	_Dop_CMDB_PUBLISHER_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PUBLISHER_CREATE(ctx, req.(*PublisherCreateRequest))
	}
	var _Dop_CMDB_PUBLISHER_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PUBLISHER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PUBLISHER_CREATE", srv)
		_Dop_CMDB_PUBLISHER_CREATE_Handler = h.Interceptor(_Dop_CMDB_PUBLISHER_CREATE_Handler)
	}

	_Dop_CMDB_PUBLISHER_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PUBLISHER_DELETE(ctx, req.(*CMDB_PUBLISHER_DELETE_Request))
	}
	var _Dop_CMDB_PUBLISHER_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PUBLISHER_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PUBLISHER_DELETE", srv)
		_Dop_CMDB_PUBLISHER_DELETE_Handler = h.Interceptor(_Dop_CMDB_PUBLISHER_DELETE_Handler)
	}

	_Dop_CMDB_PUBLISHER_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PUBLISHER_GET(ctx, req.(*CMDB_PUBLISHER_GET_Request))
	}
	var _Dop_CMDB_PUBLISHER_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PUBLISHER_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PUBLISHER_GET", srv)
		_Dop_CMDB_PUBLISHER_GET_Handler = h.Interceptor(_Dop_CMDB_PUBLISHER_GET_Handler)
	}

	_Dop_CMDB_PUBLISHER_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PUBLISHER_UPDATE(ctx, req.(*PublisherUpdateRequest))
	}
	var _Dop_CMDB_PUBLISHER_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_PUBLISHER_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_PUBLISHER_UPDATE", srv)
		_Dop_CMDB_PUBLISHER_UPDATE_Handler = h.Interceptor(_Dop_CMDB_PUBLISHER_UPDATE_Handler)
	}

	_Dop_CMDB_ROLES_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ROLES_LIST(ctx, req.(*CMDB_ROLES_LIST_Request))
	}
	var _Dop_CMDB_ROLES_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_ROLES_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_ROLES_LIST", srv)
		_Dop_CMDB_ROLES_LIST_Handler = h.Interceptor(_Dop_CMDB_ROLES_LIST_Handler)
	}

	_Dop_CMDB_TICKET_CLOSE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_CLOSE(ctx, req.(*TicketCloseRequest))
	}
	var _Dop_CMDB_TICKET_CLOSE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_CLOSE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_CLOSE", srv)
		_Dop_CMDB_TICKET_CLOSE_Handler = h.Interceptor(_Dop_CMDB_TICKET_CLOSE_Handler)
	}

	_Dop_CMDB_TICKET_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_CREATE(ctx, req.(*TicketCreateRequest))
	}
	var _Dop_CMDB_TICKET_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_CREATE", srv)
		_Dop_CMDB_TICKET_CREATE_Handler = h.Interceptor(_Dop_CMDB_TICKET_CREATE_Handler)
	}

	_Dop_CMDB_TICKET_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_DELETE(ctx, req.(*TicketDeleteRequest))
	}
	var _Dop_CMDB_TICKET_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_DELETE", srv)
		_Dop_CMDB_TICKET_DELETE_Handler = h.Interceptor(_Dop_CMDB_TICKET_DELETE_Handler)
	}

	_Dop_CMDB_TICKET_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_FETCH(ctx, req.(*TicketFetchRequest))
	}
	var _Dop_CMDB_TICKET_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_FETCH_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_FETCH", srv)
		_Dop_CMDB_TICKET_FETCH_Handler = h.Interceptor(_Dop_CMDB_TICKET_FETCH_Handler)
	}

	_Dop_CMDB_TICKET_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_LIST(ctx, req.(*TicketListRequest))
	}
	var _Dop_CMDB_TICKET_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_LIST", srv)
		_Dop_CMDB_TICKET_LIST_Handler = h.Interceptor(_Dop_CMDB_TICKET_LIST_Handler)
	}

	_Dop_CMDB_TICKET_REOPEN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_REOPEN(ctx, req.(*TicketReopenRequest))
	}
	var _Dop_CMDB_TICKET_REOPEN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_REOPEN_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_REOPEN", srv)
		_Dop_CMDB_TICKET_REOPEN_Handler = h.Interceptor(_Dop_CMDB_TICKET_REOPEN_Handler)
	}

	_Dop_CMDB_TICKET_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_TICKET_UPDATE(ctx, req.(*TicketUpdateRequest))
	}
	var _Dop_CMDB_TICKET_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CMDB_TICKET_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CMDB_TICKET_UPDATE", srv)
		_Dop_CMDB_TICKET_UPDATE_Handler = h.Interceptor(_Dop_CMDB_TICKET_UPDATE_Handler)
	}

	_Dop_CODE_COVERAGE_END_CALLBACK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CODE_COVERAGE_END_CALLBACK(ctx, req.(*CodeCoverageUpdateRequest))
	}
	var _Dop_CODE_COVERAGE_END_CALLBACK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CODE_COVERAGE_END_CALLBACK_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CODE_COVERAGE_END_CALLBACK", srv)
		_Dop_CODE_COVERAGE_END_CALLBACK_Handler = h.Interceptor(_Dop_CODE_COVERAGE_END_CALLBACK_Handler)
	}

	_Dop_CODE_COVERAGE_READY_CALLBACK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CODE_COVERAGE_READY_CALLBACK(ctx, req.(*CodeCoverageUpdateRequest))
	}
	var _Dop_CODE_COVERAGE_READY_CALLBACK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CODE_COVERAGE_READY_CALLBACK_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CODE_COVERAGE_READY_CALLBACK", srv)
		_Dop_CODE_COVERAGE_READY_CALLBACK_Handler = h.Interceptor(_Dop_CODE_COVERAGE_READY_CALLBACK_Handler)
	}

	_Dop_CODE_COVERAGE_READY_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CODE_COVERAGE_READY_STATUS(ctx, req.(*CodeCoverageUpdateRequest))
	}
	var _Dop_CODE_COVERAGE_READY_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CODE_COVERAGE_READY_STATUS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CODE_COVERAGE_READY_STATUS", srv)
		_Dop_CODE_COVERAGE_READY_STATUS_Handler = h.Interceptor(_Dop_CODE_COVERAGE_READY_STATUS_Handler)
	}

	_Dop_CODE_COVERAGE_REPORT_CALLBACK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CODE_COVERAGE_REPORT_CALLBACK(ctx, req.(*CodeCoverageUpdateRequest))
	}
	var _Dop_CODE_COVERAGE_REPORT_CALLBACK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CODE_COVERAGE_REPORT_CALLBACK_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CODE_COVERAGE_REPORT_CALLBACK", srv)
		_Dop_CODE_COVERAGE_REPORT_CALLBACK_Handler = h.Interceptor(_Dop_CODE_COVERAGE_REPORT_CALLBACK_Handler)
	}

	_Dop_CreateAPIAsset_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAPIAsset(ctx, req.(*APIAssetCreateRequest))
	}
	var _Dop_CreateAPIAsset_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateAPIAsset_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateAPIAsset", srv)
		_Dop_CreateAPIAsset_Handler = h.Interceptor(_Dop_CreateAPIAsset_Handler)
	}

	_Dop_CreateAPIAssetVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAPIAssetVersion(ctx, req.(*APIAssetVersionCreateRequest))
	}
	var _Dop_CreateAPIAssetVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateAPIAssetVersion_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateAPIAssetVersion", srv)
		_Dop_CreateAPIAssetVersion_Handler = h.Interceptor(_Dop_CreateAPIAssetVersion_Handler)
	}

	_Dop_CreateAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAccess(ctx, req.(*CreateAccessReq))
	}
	var _Dop_CreateAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateAccess_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateAccess", srv)
		_Dop_CreateAccess_Handler = h.Interceptor(_Dop_CreateAccess_Handler)
	}

	_Dop_CreateAttempTest_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAttempTest(ctx, req.(*APITestReq))
	}
	var _Dop_CreateAttempTest_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateAttempTest_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateAttempTest", srv)
		_Dop_CreateAttempTest_Handler = h.Interceptor(_Dop_CreateAttempTest_Handler)
	}

	_Dop_CreateClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateClient(ctx, req.(*CreateClientReq))
	}
	var _Dop_CreateClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateClient_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateClient", srv)
		_Dop_CreateClient_Handler = h.Interceptor(_Dop_CreateClient_Handler)
	}

	_Dop_CreateContract_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateContract(ctx, req.(*CreateContractReq))
	}
	var _Dop_CreateContract_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateContract_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateContract", srv)
		_Dop_CreateContract_Handler = h.Interceptor(_Dop_CreateContract_Handler)
	}

	_Dop_CreateInstantiation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateInstantiation(ctx, req.(*CreateInstantiationReq))
	}
	var _Dop_CreateInstantiation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateInstantiation_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateInstantiation", srv)
		_Dop_CreateInstantiation_Handler = h.Interceptor(_Dop_CreateInstantiation_Handler)
	}

	_Dop_CreateSLA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateSLA(ctx, req.(*CreateSLAReq))
	}
	var _Dop_CreateSLA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_CreateSLA_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "CreateSLA", srv)
		_Dop_CreateSLA_Handler = h.Interceptor(_Dop_CreateSLA_Handler)
	}

	_Dop_DeleteAPIAssetVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAPIAssetVersion(ctx, req.(*DeleteAPIAssetVersion_Request))
	}
	var _Dop_DeleteAPIAssetVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteAPIAssetVersion_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteAPIAssetVersion", srv)
		_Dop_DeleteAPIAssetVersion_Handler = h.Interceptor(_Dop_DeleteAPIAssetVersion_Handler)
	}

	_Dop_DeleteAPIAssets_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAPIAssets(ctx, req.(*DeleteAPIAssets_Request))
	}
	var _Dop_DeleteAPIAssets_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteAPIAssets_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteAPIAssets", srv)
		_Dop_DeleteAPIAssets_Handler = h.Interceptor(_Dop_DeleteAPIAssets_Handler)
	}

	_Dop_DeleteAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAccess(ctx, req.(*DeleteAccess_Request))
	}
	var _Dop_DeleteAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteAccess_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteAccess", srv)
		_Dop_DeleteAccess_Handler = h.Interceptor(_Dop_DeleteAccess_Handler)
	}

	_Dop_DeleteClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteClient(ctx, req.(*DeleteClient_Request))
	}
	var _Dop_DeleteClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteClient_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteClient", srv)
		_Dop_DeleteClient_Handler = h.Interceptor(_Dop_DeleteClient_Handler)
	}

	_Dop_DeleteContract_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteContract(ctx, req.(*GetContractReq))
	}
	var _Dop_DeleteContract_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteContract_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteContract", srv)
		_Dop_DeleteContract_Handler = h.Interceptor(_Dop_DeleteContract_Handler)
	}

	_Dop_DeleteSLA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteSLA(ctx, req.(*DeleteSLAReq))
	}
	var _Dop_DeleteSLA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_DeleteSLA_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "DeleteSLA", srv)
		_Dop_DeleteSLA_Handler = h.Interceptor(_Dop_DeleteSLA_Handler)
	}

	_Dop_ExportSpec_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ExportSpec(ctx, req.(*DownloadSpecTextReq))
	}
	var _Dop_ExportSpec_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ExportSpec_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ExportSpec", srv)
		_Dop_ExportSpec_Handler = h.Interceptor(_Dop_ExportSpec_Handler)
	}

	_Dop_FileTreeCreateNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeCreateNode(ctx, req.(*APIDocCreateNodeReq))
	}
	var _Dop_FileTreeCreateNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeCreateNode_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeCreateNode", srv)
		_Dop_FileTreeCreateNode_Handler = h.Interceptor(_Dop_FileTreeCreateNode_Handler)
	}

	_Dop_FileTreeDeleteNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeDeleteNode(ctx, req.(*FileTreeDeleteNode_Request))
	}
	var _Dop_FileTreeDeleteNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeDeleteNode_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeDeleteNode", srv)
		_Dop_FileTreeDeleteNode_Handler = h.Interceptor(_Dop_FileTreeDeleteNode_Handler)
	}

	_Dop_FileTreeGetNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeGetNode(ctx, req.(*FileTreeGetNode_Request))
	}
	var _Dop_FileTreeGetNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeGetNode_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeGetNode", srv)
		_Dop_FileTreeGetNode_Handler = h.Interceptor(_Dop_FileTreeGetNode_Handler)
	}

	_Dop_FileTreeListNodes_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeListNodes(ctx, req.(*FileTreeListNodes_Request))
	}
	var _Dop_FileTreeListNodes_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeListNodes_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeListNodes", srv)
		_Dop_FileTreeListNodes_Handler = h.Interceptor(_Dop_FileTreeListNodes_Handler)
	}

	_Dop_FileTreeMvCpNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeMvCpNode(ctx, req.(*FileTreeMvCpNode_Request))
	}
	var _Dop_FileTreeMvCpNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeMvCpNode_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeMvCpNode", srv)
		_Dop_FileTreeMvCpNode_Handler = h.Interceptor(_Dop_FileTreeMvCpNode_Handler)
	}

	_Dop_FileTreeUpdateNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FileTreeUpdateNode(ctx, req.(*FileTreeUpdateNode_Request))
	}
	var _Dop_FileTreeUpdateNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_FileTreeUpdateNode_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "FileTreeUpdateNode", srv)
		_Dop_FileTreeUpdateNode_Handler = h.Interceptor(_Dop_FileTreeUpdateNode_Handler)
	}

	_Dop_GetAPIAssetVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAPIAssetVersion(ctx, req.(*GetAPIAssetVersionReq))
	}
	var _Dop_GetAPIAssetVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetAPIAssetVersion_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetAPIAssetVersion", srv)
		_Dop_GetAPIAssetVersion_Handler = h.Interceptor(_Dop_GetAPIAssetVersion_Handler)
	}

	_Dop_GetAPIAssets_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAPIAssets(ctx, req.(*GetAPIAssetReq))
	}
	var _Dop_GetAPIAssets_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetAPIAssets_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetAPIAssets", srv)
		_Dop_GetAPIAssets_Handler = h.Interceptor(_Dop_GetAPIAssets_Handler)
	}

	_Dop_GetAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAccess(ctx, req.(*GetAccess_Request))
	}
	var _Dop_GetAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetAccess_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetAccess", srv)
		_Dop_GetAccess_Handler = h.Interceptor(_Dop_GetAccess_Handler)
	}

	_Dop_GetClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetClient(ctx, req.(*GetClientReq))
	}
	var _Dop_GetClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetClient_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetClient", srv)
		_Dop_GetClient_Handler = h.Interceptor(_Dop_GetClient_Handler)
	}

	_Dop_GetContract_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetContract(ctx, req.(*GetContractReq))
	}
	var _Dop_GetContract_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetContract_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetContract", srv)
		_Dop_GetContract_Handler = h.Interceptor(_Dop_GetContract_Handler)
	}

	_Dop_GetInstantiations_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetInstantiations(ctx, req.(*GetInstantiationsReq))
	}
	var _Dop_GetInstantiations_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetInstantiations_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetInstantiations", srv)
		_Dop_GetInstantiations_Handler = h.Interceptor(_Dop_GetInstantiations_Handler)
	}

	_Dop_GetOperation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOperation(ctx, req.(*GetOperationReq))
	}
	var _Dop_GetOperation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetOperation_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetOperation", srv)
		_Dop_GetOperation_Handler = h.Interceptor(_Dop_GetOperation_Handler)
	}

	_Dop_GetSLA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetSLA(ctx, req.(*ListSLAsReq))
	}
	var _Dop_GetSLA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_GetSLA_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "GetSLA", srv)
		_Dop_GetSLA_Handler = h.Interceptor(_Dop_GetSLA_Handler)
	}

	_Dop_ListAPIAssetVersions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListAPIAssetVersions(ctx, req.(*GetAPIAssetVersionReq))
	}
	var _Dop_ListAPIAssetVersions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListAPIAssetVersions_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListAPIAssetVersions", srv)
		_Dop_ListAPIAssetVersions_Handler = h.Interceptor(_Dop_ListAPIAssetVersions_Handler)
	}

	_Dop_ListAPIGateways_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListAPIGateways(ctx, req.(*ListAPIGatewaysReq))
	}
	var _Dop_ListAPIGateways_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListAPIGateways_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListAPIGateways", srv)
		_Dop_ListAPIGateways_Handler = h.Interceptor(_Dop_ListAPIGateways_Handler)
	}

	_Dop_ListAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListAccess(ctx, req.(*ListAccessReq))
	}
	var _Dop_ListAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListAccess_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListAccess", srv)
		_Dop_ListAccess_Handler = h.Interceptor(_Dop_ListAccess_Handler)
	}

	_Dop_ListContract_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListContract(ctx, req.(*ListContractsReq))
	}
	var _Dop_ListContract_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListContract_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListContract", srv)
		_Dop_ListContract_Handler = h.Interceptor(_Dop_ListContract_Handler)
	}

	_Dop_ListContractRecords_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListContractRecords(ctx, req.(*ListContractRecordsReq))
	}
	var _Dop_ListContractRecords_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListContractRecords_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListContractRecords", srv)
		_Dop_ListContractRecords_Handler = h.Interceptor(_Dop_ListContractRecords_Handler)
	}

	_Dop_ListInstantiations_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListInstantiations(ctx, req.(*ListInstantiations_Request))
	}
	var _Dop_ListInstantiations_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListInstantiations_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListInstantiations", srv)
		_Dop_ListInstantiations_Handler = h.Interceptor(_Dop_ListInstantiations_Handler)
	}

	_Dop_ListMyClients_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListMyClients(ctx, req.(*ListMyClientsReq))
	}
	var _Dop_ListMyClients_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListMyClients_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListMyClients", srv)
		_Dop_ListMyClients_Handler = h.Interceptor(_Dop_ListMyClients_Handler)
	}

	_Dop_ListProjectAPIGateways_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListProjectAPIGateways(ctx, req.(*ListProjectAPIGatewaysReq))
	}
	var _Dop_ListProjectAPIGateways_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListProjectAPIGateways_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListProjectAPIGateways", srv)
		_Dop_ListProjectAPIGateways_Handler = h.Interceptor(_Dop_ListProjectAPIGateways_Handler)
	}

	_Dop_ListRuntimeServices_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListRuntimeServices(ctx, req.(*ListRuntimeServices_Request))
	}
	var _Dop_ListRuntimeServices_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListRuntimeServices_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListRuntimeServices", srv)
		_Dop_ListRuntimeServices_Handler = h.Interceptor(_Dop_ListRuntimeServices_Handler)
	}

	_Dop_ListSLA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListSLA(ctx, req.(*GetSLAReq))
	}
	var _Dop_ListSLA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListSLA_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListSLA", srv)
		_Dop_ListSLA_Handler = h.Interceptor(_Dop_ListSLA_Handler)
	}

	_Dop_ListSwaggerVersionClients_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListSwaggerVersionClients(ctx, req.(*ListSwaggerVersionClientsReq))
	}
	var _Dop_ListSwaggerVersionClients_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListSwaggerVersionClients_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListSwaggerVersionClients", srv)
		_Dop_ListSwaggerVersionClients_Handler = h.Interceptor(_Dop_ListSwaggerVersionClients_Handler)
	}

	_Dop_ListSwaggerVersions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListSwaggerVersions(ctx, req.(*ListSwaggerVersionsReq))
	}
	var _Dop_ListSwaggerVersions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ListSwaggerVersions_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ListSwaggerVersions", srv)
		_Dop_ListSwaggerVersions_Handler = h.Interceptor(_Dop_ListSwaggerVersions_Handler)
	}

	_Dop_PUBLISH_ITEM_CERTIFICATION_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_CERTIFICATION_GET(ctx, req.(*PUBLISH_ITEM_CERTIFICATION_GET_Request))
	}
	var _Dop_PUBLISH_ITEM_CERTIFICATION_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_CERTIFICATION_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_CERTIFICATION_GET", srv)
		_Dop_PUBLISH_ITEM_CERTIFICATION_GET_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_CERTIFICATION_GET_Handler)
	}

	_Dop_PUBLISH_ITEM_CHANNELS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_CHANNELS(ctx, req.(*PublishItemStatisticsDetailRequest))
	}
	var _Dop_PUBLISH_ITEM_CHANNELS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_CHANNELS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_CHANNELS", srv)
		_Dop_PUBLISH_ITEM_CHANNELS_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_CHANNELS_Handler)
	}

	_Dop_PUBLISH_ITEM_ERR_EFFACTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_ERR_EFFACTS(ctx, req.(*PUBLISH_ITEM_ERR_EFFACTS_Request))
	}
	var _Dop_PUBLISH_ITEM_ERR_EFFACTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_ERR_EFFACTS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_ERR_EFFACTS", srv)
		_Dop_PUBLISH_ITEM_ERR_EFFACTS_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_ERR_EFFACTS_Handler)
	}

	_Dop_PUBLISH_ITEM_ERR_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_ERR_LIST(ctx, req.(*PUBLISH_ITEM_ERR_LIST_Request))
	}
	var _Dop_PUBLISH_ITEM_ERR_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_ERR_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_ERR_LIST", srv)
		_Dop_PUBLISH_ITEM_ERR_LIST_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_ERR_LIST_Handler)
	}

	_Dop_PUBLISH_ITEM_ERR_RATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_ERR_RATE(ctx, req.(*PUBLISH_ITEM_ERR_RATE_Request))
	}
	var _Dop_PUBLISH_ITEM_ERR_RATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_ERR_RATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_ERR_RATE", srv)
		_Dop_PUBLISH_ITEM_ERR_RATE_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_ERR_RATE_Handler)
	}

	_Dop_PUBLISH_ITEM_ERR_TREND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_ERR_TREND(ctx, req.(*PUBLISH_ITEM_ERR_TREND_Request))
	}
	var _Dop_PUBLISH_ITEM_ERR_TREND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_ERR_TREND_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_ERR_TREND", srv)
		_Dop_PUBLISH_ITEM_ERR_TREND_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_ERR_TREND_Handler)
	}

	_Dop_PUBLISH_ITEM_METIRCS_COMMON_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_METIRCS_COMMON(ctx, req.(*PUBLISH_ITEM_METIRCS_COMMON_Request))
	}
	var _Dop_PUBLISH_ITEM_METIRCS_COMMON_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_METIRCS_COMMON_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_METIRCS_COMMON", srv)
		_Dop_PUBLISH_ITEM_METIRCS_COMMON_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_METIRCS_COMMON_Handler)
	}

	_Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx, req.(*PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request))
	}
	var _Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON", srv)
		_Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Handler)
	}

	_Dop_PUBLISH_ITEM_STATISTICS_TREND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_STATISTICS_TREND(ctx, req.(*PUBLISH_ITEM_STATISTICS_TREND_Request))
	}
	var _Dop_PUBLISH_ITEM_STATISTICS_TREND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_STATISTICS_TREND_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_STATISTICS_TREND", srv)
		_Dop_PUBLISH_ITEM_STATISTICS_TREND_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_STATISTICS_TREND_Handler)
	}

	_Dop_PUBLISH_ITEM_USERS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_USERS(ctx, req.(*PUBLISH_ITEM_USERS_Request))
	}
	var _Dop_PUBLISH_ITEM_USERS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_USERS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_USERS", srv)
		_Dop_PUBLISH_ITEM_USERS_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_USERS_Handler)
	}

	_Dop_PUBLISH_ITEM_VERSION_INFO_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUBLISH_ITEM_VERSION_INFO_LIST(ctx, req.(*PublishItemStatisticsDetailRequest))
	}
	var _Dop_PUBLISH_ITEM_VERSION_INFO_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PUBLISH_ITEM_VERSION_INFO_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PUBLISH_ITEM_VERSION_INFO_LIST", srv)
		_Dop_PUBLISH_ITEM_VERSION_INFO_LIST_Handler = h.Interceptor(_Dop_PUBLISH_ITEM_VERSION_INFO_LIST_Handler)
	}

	_Dop_PagingAPIAssets_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PagingAPIAssets(ctx, req.(*PagingAPIAssetsReq))
	}
	var _Dop_PagingAPIAssets_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_PagingAPIAssets_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "PagingAPIAssets", srv)
		_Dop_PagingAPIAssets_Handler = h.Interceptor(_Dop_PagingAPIAssets_Handler)
	}

	_Dop_ProjectPackageExport_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectPackageExport(ctx, req.(*ExportProjectPackageRequest))
	}
	var _Dop_ProjectPackageExport_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectPackageExport_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectPackageExport", srv)
		_Dop_ProjectPackageExport_Handler = h.Interceptor(_Dop_ProjectPackageExport_Handler)
	}

	_Dop_ProjectPackageImport_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectPackageImport(ctx, req.(*ImportProjectPackageRequest))
	}
	var _Dop_ProjectPackageImport_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectPackageImport_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectPackageImport", srv)
		_Dop_ProjectPackageImport_Handler = h.Interceptor(_Dop_ProjectPackageImport_Handler)
	}

	_Dop_ProjectPackageParse_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectPackageParse(ctx, req.(*ProjectPackageParse_Request))
	}
	var _Dop_ProjectPackageParse_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectPackageParse_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectPackageParse", srv)
		_Dop_ProjectPackageParse_Handler = h.Interceptor(_Dop_ProjectPackageParse_Handler)
	}

	_Dop_ProjectTemplateExport_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectTemplateExport(ctx, req.(*ExportProjectTemplateRequest))
	}
	var _Dop_ProjectTemplateExport_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectTemplateExport_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectTemplateExport", srv)
		_Dop_ProjectTemplateExport_Handler = h.Interceptor(_Dop_ProjectTemplateExport_Handler)
	}

	_Dop_ProjectTemplateImport_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectTemplateImport(ctx, req.(*ImportProjectTemplateRequest))
	}
	var _Dop_ProjectTemplateImport_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectTemplateImport_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectTemplateImport", srv)
		_Dop_ProjectTemplateImport_Handler = h.Interceptor(_Dop_ProjectTemplateImport_Handler)
	}

	_Dop_ProjectTemplateParse_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProjectTemplateParse(ctx, req.(*ImportProjectTemplateRequest))
	}
	var _Dop_ProjectTemplateParse_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProjectTemplateParse_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProjectTemplateParse", srv)
		_Dop_ProjectTemplateParse_Handler = h.Interceptor(_Dop_ProjectTemplateParse_Handler)
	}

	_Dop_ProxyMetrics_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProxyMetrics(ctx, req.(*ProxyMetrics_Request))
	}
	var _Dop_ProxyMetrics_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ProxyMetrics_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ProxyMetrics", srv)
		_Dop_ProxyMetrics_Handler = h.Interceptor(_Dop_ProxyMetrics_Handler)
	}

	_Dop_QA_APITESTS_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_APITESTS_CANCEL(ctx, req.(*ApiTestCancelRequest))
	}
	var _Dop_QA_APITESTS_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_APITESTS_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_APITESTS_CANCEL", srv)
		_Dop_QA_APITESTS_CANCEL_Handler = h.Interceptor(_Dop_QA_APITESTS_CANCEL_Handler)
	}

	_Dop_QA_APITESTS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_APITESTS_GET(ctx, req.(*QA_APITESTS_GET_Request))
	}
	var _Dop_QA_APITESTS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_APITESTS_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_APITESTS_GET", srv)
		_Dop_QA_APITESTS_GET_Handler = h.Interceptor(_Dop_QA_APITESTS_GET_Handler)
	}

	_Dop_QA_APITESTS_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_APITESTS_UPDATE(ctx, req.(*ApiTestsUpdateRequest))
	}
	var _Dop_QA_APITESTS_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_APITESTS_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_APITESTS_UPDATE", srv)
		_Dop_QA_APITESTS_UPDATE_Handler = h.Interceptor(_Dop_QA_APITESTS_UPDATE_Handler)
	}

	_Dop_QA_AUTOTEST_SPACE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_AUTOTEST_SPACE_GET(ctx, req.(*QA_AUTOTEST_SPACE_GET_Request))
	}
	var _Dop_QA_AUTOTEST_SPACE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_AUTOTEST_SPACE_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_AUTOTEST_SPACE_GET", srv)
		_Dop_QA_AUTOTEST_SPACE_GET_Handler = h.Interceptor(_Dop_QA_AUTOTEST_SPACE_GET_Handler)
	}

	_Dop_QA_PIPELINE_TASK_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_PIPELINE_TASK_LOGS(ctx, req.(*QA_PIPELINE_TASK_LOGS_Request))
	}
	var _Dop_QA_PIPELINE_TASK_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_PIPELINE_TASK_LOGS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_PIPELINE_TASK_LOGS", srv)
		_Dop_QA_PIPELINE_TASK_LOGS_Handler = h.Interceptor(_Dop_QA_PIPELINE_TASK_LOGS_Handler)
	}

	_Dop_QA_RECORDS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_RECORDS_GET(ctx, req.(*QA_RECORDS_GET_Request))
	}
	var _Dop_QA_RECORDS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_RECORDS_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_RECORDS_GET", srv)
		_Dop_QA_RECORDS_GET_Handler = h.Interceptor(_Dop_QA_RECORDS_GET_Handler)
	}

	_Dop_QA_RECORDS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_RECORDS_LIST(ctx, req.(*ListTestFileRecordsRequest))
	}
	var _Dop_QA_RECORDS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_RECORDS_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_RECORDS_LIST", srv)
		_Dop_QA_RECORDS_LIST_Handler = h.Interceptor(_Dop_QA_RECORDS_LIST_Handler)
	}

	_Dop_QA_SONAR_GET_CREDENTIAL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_GET_CREDENTIAL(ctx, req.(*QA_SONAR_GET_CREDENTIAL_Request))
	}
	var _Dop_QA_SONAR_GET_CREDENTIAL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_GET_CREDENTIAL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_GET_CREDENTIAL", srv)
		_Dop_QA_SONAR_GET_CREDENTIAL_Handler = h.Interceptor(_Dop_QA_SONAR_GET_CREDENTIAL_Handler)
	}

	_Dop_QA_SONAR_ISSUES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_ISSUES(ctx, req.(*QA_SONAR_ISSUES_Request))
	}
	var _Dop_QA_SONAR_ISSUES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_ISSUES_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_ISSUES", srv)
		_Dop_QA_SONAR_ISSUES_Handler = h.Interceptor(_Dop_QA_SONAR_ISSUES_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx, req.(*SonarMetricRulesBatchDeleteRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_BATCH_DELETE", srv)
		_Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx, req.(*SonarMetricRulesBatchInsertRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_BATCH_INSERT", srv)
		_Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_DELETE(ctx, req.(*SonarMetricRulesDeleteRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_DELETE", srv)
		_Dop_QA_SONAR_METRIC_RULES_DELETE_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_DELETE_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_GET(ctx, req.(*QA_SONAR_METRIC_RULES_GET_Request))
	}
	var _Dop_QA_SONAR_METRIC_RULES_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_GET", srv)
		_Dop_QA_SONAR_METRIC_RULES_GET_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_GET_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_PAGING_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_PAGING(ctx, req.(*SonarMetricRulesPagingRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_PAGING_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_PAGING_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_PAGING", srv)
		_Dop_QA_SONAR_METRIC_RULES_PAGING_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_PAGING_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx, req.(*SonarMetricRulesDefinitionListRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_QUERY_DEFINITION", srv)
		_Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_QUERY_LIST(ctx, req.(*SonarMetricRulesListRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_QUERY_LIST", srv)
		_Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_Handler)
	}

	_Dop_QA_SONAR_METRIC_RULES_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_SONAR_METRIC_RULES_UPDATE(ctx, req.(*SonarMetricRulesUpdateRequest))
	}
	var _Dop_QA_SONAR_METRIC_RULES_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_SONAR_METRIC_RULES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_SONAR_METRIC_RULES_UPDATE", srv)
		_Dop_QA_SONAR_METRIC_RULES_UPDATE_Handler = h.Interceptor(_Dop_QA_SONAR_METRIC_RULES_UPDATE_Handler)
	}

	_Dop_QA_TESTENV_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTENV_CREATE(ctx, req.(*QA_TESTENV_CREATE_Request))
	}
	var _Dop_QA_TESTENV_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTENV_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTENV_CREATE", srv)
		_Dop_QA_TESTENV_CREATE_Handler = h.Interceptor(_Dop_QA_TESTENV_CREATE_Handler)
	}

	_Dop_QA_TESTENV_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTENV_DELETE(ctx, req.(*QA_TESTENV_DELETE_Request))
	}
	var _Dop_QA_TESTENV_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTENV_DELETE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTENV_DELETE", srv)
		_Dop_QA_TESTENV_DELETE_Handler = h.Interceptor(_Dop_QA_TESTENV_DELETE_Handler)
	}

	_Dop_QA_TESTENV_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTENV_GET(ctx, req.(*QA_TESTENV_GET_Request))
	}
	var _Dop_QA_TESTENV_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTENV_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTENV_GET", srv)
		_Dop_QA_TESTENV_GET_Handler = h.Interceptor(_Dop_QA_TESTENV_GET_Handler)
	}

	_Dop_QA_TESTENV_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTENV_LIST(ctx, req.(*QA_TESTENV_LIST_Request))
	}
	var _Dop_QA_TESTENV_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTENV_LIST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTENV_LIST", srv)
		_Dop_QA_TESTENV_LIST_Handler = h.Interceptor(_Dop_QA_TESTENV_LIST_Handler)
	}

	_Dop_QA_TESTENV_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTENV_UPDATE(ctx, req.(*APITestEnvUpdateRequest))
	}
	var _Dop_QA_TESTENV_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTENV_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTENV_UPDATE", srv)
		_Dop_QA_TESTENV_UPDATE_Handler = h.Interceptor(_Dop_QA_TESTENV_UPDATE_Handler)
	}

	_Dop_QA_TESTPLAN_PIPELINE_DETAIL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_TESTPLAN_PIPELINE_DETAIL(ctx, req.(*QA_TESTPLAN_PIPELINE_DETAIL_Request))
	}
	var _Dop_QA_TESTPLAN_PIPELINE_DETAIL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_QA_TESTPLAN_PIPELINE_DETAIL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "QA_TESTPLAN_PIPELINE_DETAIL", srv)
		_Dop_QA_TESTPLAN_PIPELINE_DETAIL_Handler = h.Interceptor(_Dop_QA_TESTPLAN_PIPELINE_DETAIL_Handler)
	}

	_Dop_SPOT_APITESTS_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_APITESTS_LOGS(ctx, req.(*SPOT_APITESTS_LOGS_Request))
	}
	var _Dop_SPOT_APITESTS_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_SPOT_APITESTS_LOGS_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "SPOT_APITESTS_LOGS", srv)
		_Dop_SPOT_APITESTS_LOGS_Handler = h.Interceptor(_Dop_SPOT_APITESTS_LOGS_Handler)
	}

	_Dop_SPOT_APITESTS_LOGS_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_APITESTS_LOGS_DOWNLOAD(ctx, req.(*SPOT_APITESTS_LOGS_DOWNLOAD_Request))
	}
	var _Dop_SPOT_APITESTS_LOGS_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_SPOT_APITESTS_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "SPOT_APITESTS_LOGS_DOWNLOAD", srv)
		_Dop_SPOT_APITESTS_LOGS_DOWNLOAD_Handler = h.Interceptor(_Dop_SPOT_APITESTS_LOGS_DOWNLOAD_Handler)
	}

	_Dop_SearchOperations_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SearchOperations(ctx, req.(*SearchOperationsReq))
	}
	var _Dop_SearchOperations_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_SearchOperations_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "SearchOperations", srv)
		_Dop_SearchOperations_Handler = h.Interceptor(_Dop_SearchOperations_Handler)
	}

	_Dop_UpdateAPIAssset_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAPIAssset(ctx, req.(*UpdateAPIAssetReq))
	}
	var _Dop_UpdateAPIAssset_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateAPIAssset_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateAPIAssset", srv)
		_Dop_UpdateAPIAssset_Handler = h.Interceptor(_Dop_UpdateAPIAssset_Handler)
	}

	_Dop_UpdateAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAccess(ctx, req.(*UpdateAccess_Request))
	}
	var _Dop_UpdateAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateAccess_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateAccess", srv)
		_Dop_UpdateAccess_Handler = h.Interceptor(_Dop_UpdateAccess_Handler)
	}

	_Dop_UpdateAssetVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAssetVersion(ctx, req.(*UpdateAssetVersionReq))
	}
	var _Dop_UpdateAssetVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateAssetVersion_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateAssetVersion", srv)
		_Dop_UpdateAssetVersion_Handler = h.Interceptor(_Dop_UpdateAssetVersion_Handler)
	}

	_Dop_UpdateClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateClient(ctx, req.(*UpdateClientReq))
	}
	var _Dop_UpdateClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateClient_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateClient", srv)
		_Dop_UpdateClient_Handler = h.Interceptor(_Dop_UpdateClient_Handler)
	}

	_Dop_UpdateContract_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateContract(ctx, req.(*UpdateContract_Request))
	}
	var _Dop_UpdateContract_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateContract_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateContract", srv)
		_Dop_UpdateContract_Handler = h.Interceptor(_Dop_UpdateContract_Handler)
	}

	_Dop_UpdateInstantiation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateInstantiation(ctx, req.(*UpdateInstantiationReq))
	}
	var _Dop_UpdateInstantiation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateInstantiation_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateInstantiation", srv)
		_Dop_UpdateInstantiation_Handler = h.Interceptor(_Dop_UpdateInstantiation_Handler)
	}

	_Dop_UpdateSLA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateSLA(ctx, req.(*UpdateSLAReq))
	}
	var _Dop_UpdateSLA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_UpdateSLA_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "UpdateSLA", srv)
		_Dop_UpdateSLA_Handler = h.Interceptor(_Dop_UpdateSLA_Handler)
	}

	_Dop_ValidateSwagger_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ValidateSwagger(ctx, req.(*ValidateSwagger_Request))
	}
	var _Dop_ValidateSwagger_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dop_ValidateSwagger_info = transport.NewServiceInfo("erda.openapiv1.dop.dop", "ValidateSwagger", srv)
		_Dop_ValidateSwagger_Handler = h.Interceptor(_Dop_ValidateSwagger_Handler)
	}

	var serviceDesc = _Dop_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "AADAPTOR_CICD_CRON_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AADAPTOR_CICD_CRON_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).AADAPTOR_CICD_CRON_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_AADAPTOR_CICD_CRON_LIST_info)
				}
				if interceptor == nil {
					return _Dop_AADAPTOR_CICD_CRON_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/AADAPTOR_CICD_CRON_LIST",
				}
				return interceptor(ctx, in, info, _Dop_AADAPTOR_CICD_CRON_LIST_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_BRANCHES_ALL_VALID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_BRANCHES_ALL_VALID_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_BRANCHES_ALL_VALID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_BRANCHES_ALL_VALID",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_BRANCHES_ALL_VALID_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CANCEL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CANCEL_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CANCEL",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CANCEL_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CONFIG_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CONFIG_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CONFIG_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CONFIG_GET_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CONFIG_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_GET",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CONFIG_GET_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CONFIG_NAMESPACES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CONFIG_NAMESPACES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CONFIG_NAMESPACES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_NAMESPACES",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CONFIG_NAMESPACES_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CONFIG_WORKSPACES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CONFIG_WORKSPACES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CONFIG_WORKSPACES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CONFIG_WORKSPACES",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CONFIG_WORKSPACES_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CREATE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CRON_START",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CRON_START_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CRON_START(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CRON_START_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CRON_START_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CRON_START",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CRON_START_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_CRON_STOP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_CRON_STOP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_CRON_STOP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_CRON_STOP_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_CRON_STOP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_CRON_STOP",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_CRON_STOP_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FETCH_PIPELINE_ID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_FETCH_PIPELINE_ID_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FETCH_PIPELINE_ID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FETCH_PIPELINE_ID",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FETCH_PIPELINE_ID_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_CREATE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_DELETE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_FIND_ANCESTORS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeFindAncestorsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_FIND_ANCESTORS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_FIND_ANCESTORS",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_FIND_ANCESTORS_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_FUZZY_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeFuzzySearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_FUZZY_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_FUZZY_SEARCH",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_FUZZY_SEARCH_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_GET_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_GET",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_GET_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_FILETREE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_FILETREE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_FILETREE_LIST_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_FILETREE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_FILETREE_LIST",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_FILETREE_LIST_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_GET_BRANCH_RULE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_GET_BRANCH_RULE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_GET_BRANCH_RULE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_GET_BRANCH_RULE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_GET_BRANCH_RULE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_GET_BRANCH_RULE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_GET_BRANCH_RULE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_INVOKED_COMBO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineInvokedComboRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_INVOKED_COMBO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_INVOKED_COMBO_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_INVOKED_COMBO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_INVOKED_COMBO",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_INVOKED_COMBO_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelinePageListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_LIST_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_LIST",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_LIST_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_OPERATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineOperateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_OPERATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_OPERATE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_OPERATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_OPERATE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_OPERATE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_PIPELINE_DETAIL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_PIPELINE_DETAIL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_PIPELINE_DETAIL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_PIPELINE_DETAIL_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_PIPELINE_DETAIL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PIPELINE_DETAIL",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_PIPELINE_DETAIL_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_PIPELINE_YML_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CICDPipelineYmlListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_PIPELINE_YML_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PIPELINE_YML_LIST",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_PIPELINE_YML_LIST_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_PROJECT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_PROJECT_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_PROJECT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_PROJECT_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_PROJECT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PROJECT_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_PROJECT_CREATE_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_PROJECT_DETAIL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_PROJECT_DETAIL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_PROJECT_DETAIL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_PROJECT_DETAIL_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_PROJECT_DETAIL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_PROJECT_DETAIL",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_PROJECT_DETAIL_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_RERUN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_RERUN_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_RERUN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_RERUN_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_RERUN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RERUN",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_RERUN_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_RERUN_FAILED",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRerunFailedResponse)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_RERUN_FAILED(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_RERUN_FAILED_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_RERUN_FAILED_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RERUN_FAILED",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_RERUN_FAILED_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_RUN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_RUN_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_RUN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_RUN_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_RUN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_RUN",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_RUN_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_TASK_LOG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_TASK_LOG_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_TASK_LOG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_TASK_LOG_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_TASK_LOG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_TASK_LOG",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_TASK_LOG_Handler)
			},
		},
		{
			MethodName: "ADAPTOR_CICD_TASK_LOG_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ADAPTOR_CICD_TASK_LOG_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ADAPTOR_CICD_TASK_LOG_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Dop_ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "APIDocWebsocket",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APIDocWebsocket_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).APIDocWebsocket(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_APIDocWebsocket_info)
				}
				if interceptor == nil {
					return _Dop_APIDocWebsocket_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/APIDocWebsocket",
				}
				return interceptor(ctx, in, info, _Dop_APIDocWebsocket_Handler)
			},
		},
		{
			MethodName: "APITEST_ATTEMPT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APITestsAttemptRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).APITEST_ATTEMPT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_APITEST_ATTEMPT_info)
				}
				if interceptor == nil {
					return _Dop_APITEST_ATTEMPT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/APITEST_ATTEMPT",
				}
				return interceptor(ctx, in, info, _Dop_APITEST_ATTEMPT_Handler)
			},
		},
		{
			MethodName: "APPLICATIONS_RESOURCES_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APPLICATIONS_RESOURCES_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).APPLICATIONS_RESOURCES_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_APPLICATIONS_RESOURCES_LIST_info)
				}
				if interceptor == nil {
					return _Dop_APPLICATIONS_RESOURCES_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/APPLICATIONS_RESOURCES_LIST",
				}
				return interceptor(ctx, in, info, _Dop_APPLICATIONS_RESOURCES_LIST_Handler)
			},
		},
		{
			MethodName: "APP_PUBLISH_ITEM_RELATION_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APP_PUBLISH_ITEM_RELATION_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).APP_PUBLISH_ITEM_RELATION_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_APP_PUBLISH_ITEM_RELATION_GET_info)
				}
				if interceptor == nil {
					return _Dop_APP_PUBLISH_ITEM_RELATION_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/APP_PUBLISH_ITEM_RELATION_GET",
				}
				return interceptor(ctx, in, info, _Dop_APP_PUBLISH_ITEM_RELATION_GET_Handler)
			},
		},
		{
			MethodName: "APP_PUBLISH_ITEM_RELATION_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAppPublishItemRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).APP_PUBLISH_ITEM_RELATION_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/APP_PUBLISH_ITEM_RELATION_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_APP_PUBLISH_ITEM_RELATION_UPDATE_Handler)
			},
		},
		{
			MethodName: "CI_SONAR_STORE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarStoreRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CI_SONAR_STORE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CI_SONAR_STORE_info)
				}
				if interceptor == nil {
					return _Dop_CI_SONAR_STORE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CI_SONAR_STORE",
				}
				return interceptor(ctx, in, info, _Dop_CI_SONAR_STORE_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_APPLICATION_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_APPLICATION_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_APPLICATION_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_APPLICATION_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_APPLICATION_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_APPLICATION_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_APPLICATION_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_APPLICATION_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_APPLICATION_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_APPLICATION_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_INIT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationInitRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_APPLICATION_INIT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_APPLICATION_INIT_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_APPLICATION_INIT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_APPLICATION_INIT",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_APPLICATION_INIT_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_APPLICATION_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_APPLICATION_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_APPLICATION_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_APPLICATION_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_APPLICATION_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_BRANCH_RULE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateBranchRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_BRANCH_RULE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_BRANCH_RULE_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_BRANCH_RULE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_BRANCH_RULE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_BRANCH_RULE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_BRANCH_RULE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_BRANCH_RULE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_BRANCH_RULE_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_BRANCH_RULE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_BRANCH_RULE_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_BRANCH_RULE_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryBranchRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_BRANCH_RULE_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_BRANCH_RULE_QUERY_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_BRANCH_RULE_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_QUERY",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_BRANCH_RULE_QUERY_Handler)
			},
		},
		{
			MethodName: "CMDB_BRANCH_RULE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateBranchRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_BRANCH_RULE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_BRANCH_RULE_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_BRANCH_RULE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_BRANCH_RULE_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_BRANCH_RULE_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATES_APP_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AppCertificateListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATES_APP_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATES_APP_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATES_APP_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATES_APP_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATES_APP_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATES_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CertificateListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATES_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATES_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATES_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATES_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATES_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_APP_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_CERTIFICATE_APP_CANCEL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_APP_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_APP_CANCEL_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_APP_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_CANCEL",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_APP_CANCEL_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_APP_CONFIG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PushCertificateConfigsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_APP_CONFIG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_APP_CONFIG_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_APP_CONFIG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_CONFIG",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_APP_CONFIG_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_APP_QUOTE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CertificateQuoteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_APP_QUOTE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_APP_QUOTE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_APP_QUOTE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_APP_QUOTE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_APP_QUOTE_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CertificateCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_CERTIFICATE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_CERTIFICATE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_GET_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_GET",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_CERTIFICATE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CertificateUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_CERTIFICATE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_CERTIFICATE_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_CERTIFICATE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_CERTIFICATE_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_CERTIFICATE_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_COMMENT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CommentCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_COMMENT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_COMMENT_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_COMMENT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_COMMENT_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_COMMENT_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_COMMENT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CommentListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_COMMENT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_COMMENT_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_COMMENT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_COMMENT_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_COMMENT_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_COMMENT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CommentUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_COMMENT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_COMMENT_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_COMMENT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_COMMENT_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_COMMENT_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ITERATION_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IterationCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ITERATION_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ITERATION_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ITERATION_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ITERATION_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ITERATION_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ITERATION_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ITERATION_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ITERATION_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ITERATION_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ITERATION_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ITERATION_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ITERATION_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_ITERATION_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ITERATION_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ITERATION_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ITERATION_GET_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ITERATION_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ITERATION_GET",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ITERATION_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_ITERATION_PAGING",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IterationPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ITERATION_PAGING(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ITERATION_PAGING_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ITERATION_PAGING_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ITERATION_PAGING",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ITERATION_PAGING_Handler)
			},
		},
		{
			MethodName: "CMDB_ITERATION_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IterationUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ITERATION_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ITERATION_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ITERATION_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ITERATION_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ITERATION_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_LIBREFERENCE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(LibReferenceCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_LIBREFERENCE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_LIBREFERENCE_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_LIBREFERENCE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_LIBREFERENCE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_LIBREFERENCE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_LIBREFERENCE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_LIBREFERENCE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_LIBREFERENCE_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_LIBREFERENCE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_LIBREFERENCE_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_LIBREFERENCE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(LibReferenceListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_LIBREFERENCE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_LIBREFERENCE_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_LIBREFERENCE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_LIBREFERENCE_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_LIBREFERENCE_LIST_VERSION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_LIBREFERENCE_LIST_VERSION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_LIBREFERENCE_LIST_VERSION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_LIBREFERENCE_LIST_VERSION_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_LIBREFERENCE_LIST_VERSION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_LIBREFERENCE_LIST_VERSION",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_LIBREFERENCE_LIST_VERSION_Handler)
			},
		},
		{
			MethodName: "CMDB_MY_PUBLISHERS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublisherListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_MY_PUBLISHERS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_MY_PUBLISHERS_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_MY_PUBLISHERS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_MY_PUBLISHERS_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_MY_PUBLISHERS_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ORG_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgFetchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_FETCH_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_FETCH",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_GET_BY_DOMAIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgGetByDomainRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_GET_BY_DOMAIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_GET_BY_DOMAIN_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_GET_BY_DOMAIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_GET_BY_DOMAIN",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_GET_BY_DOMAIN_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_NEXUS_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgNexusGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_NEXUS_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_NEXUS_FETCH_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_NEXUS_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_NEXUS_FETCH",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_NEXUS_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_NEXUS_SHOW_PASSWORD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgNexusShowPasswordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_NEXUS_SHOW_PASSWORD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_NEXUS_SHOW_PASSWORD",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_NEXUS_SHOW_PASSWORD_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_PUBLIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgSearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_PUBLIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_PUBLIC_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_PUBLIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLIC",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_PUBLIC_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_PUBLISHER_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ORG_PUBLISHER_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_PUBLISHER_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_PUBLISHER_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_PUBLISHER_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLISHER_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_PUBLISHER_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_PUBLISHER_CREATE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ORG_PUBLISHER_CREATE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_PUBLISHER_CREATE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_PUBLISHER_CREATE_GET_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_PUBLISHER_CREATE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_PUBLISHER_CREATE_GET",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_PUBLISHER_CREATE_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_RESOURCE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ORG_RESOURCE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_RESOURCE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_RESOURCE_GET_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_RESOURCE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_RESOURCE_GET",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_RESOURCE_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgSearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_SEARCH_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_SEARCH",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_SEARCH_Handler)
			},
		},
		{
			MethodName: "CMDB_ORG_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ORG_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ORG_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ORG_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ORG_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ORG_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECTS_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PROJECTS_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PROJECTS_FETCH_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PROJECTS_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PROJECTS_FETCH",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PROJECTS_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PROJECT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PROJECT_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PROJECT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PROJECT_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PROJECT_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PROJECT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PROJECT_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PROJECT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PROJECT_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PROJECT_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_DETAIL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PROJECT_DETAIL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PROJECT_DETAIL_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PROJECT_DETAIL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PROJECT_DETAIL",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PROJECT_DETAIL_Handler)
			},
		},
		{
			MethodName: "CMDB_PUBLISHERS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublisherListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PUBLISHERS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PUBLISHERS_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PUBLISHERS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PUBLISHERS_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PUBLISHERS_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_PUBLISHER_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublisherCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PUBLISHER_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PUBLISHER_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PUBLISHER_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PUBLISHER_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PUBLISHER_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PUBLISHER_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PUBLISHER_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PUBLISHER_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PUBLISHER_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PUBLISHER_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_PUBLISHER_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PUBLISHER_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PUBLISHER_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PUBLISHER_GET_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PUBLISHER_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_GET",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PUBLISHER_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_PUBLISHER_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublisherUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_PUBLISHER_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_PUBLISHER_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_PUBLISHER_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_PUBLISHER_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_PUBLISHER_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ROLES_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_ROLES_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_ROLES_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_ROLES_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_ROLES_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_ROLES_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_ROLES_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_CLOSE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketCloseRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_CLOSE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_CLOSE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_CLOSE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_CLOSE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_CLOSE_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketFetchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_FETCH_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_FETCH",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_LIST_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_LIST",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_REOPEN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketReopenRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_REOPEN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_REOPEN_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_REOPEN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_REOPEN",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_REOPEN_Handler)
			},
		},
		{
			MethodName: "CMDB_TICKET_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TicketUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CMDB_TICKET_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CMDB_TICKET_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_CMDB_TICKET_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CMDB_TICKET_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_CMDB_TICKET_UPDATE_Handler)
			},
		},
		{
			MethodName: "CODE_COVERAGE_END_CALLBACK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CodeCoverageUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CODE_COVERAGE_END_CALLBACK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CODE_COVERAGE_END_CALLBACK_info)
				}
				if interceptor == nil {
					return _Dop_CODE_COVERAGE_END_CALLBACK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CODE_COVERAGE_END_CALLBACK",
				}
				return interceptor(ctx, in, info, _Dop_CODE_COVERAGE_END_CALLBACK_Handler)
			},
		},
		{
			MethodName: "CODE_COVERAGE_READY_CALLBACK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CodeCoverageUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CODE_COVERAGE_READY_CALLBACK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CODE_COVERAGE_READY_CALLBACK_info)
				}
				if interceptor == nil {
					return _Dop_CODE_COVERAGE_READY_CALLBACK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CODE_COVERAGE_READY_CALLBACK",
				}
				return interceptor(ctx, in, info, _Dop_CODE_COVERAGE_READY_CALLBACK_Handler)
			},
		},
		{
			MethodName: "CODE_COVERAGE_READY_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CodeCoverageUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CODE_COVERAGE_READY_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CODE_COVERAGE_READY_STATUS_info)
				}
				if interceptor == nil {
					return _Dop_CODE_COVERAGE_READY_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CODE_COVERAGE_READY_STATUS",
				}
				return interceptor(ctx, in, info, _Dop_CODE_COVERAGE_READY_STATUS_Handler)
			},
		},
		{
			MethodName: "CODE_COVERAGE_REPORT_CALLBACK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CodeCoverageUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CODE_COVERAGE_REPORT_CALLBACK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CODE_COVERAGE_REPORT_CALLBACK_info)
				}
				if interceptor == nil {
					return _Dop_CODE_COVERAGE_REPORT_CALLBACK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CODE_COVERAGE_REPORT_CALLBACK",
				}
				return interceptor(ctx, in, info, _Dop_CODE_COVERAGE_REPORT_CALLBACK_Handler)
			},
		},
		{
			MethodName: "CreateAPIAsset",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APIAssetCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateAPIAsset(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateAPIAsset_info)
				}
				if interceptor == nil {
					return _Dop_CreateAPIAsset_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateAPIAsset",
				}
				return interceptor(ctx, in, info, _Dop_CreateAPIAsset_Handler)
			},
		},
		{
			MethodName: "CreateAPIAssetVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APIAssetVersionCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateAPIAssetVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateAPIAssetVersion_info)
				}
				if interceptor == nil {
					return _Dop_CreateAPIAssetVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateAPIAssetVersion",
				}
				return interceptor(ctx, in, info, _Dop_CreateAPIAssetVersion_Handler)
			},
		},
		{
			MethodName: "CreateAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAccessReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateAccess_info)
				}
				if interceptor == nil {
					return _Dop_CreateAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateAccess",
				}
				return interceptor(ctx, in, info, _Dop_CreateAccess_Handler)
			},
		},
		{
			MethodName: "CreateAttempTest",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APITestReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateAttempTest(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateAttempTest_info)
				}
				if interceptor == nil {
					return _Dop_CreateAttempTest_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateAttempTest",
				}
				return interceptor(ctx, in, info, _Dop_CreateAttempTest_Handler)
			},
		},
		{
			MethodName: "CreateClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateClientReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateClient_info)
				}
				if interceptor == nil {
					return _Dop_CreateClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateClient",
				}
				return interceptor(ctx, in, info, _Dop_CreateClient_Handler)
			},
		},
		{
			MethodName: "CreateContract",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateContractReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateContract(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateContract_info)
				}
				if interceptor == nil {
					return _Dop_CreateContract_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateContract",
				}
				return interceptor(ctx, in, info, _Dop_CreateContract_Handler)
			},
		},
		{
			MethodName: "CreateInstantiation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateInstantiationReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateInstantiation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateInstantiation_info)
				}
				if interceptor == nil {
					return _Dop_CreateInstantiation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateInstantiation",
				}
				return interceptor(ctx, in, info, _Dop_CreateInstantiation_Handler)
			},
		},
		{
			MethodName: "CreateSLA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateSLAReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).CreateSLA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_CreateSLA_info)
				}
				if interceptor == nil {
					return _Dop_CreateSLA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/CreateSLA",
				}
				return interceptor(ctx, in, info, _Dop_CreateSLA_Handler)
			},
		},
		{
			MethodName: "DeleteAPIAssetVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAPIAssetVersion_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteAPIAssetVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteAPIAssetVersion_info)
				}
				if interceptor == nil {
					return _Dop_DeleteAPIAssetVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteAPIAssetVersion",
				}
				return interceptor(ctx, in, info, _Dop_DeleteAPIAssetVersion_Handler)
			},
		},
		{
			MethodName: "DeleteAPIAssets",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAPIAssets_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteAPIAssets(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteAPIAssets_info)
				}
				if interceptor == nil {
					return _Dop_DeleteAPIAssets_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteAPIAssets",
				}
				return interceptor(ctx, in, info, _Dop_DeleteAPIAssets_Handler)
			},
		},
		{
			MethodName: "DeleteAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAccess_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteAccess_info)
				}
				if interceptor == nil {
					return _Dop_DeleteAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteAccess",
				}
				return interceptor(ctx, in, info, _Dop_DeleteAccess_Handler)
			},
		},
		{
			MethodName: "DeleteClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteClient_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteClient_info)
				}
				if interceptor == nil {
					return _Dop_DeleteClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteClient",
				}
				return interceptor(ctx, in, info, _Dop_DeleteClient_Handler)
			},
		},
		{
			MethodName: "DeleteContract",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetContractReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteContract(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteContract_info)
				}
				if interceptor == nil {
					return _Dop_DeleteContract_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteContract",
				}
				return interceptor(ctx, in, info, _Dop_DeleteContract_Handler)
			},
		},
		{
			MethodName: "DeleteSLA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteSLAReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).DeleteSLA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_DeleteSLA_info)
				}
				if interceptor == nil {
					return _Dop_DeleteSLA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/DeleteSLA",
				}
				return interceptor(ctx, in, info, _Dop_DeleteSLA_Handler)
			},
		},
		{
			MethodName: "ExportSpec",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DownloadSpecTextReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ExportSpec(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ExportSpec_info)
				}
				if interceptor == nil {
					return _Dop_ExportSpec_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ExportSpec",
				}
				return interceptor(ctx, in, info, _Dop_ExportSpec_Handler)
			},
		},
		{
			MethodName: "FileTreeCreateNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APIDocCreateNodeReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeCreateNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeCreateNode_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeCreateNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeCreateNode",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeCreateNode_Handler)
			},
		},
		{
			MethodName: "FileTreeDeleteNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FileTreeDeleteNode_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeDeleteNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeDeleteNode_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeDeleteNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeDeleteNode",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeDeleteNode_Handler)
			},
		},
		{
			MethodName: "FileTreeGetNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FileTreeGetNode_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeGetNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeGetNode_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeGetNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeGetNode",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeGetNode_Handler)
			},
		},
		{
			MethodName: "FileTreeListNodes",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FileTreeListNodes_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeListNodes(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeListNodes_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeListNodes_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeListNodes",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeListNodes_Handler)
			},
		},
		{
			MethodName: "FileTreeMvCpNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FileTreeMvCpNode_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeMvCpNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeMvCpNode_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeMvCpNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeMvCpNode",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeMvCpNode_Handler)
			},
		},
		{
			MethodName: "FileTreeUpdateNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FileTreeUpdateNode_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).FileTreeUpdateNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_FileTreeUpdateNode_info)
				}
				if interceptor == nil {
					return _Dop_FileTreeUpdateNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/FileTreeUpdateNode",
				}
				return interceptor(ctx, in, info, _Dop_FileTreeUpdateNode_Handler)
			},
		},
		{
			MethodName: "GetAPIAssetVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAPIAssetVersionReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetAPIAssetVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetAPIAssetVersion_info)
				}
				if interceptor == nil {
					return _Dop_GetAPIAssetVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetAPIAssetVersion",
				}
				return interceptor(ctx, in, info, _Dop_GetAPIAssetVersion_Handler)
			},
		},
		{
			MethodName: "GetAPIAssets",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAPIAssetReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetAPIAssets(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetAPIAssets_info)
				}
				if interceptor == nil {
					return _Dop_GetAPIAssets_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetAPIAssets",
				}
				return interceptor(ctx, in, info, _Dop_GetAPIAssets_Handler)
			},
		},
		{
			MethodName: "GetAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAccess_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetAccess_info)
				}
				if interceptor == nil {
					return _Dop_GetAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetAccess",
				}
				return interceptor(ctx, in, info, _Dop_GetAccess_Handler)
			},
		},
		{
			MethodName: "GetClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetClientReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetClient_info)
				}
				if interceptor == nil {
					return _Dop_GetClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetClient",
				}
				return interceptor(ctx, in, info, _Dop_GetClient_Handler)
			},
		},
		{
			MethodName: "GetContract",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetContractReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetContract(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetContract_info)
				}
				if interceptor == nil {
					return _Dop_GetContract_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetContract",
				}
				return interceptor(ctx, in, info, _Dop_GetContract_Handler)
			},
		},
		{
			MethodName: "GetInstantiations",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetInstantiationsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetInstantiations(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetInstantiations_info)
				}
				if interceptor == nil {
					return _Dop_GetInstantiations_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetInstantiations",
				}
				return interceptor(ctx, in, info, _Dop_GetInstantiations_Handler)
			},
		},
		{
			MethodName: "GetOperation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOperationReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetOperation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetOperation_info)
				}
				if interceptor == nil {
					return _Dop_GetOperation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetOperation",
				}
				return interceptor(ctx, in, info, _Dop_GetOperation_Handler)
			},
		},
		{
			MethodName: "GetSLA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListSLAsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).GetSLA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_GetSLA_info)
				}
				if interceptor == nil {
					return _Dop_GetSLA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/GetSLA",
				}
				return interceptor(ctx, in, info, _Dop_GetSLA_Handler)
			},
		},
		{
			MethodName: "ListAPIAssetVersions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAPIAssetVersionReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListAPIAssetVersions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListAPIAssetVersions_info)
				}
				if interceptor == nil {
					return _Dop_ListAPIAssetVersions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListAPIAssetVersions",
				}
				return interceptor(ctx, in, info, _Dop_ListAPIAssetVersions_Handler)
			},
		},
		{
			MethodName: "ListAPIGateways",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListAPIGatewaysReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListAPIGateways(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListAPIGateways_info)
				}
				if interceptor == nil {
					return _Dop_ListAPIGateways_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListAPIGateways",
				}
				return interceptor(ctx, in, info, _Dop_ListAPIGateways_Handler)
			},
		},
		{
			MethodName: "ListAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListAccessReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListAccess_info)
				}
				if interceptor == nil {
					return _Dop_ListAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListAccess",
				}
				return interceptor(ctx, in, info, _Dop_ListAccess_Handler)
			},
		},
		{
			MethodName: "ListContract",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListContractsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListContract(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListContract_info)
				}
				if interceptor == nil {
					return _Dop_ListContract_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListContract",
				}
				return interceptor(ctx, in, info, _Dop_ListContract_Handler)
			},
		},
		{
			MethodName: "ListContractRecords",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListContractRecordsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListContractRecords(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListContractRecords_info)
				}
				if interceptor == nil {
					return _Dop_ListContractRecords_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListContractRecords",
				}
				return interceptor(ctx, in, info, _Dop_ListContractRecords_Handler)
			},
		},
		{
			MethodName: "ListInstantiations",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListInstantiations_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListInstantiations(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListInstantiations_info)
				}
				if interceptor == nil {
					return _Dop_ListInstantiations_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListInstantiations",
				}
				return interceptor(ctx, in, info, _Dop_ListInstantiations_Handler)
			},
		},
		{
			MethodName: "ListMyClients",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListMyClientsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListMyClients(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListMyClients_info)
				}
				if interceptor == nil {
					return _Dop_ListMyClients_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListMyClients",
				}
				return interceptor(ctx, in, info, _Dop_ListMyClients_Handler)
			},
		},
		{
			MethodName: "ListProjectAPIGateways",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListProjectAPIGatewaysReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListProjectAPIGateways(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListProjectAPIGateways_info)
				}
				if interceptor == nil {
					return _Dop_ListProjectAPIGateways_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListProjectAPIGateways",
				}
				return interceptor(ctx, in, info, _Dop_ListProjectAPIGateways_Handler)
			},
		},
		{
			MethodName: "ListRuntimeServices",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListRuntimeServices_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListRuntimeServices(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListRuntimeServices_info)
				}
				if interceptor == nil {
					return _Dop_ListRuntimeServices_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListRuntimeServices",
				}
				return interceptor(ctx, in, info, _Dop_ListRuntimeServices_Handler)
			},
		},
		{
			MethodName: "ListSLA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetSLAReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListSLA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListSLA_info)
				}
				if interceptor == nil {
					return _Dop_ListSLA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListSLA",
				}
				return interceptor(ctx, in, info, _Dop_ListSLA_Handler)
			},
		},
		{
			MethodName: "ListSwaggerVersionClients",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListSwaggerVersionClientsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListSwaggerVersionClients(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListSwaggerVersionClients_info)
				}
				if interceptor == nil {
					return _Dop_ListSwaggerVersionClients_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListSwaggerVersionClients",
				}
				return interceptor(ctx, in, info, _Dop_ListSwaggerVersionClients_Handler)
			},
		},
		{
			MethodName: "ListSwaggerVersions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListSwaggerVersionsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ListSwaggerVersions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ListSwaggerVersions_info)
				}
				if interceptor == nil {
					return _Dop_ListSwaggerVersions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ListSwaggerVersions",
				}
				return interceptor(ctx, in, info, _Dop_ListSwaggerVersions_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_CERTIFICATION_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_CERTIFICATION_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_CERTIFICATION_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_CERTIFICATION_GET_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_CERTIFICATION_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_CERTIFICATION_GET",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_CERTIFICATION_GET_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_CHANNELS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublishItemStatisticsDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_CHANNELS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_CHANNELS_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_CHANNELS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_CHANNELS",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_CHANNELS_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_ERR_EFFACTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_ERR_EFFACTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_ERR_EFFACTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_ERR_EFFACTS_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_ERR_EFFACTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_EFFACTS",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_ERR_EFFACTS_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_ERR_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_ERR_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_ERR_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_ERR_LIST_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_ERR_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_LIST",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_ERR_LIST_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_ERR_RATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_ERR_RATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_ERR_RATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_ERR_RATE_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_ERR_RATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_RATE",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_ERR_RATE_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_ERR_TREND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_ERR_TREND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_ERR_TREND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_ERR_TREND_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_ERR_TREND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_ERR_TREND",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_ERR_TREND_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_METIRCS_COMMON",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_METIRCS_COMMON_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_METIRCS_COMMON(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_METIRCS_COMMON_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_METIRCS_COMMON_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_METIRCS_COMMON",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_METIRCS_COMMON_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_STATISTICS_TREND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_STATISTICS_TREND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_STATISTICS_TREND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_STATISTICS_TREND_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_STATISTICS_TREND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_STATISTICS_TREND",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_STATISTICS_TREND_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_USERS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUBLISH_ITEM_USERS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_USERS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_USERS_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_USERS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_USERS",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_USERS_Handler)
			},
		},
		{
			MethodName: "PUBLISH_ITEM_VERSION_INFO_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublishItemStatisticsDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PUBLISH_ITEM_VERSION_INFO_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PUBLISH_ITEM_VERSION_INFO_LIST_info)
				}
				if interceptor == nil {
					return _Dop_PUBLISH_ITEM_VERSION_INFO_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PUBLISH_ITEM_VERSION_INFO_LIST",
				}
				return interceptor(ctx, in, info, _Dop_PUBLISH_ITEM_VERSION_INFO_LIST_Handler)
			},
		},
		{
			MethodName: "PagingAPIAssets",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PagingAPIAssetsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).PagingAPIAssets(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_PagingAPIAssets_info)
				}
				if interceptor == nil {
					return _Dop_PagingAPIAssets_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/PagingAPIAssets",
				}
				return interceptor(ctx, in, info, _Dop_PagingAPIAssets_Handler)
			},
		},
		{
			MethodName: "ProjectPackageExport",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExportProjectPackageRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectPackageExport(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectPackageExport_info)
				}
				if interceptor == nil {
					return _Dop_ProjectPackageExport_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectPackageExport",
				}
				return interceptor(ctx, in, info, _Dop_ProjectPackageExport_Handler)
			},
		},
		{
			MethodName: "ProjectPackageImport",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImportProjectPackageRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectPackageImport(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectPackageImport_info)
				}
				if interceptor == nil {
					return _Dop_ProjectPackageImport_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectPackageImport",
				}
				return interceptor(ctx, in, info, _Dop_ProjectPackageImport_Handler)
			},
		},
		{
			MethodName: "ProjectPackageParse",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectPackageParse_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectPackageParse(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectPackageParse_info)
				}
				if interceptor == nil {
					return _Dop_ProjectPackageParse_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectPackageParse",
				}
				return interceptor(ctx, in, info, _Dop_ProjectPackageParse_Handler)
			},
		},
		{
			MethodName: "ProjectTemplateExport",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExportProjectTemplateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectTemplateExport(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectTemplateExport_info)
				}
				if interceptor == nil {
					return _Dop_ProjectTemplateExport_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectTemplateExport",
				}
				return interceptor(ctx, in, info, _Dop_ProjectTemplateExport_Handler)
			},
		},
		{
			MethodName: "ProjectTemplateImport",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImportProjectTemplateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectTemplateImport(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectTemplateImport_info)
				}
				if interceptor == nil {
					return _Dop_ProjectTemplateImport_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectTemplateImport",
				}
				return interceptor(ctx, in, info, _Dop_ProjectTemplateImport_Handler)
			},
		},
		{
			MethodName: "ProjectTemplateParse",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImportProjectTemplateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProjectTemplateParse(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProjectTemplateParse_info)
				}
				if interceptor == nil {
					return _Dop_ProjectTemplateParse_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProjectTemplateParse",
				}
				return interceptor(ctx, in, info, _Dop_ProjectTemplateParse_Handler)
			},
		},
		{
			MethodName: "ProxyMetrics",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProxyMetrics_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ProxyMetrics(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ProxyMetrics_info)
				}
				if interceptor == nil {
					return _Dop_ProxyMetrics_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ProxyMetrics",
				}
				return interceptor(ctx, in, info, _Dop_ProxyMetrics_Handler)
			},
		},
		{
			MethodName: "QA_APITESTS_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApiTestCancelRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_APITESTS_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_APITESTS_CANCEL_info)
				}
				if interceptor == nil {
					return _Dop_QA_APITESTS_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_APITESTS_CANCEL",
				}
				return interceptor(ctx, in, info, _Dop_QA_APITESTS_CANCEL_Handler)
			},
		},
		{
			MethodName: "QA_APITESTS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_APITESTS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_APITESTS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_APITESTS_GET_info)
				}
				if interceptor == nil {
					return _Dop_QA_APITESTS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_APITESTS_GET",
				}
				return interceptor(ctx, in, info, _Dop_QA_APITESTS_GET_Handler)
			},
		},
		{
			MethodName: "QA_APITESTS_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApiTestsUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_APITESTS_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_APITESTS_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_QA_APITESTS_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_APITESTS_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_QA_APITESTS_UPDATE_Handler)
			},
		},
		{
			MethodName: "QA_AUTOTEST_SPACE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_AUTOTEST_SPACE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_AUTOTEST_SPACE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_AUTOTEST_SPACE_GET_info)
				}
				if interceptor == nil {
					return _Dop_QA_AUTOTEST_SPACE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_AUTOTEST_SPACE_GET",
				}
				return interceptor(ctx, in, info, _Dop_QA_AUTOTEST_SPACE_GET_Handler)
			},
		},
		{
			MethodName: "QA_PIPELINE_TASK_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_PIPELINE_TASK_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_PIPELINE_TASK_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_PIPELINE_TASK_LOGS_info)
				}
				if interceptor == nil {
					return _Dop_QA_PIPELINE_TASK_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_PIPELINE_TASK_LOGS",
				}
				return interceptor(ctx, in, info, _Dop_QA_PIPELINE_TASK_LOGS_Handler)
			},
		},
		{
			MethodName: "QA_RECORDS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_RECORDS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_RECORDS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_RECORDS_GET_info)
				}
				if interceptor == nil {
					return _Dop_QA_RECORDS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_RECORDS_GET",
				}
				return interceptor(ctx, in, info, _Dop_QA_RECORDS_GET_Handler)
			},
		},
		{
			MethodName: "QA_RECORDS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListTestFileRecordsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_RECORDS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_RECORDS_LIST_info)
				}
				if interceptor == nil {
					return _Dop_QA_RECORDS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_RECORDS_LIST",
				}
				return interceptor(ctx, in, info, _Dop_QA_RECORDS_LIST_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_GET_CREDENTIAL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_SONAR_GET_CREDENTIAL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_GET_CREDENTIAL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_GET_CREDENTIAL_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_GET_CREDENTIAL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_GET_CREDENTIAL",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_GET_CREDENTIAL_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_ISSUES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_SONAR_ISSUES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_ISSUES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_ISSUES_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_ISSUES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_ISSUES",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_ISSUES_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_BATCH_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesBatchDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_BATCH_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_BATCH_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_BATCH_DELETE_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_BATCH_INSERT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesBatchInsertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_BATCH_INSERT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_BATCH_INSERT",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_BATCH_INSERT_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_DELETE_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_SONAR_METRIC_RULES_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_GET_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_GET",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_GET_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_PAGING",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_PAGING(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_PAGING_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_PAGING_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_PAGING",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_PAGING_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_QUERY_DEFINITION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesDefinitionListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_QUERY_DEFINITION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_QUERY_DEFINITION",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_QUERY_DEFINITION_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_QUERY_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_QUERY_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_QUERY_LIST",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_QUERY_LIST_Handler)
			},
		},
		{
			MethodName: "QA_SONAR_METRIC_RULES_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SonarMetricRulesUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_SONAR_METRIC_RULES_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_SONAR_METRIC_RULES_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_QA_SONAR_METRIC_RULES_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_SONAR_METRIC_RULES_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_QA_SONAR_METRIC_RULES_UPDATE_Handler)
			},
		},
		{
			MethodName: "QA_TESTENV_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_TESTENV_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTENV_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTENV_CREATE_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTENV_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTENV_CREATE",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTENV_CREATE_Handler)
			},
		},
		{
			MethodName: "QA_TESTENV_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_TESTENV_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTENV_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTENV_DELETE_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTENV_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTENV_DELETE",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTENV_DELETE_Handler)
			},
		},
		{
			MethodName: "QA_TESTENV_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_TESTENV_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTENV_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTENV_GET_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTENV_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTENV_GET",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTENV_GET_Handler)
			},
		},
		{
			MethodName: "QA_TESTENV_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_TESTENV_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTENV_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTENV_LIST_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTENV_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTENV_LIST",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTENV_LIST_Handler)
			},
		},
		{
			MethodName: "QA_TESTENV_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APITestEnvUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTENV_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTENV_UPDATE_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTENV_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTENV_UPDATE",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTENV_UPDATE_Handler)
			},
		},
		{
			MethodName: "QA_TESTPLAN_PIPELINE_DETAIL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_TESTPLAN_PIPELINE_DETAIL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).QA_TESTPLAN_PIPELINE_DETAIL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_QA_TESTPLAN_PIPELINE_DETAIL_info)
				}
				if interceptor == nil {
					return _Dop_QA_TESTPLAN_PIPELINE_DETAIL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/QA_TESTPLAN_PIPELINE_DETAIL",
				}
				return interceptor(ctx, in, info, _Dop_QA_TESTPLAN_PIPELINE_DETAIL_Handler)
			},
		},
		{
			MethodName: "SPOT_APITESTS_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_APITESTS_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).SPOT_APITESTS_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_SPOT_APITESTS_LOGS_info)
				}
				if interceptor == nil {
					return _Dop_SPOT_APITESTS_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/SPOT_APITESTS_LOGS",
				}
				return interceptor(ctx, in, info, _Dop_SPOT_APITESTS_LOGS_Handler)
			},
		},
		{
			MethodName: "SPOT_APITESTS_LOGS_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_APITESTS_LOGS_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).SPOT_APITESTS_LOGS_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_SPOT_APITESTS_LOGS_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Dop_SPOT_APITESTS_LOGS_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/SPOT_APITESTS_LOGS_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Dop_SPOT_APITESTS_LOGS_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "SearchOperations",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SearchOperationsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).SearchOperations(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_SearchOperations_info)
				}
				if interceptor == nil {
					return _Dop_SearchOperations_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/SearchOperations",
				}
				return interceptor(ctx, in, info, _Dop_SearchOperations_Handler)
			},
		},
		{
			MethodName: "UpdateAPIAssset",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAPIAssetReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateAPIAssset(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateAPIAssset_info)
				}
				if interceptor == nil {
					return _Dop_UpdateAPIAssset_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateAPIAssset",
				}
				return interceptor(ctx, in, info, _Dop_UpdateAPIAssset_Handler)
			},
		},
		{
			MethodName: "UpdateAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAccess_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateAccess_info)
				}
				if interceptor == nil {
					return _Dop_UpdateAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateAccess",
				}
				return interceptor(ctx, in, info, _Dop_UpdateAccess_Handler)
			},
		},
		{
			MethodName: "UpdateAssetVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAssetVersionReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateAssetVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateAssetVersion_info)
				}
				if interceptor == nil {
					return _Dop_UpdateAssetVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateAssetVersion",
				}
				return interceptor(ctx, in, info, _Dop_UpdateAssetVersion_Handler)
			},
		},
		{
			MethodName: "UpdateClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateClientReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateClient_info)
				}
				if interceptor == nil {
					return _Dop_UpdateClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateClient",
				}
				return interceptor(ctx, in, info, _Dop_UpdateClient_Handler)
			},
		},
		{
			MethodName: "UpdateContract",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateContract_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateContract(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateContract_info)
				}
				if interceptor == nil {
					return _Dop_UpdateContract_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateContract",
				}
				return interceptor(ctx, in, info, _Dop_UpdateContract_Handler)
			},
		},
		{
			MethodName: "UpdateInstantiation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateInstantiationReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateInstantiation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateInstantiation_info)
				}
				if interceptor == nil {
					return _Dop_UpdateInstantiation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateInstantiation",
				}
				return interceptor(ctx, in, info, _Dop_UpdateInstantiation_Handler)
			},
		},
		{
			MethodName: "UpdateSLA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateSLAReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).UpdateSLA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_UpdateSLA_info)
				}
				if interceptor == nil {
					return _Dop_UpdateSLA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/UpdateSLA",
				}
				return interceptor(ctx, in, info, _Dop_UpdateSLA_Handler)
			},
		},
		{
			MethodName: "ValidateSwagger",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ValidateSwagger_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DopServer).ValidateSwagger(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dop_ValidateSwagger_info)
				}
				if interceptor == nil {
					return _Dop_ValidateSwagger_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dop.dop/ValidateSwagger",
				}
				return interceptor(ctx, in, info, _Dop_ValidateSwagger_Handler)
			},
		},
	}
	return &serviceDesc
}
