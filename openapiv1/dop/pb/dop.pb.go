// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: dop.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AADAPTOR_CICD_CRON_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AADAPTOR_CICD_CRON_LIST_Request) Reset() {
	*x = AADAPTOR_CICD_CRON_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AADAPTOR_CICD_CRON_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AADAPTOR_CICD_CRON_LIST_Request) ProtoMessage() {}

func (x *AADAPTOR_CICD_CRON_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AADAPTOR_CICD_CRON_LIST_Request.ProtoReflect.Descriptor instead.
func (*AADAPTOR_CICD_CRON_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{0}
}

type ADAPTOR_CICD_BRANCHES_ALL_VALID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) Reset() {
	*x = ADAPTOR_CICD_BRANCHES_ALL_VALID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_BRANCHES_ALL_VALID_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{1}
}

type ADAPTOR_CICD_CANCEL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_CANCEL_Request) Reset() {
	*x = ADAPTOR_CICD_CANCEL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CANCEL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CANCEL_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CANCEL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CANCEL_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CANCEL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{2}
}

func (x *ADAPTOR_CICD_CANCEL_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type ADAPTOR_CICD_CONFIG_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_CONFIG_GET_Request) Reset() {
	*x = ADAPTOR_CICD_CONFIG_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CONFIG_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CONFIG_GET_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CONFIG_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CONFIG_GET_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CONFIG_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{3}
}

type ADAPTOR_CICD_CONFIG_NAMESPACES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) Reset() {
	*x = ADAPTOR_CICD_CONFIG_NAMESPACES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CONFIG_NAMESPACES_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CONFIG_NAMESPACES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CONFIG_NAMESPACES_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CONFIG_NAMESPACES_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{4}
}

type ADAPTOR_CICD_CONFIG_WORKSPACES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) Reset() {
	*x = ADAPTOR_CICD_CONFIG_WORKSPACES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CONFIG_WORKSPACES_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CONFIG_WORKSPACES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CONFIG_WORKSPACES_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CONFIG_WORKSPACES_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{5}
}

type ADAPTOR_CICD_CRON_START_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID string `protobuf:"bytes,1,opt,name=cronID,proto3" json:"cronID,omitempty"` // generated from path variable: cronID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_CRON_START_Request) Reset() {
	*x = ADAPTOR_CICD_CRON_START_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CRON_START_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CRON_START_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CRON_START_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CRON_START_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CRON_START_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{6}
}

func (x *ADAPTOR_CICD_CRON_START_Request) GetCronID() string {
	if x != nil {
		return x.CronID
	}
	return ""
}

type ADAPTOR_CICD_CRON_STOP_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID string `protobuf:"bytes,1,opt,name=cronID,proto3" json:"cronID,omitempty"` // generated from path variable: cronID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_CRON_STOP_Request) Reset() {
	*x = ADAPTOR_CICD_CRON_STOP_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_CRON_STOP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_CRON_STOP_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_CRON_STOP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_CRON_STOP_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_CRON_STOP_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{7}
}

func (x *ADAPTOR_CICD_CRON_STOP_Request) GetCronID() string {
	if x != nil {
		return x.CronID
	}
	return ""
}

type ADAPTOR_CICD_FETCH_PIPELINE_ID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) Reset() {
	*x = ADAPTOR_CICD_FETCH_PIPELINE_ID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_FETCH_PIPELINE_ID_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{8}
}

type ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) Reset() {
	*x = ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{9}
}

type ADAPTOR_CICD_GET_BRANCH_RULE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelineid string `protobuf:"bytes,1,opt,name=pipelineid,proto3" json:"pipelineid,omitempty"` // generated from path variable: pipelineid. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_GET_BRANCH_RULE_Request) Reset() {
	*x = ADAPTOR_CICD_GET_BRANCH_RULE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_GET_BRANCH_RULE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_GET_BRANCH_RULE_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_GET_BRANCH_RULE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_GET_BRANCH_RULE_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_GET_BRANCH_RULE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{10}
}

func (x *ADAPTOR_CICD_GET_BRANCH_RULE_Request) GetPipelineid() string {
	if x != nil {
		return x.Pipelineid
	}
	return ""
}

type ADAPTOR_CICD_PIPELINE_DETAIL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_PIPELINE_DETAIL_Request) Reset() {
	*x = ADAPTOR_CICD_PIPELINE_DETAIL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_PIPELINE_DETAIL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_PIPELINE_DETAIL_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_PIPELINE_DETAIL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_PIPELINE_DETAIL_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_PIPELINE_DETAIL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{11}
}

type ADAPTOR_CICD_PROJECT_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_PROJECT_CREATE_Request) Reset() {
	*x = ADAPTOR_CICD_PROJECT_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_PROJECT_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_PROJECT_CREATE_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_PROJECT_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_PROJECT_CREATE_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_PROJECT_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{12}
}

type ADAPTOR_CICD_PROJECT_DETAIL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ADAPTOR_CICD_PROJECT_DETAIL_Request) Reset() {
	*x = ADAPTOR_CICD_PROJECT_DETAIL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_PROJECT_DETAIL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_PROJECT_DETAIL_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_PROJECT_DETAIL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_PROJECT_DETAIL_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_PROJECT_DETAIL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{13}
}

type ADAPTOR_CICD_RERUN_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_RERUN_Request) Reset() {
	*x = ADAPTOR_CICD_RERUN_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_RERUN_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_RERUN_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_RERUN_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_RERUN_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_RERUN_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{14}
}

func (x *ADAPTOR_CICD_RERUN_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type ADAPTOR_CICD_RUN_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_RUN_Request) Reset() {
	*x = ADAPTOR_CICD_RUN_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_RUN_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_RUN_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_RUN_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_RUN_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_RUN_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{15}
}

func (x *ADAPTOR_CICD_RUN_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
	TaskID     string `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`         // generated from path variable: taskID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) Reset() {
	*x = ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{16}
}

func (x *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

func (x *ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type ADAPTOR_CICD_TASK_LOG_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
	TaskID     string `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`         // generated from path variable: taskID. You should change the proto type if necessary.
}

func (x *ADAPTOR_CICD_TASK_LOG_Request) Reset() {
	*x = ADAPTOR_CICD_TASK_LOG_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADAPTOR_CICD_TASK_LOG_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADAPTOR_CICD_TASK_LOG_Request) ProtoMessage() {}

func (x *ADAPTOR_CICD_TASK_LOG_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADAPTOR_CICD_TASK_LOG_Request.ProtoReflect.Descriptor instead.
func (*ADAPTOR_CICD_TASK_LOG_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{17}
}

func (x *ADAPTOR_CICD_TASK_LOG_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

func (x *ADAPTOR_CICD_TASK_LOG_Request) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type APIAssetCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID   string            `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"`
	AssetName string            `protobuf:"bytes,2,opt,name=assetName,proto3" json:"assetName,omitempty"`
	Desc      string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo      string            `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Source    string            `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Versions  []*structpb.Value `protobuf:"bytes,6,rep,name=versions,proto3" json:"versions,omitempty"`
	OrgID     uint64            `protobuf:"varint,7,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID uint64            `protobuf:"varint,8,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AppID     uint64            `protobuf:"varint,9,opt,name=appID,proto3" json:"appID,omitempty"`
}

func (x *APIAssetCreateRequest) Reset() {
	*x = APIAssetCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAssetCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAssetCreateRequest) ProtoMessage() {}

func (x *APIAssetCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAssetCreateRequest.ProtoReflect.Descriptor instead.
func (*APIAssetCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{18}
}

func (x *APIAssetCreateRequest) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *APIAssetCreateRequest) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *APIAssetCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *APIAssetCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *APIAssetCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *APIAssetCreateRequest) GetVersions() []*structpb.Value {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *APIAssetCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *APIAssetCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *APIAssetCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

type APIAssetGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *APIAssetGetResponse) Reset() {
	*x = APIAssetGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAssetGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAssetGetResponse) ProtoMessage() {}

func (x *APIAssetGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAssetGetResponse.ProtoReflect.Descriptor instead.
func (*APIAssetGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{19}
}

func (x *APIAssetGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type APIAssetPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List    []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	UserIDs []string          `protobuf:"bytes,3,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *APIAssetPagingResponse) Reset() {
	*x = APIAssetPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAssetPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAssetPagingResponse) ProtoMessage() {}

func (x *APIAssetPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAssetPagingResponse.ProtoReflect.Descriptor instead.
func (*APIAssetPagingResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{20}
}

func (x *APIAssetPagingResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *APIAssetPagingResponse) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *APIAssetPagingResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type APIAssetVersionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID            uint64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	APIAssetID       string            `protobuf:"bytes,2,opt,name=aPIAssetID,json=apiAssetID,proto3" json:"aPIAssetID,omitempty"`
	Major            uint64            `protobuf:"varint,3,opt,name=major,proto3" json:"major,omitempty"`
	Minor            uint64            `protobuf:"varint,4,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch            uint64            `protobuf:"varint,5,opt,name=patch,proto3" json:"patch,omitempty"`
	Desc             string            `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	SpecProtocol     string            `protobuf:"bytes,7,opt,name=specProtocol,proto3" json:"specProtocol,omitempty"`
	SpecDiceFileUUID string            `protobuf:"bytes,8,opt,name=specDiceFileUUID,proto3" json:"specDiceFileUUID,omitempty"`
	Spec             string            `protobuf:"bytes,9,opt,name=spec,proto3" json:"spec,omitempty"`
	Inode            string            `protobuf:"bytes,10,opt,name=inode,proto3" json:"inode,omitempty"`
	Instances        []*structpb.Value `protobuf:"bytes,11,rep,name=instances,proto3" json:"instances,omitempty"`
	Source           string            `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	AppID            uint64            `protobuf:"varint,13,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch           string            `protobuf:"bytes,14,opt,name=branch,proto3" json:"branch,omitempty"`
	ServiceName      string            `protobuf:"bytes,15,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	AssetID          string            `protobuf:"bytes,16,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *APIAssetVersionCreateRequest) Reset() {
	*x = APIAssetVersionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAssetVersionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAssetVersionCreateRequest) ProtoMessage() {}

func (x *APIAssetVersionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAssetVersionCreateRequest.ProtoReflect.Descriptor instead.
func (*APIAssetVersionCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{21}
}

func (x *APIAssetVersionCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *APIAssetVersionCreateRequest) GetAPIAssetID() string {
	if x != nil {
		return x.APIAssetID
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetMajor() uint64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *APIAssetVersionCreateRequest) GetMinor() uint64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *APIAssetVersionCreateRequest) GetPatch() uint64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *APIAssetVersionCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetSpecProtocol() string {
	if x != nil {
		return x.SpecProtocol
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetSpecDiceFileUUID() string {
	if x != nil {
		return x.SpecDiceFileUUID
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetInstances() []*structpb.Value {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *APIAssetVersionCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *APIAssetVersionCreateRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *APIAssetVersionCreateRequest) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type APIAssetVersionInstanceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceType string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	RuntimeID    uint64 `protobuf:"varint,3,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	ServiceName  string `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	EndpointID   string `protobuf:"bytes,5,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
	URL          string `protobuf:"bytes,6,opt,name=uRL,json=url,proto3" json:"uRL,omitempty"`
	AssetID      string `protobuf:"bytes,7,opt,name=assetID,json=-,proto3" json:"assetID,omitempty"`
	VersionID    uint64 `protobuf:"varint,8,opt,name=versionID,json=-,proto3" json:"versionID,omitempty"`
}

func (x *APIAssetVersionInstanceCreateRequest) Reset() {
	*x = APIAssetVersionInstanceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAssetVersionInstanceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAssetVersionInstanceCreateRequest) ProtoMessage() {}

func (x *APIAssetVersionInstanceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAssetVersionInstanceCreateRequest.ProtoReflect.Descriptor instead.
func (*APIAssetVersionInstanceCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{22}
}

func (x *APIAssetVersionInstanceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *APIAssetVersionInstanceCreateRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *APIAssetVersionInstanceCreateRequest) GetVersionID() uint64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

type APIDocCreateNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	TreeName  string          `protobuf:"bytes,5,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
}

func (x *APIDocCreateNodeReq) Reset() {
	*x = APIDocCreateNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIDocCreateNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIDocCreateNodeReq) ProtoMessage() {}

func (x *APIDocCreateNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIDocCreateNodeReq.ProtoReflect.Descriptor instead.
func (*APIDocCreateNodeReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{23}
}

func (x *APIDocCreateNodeReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *APIDocCreateNodeReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *APIDocCreateNodeReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *APIDocCreateNodeReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *APIDocCreateNodeReq) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

type APIDocWebsocket_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"` // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *APIDocWebsocket_Request) Reset() {
	*x = APIDocWebsocket_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIDocWebsocket_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIDocWebsocket_Request) ProtoMessage() {}

func (x *APIDocWebsocket_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIDocWebsocket_Request.ProtoReflect.Descriptor instead.
func (*APIDocWebsocket_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{24}
}

func (x *APIDocWebsocket_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type APITestEnvCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APITestEnvData *structpb.Value `protobuf:"bytes,1,opt,name=aPITestEnvData,proto3" json:"aPITestEnvData,omitempty"`
}

func (x *APITestEnvCreateRequest) Reset() {
	*x = APITestEnvCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvCreateRequest) ProtoMessage() {}

func (x *APITestEnvCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvCreateRequest.ProtoReflect.Descriptor instead.
func (*APITestEnvCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{25}
}

func (x *APITestEnvCreateRequest) GetAPITestEnvData() *structpb.Value {
	if x != nil {
		return x.APITestEnvData
	}
	return nil
}

type APITestEnvData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64                      `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	EnvID   int64                      `protobuf:"varint,2,opt,name=envID,proto3" json:"envID,omitempty"`
	EnvType string                     `protobuf:"bytes,3,opt,name=envType,proto3" json:"envType,omitempty"`
	Name    string                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Domain  string                     `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	Header  map[string]string          `protobuf:"bytes,6,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Global  map[string]*structpb.Value `protobuf:"bytes,7,rep,name=global,proto3" json:"global,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *APITestEnvData) Reset() {
	*x = APITestEnvData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvData) ProtoMessage() {}

func (x *APITestEnvData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvData.ProtoReflect.Descriptor instead.
func (*APITestEnvData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{26}
}

func (x *APITestEnvData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *APITestEnvData) GetEnvID() int64 {
	if x != nil {
		return x.EnvID
	}
	return 0
}

func (x *APITestEnvData) GetEnvType() string {
	if x != nil {
		return x.EnvType
	}
	return ""
}

func (x *APITestEnvData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITestEnvData) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *APITestEnvData) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *APITestEnvData) GetGlobal() map[string]*structpb.Value {
	if x != nil {
		return x.Global
	}
	return nil
}

type APITestEnvDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *APITestEnvDeleteResponse) Reset() {
	*x = APITestEnvDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvDeleteResponse) ProtoMessage() {}

func (x *APITestEnvDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvDeleteResponse.ProtoReflect.Descriptor instead.
func (*APITestEnvDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{27}
}

func (x *APITestEnvDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type APITestEnvGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *APITestEnvGetResponse) Reset() {
	*x = APITestEnvGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvGetResponse) ProtoMessage() {}

func (x *APITestEnvGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvGetResponse.ProtoReflect.Descriptor instead.
func (*APITestEnvGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{28}
}

func (x *APITestEnvGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type APITestEnvListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *APITestEnvListResponse) Reset() {
	*x = APITestEnvListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvListResponse) ProtoMessage() {}

func (x *APITestEnvListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvListResponse.ProtoReflect.Descriptor instead.
func (*APITestEnvListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{29}
}

func (x *APITestEnvListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type APITestEnvUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APITestEnvData *structpb.Value `protobuf:"bytes,1,opt,name=aPITestEnvData,proto3" json:"aPITestEnvData,omitempty"`
	Id             string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APITestEnvUpdateRequest) Reset() {
	*x = APITestEnvUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvUpdateRequest) ProtoMessage() {}

func (x *APITestEnvUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvUpdateRequest.ProtoReflect.Descriptor instead.
func (*APITestEnvUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{30}
}

func (x *APITestEnvUpdateRequest) GetAPITestEnvData() *structpb.Value {
	if x != nil {
		return x.APITestEnvData
	}
	return nil
}

func (x *APITestEnvUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APITestEnvUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *APITestEnvUpdateResponse) Reset() {
	*x = APITestEnvUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestEnvUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestEnvUpdateResponse) ProtoMessage() {}

func (x *APITestEnvUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestEnvUpdateResponse.ProtoReflect.Descriptor instead.
func (*APITestEnvUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{31}
}

func (x *APITestEnvUpdateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type APITestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID       string            `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSecret   string            `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	APIs           []*structpb.Value `protobuf:"bytes,3,rep,name=aPIs,json=apis,proto3" json:"aPIs,omitempty"`
	AssetID        string            `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string            `protobuf:"bytes,5,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
}

func (x *APITestReq) Reset() {
	*x = APITestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestReq) ProtoMessage() {}

func (x *APITestReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestReq.ProtoReflect.Descriptor instead.
func (*APITestReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{32}
}

func (x *APITestReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *APITestReq) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *APITestReq) GetAPIs() []*structpb.Value {
	if x != nil {
		return x.APIs
	}
	return nil
}

func (x *APITestReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *APITestReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

type APITestsAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectTestEnvID int64             `protobuf:"varint,1,opt,name=projectTestEnvID,proto3" json:"projectTestEnvID,omitempty"`
	UsecaseTestEnvID int64             `protobuf:"varint,2,opt,name=usecaseTestEnvID,proto3" json:"usecaseTestEnvID,omitempty"`
	APIs             []*structpb.Value `protobuf:"bytes,3,rep,name=aPIs,json=apis,proto3" json:"aPIs,omitempty"`
}

func (x *APITestsAttemptRequest) Reset() {
	*x = APITestsAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestsAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestsAttemptRequest) ProtoMessage() {}

func (x *APITestsAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestsAttemptRequest.ProtoReflect.Descriptor instead.
func (*APITestsAttemptRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{33}
}

func (x *APITestsAttemptRequest) GetProjectTestEnvID() int64 {
	if x != nil {
		return x.ProjectTestEnvID
	}
	return 0
}

func (x *APITestsAttemptRequest) GetUsecaseTestEnvID() int64 {
	if x != nil {
		return x.UsecaseTestEnvID
	}
	return 0
}

func (x *APITestsAttemptRequest) GetAPIs() []*structpb.Value {
	if x != nil {
		return x.APIs
	}
	return nil
}

type APITestsAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *APITestsAttemptResponse) Reset() {
	*x = APITestsAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITestsAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITestsAttemptResponse) ProtoMessage() {}

func (x *APITestsAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITestsAttemptResponse.ProtoReflect.Descriptor instead.
func (*APITestsAttemptResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{34}
}

func (x *APITestsAttemptResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type APPLICATIONS_RESOURCES_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
}

func (x *APPLICATIONS_RESOURCES_LIST_Request) Reset() {
	*x = APPLICATIONS_RESOURCES_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APPLICATIONS_RESOURCES_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APPLICATIONS_RESOURCES_LIST_Request) ProtoMessage() {}

func (x *APPLICATIONS_RESOURCES_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APPLICATIONS_RESOURCES_LIST_Request.ProtoReflect.Descriptor instead.
func (*APPLICATIONS_RESOURCES_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{35}
}

func (x *APPLICATIONS_RESOURCES_LIST_Request) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type APP_PUBLISH_ITEM_RELATION_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"` // generated from path variable: application. You should change the proto type if necessary.
}

func (x *APP_PUBLISH_ITEM_RELATION_GET_Request) Reset() {
	*x = APP_PUBLISH_ITEM_RELATION_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APP_PUBLISH_ITEM_RELATION_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APP_PUBLISH_ITEM_RELATION_GET_Request) ProtoMessage() {}

func (x *APP_PUBLISH_ITEM_RELATION_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APP_PUBLISH_ITEM_RELATION_GET_Request.ProtoReflect.Descriptor instead.
func (*APP_PUBLISH_ITEM_RELATION_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{36}
}

func (x *APP_PUBLISH_ITEM_RELATION_GET_Request) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

type AndroidCertificateAutoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OU              string          `protobuf:"bytes,2,opt,name=oU,json=ou,proto3" json:"oU,omitempty"`
	Org             string          `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
	City            string          `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Province        string          `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	State           string          `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	DebugKeyStore   *structpb.Value `protobuf:"bytes,7,opt,name=debugKeyStore,proto3" json:"debugKeyStore,omitempty"`
	ReleaseKeyStore *structpb.Value `protobuf:"bytes,8,opt,name=releaseKeyStore,proto3" json:"releaseKeyStore,omitempty"`
}

func (x *AndroidCertificateAutoDTO) Reset() {
	*x = AndroidCertificateAutoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateAutoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateAutoDTO) ProtoMessage() {}

func (x *AndroidCertificateAutoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateAutoDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateAutoDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{37}
}

func (x *AndroidCertificateAutoDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetOU() string {
	if x != nil {
		return x.OU
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AndroidCertificateAutoDTO) GetDebugKeyStore() *structpb.Value {
	if x != nil {
		return x.DebugKeyStore
	}
	return nil
}

func (x *AndroidCertificateAutoDTO) GetReleaseKeyStore() *structpb.Value {
	if x != nil {
		return x.ReleaseKeyStore
	}
	return nil
}

type AndroidCertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsManualCreate bool            `protobuf:"varint,1,opt,name=isManualCreate,json=manualCreate,proto3" json:"isManualCreate,omitempty"`
	ManualInfo     *structpb.Value `protobuf:"bytes,2,opt,name=manualInfo,proto3" json:"manualInfo,omitempty"`
	AutoInfo       *structpb.Value `protobuf:"bytes,3,opt,name=autoInfo,proto3" json:"autoInfo,omitempty"`
}

func (x *AndroidCertificateDTO) Reset() {
	*x = AndroidCertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateDTO) ProtoMessage() {}

func (x *AndroidCertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{38}
}

func (x *AndroidCertificateDTO) GetIsManualCreate() bool {
	if x != nil {
		return x.IsManualCreate
	}
	return false
}

func (x *AndroidCertificateDTO) GetManualInfo() *structpb.Value {
	if x != nil {
		return x.ManualInfo
	}
	return nil
}

func (x *AndroidCertificateDTO) GetAutoInfo() *structpb.Value {
	if x != nil {
		return x.AutoInfo
	}
	return nil
}

type AndroidCertificateKeyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugKeyStoreFile    string `protobuf:"bytes,1,opt,name=debugKeyStoreFile,proto3" json:"debugKeyStoreFile,omitempty"`
	DebugKeyStoreAlias   string `protobuf:"bytes,2,opt,name=debugKeyStoreAlias,proto3" json:"debugKeyStoreAlias,omitempty"`
	DebugKeyPassword     string `protobuf:"bytes,3,opt,name=debugKeyPassword,proto3" json:"debugKeyPassword,omitempty"`
	DebugStorePassword   string `protobuf:"bytes,4,opt,name=debugStorePassword,proto3" json:"debugStorePassword,omitempty"`
	ReleaseKeyStoreFile  string `protobuf:"bytes,5,opt,name=releaseKeyStoreFile,proto3" json:"releaseKeyStoreFile,omitempty"`
	ReleaseKeyStoreAlias string `protobuf:"bytes,6,opt,name=releaseKeyStoreAlias,proto3" json:"releaseKeyStoreAlias,omitempty"`
	ReleaseKeyPassword   string `protobuf:"bytes,7,opt,name=releaseKeyPassword,proto3" json:"releaseKeyPassword,omitempty"`
	ReleaseStorePassword string `protobuf:"bytes,8,opt,name=releaseStorePassword,proto3" json:"releaseStorePassword,omitempty"`
}

func (x *AndroidCertificateKeyDTO) Reset() {
	*x = AndroidCertificateKeyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateKeyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateKeyDTO) ProtoMessage() {}

func (x *AndroidCertificateKeyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateKeyDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateKeyDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{39}
}

func (x *AndroidCertificateKeyDTO) GetDebugKeyStoreFile() string {
	if x != nil {
		return x.DebugKeyStoreFile
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetDebugKeyStoreAlias() string {
	if x != nil {
		return x.DebugKeyStoreAlias
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetDebugKeyPassword() string {
	if x != nil {
		return x.DebugKeyPassword
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetDebugStorePassword() string {
	if x != nil {
		return x.DebugStorePassword
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetReleaseKeyStoreFile() string {
	if x != nil {
		return x.ReleaseKeyStoreFile
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetReleaseKeyStoreAlias() string {
	if x != nil {
		return x.ReleaseKeyStoreAlias
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetReleaseKeyPassword() string {
	if x != nil {
		return x.ReleaseKeyPassword
	}
	return ""
}

func (x *AndroidCertificateKeyDTO) GetReleaseStorePassword() string {
	if x != nil {
		return x.ReleaseStorePassword
	}
	return ""
}

type AndroidCertificateKeyStoreDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias         string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	KeyPassword   string `protobuf:"bytes,2,opt,name=keyPassword,proto3" json:"keyPassword,omitempty"`
	StorePassword string `protobuf:"bytes,3,opt,name=storePassword,proto3" json:"storePassword,omitempty"`
}

func (x *AndroidCertificateKeyStoreDTO) Reset() {
	*x = AndroidCertificateKeyStoreDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateKeyStoreDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateKeyStoreDTO) ProtoMessage() {}

func (x *AndroidCertificateKeyStoreDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateKeyStoreDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateKeyStoreDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{40}
}

func (x *AndroidCertificateKeyStoreDTO) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AndroidCertificateKeyStoreDTO) GetKeyPassword() string {
	if x != nil {
		return x.KeyPassword
	}
	return ""
}

func (x *AndroidCertificateKeyStoreDTO) GetStorePassword() string {
	if x != nil {
		return x.StorePassword
	}
	return ""
}

type AndroidCertificateManualDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugKeyStore   *structpb.Value `protobuf:"bytes,1,opt,name=debugKeyStore,proto3" json:"debugKeyStore,omitempty"`
	ReleaseKeyStore *structpb.Value `protobuf:"bytes,2,opt,name=releaseKeyStore,proto3" json:"releaseKeyStore,omitempty"`
}

func (x *AndroidCertificateManualDTO) Reset() {
	*x = AndroidCertificateManualDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateManualDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateManualDTO) ProtoMessage() {}

func (x *AndroidCertificateManualDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateManualDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateManualDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{41}
}

func (x *AndroidCertificateManualDTO) GetDebugKeyStore() *structpb.Value {
	if x != nil {
		return x.DebugKeyStore
	}
	return nil
}

func (x *AndroidCertificateManualDTO) GetReleaseKeyStore() *structpb.Value {
	if x != nil {
		return x.ReleaseKeyStore
	}
	return nil
}

type AndroidCertificateManualKeyStoreDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateFileDTO            *structpb.Value `protobuf:"bytes,1,opt,name=certificateFileDTO,proto3" json:"certificateFileDTO,omitempty"`
	AndroidCertificateKeyStoreDTO *structpb.Value `protobuf:"bytes,2,opt,name=androidCertificateKeyStoreDTO,proto3" json:"androidCertificateKeyStoreDTO,omitempty"`
}

func (x *AndroidCertificateManualKeyStoreDTO) Reset() {
	*x = AndroidCertificateManualKeyStoreDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCertificateManualKeyStoreDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCertificateManualKeyStoreDTO) ProtoMessage() {}

func (x *AndroidCertificateManualKeyStoreDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCertificateManualKeyStoreDTO.ProtoReflect.Descriptor instead.
func (*AndroidCertificateManualKeyStoreDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{42}
}

func (x *AndroidCertificateManualKeyStoreDTO) GetCertificateFileDTO() *structpb.Value {
	if x != nil {
		return x.CertificateFileDTO
	}
	return nil
}

func (x *AndroidCertificateManualKeyStoreDTO) GetAndroidCertificateKeyStoreDTO() *structpb.Value {
	if x != nil {
		return x.AndroidCertificateKeyStoreDTO
	}
	return nil
}

type ApiTestCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,json=pipelineId,proto3" json:"pipelineID,omitempty"`
}

func (x *ApiTestCancelRequest) Reset() {
	*x = ApiTestCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestCancelRequest) ProtoMessage() {}

func (x *ApiTestCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestCancelRequest.ProtoReflect.Descriptor instead.
func (*ApiTestCancelRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{43}
}

func (x *ApiTestCancelRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

type ApiTestCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiTestCancelResponse) Reset() {
	*x = ApiTestCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestCancelResponse) ProtoMessage() {}

func (x *ApiTestCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestCancelResponse.ProtoReflect.Descriptor instead.
func (*ApiTestCancelResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{44}
}

func (x *ApiTestCancelResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ApiTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiID        int64  `protobuf:"varint,1,opt,name=apiID,proto3" json:"apiID,omitempty"`
	UsecaseID    int64  `protobuf:"varint,2,opt,name=usecaseID,proto3" json:"usecaseID,omitempty"`
	UsecaseOrder int64  `protobuf:"varint,3,opt,name=usecaseOrder,proto3" json:"usecaseOrder,omitempty"`
	ProjectID    int64  `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Status       string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ApiInfo      string `protobuf:"bytes,6,opt,name=apiInfo,proto3" json:"apiInfo,omitempty"`
	ApiRequest   string `protobuf:"bytes,7,opt,name=apiRequest,proto3" json:"apiRequest,omitempty"`
	ApiResponse  string `protobuf:"bytes,8,opt,name=apiResponse,proto3" json:"apiResponse,omitempty"`
	AssertResult string `protobuf:"bytes,9,opt,name=assertResult,proto3" json:"assertResult,omitempty"`
}

func (x *ApiTestInfo) Reset() {
	*x = ApiTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestInfo) ProtoMessage() {}

func (x *ApiTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestInfo.ProtoReflect.Descriptor instead.
func (*ApiTestInfo) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{45}
}

func (x *ApiTestInfo) GetApiID() int64 {
	if x != nil {
		return x.ApiID
	}
	return 0
}

func (x *ApiTestInfo) GetUsecaseID() int64 {
	if x != nil {
		return x.UsecaseID
	}
	return 0
}

func (x *ApiTestInfo) GetUsecaseOrder() int64 {
	if x != nil {
		return x.UsecaseOrder
	}
	return 0
}

func (x *ApiTestInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApiTestInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiTestInfo) GetApiInfo() string {
	if x != nil {
		return x.ApiInfo
	}
	return ""
}

func (x *ApiTestInfo) GetApiRequest() string {
	if x != nil {
		return x.ApiRequest
	}
	return ""
}

func (x *ApiTestInfo) GetApiResponse() string {
	if x != nil {
		return x.ApiResponse
	}
	return ""
}

func (x *ApiTestInfo) GetAssertResult() string {
	if x != nil {
		return x.AssertResult
	}
	return ""
}

type ApiTestsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *ApiTestsGetResponse) Reset() {
	*x = ApiTestsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestsGetResponse) ProtoMessage() {}

func (x *ApiTestsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestsGetResponse.ProtoReflect.Descriptor instead.
func (*ApiTestsGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{46}
}

func (x *ApiTestsGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiTestsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiTestInfo *structpb.Value `protobuf:"bytes,1,opt,name=apiTestInfo,proto3" json:"apiTestInfo,omitempty"`
	IsResult    bool            `protobuf:"varint,2,opt,name=isResult,proto3" json:"isResult,omitempty"`
	Id          string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *ApiTestsUpdateRequest) Reset() {
	*x = ApiTestsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestsUpdateRequest) ProtoMessage() {}

func (x *ApiTestsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestsUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApiTestsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{47}
}

func (x *ApiTestsUpdateRequest) GetApiTestInfo() *structpb.Value {
	if x != nil {
		return x.ApiTestInfo
	}
	return nil
}

func (x *ApiTestsUpdateRequest) GetIsResult() bool {
	if x != nil {
		return x.IsResult
	}
	return false
}

func (x *ApiTestsUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApiTestsUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiTestsUpdateResponse) Reset() {
	*x = ApiTestsUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTestsUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTestsUpdateResponse) ProtoMessage() {}

func (x *ApiTestsUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTestsUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApiTestsUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{48}
}

func (x *ApiTestsUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppCertificateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	PageNo   int64  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *AppCertificateListRequest) Reset() {
	*x = AppCertificateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCertificateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCertificateListRequest) ProtoMessage() {}

func (x *AppCertificateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCertificateListRequest.ProtoReflect.Descriptor instead.
func (*AppCertificateListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{49}
}

func (x *AppCertificateListRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *AppCertificateListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AppCertificateListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *AppCertificateListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type AppPublishItemRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env             string   `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	OrgID           int64    `protobuf:"varint,2,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	AppID           int64    `protobuf:"varint,3,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
	PublishItemID   int64    `protobuf:"varint,4,opt,name=publishItemID,json=publishItemId,proto3" json:"publishItemID,omitempty"`
	PublishItemName string   `protobuf:"bytes,5,opt,name=publishItemName,proto3" json:"publishItemName,omitempty"`
	PublisherID     int64    `protobuf:"varint,6,opt,name=publisherID,json=publisherId,proto3" json:"publisherID,omitempty"`
	PublisherName   string   `protobuf:"bytes,7,opt,name=publisherName,proto3" json:"publisherName,omitempty"`
	PublishItemNs   []string `protobuf:"bytes,8,rep,name=publishItemNs,proto3" json:"publishItemNs,omitempty"`
	AK              string   `protobuf:"bytes,9,opt,name=aK,json=ak,proto3" json:"aK,omitempty"`
	AI              string   `protobuf:"bytes,10,opt,name=aI,json=ai,proto3" json:"aI,omitempty"`
}

func (x *AppPublishItemRelation) Reset() {
	*x = AppPublishItemRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishItemRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishItemRelation) ProtoMessage() {}

func (x *AppPublishItemRelation) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishItemRelation.ProtoReflect.Descriptor instead.
func (*AppPublishItemRelation) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{50}
}

func (x *AppPublishItemRelation) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *AppPublishItemRelation) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *AppPublishItemRelation) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *AppPublishItemRelation) GetPublishItemID() int64 {
	if x != nil {
		return x.PublishItemID
	}
	return 0
}

func (x *AppPublishItemRelation) GetPublishItemName() string {
	if x != nil {
		return x.PublishItemName
	}
	return ""
}

func (x *AppPublishItemRelation) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

func (x *AppPublishItemRelation) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

func (x *AppPublishItemRelation) GetPublishItemNs() []string {
	if x != nil {
		return x.PublishItemNs
	}
	return nil
}

func (x *AppPublishItemRelation) GetAK() string {
	if x != nil {
		return x.AK
	}
	return ""
}

func (x *AppPublishItemRelation) GetAI() string {
	if x != nil {
		return x.AI
	}
	return ""
}

type ApplicationCertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	AppID         uint64                 `protobuf:"varint,2,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
	CertificateID uint64                 `protobuf:"varint,3,opt,name=certificateID,json=certificateId,proto3" json:"certificateID,omitempty"`
	ApprovalID    uint64                 `protobuf:"varint,4,opt,name=approvalID,json=approvalId,proto3" json:"approvalID,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	OrgID         uint64                 `protobuf:"varint,7,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Status        string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Creator       string                 `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Operator      string                 `protobuf:"bytes,10,opt,name=operator,proto3" json:"operator,omitempty"`
	Desc          string                 `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	AndroidInfo   *structpb.Value        `protobuf:"bytes,12,opt,name=androidInfo,proto3" json:"androidInfo,omitempty"`
	IOSInfo       *structpb.Value        `protobuf:"bytes,13,opt,name=iOSInfo,json=iosInfo,proto3" json:"iOSInfo,omitempty"`
	MessageInfo   *structpb.Value        `protobuf:"bytes,14,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
	PushConfig    *structpb.Value        `protobuf:"bytes,15,opt,name=pushConfig,proto3" json:"pushConfig,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *ApplicationCertificateDTO) Reset() {
	*x = ApplicationCertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCertificateDTO) ProtoMessage() {}

func (x *ApplicationCertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCertificateDTO.ProtoReflect.Descriptor instead.
func (*ApplicationCertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{51}
}

func (x *ApplicationCertificateDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationCertificateDTO) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *ApplicationCertificateDTO) GetCertificateID() uint64 {
	if x != nil {
		return x.CertificateID
	}
	return 0
}

func (x *ApplicationCertificateDTO) GetApprovalID() uint64 {
	if x != nil {
		return x.ApprovalID
	}
	return 0
}

func (x *ApplicationCertificateDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApplicationCertificateDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApplicationCertificateDTO) GetAndroidInfo() *structpb.Value {
	if x != nil {
		return x.AndroidInfo
	}
	return nil
}

func (x *ApplicationCertificateDTO) GetIOSInfo() *structpb.Value {
	if x != nil {
		return x.IOSInfo
	}
	return nil
}

func (x *ApplicationCertificateDTO) GetMessageInfo() *structpb.Value {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

func (x *ApplicationCertificateDTO) GetPushConfig() *structpb.Value {
	if x != nil {
		return x.PushConfig
	}
	return nil
}

func (x *ApplicationCertificateDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ApplicationCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName    string                     `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo           string                     `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc           string                     `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ProjectID      uint64                     `protobuf:"varint,5,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	Mode           string                     `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Config         map[string]*structpb.Value `protobuf:"bytes,7,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsExternalRepo bool                       `protobuf:"varint,8,opt,name=isExternalRepo,proto3" json:"isExternalRepo,omitempty"`
	RepoConfig     *structpb.Value            `protobuf:"bytes,9,opt,name=repoConfig,proto3,oneof" json:"repoConfig,omitempty"`
	SonarConfig    *structpb.Value            `protobuf:"bytes,10,opt,name=sonarConfig,proto3,oneof" json:"sonarConfig,omitempty"`
}

func (x *ApplicationCreateRequest) Reset() {
	*x = ApplicationCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCreateRequest) ProtoMessage() {}

func (x *ApplicationCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCreateRequest.ProtoReflect.Descriptor instead.
func (*ApplicationCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{52}
}

func (x *ApplicationCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCreateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ApplicationCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApplicationCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApplicationCreateRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ApplicationCreateRequest) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ApplicationCreateRequest) GetIsExternalRepo() bool {
	if x != nil {
		return x.IsExternalRepo
	}
	return false
}

func (x *ApplicationCreateRequest) GetRepoConfig() *structpb.Value {
	if x != nil {
		return x.RepoConfig
	}
	return nil
}

func (x *ApplicationCreateRequest) GetSonarConfig() *structpb.Value {
	if x != nil {
		return x.SonarConfig
	}
	return nil
}

type ApplicationCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationCreateResponse) Reset() {
	*x = ApplicationCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCreateResponse) ProtoMessage() {}

func (x *ApplicationCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCreateResponse.ProtoReflect.Descriptor instead.
func (*ApplicationCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{53}
}

func (x *ApplicationCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint64                     `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name               string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName        string                     `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Mode               string                     `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Pined              bool                       `protobuf:"varint,5,opt,name=pined,proto3" json:"pined,omitempty"`
	Desc               string                     `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo               string                     `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Config             map[string]*structpb.Value `protobuf:"bytes,8,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPublic           bool                       `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Creator            string                     `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	UnBlockStart       *timestamppb.Timestamp     `protobuf:"bytes,11,opt,name=unBlockStart,proto3,oneof" json:"unBlockStart,omitempty"`
	UnBlockEnd         *timestamppb.Timestamp     `protobuf:"bytes,12,opt,name=unBlockEnd,proto3,oneof" json:"unBlockEnd,omitempty"`
	BlockStatus        string                     `protobuf:"bytes,13,opt,name=blockStatus,proto3" json:"blockStatus,omitempty"`
	Stats              *structpb.Value            `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	GitRepo            string                     `protobuf:"bytes,15,opt,name=gitRepo,proto3" json:"gitRepo,omitempty"`
	GitRepoAbbrev      string                     `protobuf:"bytes,16,opt,name=gitRepoAbbrev,proto3" json:"gitRepoAbbrev,omitempty"`
	GitRepoNew         string                     `protobuf:"bytes,17,opt,name=gitRepoNew,proto3" json:"gitRepoNew,omitempty"`
	Token              string                     `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`
	OrgID              uint64                     `protobuf:"varint,19,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	OrgName            string                     `protobuf:"bytes,20,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgDisplayName     string                     `protobuf:"bytes,21,opt,name=orgDisplayName,proto3" json:"orgDisplayName,omitempty"`
	ProjectID          uint64                     `protobuf:"varint,22,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName        string                     `protobuf:"bytes,23,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string                     `protobuf:"bytes,24,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	Workspaces         []*structpb.Value          `protobuf:"bytes,25,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	IsExternalRepo     bool                       `protobuf:"varint,26,opt,name=isExternalRepo,proto3" json:"isExternalRepo,omitempty"`
	RepoConfig         *structpb.Value            `protobuf:"bytes,27,opt,name=repoConfig,proto3,oneof" json:"repoConfig,omitempty"`
	SonarConfig        *structpb.Value            `protobuf:"bytes,28,opt,name=sonarConfig,proto3,oneof" json:"sonarConfig,omitempty"`
	MemberRoles        []string                   `protobuf:"bytes,29,rep,name=memberRoles,proto3" json:"memberRoles,omitempty"`
	CreatedAt          *timestamppb.Timestamp     `protobuf:"bytes,30,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp     `protobuf:"bytes,31,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Extra              string                     `protobuf:"bytes,32,opt,name=extra,json=-,proto3" json:"extra,omitempty"`
}

func (x *ApplicationDTO) Reset() {
	*x = ApplicationDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDTO) ProtoMessage() {}

func (x *ApplicationDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDTO.ProtoReflect.Descriptor instead.
func (*ApplicationDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{54}
}

func (x *ApplicationDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationDTO) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ApplicationDTO) GetPined() bool {
	if x != nil {
		return x.Pined
	}
	return false
}

func (x *ApplicationDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApplicationDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ApplicationDTO) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ApplicationDTO) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ApplicationDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ApplicationDTO) GetUnBlockStart() *timestamppb.Timestamp {
	if x != nil {
		return x.UnBlockStart
	}
	return nil
}

func (x *ApplicationDTO) GetUnBlockEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.UnBlockEnd
	}
	return nil
}

func (x *ApplicationDTO) GetBlockStatus() string {
	if x != nil {
		return x.BlockStatus
	}
	return ""
}

func (x *ApplicationDTO) GetStats() *structpb.Value {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ApplicationDTO) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *ApplicationDTO) GetGitRepoAbbrev() string {
	if x != nil {
		return x.GitRepoAbbrev
	}
	return ""
}

func (x *ApplicationDTO) GetGitRepoNew() string {
	if x != nil {
		return x.GitRepoNew
	}
	return ""
}

func (x *ApplicationDTO) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApplicationDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApplicationDTO) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ApplicationDTO) GetOrgDisplayName() string {
	if x != nil {
		return x.OrgDisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApplicationDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ApplicationDTO) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetWorkspaces() []*structpb.Value {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *ApplicationDTO) GetIsExternalRepo() bool {
	if x != nil {
		return x.IsExternalRepo
	}
	return false
}

func (x *ApplicationDTO) GetRepoConfig() *structpb.Value {
	if x != nil {
		return x.RepoConfig
	}
	return nil
}

func (x *ApplicationDTO) GetSonarConfig() *structpb.Value {
	if x != nil {
		return x.SonarConfig
	}
	return nil
}

func (x *ApplicationDTO) GetMemberRoles() []string {
	if x != nil {
		return x.MemberRoles
	}
	return nil
}

func (x *ApplicationDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApplicationDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ApplicationDTO) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type ApplicationDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     string `protobuf:"bytes,1,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationId string `protobuf:"bytes,2,opt,name=applicationId,proto3" json:"applicationId,omitempty"` // generated from path variable: applicationId. You should change the proto type if necessary.
}

func (x *ApplicationDeleteRequest) Reset() {
	*x = ApplicationDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDeleteRequest) ProtoMessage() {}

func (x *ApplicationDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApplicationDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{55}
}

func (x *ApplicationDeleteRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ApplicationDeleteRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type ApplicationDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationDeleteResponse) Reset() {
	*x = ApplicationDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDeleteResponse) ProtoMessage() {}

func (x *ApplicationDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDeleteResponse.ProtoReflect.Descriptor instead.
func (*ApplicationDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{56}
}

func (x *ApplicationDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationID     uint64 `protobuf:"varint,1,opt,name=applicationID,json=-,proto3" json:"applicationID,omitempty"`
	MobileAppName     string `protobuf:"bytes,2,opt,name=mobileAppName,proto3" json:"mobileAppName,omitempty"`
	MobileDisplayName string `protobuf:"bytes,3,opt,name=mobileDisplayName,proto3" json:"mobileDisplayName,omitempty"`
	BundleID          string `protobuf:"bytes,4,opt,name=bundleID,proto3" json:"bundleID,omitempty"`
	PackageName       string `protobuf:"bytes,5,opt,name=packageName,proto3" json:"packageName,omitempty"`
}

func (x *ApplicationInitRequest) Reset() {
	*x = ApplicationInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationInitRequest) ProtoMessage() {}

func (x *ApplicationInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationInitRequest.ProtoReflect.Descriptor instead.
func (*ApplicationInitRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{57}
}

func (x *ApplicationInitRequest) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ApplicationInitRequest) GetMobileAppName() string {
	if x != nil {
		return x.MobileAppName
	}
	return ""
}

func (x *ApplicationInitRequest) GetMobileDisplayName() string {
	if x != nil {
		return x.MobileDisplayName
	}
	return ""
}

func (x *ApplicationInitRequest) GetBundleID() string {
	if x != nil {
		return x.BundleID
	}
	return ""
}

func (x *ApplicationInitRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type ApplicationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountRuntimes    uint64 `protobuf:"varint,1,opt,name=countRuntimes,proto3" json:"countRuntimes,omitempty"`
	CountMembers     uint64 `protobuf:"varint,2,opt,name=countMembers,proto3" json:"countMembers,omitempty"`
	TimeLastModified string `protobuf:"bytes,3,opt,name=timeLastModified,proto3" json:"timeLastModified,omitempty"`
}

func (x *ApplicationStats) Reset() {
	*x = ApplicationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationStats) ProtoMessage() {}

func (x *ApplicationStats) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationStats.ProtoReflect.Descriptor instead.
func (*ApplicationStats) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{58}
}

func (x *ApplicationStats) GetCountRuntimes() uint64 {
	if x != nil {
		return x.CountRuntimes
	}
	return 0
}

func (x *ApplicationStats) GetCountMembers() uint64 {
	if x != nil {
		return x.CountMembers
	}
	return 0
}

func (x *ApplicationStats) GetTimeLastModified() string {
	if x != nil {
		return x.TimeLastModified
	}
	return ""
}

type ApplicationUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationID int64           `protobuf:"varint,1,opt,name=applicationID,json=-,proto3" json:"applicationID,omitempty"`
	Body          *structpb.Value `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ApplicationUpdateRequest) Reset() {
	*x = ApplicationUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationUpdateRequest) ProtoMessage() {}

func (x *ApplicationUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApplicationUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{59}
}

func (x *ApplicationUpdateRequest) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ApplicationUpdateRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type ApplicationUpdateRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo        string                     `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc        string                     `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	DisplayName string                     `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Config      map[string]*structpb.Value `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepoConfig  *structpb.Value            `protobuf:"bytes,5,opt,name=repoConfig,proto3,oneof" json:"repoConfig,omitempty"`
	IsPublic    bool                       `protobuf:"varint,6,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	SonarConfig *structpb.Value            `protobuf:"bytes,7,opt,name=sonarConfig,proto3,oneof" json:"sonarConfig,omitempty"`
}

func (x *ApplicationUpdateRequestBody) Reset() {
	*x = ApplicationUpdateRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationUpdateRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationUpdateRequestBody) ProtoMessage() {}

func (x *ApplicationUpdateRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationUpdateRequestBody.ProtoReflect.Descriptor instead.
func (*ApplicationUpdateRequestBody) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{60}
}

func (x *ApplicationUpdateRequestBody) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ApplicationUpdateRequestBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApplicationUpdateRequestBody) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationUpdateRequestBody) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ApplicationUpdateRequestBody) GetRepoConfig() *structpb.Value {
	if x != nil {
		return x.RepoConfig
	}
	return nil
}

func (x *ApplicationUpdateRequestBody) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ApplicationUpdateRequestBody) GetSonarConfig() *structpb.Value {
	if x != nil {
		return x.SonarConfig
	}
	return nil
}

type ApplicationUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationUpdateResponse) Reset() {
	*x = ApplicationUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationUpdateResponse) ProtoMessage() {}

func (x *ApplicationUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApplicationUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{61}
}

func (x *ApplicationUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Workspace       string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ConfigNamespace string `protobuf:"bytes,3,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
}

func (x *ApplicationWorkspace) Reset() {
	*x = ApplicationWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationWorkspace) ProtoMessage() {}

func (x *ApplicationWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationWorkspace.ProtoReflect.Descriptor instead.
func (*ApplicationWorkspace) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{62}
}

func (x *ApplicationWorkspace) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ApplicationWorkspace) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ApplicationWorkspace) GetConfigNamespace() string {
	if x != nil {
		return x.ConfigNamespace
	}
	return ""
}

type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{63}
}

func (x *Artifact) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Artifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artifact) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AuditMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageZH string `protobuf:"bytes,1,opt,name=messageZH,proto3" json:"messageZH,omitempty"`
	MessageEN string `protobuf:"bytes,2,opt,name=messageEN,proto3" json:"messageEN,omitempty"`
}

func (x *AuditMessage) Reset() {
	*x = AuditMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditMessage) ProtoMessage() {}

func (x *AuditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditMessage.ProtoReflect.Descriptor instead.
func (*AuditMessage) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{64}
}

func (x *AuditMessage) GetMessageZH() string {
	if x != nil {
		return x.MessageZH
	}
	return ""
}

func (x *AuditMessage) GetMessageEN() string {
	if x != nil {
		return x.MessageEN
	}
	return ""
}

type AutoTestSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AutoTestSpaceResponse) Reset() {
	*x = AutoTestSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSpaceResponse) ProtoMessage() {}

func (x *AutoTestSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSpaceResponse.ProtoReflect.Descriptor instead.
func (*AutoTestSpaceResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{65}
}

func (x *AutoTestSpaceResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type BaseModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatorID string                 `protobuf:"bytes,4,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID string                 `protobuf:"bytes,5,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
}

func (x *BaseModel) Reset() {
	*x = BaseModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseModel) ProtoMessage() {}

func (x *BaseModel) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseModel.ProtoReflect.Descriptor instead.
func (*BaseModel) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{66}
}

func (x *BaseModel) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BaseModel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BaseModel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BaseModel) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *BaseModel) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     *structpb.Value `protobuf:"bytes,2,opt,name=err,proto3,oneof" json:"err,omitempty"`
	Data    []uint32        `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{67}
}

func (x *BaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BaseResponse) GetErr() *structpb.Value {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *BaseResponse) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlockoutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDEV   bool `protobuf:"varint,1,opt,name=blockDEV,json=blockDev,proto3" json:"blockDEV,omitempty"`
	BlockTEST  bool `protobuf:"varint,2,opt,name=blockTEST,json=blockTest,proto3" json:"blockTEST,omitempty"`
	BlockStage bool `protobuf:"varint,3,opt,name=blockStage,proto3" json:"blockStage,omitempty"`
	BlockProd  bool `protobuf:"varint,4,opt,name=blockProd,proto3" json:"blockProd,omitempty"`
}

func (x *BlockoutConfig) Reset() {
	*x = BlockoutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockoutConfig) ProtoMessage() {}

func (x *BlockoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockoutConfig.ProtoReflect.Descriptor instead.
func (*BlockoutConfig) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{68}
}

func (x *BlockoutConfig) GetBlockDEV() bool {
	if x != nil {
		return x.BlockDEV
	}
	return false
}

func (x *BlockoutConfig) GetBlockTEST() bool {
	if x != nil {
		return x.BlockTEST
	}
	return false
}

func (x *BlockoutConfig) GetBlockStage() bool {
	if x != nil {
		return x.BlockStage
	}
	return false
}

func (x *BlockoutConfig) GetBlockProd() bool {
	if x != nil {
		return x.BlockProd
	}
	return false
}

type CICDPipelineYmlListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  int64  `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *CICDPipelineYmlListRequest) Reset() {
	*x = CICDPipelineYmlListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CICDPipelineYmlListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICDPipelineYmlListRequest) ProtoMessage() {}

func (x *CICDPipelineYmlListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICDPipelineYmlListRequest.ProtoReflect.Descriptor instead.
func (*CICDPipelineYmlListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{69}
}

func (x *CICDPipelineYmlListRequest) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CICDPipelineYmlListRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type CICDPipelineYmlListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CICDPipelineYmlListResponse) Reset() {
	*x = CICDPipelineYmlListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CICDPipelineYmlListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICDPipelineYmlListResponse) ProtoMessage() {}

func (x *CICDPipelineYmlListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICDPipelineYmlListResponse.ProtoReflect.Descriptor instead.
func (*CICDPipelineYmlListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{70}
}

func (x *CICDPipelineYmlListResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMDB_BRANCH_RULE_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *CMDB_BRANCH_RULE_DELETE_Request) Reset() {
	*x = CMDB_BRANCH_RULE_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_BRANCH_RULE_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_BRANCH_RULE_DELETE_Request) ProtoMessage() {}

func (x *CMDB_BRANCH_RULE_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_BRANCH_RULE_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_BRANCH_RULE_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{71}
}

func (x *CMDB_BRANCH_RULE_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CMDB_CERTIFICATE_APP_CANCEL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_CERTIFICATE_APP_CANCEL_Request) Reset() {
	*x = CMDB_CERTIFICATE_APP_CANCEL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_CERTIFICATE_APP_CANCEL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_CERTIFICATE_APP_CANCEL_Request) ProtoMessage() {}

func (x *CMDB_CERTIFICATE_APP_CANCEL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_CERTIFICATE_APP_CANCEL_Request.ProtoReflect.Descriptor instead.
func (*CMDB_CERTIFICATE_APP_CANCEL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{72}
}

type CMDB_CERTIFICATE_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatesID string `protobuf:"bytes,1,opt,name=certificatesID,proto3" json:"certificatesID,omitempty"` // generated from path variable: certificatesID. You should change the proto type if necessary.
}

func (x *CMDB_CERTIFICATE_DELETE_Request) Reset() {
	*x = CMDB_CERTIFICATE_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_CERTIFICATE_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_CERTIFICATE_DELETE_Request) ProtoMessage() {}

func (x *CMDB_CERTIFICATE_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_CERTIFICATE_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_CERTIFICATE_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{73}
}

func (x *CMDB_CERTIFICATE_DELETE_Request) GetCertificatesID() string {
	if x != nil {
		return x.CertificatesID
	}
	return ""
}

type CMDB_CERTIFICATE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateID string `protobuf:"bytes,1,opt,name=certificateID,proto3" json:"certificateID,omitempty"` // generated from path variable: certificateID. You should change the proto type if necessary.
}

func (x *CMDB_CERTIFICATE_GET_Request) Reset() {
	*x = CMDB_CERTIFICATE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_CERTIFICATE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_CERTIFICATE_GET_Request) ProtoMessage() {}

func (x *CMDB_CERTIFICATE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_CERTIFICATE_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_CERTIFICATE_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{74}
}

func (x *CMDB_CERTIFICATE_GET_Request) GetCertificateID() string {
	if x != nil {
		return x.CertificateID
	}
	return ""
}

type CMDB_ITERATION_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *CMDB_ITERATION_DELETE_Request) Reset() {
	*x = CMDB_ITERATION_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ITERATION_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ITERATION_DELETE_Request) ProtoMessage() {}

func (x *CMDB_ITERATION_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ITERATION_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ITERATION_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{75}
}

func (x *CMDB_ITERATION_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CMDB_ITERATION_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *CMDB_ITERATION_GET_Request) Reset() {
	*x = CMDB_ITERATION_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ITERATION_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ITERATION_GET_Request) ProtoMessage() {}

func (x *CMDB_ITERATION_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ITERATION_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ITERATION_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{76}
}

func (x *CMDB_ITERATION_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CMDB_LIBREFERENCE_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *CMDB_LIBREFERENCE_DELETE_Request) Reset() {
	*x = CMDB_LIBREFERENCE_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_LIBREFERENCE_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_LIBREFERENCE_DELETE_Request) ProtoMessage() {}

func (x *CMDB_LIBREFERENCE_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_LIBREFERENCE_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_LIBREFERENCE_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{77}
}

func (x *CMDB_LIBREFERENCE_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CMDB_LIBREFERENCE_LIST_VERSION_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_LIBREFERENCE_LIST_VERSION_Request) Reset() {
	*x = CMDB_LIBREFERENCE_LIST_VERSION_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_LIBREFERENCE_LIST_VERSION_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_LIBREFERENCE_LIST_VERSION_Request) ProtoMessage() {}

func (x *CMDB_LIBREFERENCE_LIST_VERSION_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_LIBREFERENCE_LIST_VERSION_Request.ProtoReflect.Descriptor instead.
func (*CMDB_LIBREFERENCE_LIST_VERSION_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{78}
}

type CMDB_ORG_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"` // generated from path variable: orgID. You should change the proto type if necessary.
}

func (x *CMDB_ORG_DELETE_Request) Reset() {
	*x = CMDB_ORG_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ORG_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ORG_DELETE_Request) ProtoMessage() {}

func (x *CMDB_ORG_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ORG_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ORG_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{79}
}

func (x *CMDB_ORG_DELETE_Request) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type CMDB_ORG_PUBLISHER_CREATE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"` // generated from path variable: orgID. You should change the proto type if necessary.
}

func (x *CMDB_ORG_PUBLISHER_CREATE_GET_Request) Reset() {
	*x = CMDB_ORG_PUBLISHER_CREATE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ORG_PUBLISHER_CREATE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ORG_PUBLISHER_CREATE_GET_Request) ProtoMessage() {}

func (x *CMDB_ORG_PUBLISHER_CREATE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ORG_PUBLISHER_CREATE_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ORG_PUBLISHER_CREATE_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{80}
}

func (x *CMDB_ORG_PUBLISHER_CREATE_GET_Request) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type CMDB_ORG_PUBLISHER_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"` // generated from path variable: orgID. You should change the proto type if necessary.
}

func (x *CMDB_ORG_PUBLISHER_CREATE_Request) Reset() {
	*x = CMDB_ORG_PUBLISHER_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ORG_PUBLISHER_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ORG_PUBLISHER_CREATE_Request) ProtoMessage() {}

func (x *CMDB_ORG_PUBLISHER_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ORG_PUBLISHER_CREATE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ORG_PUBLISHER_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{81}
}

func (x *CMDB_ORG_PUBLISHER_CREATE_Request) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type CMDB_ORG_RESOURCE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_ORG_RESOURCE_GET_Request) Reset() {
	*x = CMDB_ORG_RESOURCE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ORG_RESOURCE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ORG_RESOURCE_GET_Request) ProtoMessage() {}

func (x *CMDB_ORG_RESOURCE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ORG_RESOURCE_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ORG_RESOURCE_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{82}
}

type CMDB_PUBLISHER_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherID string `protobuf:"bytes,1,opt,name=publisherID,proto3" json:"publisherID,omitempty"` // generated from path variable: publisherID. You should change the proto type if necessary.
}

func (x *CMDB_PUBLISHER_DELETE_Request) Reset() {
	*x = CMDB_PUBLISHER_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PUBLISHER_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PUBLISHER_DELETE_Request) ProtoMessage() {}

func (x *CMDB_PUBLISHER_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PUBLISHER_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PUBLISHER_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{83}
}

func (x *CMDB_PUBLISHER_DELETE_Request) GetPublisherID() string {
	if x != nil {
		return x.PublisherID
	}
	return ""
}

type CMDB_PUBLISHER_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherID string `protobuf:"bytes,1,opt,name=publisherID,proto3" json:"publisherID,omitempty"` // generated from path variable: publisherID. You should change the proto type if necessary.
}

func (x *CMDB_PUBLISHER_GET_Request) Reset() {
	*x = CMDB_PUBLISHER_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PUBLISHER_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PUBLISHER_GET_Request) ProtoMessage() {}

func (x *CMDB_PUBLISHER_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PUBLISHER_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PUBLISHER_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{84}
}

func (x *CMDB_PUBLISHER_GET_Request) GetPublisherID() string {
	if x != nil {
		return x.PublisherID
	}
	return ""
}

type CMDB_ROLES_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_ROLES_LIST_Request) Reset() {
	*x = CMDB_ROLES_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_ROLES_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_ROLES_LIST_Request) ProtoMessage() {}

func (x *CMDB_ROLES_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_ROLES_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMDB_ROLES_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{85}
}

type CertificateCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Type        string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	AndroidInfo *structpb.Value `protobuf:"bytes,5,opt,name=androidInfo,proto3" json:"androidInfo,omitempty"`
	IOSInfo     *structpb.Value `protobuf:"bytes,6,opt,name=iOSInfo,json=iosInfo,proto3" json:"iOSInfo,omitempty"`
	MessageInfo *structpb.Value `protobuf:"bytes,7,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *CertificateCreateRequest) Reset() {
	*x = CertificateCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCreateRequest) ProtoMessage() {}

func (x *CertificateCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCreateRequest.ProtoReflect.Descriptor instead.
func (*CertificateCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{86}
}

func (x *CertificateCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CertificateCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificateCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CertificateCreateRequest) GetAndroidInfo() *structpb.Value {
	if x != nil {
		return x.AndroidInfo
	}
	return nil
}

func (x *CertificateCreateRequest) GetIOSInfo() *structpb.Value {
	if x != nil {
		return x.IOSInfo
	}
	return nil
}

func (x *CertificateCreateRequest) GetMessageInfo() *structpb.Value {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

type CertificateCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CertificateCreateResponse) Reset() {
	*x = CertificateCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCreateResponse) ProtoMessage() {}

func (x *CertificateCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCreateResponse.ProtoReflect.Descriptor instead.
func (*CertificateCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{87}
}

func (x *CertificateCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrgID       uint64                 `protobuf:"varint,4,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Creator     string                 `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Operator    string                 `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Desc        string                 `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	AndroidInfo *structpb.Value        `protobuf:"bytes,8,opt,name=androidInfo,proto3" json:"androidInfo,omitempty"`
	IOSInfo     *structpb.Value        `protobuf:"bytes,9,opt,name=iOSInfo,json=iosInfo,proto3" json:"iOSInfo,omitempty"`
	MessageInfo *structpb.Value        `protobuf:"bytes,10,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CertificateDTO) Reset() {
	*x = CertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDTO) ProtoMessage() {}

func (x *CertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDTO.ProtoReflect.Descriptor instead.
func (*CertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{88}
}

func (x *CertificateDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CertificateDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificateDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CertificateDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CertificateDTO) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CertificateDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CertificateDTO) GetAndroidInfo() *structpb.Value {
	if x != nil {
		return x.AndroidInfo
	}
	return nil
}

func (x *CertificateDTO) GetIOSInfo() *structpb.Value {
	if x != nil {
		return x.IOSInfo
	}
	return nil
}

func (x *CertificateDTO) GetMessageInfo() *structpb.Value {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

func (x *CertificateDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CertificateDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CertificateDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CertificateDeleteResponse) Reset() {
	*x = CertificateDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDeleteResponse) ProtoMessage() {}

func (x *CertificateDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDeleteResponse.ProtoReflect.Descriptor instead.
func (*CertificateDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{89}
}

func (x *CertificateDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CertificateDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateDTO *structpb.Value `protobuf:"bytes,1,opt,name=certificateDTO,json=data,proto3" json:"certificateDTO,omitempty"`
}

func (x *CertificateDetailResponse) Reset() {
	*x = CertificateDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDetailResponse) ProtoMessage() {}

func (x *CertificateDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDetailResponse.ProtoReflect.Descriptor instead.
func (*CertificateDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{90}
}

func (x *CertificateDetailResponse) GetCertificateDTO() *structpb.Value {
	if x != nil {
		return x.CertificateDTO
	}
	return nil
}

type CertificateFileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     string `protobuf:"bytes,1,opt,name=uUID,json=uuid,proto3" json:"uUID,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *CertificateFileDTO) Reset() {
	*x = CertificateFileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateFileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateFileDTO) ProtoMessage() {}

func (x *CertificateFileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateFileDTO.ProtoReflect.Descriptor instead.
func (*CertificateFileDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{91}
}

func (x *CertificateFileDTO) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *CertificateFileDTO) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CertificateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Query    string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Status   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	PageNo   int64  `protobuf:"varint,6,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *CertificateListRequest) Reset() {
	*x = CertificateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListRequest) ProtoMessage() {}

func (x *CertificateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListRequest.ProtoReflect.Descriptor instead.
func (*CertificateListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{92}
}

func (x *CertificateListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CertificateListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CertificateListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificateListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertificateListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CertificateListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CertificateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CertificateListResponse) Reset() {
	*x = CertificateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListResponse) ProtoMessage() {}

func (x *CertificateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListResponse.ProtoReflect.Descriptor instead.
func (*CertificateListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{93}
}

func (x *CertificateListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CertificateQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateID uint64 `protobuf:"varint,1,opt,name=certificateID,json=certificateId,proto3" json:"certificateID,omitempty"`
	AppID         uint64 `protobuf:"varint,2,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
}

func (x *CertificateQuoteRequest) Reset() {
	*x = CertificateQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateQuoteRequest) ProtoMessage() {}

func (x *CertificateQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateQuoteRequest.ProtoReflect.Descriptor instead.
func (*CertificateQuoteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{94}
}

func (x *CertificateQuoteRequest) GetCertificateID() uint64 {
	if x != nil {
		return x.CertificateID
	}
	return 0
}

func (x *CertificateQuoteRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

type CertificateUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string `protobuf:"bytes,1,opt,name=uUID,json=uuid,proto3" json:"uUID,omitempty"`
	Desc          string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Filename      string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	CertificateID string `protobuf:"bytes,4,opt,name=certificateID,proto3" json:"certificateID,omitempty"` // generated from path variable: certificateID. You should change the proto type if necessary.
}

func (x *CertificateUpdateRequest) Reset() {
	*x = CertificateUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateUpdateRequest) ProtoMessage() {}

func (x *CertificateUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateUpdateRequest.ProtoReflect.Descriptor instead.
func (*CertificateUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{95}
}

func (x *CertificateUpdateRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *CertificateUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CertificateUpdateRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CertificateUpdateRequest) GetCertificateID() string {
	if x != nil {
		return x.CertificateID
	}
	return ""
}

type CertificateUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CertificateUpdateResponse) Reset() {
	*x = CertificateUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateUpdateResponse) ProtoMessage() {}

func (x *CertificateUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateUpdateResponse.ProtoReflect.Descriptor instead.
func (*CertificateUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{96}
}

func (x *CertificateUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CodeCoverageUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Msg           string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	ReportXmlUUID string `protobuf:"bytes,4,opt,name=reportXmlUUID,proto3" json:"reportXmlUUID,omitempty"`
	ReportTarUrl  string `protobuf:"bytes,5,opt,name=reportTarUrl,proto3" json:"reportTarUrl,omitempty"`
}

func (x *CodeCoverageUpdateRequest) Reset() {
	*x = CodeCoverageUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeCoverageUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeCoverageUpdateRequest) ProtoMessage() {}

func (x *CodeCoverageUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeCoverageUpdateRequest.ProtoReflect.Descriptor instead.
func (*CodeCoverageUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{97}
}

func (x *CodeCoverageUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CodeCoverageUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CodeCoverageUpdateRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CodeCoverageUpdateRequest) GetReportXmlUUID() string {
	if x != nil {
		return x.ReportXmlUUID
	}
	return ""
}

func (x *CodeCoverageUpdateRequest) GetReportTarUrl() string {
	if x != nil {
		return x.ReportTarUrl
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID   int64                  `protobuf:"varint,1,opt,name=commentID,json=id,proto3" json:"commentID,omitempty"`
	TicketID    int64                  `protobuf:"varint,2,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
	CommentType string                 `protobuf:"bytes,3,opt,name=commentType,proto3" json:"commentType,omitempty"`
	Content     string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	IRComment   *structpb.Value        `protobuf:"bytes,5,opt,name=iRComment,json=irComment,proto3" json:"iRComment,omitempty"`
	UserID      string                 `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{98}
}

func (x *Comment) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *Comment) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

func (x *Comment) GetCommentType() string {
	if x != nil {
		return x.CommentType
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetIRComment() *structpb.Value {
	if x != nil {
		return x.IRComment
	}
	return nil
}

func (x *Comment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Comment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Comment) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CommentCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID    int64           `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
	CommentType string          `protobuf:"bytes,2,opt,name=commentType,proto3" json:"commentType,omitempty"`
	Content     string          `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IRComment   *structpb.Value `protobuf:"bytes,4,opt,name=iRComment,json=irComment,proto3" json:"iRComment,omitempty"`
	UserID      string          `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CommentCreateRequest) Reset() {
	*x = CommentCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentCreateRequest) ProtoMessage() {}

func (x *CommentCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentCreateRequest.ProtoReflect.Descriptor instead.
func (*CommentCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{99}
}

func (x *CommentCreateRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

func (x *CommentCreateRequest) GetCommentType() string {
	if x != nil {
		return x.CommentType
	}
	return ""
}

func (x *CommentCreateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentCreateRequest) GetIRComment() *structpb.Value {
	if x != nil {
		return x.IRComment
	}
	return nil
}

func (x *CommentCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CommentCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommentCreateResponse) Reset() {
	*x = CommentCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentCreateResponse) ProtoMessage() {}

func (x *CommentCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentCreateResponse.ProtoReflect.Descriptor instead.
func (*CommentCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{100}
}

func (x *CommentCreateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CommentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64 `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *CommentListRequest) Reset() {
	*x = CommentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListRequest) ProtoMessage() {}

func (x *CommentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListRequest.ProtoReflect.Descriptor instead.
func (*CommentListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{101}
}

func (x *CommentListRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type CommentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommentListResponse) Reset() {
	*x = CommentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListResponse) ProtoMessage() {}

func (x *CommentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListResponse.ProtoReflect.Descriptor instead.
func (*CommentListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{102}
}

func (x *CommentListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommentListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Comments []*structpb.Value `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *CommentListResponseData) Reset() {
	*x = CommentListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListResponseData) ProtoMessage() {}

func (x *CommentListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListResponseData.ProtoReflect.Descriptor instead.
func (*CommentListResponseData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{103}
}

func (x *CommentListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommentListResponseData) GetComments() []*structpb.Value {
	if x != nil {
		return x.Comments
	}
	return nil
}

type CommentUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64           `protobuf:"varint,1,opt,name=commentID,json=-,proto3" json:"commentID,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CommentUpdateRequest) Reset() {
	*x = CommentUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUpdateRequest) ProtoMessage() {}

func (x *CommentUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUpdateRequest.ProtoReflect.Descriptor instead.
func (*CommentUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{104}
}

func (x *CommentUpdateRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *CommentUpdateRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type CommentUpdateRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CommentUpdateRequestBody) Reset() {
	*x = CommentUpdateRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUpdateRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUpdateRequestBody) ProtoMessage() {}

func (x *CommentUpdateRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUpdateRequestBody.ProtoReflect.Descriptor instead.
func (*CommentUpdateRequestBody) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{105}
}

func (x *CommentUpdateRequestBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommentUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommentUpdateResponse) Reset() {
	*x = CommentUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUpdateResponse) ProtoMessage() {}

func (x *CommentUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUpdateResponse.ProtoReflect.Descriptor instead.
func (*CommentUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{106}
}

func (x *CommentUpdateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CreateAPIAssetVersionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID          string `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"`
	Major            uint64 `protobuf:"varint,2,opt,name=major,proto3" json:"major,omitempty"`
	Minor            uint64 `protobuf:"varint,3,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch            uint64 `protobuf:"varint,4,opt,name=patch,proto3" json:"patch,omitempty"`
	SpecProtocol     string `protobuf:"bytes,5,opt,name=specProtocol,proto3" json:"specProtocol,omitempty"`
	SpecDiceFileUUID string `protobuf:"bytes,6,opt,name=specDiceFileUUID,proto3" json:"specDiceFileUUID,omitempty"`
}

func (x *CreateAPIAssetVersionBody) Reset() {
	*x = CreateAPIAssetVersionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAPIAssetVersionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPIAssetVersionBody) ProtoMessage() {}

func (x *CreateAPIAssetVersionBody) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPIAssetVersionBody.ProtoReflect.Descriptor instead.
func (*CreateAPIAssetVersionBody) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{107}
}

func (x *CreateAPIAssetVersionBody) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *CreateAPIAssetVersionBody) GetMajor() uint64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *CreateAPIAssetVersionBody) GetMinor() uint64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *CreateAPIAssetVersionBody) GetPatch() uint64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *CreateAPIAssetVersionBody) GetSpecProtocol() string {
	if x != nil {
		return x.SpecProtocol
	}
	return ""
}

func (x *CreateAPIAssetVersionBody) GetSpecDiceFileUUID() string {
	if x != nil {
		return x.SpecDiceFileUUID
	}
	return ""
}

type CreateAccessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	Body     *structpb.Value `protobuf:"bytes,3,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *CreateAccessReq) Reset() {
	*x = CreateAccessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessReq) ProtoMessage() {}

func (x *CreateAccessReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessReq.ProtoReflect.Descriptor instead.
func (*CreateAccessReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{108}
}

func (x *CreateAccessReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateAccessReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateAccessReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateBranchRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType         string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID           int64  `protobuf:"varint,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	Rule              string `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	IsProtect         bool   `protobuf:"varint,4,opt,name=isProtect,proto3" json:"isProtect,omitempty"`
	NeedApproval      bool   `protobuf:"varint,5,opt,name=needApproval,proto3" json:"needApproval,omitempty"`
	IsTriggerPipeline bool   `protobuf:"varint,6,opt,name=isTriggerPipeline,proto3" json:"isTriggerPipeline,omitempty"`
	Workspace         string `protobuf:"bytes,7,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ArtifactWorkspace string `protobuf:"bytes,8,opt,name=artifactWorkspace,proto3" json:"artifactWorkspace,omitempty"`
	Desc              string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CreateBranchRuleRequest) Reset() {
	*x = CreateBranchRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRuleRequest) ProtoMessage() {}

func (x *CreateBranchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRuleRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{109}
}

func (x *CreateBranchRuleRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *CreateBranchRuleRequest) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *CreateBranchRuleRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *CreateBranchRuleRequest) GetIsProtect() bool {
	if x != nil {
		return x.IsProtect
	}
	return false
}

func (x *CreateBranchRuleRequest) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

func (x *CreateBranchRuleRequest) GetIsTriggerPipeline() bool {
	if x != nil {
		return x.IsTriggerPipeline
	}
	return false
}

func (x *CreateBranchRuleRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *CreateBranchRuleRequest) GetArtifactWorkspace() string {
	if x != nil {
		return x.ArtifactWorkspace
	}
	return ""
}

func (x *CreateBranchRuleRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type CreateBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *CreateBranchRuleResponse) Reset() {
	*x = CreateBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRuleResponse) ProtoMessage() {}

func (x *CreateBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{110}
}

func (x *CreateBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateClientReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	Body     *structpb.Value `protobuf:"bytes,3,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *CreateClientReq) Reset() {
	*x = CreateClientReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientReq) ProtoMessage() {}

func (x *CreateClientReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientReq.ProtoReflect.Descriptor instead.
func (*CreateClientReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{111}
}

func (x *CreateClientReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateClientReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateClientReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	ClientID  string          `protobuf:"bytes,5,opt,name=clientID,proto3" json:"clientID,omitempty"` // generated from path variable: clientID. You should change the proto type if necessary.
}

func (x *CreateContractReq) Reset() {
	*x = CreateContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractReq) ProtoMessage() {}

func (x *CreateContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractReq.ProtoReflect.Descriptor instead.
func (*CreateContractReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{112}
}

func (x *CreateContractReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateContractReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateContractReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *CreateContractReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CreateContractReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type CreateInstantiationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body           *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	AssetID        string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	Minor          string          `protobuf:"bytes,7,opt,name=minor,proto3" json:"minor,omitempty"`                   // generated from path variable: minor. You should change the proto type if necessary.
}

func (x *CreateInstantiationReq) Reset() {
	*x = CreateInstantiationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstantiationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstantiationReq) ProtoMessage() {}

func (x *CreateInstantiationReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstantiationReq.ProtoReflect.Descriptor instead.
func (*CreateInstantiationReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{113}
}

func (x *CreateInstantiationReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateInstantiationReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateInstantiationReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *CreateInstantiationReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CreateInstantiationReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *CreateInstantiationReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *CreateInstantiationReq) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

type CreateSLAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body           *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	AssetID        string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
}

func (x *CreateSLAReq) Reset() {
	*x = CreateSLAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSLAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSLAReq) ProtoMessage() {}

func (x *CreateSLAReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSLAReq.ProtoReflect.Descriptor instead.
func (*CreateSLAReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{114}
}

func (x *CreateSLAReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateSLAReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateSLAReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *CreateSLAReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CreateSLAReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *CreateSLAReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

type DashboardSpotLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []*structpb.Value `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *DashboardSpotLogData) Reset() {
	*x = DashboardSpotLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSpotLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSpotLogData) ProtoMessage() {}

func (x *DashboardSpotLogData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSpotLogData.ProtoReflect.Descriptor instead.
func (*DashboardSpotLogData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{115}
}

func (x *DashboardSpotLogData) GetLines() []*structpb.Value {
	if x != nil {
		return x.Lines
	}
	return nil
}

type DashboardSpotLogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Source    string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Stream    string `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	TimeStamp string `protobuf:"bytes,4,opt,name=timeStamp,json=timestamp,proto3" json:"timeStamp,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Offset    int64  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Level     string `protobuf:"bytes,7,opt,name=level,proto3" json:"level,omitempty"`
	RequestID string `protobuf:"bytes,8,opt,name=requestID,json=requestId,proto3" json:"requestID,omitempty"`
}

func (x *DashboardSpotLogLine) Reset() {
	*x = DashboardSpotLogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSpotLogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSpotLogLine) ProtoMessage() {}

func (x *DashboardSpotLogLine) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSpotLogLine.ProtoReflect.Descriptor instead.
func (*DashboardSpotLogLine) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{116}
}

func (x *DashboardSpotLogLine) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DashboardSpotLogLine) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DashboardSpotLogLine) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *DashboardSpotLogLine) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *DashboardSpotLogLine) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DashboardSpotLogLine) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DashboardSpotLogLine) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *DashboardSpotLogLine) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type DashboardSpotLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DashboardSpotLogResponse) Reset() {
	*x = DashboardSpotLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSpotLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSpotLogResponse) ProtoMessage() {}

func (x *DashboardSpotLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSpotLogResponse.ProtoReflect.Descriptor instead.
func (*DashboardSpotLogResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{117}
}

func (x *DashboardSpotLogResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteAPIAssetVersion_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID   string `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"`     // generated from path variable: assetID. You should change the proto type if necessary.
	VersionID string `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"` // generated from path variable: versionID. You should change the proto type if necessary.
}

func (x *DeleteAPIAssetVersion_Request) Reset() {
	*x = DeleteAPIAssetVersion_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIAssetVersion_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIAssetVersion_Request) ProtoMessage() {}

func (x *DeleteAPIAssetVersion_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIAssetVersion_Request.ProtoReflect.Descriptor instead.
func (*DeleteAPIAssetVersion_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{118}
}

func (x *DeleteAPIAssetVersion_Request) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *DeleteAPIAssetVersion_Request) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type DeleteAPIAssets_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID string `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *DeleteAPIAssets_Request) Reset() {
	*x = DeleteAPIAssets_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIAssets_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIAssets_Request) ProtoMessage() {}

func (x *DeleteAPIAssets_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIAssets_Request.ProtoReflect.Descriptor instead.
func (*DeleteAPIAssets_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{119}
}

func (x *DeleteAPIAssets_Request) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type DeleteAccess_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessID string `protobuf:"bytes,1,opt,name=accessID,proto3" json:"accessID,omitempty"` // generated from path variable: accessID. You should change the proto type if necessary.
}

func (x *DeleteAccess_Request) Reset() {
	*x = DeleteAccess_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccess_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccess_Request) ProtoMessage() {}

func (x *DeleteAccess_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccess_Request.ProtoReflect.Descriptor instead.
func (*DeleteAccess_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{120}
}

func (x *DeleteAccess_Request) GetAccessID() string {
	if x != nil {
		return x.AccessID
	}
	return ""
}

type DeleteBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *DeleteBranchRuleResponse) Reset() {
	*x = DeleteBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRuleResponse) ProtoMessage() {}

func (x *DeleteBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{121}
}

func (x *DeleteBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteClient_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"` // generated from path variable: clientID. You should change the proto type if necessary.
}

func (x *DeleteClient_Request) Reset() {
	*x = DeleteClient_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClient_Request) ProtoMessage() {}

func (x *DeleteClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClient_Request.ProtoReflect.Descriptor instead.
func (*DeleteClient_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{122}
}

func (x *DeleteClient_Request) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type DeleteSLAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	AssetID        string          `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,5,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	SlaID          string          `protobuf:"bytes,6,opt,name=slaID,proto3" json:"slaID,omitempty"`                   // generated from path variable: slaID. You should change the proto type if necessary.
}

func (x *DeleteSLAReq) Reset() {
	*x = DeleteSLAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSLAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSLAReq) ProtoMessage() {}

func (x *DeleteSLAReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSLAReq.ProtoReflect.Descriptor instead.
func (*DeleteSLAReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{123}
}

func (x *DeleteSLAReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *DeleteSLAReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DeleteSLAReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *DeleteSLAReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *DeleteSLAReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *DeleteSLAReq) GetSlaID() string {
	if x != nil {
		return x.SlaID
	}
	return ""
}

type DownloadSpecTextReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams   *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	AssetID     string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`     // generated from path variable: assetID. You should change the proto type if necessary.
	VersionID   string          `protobuf:"bytes,6,opt,name=versionID,proto3" json:"versionID,omitempty"` // generated from path variable: versionID. You should change the proto type if necessary.
}

func (x *DownloadSpecTextReq) Reset() {
	*x = DownloadSpecTextReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSpecTextReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSpecTextReq) ProtoMessage() {}

func (x *DownloadSpecTextReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSpecTextReq.ProtoReflect.Descriptor instead.
func (*DownloadSpecTextReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{124}
}

func (x *DownloadSpecTextReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *DownloadSpecTextReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DownloadSpecTextReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *DownloadSpecTextReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *DownloadSpecTextReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *DownloadSpecTextReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Ctx  *structpb.Value `protobuf:"bytes,3,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{125}
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorResponse) GetCtx() *structpb.Value {
	if x != nil {
		return x.Ctx
	}
	return nil
}

type ExportProjectPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectPackageRequest *structpb.Value   `protobuf:"bytes,1,opt,name=projectPackageRequest,proto3" json:"projectPackageRequest,omitempty"`
	Artifacts             []*structpb.Value `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	OrgID                 string            `protobuf:"bytes,3,opt,name=orgID,proto3" json:"orgID,omitempty"`         // generated from path variable: orgID. You should change the proto type if necessary.
	ProjectID             string            `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
}

func (x *ExportProjectPackageRequest) Reset() {
	*x = ExportProjectPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProjectPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProjectPackageRequest) ProtoMessage() {}

func (x *ExportProjectPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProjectPackageRequest.ProtoReflect.Descriptor instead.
func (*ExportProjectPackageRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{126}
}

func (x *ExportProjectPackageRequest) GetProjectPackageRequest() *structpb.Value {
	if x != nil {
		return x.ProjectPackageRequest
	}
	return nil
}

func (x *ExportProjectPackageRequest) GetArtifacts() []*structpb.Value {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ExportProjectPackageRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ExportProjectPackageRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ExportProjectTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID          uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName        string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string `protobuf:"bytes,3,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	OrgID              int64  `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *ExportProjectTemplateRequest) Reset() {
	*x = ExportProjectTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportProjectTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportProjectTemplateRequest) ProtoMessage() {}

func (x *ExportProjectTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportProjectTemplateRequest.ProtoReflect.Descriptor instead.
func (*ExportProjectTemplateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{127}
}

func (x *ExportProjectTemplateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ExportProjectTemplateRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ExportProjectTemplateRequest) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ExportProjectTemplateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type FileTreeDeleteNode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeName string `protobuf:"bytes,1,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
	Inode    string `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`       // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *FileTreeDeleteNode_Request) Reset() {
	*x = FileTreeDeleteNode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTreeDeleteNode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTreeDeleteNode_Request) ProtoMessage() {}

func (x *FileTreeDeleteNode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTreeDeleteNode_Request.ProtoReflect.Descriptor instead.
func (*FileTreeDeleteNode_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{128}
}

func (x *FileTreeDeleteNode_Request) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *FileTreeDeleteNode_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type FileTreeGetNode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeName string `protobuf:"bytes,1,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
	Inode    string `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`       // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *FileTreeGetNode_Request) Reset() {
	*x = FileTreeGetNode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTreeGetNode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTreeGetNode_Request) ProtoMessage() {}

func (x *FileTreeGetNode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTreeGetNode_Request.ProtoReflect.Descriptor instead.
func (*FileTreeGetNode_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{129}
}

func (x *FileTreeGetNode_Request) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *FileTreeGetNode_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type FileTreeListNodes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeName string `protobuf:"bytes,1,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
}

func (x *FileTreeListNodes_Request) Reset() {
	*x = FileTreeListNodes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTreeListNodes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTreeListNodes_Request) ProtoMessage() {}

func (x *FileTreeListNodes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTreeListNodes_Request.ProtoReflect.Descriptor instead.
func (*FileTreeListNodes_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{130}
}

func (x *FileTreeListNodes_Request) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

type FileTreeMvCpNode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeName string `protobuf:"bytes,1,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
	Inode    string `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`       // generated from path variable: inode. You should change the proto type if necessary.
	Action   string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`     // generated from path variable: action. You should change the proto type if necessary.
}

func (x *FileTreeMvCpNode_Request) Reset() {
	*x = FileTreeMvCpNode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTreeMvCpNode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTreeMvCpNode_Request) ProtoMessage() {}

func (x *FileTreeMvCpNode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTreeMvCpNode_Request.ProtoReflect.Descriptor instead.
func (*FileTreeMvCpNode_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{131}
}

func (x *FileTreeMvCpNode_Request) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *FileTreeMvCpNode_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *FileTreeMvCpNode_Request) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FileTreeUpdateNode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeName string `protobuf:"bytes,1,opt,name=treeName,proto3" json:"treeName,omitempty"` // generated from path variable: treeName. You should change the proto type if necessary.
	Inode    string `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`       // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *FileTreeUpdateNode_Request) Reset() {
	*x = FileTreeUpdateNode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTreeUpdateNode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTreeUpdateNode_Request) ProtoMessage() {}

func (x *FileTreeUpdateNode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTreeUpdateNode_Request.ProtoReflect.Descriptor instead.
func (*FileTreeUpdateNode_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{132}
}

func (x *FileTreeUpdateNode_Request) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *FileTreeUpdateNode_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type GetAPIAssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	AssetID   string          `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *GetAPIAssetReq) Reset() {
	*x = GetAPIAssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAPIAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIAssetReq) ProtoMessage() {}

func (x *GetAPIAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIAssetReq.ProtoReflect.Descriptor instead.
func (*GetAPIAssetReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{133}
}

func (x *GetAPIAssetReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetAPIAssetReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetAPIAssetReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetAPIAssetReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type GetAPIAssetVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams   *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	AssetID     string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`     // generated from path variable: assetID. You should change the proto type if necessary.
	VersionID   string          `protobuf:"bytes,6,opt,name=versionID,proto3" json:"versionID,omitempty"` // generated from path variable: versionID. You should change the proto type if necessary.
}

func (x *GetAPIAssetVersionReq) Reset() {
	*x = GetAPIAssetVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAPIAssetVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIAssetVersionReq) ProtoMessage() {}

func (x *GetAPIAssetVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIAssetVersionReq.ProtoReflect.Descriptor instead.
func (*GetAPIAssetVersionReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{134}
}

func (x *GetAPIAssetVersionReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetAPIAssetVersionReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetAPIAssetVersionReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetAPIAssetVersionReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *GetAPIAssetVersionReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *GetAPIAssetVersionReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type GetAccess_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessID string `protobuf:"bytes,1,opt,name=accessID,proto3" json:"accessID,omitempty"` // generated from path variable: accessID. You should change the proto type if necessary.
}

func (x *GetAccess_Request) Reset() {
	*x = GetAccess_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccess_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccess_Request) ProtoMessage() {}

func (x *GetAccess_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccess_Request.ProtoReflect.Descriptor instead.
func (*GetAccess_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{135}
}

func (x *GetAccess_Request) GetAccessID() string {
	if x != nil {
		return x.AccessID
	}
	return ""
}

type GetAddonInstanceDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAddonInstanceDetailResponse) Reset() {
	*x = GetAddonInstanceDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddonInstanceDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddonInstanceDetailResponse) ProtoMessage() {}

func (x *GetAddonInstanceDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddonInstanceDetailResponse.ProtoReflect.Descriptor instead.
func (*GetAddonInstanceDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{136}
}

func (x *GetAddonInstanceDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetVersionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset            *structpb.Value `protobuf:"bytes,1,opt,name=asset,proto3,oneof" json:"asset,omitempty"`
	Version          *structpb.Value `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Spec             *structpb.Value `protobuf:"bytes,3,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
	HasInstantiation bool            `protobuf:"varint,4,opt,name=hasInstantiation,proto3" json:"hasInstantiation,omitempty"`
	HasAccess        bool            `protobuf:"varint,5,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`
	Access           *structpb.Value `protobuf:"bytes,6,opt,name=access,proto3,oneof" json:"access,omitempty"`
}

func (x *GetAssetVersionRsp) Reset() {
	*x = GetAssetVersionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetVersionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetVersionRsp) ProtoMessage() {}

func (x *GetAssetVersionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetVersionRsp.ProtoReflect.Descriptor instead.
func (*GetAssetVersionRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{137}
}

func (x *GetAssetVersionRsp) GetAsset() *structpb.Value {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *GetAssetVersionRsp) GetVersion() *structpb.Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *GetAssetVersionRsp) GetSpec() *structpb.Value {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetAssetVersionRsp) GetHasInstantiation() bool {
	if x != nil {
		return x.HasInstantiation
	}
	return false
}

func (x *GetAssetVersionRsp) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *GetAssetVersionRsp) GetAccess() *structpb.Value {
	if x != nil {
		return x.Access
	}
	return nil
}

type GetClientReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	ClientID  string          `protobuf:"bytes,4,opt,name=clientID,proto3" json:"clientID,omitempty"` // generated from path variable: clientID. You should change the proto type if necessary.
}

func (x *GetClientReq) Reset() {
	*x = GetClientReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientReq) ProtoMessage() {}

func (x *GetClientReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientReq.ProtoReflect.Descriptor instead.
func (*GetClientReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{138}
}

func (x *GetClientReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetClientReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetClientReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetClientReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type GetContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID      uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity   *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams  *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	ClientID   string          `protobuf:"bytes,4,opt,name=clientID,proto3" json:"clientID,omitempty"`     // generated from path variable: clientID. You should change the proto type if necessary.
	ContractID string          `protobuf:"bytes,5,opt,name=contractID,proto3" json:"contractID,omitempty"` // generated from path variable: contractID. You should change the proto type if necessary.
}

func (x *GetContractReq) Reset() {
	*x = GetContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractReq) ProtoMessage() {}

func (x *GetContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractReq.ProtoReflect.Descriptor instead.
func (*GetContractReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{139}
}

func (x *GetContractReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetContractReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetContractReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetContractReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GetContractReq) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

type GetInstantiationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	AssetID        string          `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,5,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	Minor          string          `protobuf:"bytes,6,opt,name=minor,proto3" json:"minor,omitempty"`                   // generated from path variable: minor. You should change the proto type if necessary.
}

func (x *GetInstantiationsReq) Reset() {
	*x = GetInstantiationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstantiationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstantiationsReq) ProtoMessage() {}

func (x *GetInstantiationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstantiationsReq.ProtoReflect.Descriptor instead.
func (*GetInstantiationsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{140}
}

func (x *GetInstantiationsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetInstantiationsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetInstantiationsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetInstantiationsReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *GetInstantiationsReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *GetInstantiationsReq) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

type GetOperationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3" json:"uRIParams,omitempty"`
	Id        string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *GetOperationReq) Reset() {
	*x = GetOperationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationReq) ProtoMessage() {}

func (x *GetOperationReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationReq.ProtoReflect.Descriptor instead.
func (*GetOperationReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{141}
}

func (x *GetOperationReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetOperationReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetOperationReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetOperationReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOperationURIParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetOperationURIParameters) Reset() {
	*x = GetOperationURIParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationURIParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationURIParameters) ProtoMessage() {}

func (x *GetOperationURIParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationURIParameters.ProtoReflect.Descriptor instead.
func (*GetOperationURIParameters) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{142}
}

func (x *GetOperationURIParameters) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetSLAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	AssetID        string          `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,5,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
}

func (x *GetSLAReq) Reset() {
	*x = GetSLAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSLAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSLAReq) ProtoMessage() {}

func (x *GetSLAReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSLAReq.ProtoReflect.Descriptor instead.
func (*GetSLAReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{143}
}

func (x *GetSLAReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetSLAReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *GetSLAReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *GetSLAReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *GetSLAReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

type GetSLARsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SLAModel       *structpb.Value   `protobuf:"bytes,1,opt,name=sLAModel,proto3" json:"sLAModel,omitempty"`
	Limits         []*structpb.Value `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty"`
	AssetID        string            `protobuf:"bytes,3,opt,name=assetID,proto3" json:"assetID,omitempty"`
	AssetName      string            `protobuf:"bytes,4,opt,name=assetName,proto3" json:"assetName,omitempty"`
	SwaggerVersion string            `protobuf:"bytes,5,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"`
	UserTo         string            `protobuf:"bytes,6,opt,name=userTo,proto3" json:"userTo,omitempty"`
	Default        bool              `protobuf:"varint,7,opt,name=default,proto3" json:"default,omitempty"`
	ClientCount    uint64            `protobuf:"varint,8,opt,name=clientCount,proto3" json:"clientCount,omitempty"`
}

func (x *GetSLARsp) Reset() {
	*x = GetSLARsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSLARsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSLARsp) ProtoMessage() {}

func (x *GetSLARsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSLARsp.ProtoReflect.Descriptor instead.
func (*GetSLARsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{144}
}

func (x *GetSLARsp) GetSLAModel() *structpb.Value {
	if x != nil {
		return x.SLAModel
	}
	return nil
}

func (x *GetSLARsp) GetLimits() []*structpb.Value {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *GetSLARsp) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *GetSLARsp) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *GetSLARsp) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *GetSLARsp) GetUserTo() string {
	if x != nil {
		return x.UserTo
	}
	return ""
}

func (x *GetSLARsp) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *GetSLARsp) GetClientCount() uint64 {
	if x != nil {
		return x.ClientCount
	}
	return 0
}

type GetTestFileRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTestFileRecordResponse) Reset() {
	*x = GetTestFileRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestFileRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestFileRecordResponse) ProtoMessage() {}

func (x *GetTestFileRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestFileRecordResponse.ProtoReflect.Descriptor instead.
func (*GetTestFileRecordResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{145}
}

func (x *GetTestFileRecordResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *structpb.Value `protobuf:"bytes,2,opt,name=error,json=err,proto3" json:"error,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{146}
}

func (x *Header) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Header) GetError() *structpb.Value {
	if x != nil {
		return x.Error
	}
	return nil
}

type IOSCertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugProvisionFile   *structpb.Value `protobuf:"bytes,1,opt,name=debugProvisionFile,json=debugProvision,proto3" json:"debugProvisionFile,omitempty"`
	ReleaseProvisionFile *structpb.Value `protobuf:"bytes,2,opt,name=releaseProvisionFile,json=releaseProvision,proto3" json:"releaseProvisionFile,omitempty"`
	KeyChainP12          *structpb.Value `protobuf:"bytes,3,opt,name=keyChainP12,proto3" json:"keyChainP12,omitempty"`
}

func (x *IOSCertificateDTO) Reset() {
	*x = IOSCertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSCertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSCertificateDTO) ProtoMessage() {}

func (x *IOSCertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSCertificateDTO.ProtoReflect.Descriptor instead.
func (*IOSCertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{147}
}

func (x *IOSCertificateDTO) GetDebugProvisionFile() *structpb.Value {
	if x != nil {
		return x.DebugProvisionFile
	}
	return nil
}

func (x *IOSCertificateDTO) GetReleaseProvisionFile() *structpb.Value {
	if x != nil {
		return x.ReleaseProvisionFile
	}
	return nil
}

func (x *IOSCertificateDTO) GetKeyChainP12() *structpb.Value {
	if x != nil {
		return x.KeyChainP12
	}
	return nil
}

type IOSCertificateKeyChainP12DTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateFileDTO *structpb.Value `protobuf:"bytes,1,opt,name=certificateFileDTO,proto3" json:"certificateFileDTO,omitempty"`
	Password           string          `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *IOSCertificateKeyChainP12DTO) Reset() {
	*x = IOSCertificateKeyChainP12DTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSCertificateKeyChainP12DTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSCertificateKeyChainP12DTO) ProtoMessage() {}

func (x *IOSCertificateKeyChainP12DTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSCertificateKeyChainP12DTO.ProtoReflect.Descriptor instead.
func (*IOSCertificateKeyChainP12DTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{148}
}

func (x *IOSCertificateKeyChainP12DTO) GetCertificateFileDTO() *structpb.Value {
	if x != nil {
		return x.CertificateFileDTO
	}
	return nil
}

func (x *IOSCertificateKeyChainP12DTO) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type IOSCertificateKeyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyChainP12File        string `protobuf:"bytes,1,opt,name=keyChainP12File,proto3" json:"keyChainP12File,omitempty"`
	KeyChainP12Password    string `protobuf:"bytes,2,opt,name=keyChainP12Password,proto3" json:"keyChainP12Password,omitempty"`
	DebugMobileProvision   string `protobuf:"bytes,3,opt,name=debugMobileProvision,proto3" json:"debugMobileProvision,omitempty"`
	ReleaseMobileProvision string `protobuf:"bytes,4,opt,name=releaseMobileProvision,proto3" json:"releaseMobileProvision,omitempty"`
}

func (x *IOSCertificateKeyDTO) Reset() {
	*x = IOSCertificateKeyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSCertificateKeyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSCertificateKeyDTO) ProtoMessage() {}

func (x *IOSCertificateKeyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSCertificateKeyDTO.ProtoReflect.Descriptor instead.
func (*IOSCertificateKeyDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{149}
}

func (x *IOSCertificateKeyDTO) GetKeyChainP12File() string {
	if x != nil {
		return x.KeyChainP12File
	}
	return ""
}

func (x *IOSCertificateKeyDTO) GetKeyChainP12Password() string {
	if x != nil {
		return x.KeyChainP12Password
	}
	return ""
}

func (x *IOSCertificateKeyDTO) GetDebugMobileProvision() string {
	if x != nil {
		return x.DebugMobileProvision
	}
	return ""
}

func (x *IOSCertificateKeyDTO) GetReleaseMobileProvision() string {
	if x != nil {
		return x.ReleaseMobileProvision
	}
	return ""
}

type IRComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationID uint64 `protobuf:"varint,1,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IssueID     int64  `protobuf:"varint,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	IssueTitle  string `protobuf:"bytes,3,opt,name=issueTitle,proto3" json:"issueTitle,omitempty"`
	IssueType   string `protobuf:"bytes,4,opt,name=issueType,proto3" json:"issueType,omitempty"`
	ProjectID   uint64 `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *IRComment) Reset() {
	*x = IRComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRComment) ProtoMessage() {}

func (x *IRComment) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRComment.ProtoReflect.Descriptor instead.
func (*IRComment) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{150}
}

func (x *IRComment) GetIterationID() uint64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *IRComment) GetIssueID() int64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *IRComment) GetIssueTitle() string {
	if x != nil {
		return x.IssueTitle
	}
	return ""
}

func (x *IRComment) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *IRComment) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type ISummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirement *structpb.Value `protobuf:"bytes,1,opt,name=requirement,proto3" json:"requirement,omitempty"`
	Task        *structpb.Value `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Bug         *structpb.Value `protobuf:"bytes,3,opt,name=bug,proto3" json:"bug,omitempty"`
}

func (x *ISummary) Reset() {
	*x = ISummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISummary) ProtoMessage() {}

func (x *ISummary) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISummary.ProtoReflect.Descriptor instead.
func (*ISummary) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{151}
}

func (x *ISummary) GetRequirement() *structpb.Value {
	if x != nil {
		return x.Requirement
	}
	return nil
}

func (x *ISummary) GetTask() *structpb.Value {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ISummary) GetBug() *structpb.Value {
	if x != nil {
		return x.Bug
	}
	return nil
}

type ISummaryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done   int64 `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	UnDone int64 `protobuf:"varint,2,opt,name=unDone,json=undone,proto3" json:"unDone,omitempty"`
}

func (x *ISummaryState) Reset() {
	*x = ISummaryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISummaryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISummaryState) ProtoMessage() {}

func (x *ISummaryState) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISummaryState.ProtoReflect.Descriptor instead.
func (*ISummaryState) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{152}
}

func (x *ISummaryState) GetDone() int64 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *ISummaryState) GetUnDone() int64 {
	if x != nil {
		return x.UnDone
	}
	return 0
}

type ImportProjectPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectPackageRequest *structpb.Value `protobuf:"bytes,1,opt,name=projectPackageRequest,proto3" json:"projectPackageRequest,omitempty"`
	OrgID                 string          `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID,omitempty"`         // generated from path variable: orgID. You should change the proto type if necessary.
	ProjectID             string          `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
}

func (x *ImportProjectPackageRequest) Reset() {
	*x = ImportProjectPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProjectPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProjectPackageRequest) ProtoMessage() {}

func (x *ImportProjectPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProjectPackageRequest.ProtoReflect.Descriptor instead.
func (*ImportProjectPackageRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{153}
}

func (x *ImportProjectPackageRequest) GetProjectPackageRequest() *structpb.Value {
	if x != nil {
		return x.ProjectPackageRequest
	}
	return nil
}

func (x *ImportProjectPackageRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ImportProjectPackageRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ImportProjectTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID          uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName        string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string `protobuf:"bytes,3,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	OrgID              int64  `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *ImportProjectTemplateRequest) Reset() {
	*x = ImportProjectTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProjectTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProjectTemplateRequest) ProtoMessage() {}

func (x *ImportProjectTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProjectTemplateRequest.ProtoReflect.Descriptor instead.
func (*ImportProjectTemplateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{154}
}

func (x *ImportProjectTemplateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ImportProjectTemplateRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ImportProjectTemplateRequest) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ImportProjectTemplateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type InstanceDetailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName  string            `protobuf:"bytes,1,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	AddonName     string            `protobuf:"bytes,2,opt,name=addonName,proto3" json:"addonName,omitempty"`
	ProjectName   string            `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	LogoURL       string            `protobuf:"bytes,4,opt,name=logoURL,json=logoUrl,proto3" json:"logoURL,omitempty"`
	Status        string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ClusterName   string            `protobuf:"bytes,6,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Env           string            `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	EnvCn         string            `protobuf:"bytes,8,opt,name=envCn,proto3" json:"envCn,omitempty"`
	Version       string            `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	AttachCount   int64             `protobuf:"varint,10,opt,name=attachCount,proto3" json:"attachCount,omitempty"`
	PlanCnName    string            `protobuf:"bytes,11,opt,name=planCnName,proto3" json:"planCnName,omitempty"`
	CreateAt      string            `protobuf:"bytes,12,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Platform      bool              `protobuf:"varint,13,opt,name=platform,proto3" json:"platform,omitempty"`
	ProjectID     string            `protobuf:"bytes,14,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	Config        map[string]string `protobuf:"bytes,15,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReferenceInfo []*structpb.Value `protobuf:"bytes,16,rep,name=referenceInfo,proto3" json:"referenceInfo,omitempty"`
	CanDel        bool              `protobuf:"varint,17,opt,name=canDel,proto3" json:"canDel,omitempty"`
}

func (x *InstanceDetailRes) Reset() {
	*x = InstanceDetailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceDetailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceDetailRes) ProtoMessage() {}

func (x *InstanceDetailRes) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceDetailRes.ProtoReflect.Descriptor instead.
func (*InstanceDetailRes) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{155}
}

func (x *InstanceDetailRes) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *InstanceDetailRes) GetAddonName() string {
	if x != nil {
		return x.AddonName
	}
	return ""
}

func (x *InstanceDetailRes) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *InstanceDetailRes) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *InstanceDetailRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InstanceDetailRes) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *InstanceDetailRes) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *InstanceDetailRes) GetEnvCn() string {
	if x != nil {
		return x.EnvCn
	}
	return ""
}

func (x *InstanceDetailRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstanceDetailRes) GetAttachCount() int64 {
	if x != nil {
		return x.AttachCount
	}
	return 0
}

func (x *InstanceDetailRes) GetPlanCnName() string {
	if x != nil {
		return x.PlanCnName
	}
	return ""
}

func (x *InstanceDetailRes) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *InstanceDetailRes) GetPlatform() bool {
	if x != nil {
		return x.Platform
	}
	return false
}

func (x *InstanceDetailRes) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *InstanceDetailRes) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InstanceDetailRes) GetReferenceInfo() []*structpb.Value {
	if x != nil {
		return x.ReferenceInfo
	}
	return nil
}

func (x *InstanceDetailRes) GetCanDel() bool {
	if x != nil {
		return x.CanDel
	}
	return false
}

type InstanceReferenceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID           string `protobuf:"bytes,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ProjectID       string `protobuf:"bytes,2,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName     string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   string `protobuf:"bytes,4,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ApplicationName string `protobuf:"bytes,5,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	RuntimeID       string `protobuf:"bytes,6,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	RuntimeName     string `protobuf:"bytes,7,opt,name=runtimeName,proto3" json:"runtimeName,omitempty"`
}

func (x *InstanceReferenceRes) Reset() {
	*x = InstanceReferenceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceReferenceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceReferenceRes) ProtoMessage() {}

func (x *InstanceReferenceRes) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceReferenceRes.ProtoReflect.Descriptor instead.
func (*InstanceReferenceRes) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{156}
}

func (x *InstanceReferenceRes) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *InstanceReferenceRes) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *InstanceReferenceRes) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *InstanceReferenceRes) GetApplicationID() string {
	if x != nil {
		return x.ApplicationID
	}
	return ""
}

func (x *InstanceReferenceRes) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *InstanceReferenceRes) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *InstanceReferenceRes) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

type Iteration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	StartedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	FinishedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finishedAt,proto3,oneof" json:"finishedAt,omitempty"`
	ProjectID    uint64                 `protobuf:"varint,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Title        string                 `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Content      string                 `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Creator      string                 `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	State        string                 `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	IssueSummary *structpb.Value        `protobuf:"bytes,11,opt,name=issueSummary,proto3" json:"issueSummary,omitempty"`
}

func (x *Iteration) Reset() {
	*x = Iteration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iteration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iteration) ProtoMessage() {}

func (x *Iteration) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iteration.ProtoReflect.Descriptor instead.
func (*Iteration) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{157}
}

func (x *Iteration) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Iteration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Iteration) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Iteration) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Iteration) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Iteration) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *Iteration) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Iteration) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Iteration) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Iteration) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Iteration) GetIssueSummary() *structpb.Value {
	if x != nil {
		return x.IssueSummary
	}
	return nil
}

type IterationCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=finishedAt,proto3,oneof" json:"finishedAt,omitempty"`
	ProjectID  uint64                 `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Title      string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content    string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *IterationCreateRequest) Reset() {
	*x = IterationCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationCreateRequest) ProtoMessage() {}

func (x *IterationCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationCreateRequest.ProtoReflect.Descriptor instead.
func (*IterationCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{158}
}

func (x *IterationCreateRequest) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *IterationCreateRequest) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *IterationCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IterationCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IterationCreateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type IterationCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *IterationCreateResponse) Reset() {
	*x = IterationCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationCreateResponse) ProtoMessage() {}

func (x *IterationCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationCreateResponse.ProtoReflect.Descriptor instead.
func (*IterationCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{159}
}

func (x *IterationCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type IterationGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IterationGetResponse) Reset() {
	*x = IterationGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationGetResponse) ProtoMessage() {}

func (x *IterationGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationGetResponse.ProtoReflect.Descriptor instead.
func (*IterationGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{160}
}

func (x *IterationGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type IterationPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo              uint64   `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize            uint64   `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Deadline            string   `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	ProjectID           uint64   `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	State               string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	WithoutIssueSummary bool     `protobuf:"varint,6,opt,name=withoutIssueSummary,proto3" json:"withoutIssueSummary,omitempty"`
	IDs                 []uint64 `protobuf:"varint,7,rep,packed,name=IDs,json=ids,proto3" json:"IDs,omitempty"`
}

func (x *IterationPagingRequest) Reset() {
	*x = IterationPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationPagingRequest) ProtoMessage() {}

func (x *IterationPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationPagingRequest.ProtoReflect.Descriptor instead.
func (*IterationPagingRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{161}
}

func (x *IterationPagingRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *IterationPagingRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *IterationPagingRequest) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *IterationPagingRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IterationPagingRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IterationPagingRequest) GetWithoutIssueSummary() bool {
	if x != nil {
		return x.WithoutIssueSummary
	}
	return false
}

func (x *IterationPagingRequest) GetIDs() []uint64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type IterationPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *IterationPagingResponse) Reset() {
	*x = IterationPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationPagingResponse) ProtoMessage() {}

func (x *IterationPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationPagingResponse.ProtoReflect.Descriptor instead.
func (*IterationPagingResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{162}
}

func (x *IterationPagingResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type IterationUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content    string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	StartedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finishedAt,proto3,oneof" json:"finishedAt,omitempty"`
	State      string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Id         string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *IterationUpdateRequest) Reset() {
	*x = IterationUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationUpdateRequest) ProtoMessage() {}

func (x *IterationUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationUpdateRequest.ProtoReflect.Descriptor instead.
func (*IterationUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{163}
}

func (x *IterationUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IterationUpdateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *IterationUpdateRequest) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *IterationUpdateRequest) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *IterationUpdateRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *IterationUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IterationUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IterationUpdateResponse) Reset() {
	*x = IterationUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationUpdateResponse) ProtoMessage() {}

func (x *IterationUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationUpdateResponse.ProtoReflect.Descriptor instead.
func (*IterationUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{164}
}

func (x *IterationUpdateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type LibReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	AppID          uint64                 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	LibID          uint64                 `protobuf:"varint,3,opt,name=libID,proto3" json:"libID,omitempty"`
	LibName        string                 `protobuf:"bytes,4,opt,name=libName,proto3" json:"libName,omitempty"`
	LibDesc        string                 `protobuf:"bytes,5,opt,name=libDesc,proto3" json:"libDesc,omitempty"`
	ApprovalID     uint64                 `protobuf:"varint,6,opt,name=approvalID,proto3" json:"approvalID,omitempty"`
	ApprovalStatus string                 `protobuf:"bytes,7,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	Creator        string                 `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
}

func (x *LibReference) Reset() {
	*x = LibReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReference) ProtoMessage() {}

func (x *LibReference) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReference.ProtoReflect.Descriptor instead.
func (*LibReference) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{165}
}

func (x *LibReference) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LibReference) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *LibReference) GetLibID() uint64 {
	if x != nil {
		return x.LibID
	}
	return 0
}

func (x *LibReference) GetLibName() string {
	if x != nil {
		return x.LibName
	}
	return ""
}

func (x *LibReference) GetLibDesc() string {
	if x != nil {
		return x.LibDesc
	}
	return ""
}

func (x *LibReference) GetApprovalID() uint64 {
	if x != nil {
		return x.ApprovalID
	}
	return 0
}

func (x *LibReference) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *LibReference) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *LibReference) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LibReference) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type LibReferenceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	LibID   uint64 `protobuf:"varint,3,opt,name=libID,proto3" json:"libID,omitempty"`
	LibName string `protobuf:"bytes,4,opt,name=libName,proto3" json:"libName,omitempty"`
	LibDesc string `protobuf:"bytes,5,opt,name=libDesc,proto3" json:"libDesc,omitempty"`
	OrgID   uint64 `protobuf:"varint,6,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *LibReferenceCreateRequest) Reset() {
	*x = LibReferenceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReferenceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReferenceCreateRequest) ProtoMessage() {}

func (x *LibReferenceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReferenceCreateRequest.ProtoReflect.Descriptor instead.
func (*LibReferenceCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{166}
}

func (x *LibReferenceCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *LibReferenceCreateRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *LibReferenceCreateRequest) GetLibID() uint64 {
	if x != nil {
		return x.LibID
	}
	return 0
}

func (x *LibReferenceCreateRequest) GetLibName() string {
	if x != nil {
		return x.LibName
	}
	return ""
}

func (x *LibReferenceCreateRequest) GetLibDesc() string {
	if x != nil {
		return x.LibDesc
	}
	return ""
}

func (x *LibReferenceCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type LibReferenceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LibReferenceCreateResponse) Reset() {
	*x = LibReferenceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReferenceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReferenceCreateResponse) ProtoMessage() {}

func (x *LibReferenceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReferenceCreateResponse.ProtoReflect.Descriptor instead.
func (*LibReferenceCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{167}
}

func (x *LibReferenceCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type LibReferenceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID          uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	LibID          uint64 `protobuf:"varint,2,opt,name=libID,proto3" json:"libID,omitempty"`
	ApprovalStatus string `protobuf:"bytes,3,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	PageNo         uint64 `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize       uint64 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *LibReferenceListRequest) Reset() {
	*x = LibReferenceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReferenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReferenceListRequest) ProtoMessage() {}

func (x *LibReferenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReferenceListRequest.ProtoReflect.Descriptor instead.
func (*LibReferenceListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{168}
}

func (x *LibReferenceListRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *LibReferenceListRequest) GetLibID() uint64 {
	if x != nil {
		return x.LibID
	}
	return 0
}

func (x *LibReferenceListRequest) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *LibReferenceListRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *LibReferenceListRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type LibReferenceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LibReferenceListResponse) Reset() {
	*x = LibReferenceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReferenceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReferenceListResponse) ProtoMessage() {}

func (x *LibReferenceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReferenceListResponse.ProtoReflect.Descriptor instead.
func (*LibReferenceListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{169}
}

func (x *LibReferenceListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type LibReferenceListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LibReferenceListResponseData) Reset() {
	*x = LibReferenceListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibReferenceListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibReferenceListResponseData) ProtoMessage() {}

func (x *LibReferenceListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibReferenceListResponseData.ProtoReflect.Descriptor instead.
func (*LibReferenceListResponseData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{170}
}

func (x *LibReferenceListResponseData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LibReferenceListResponseData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListAPIGatewayRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListAPIGatewayRespData) Reset() {
	*x = ListAPIGatewayRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPIGatewayRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPIGatewayRespData) ProtoMessage() {}

func (x *ListAPIGatewayRespData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPIGatewayRespData.ProtoReflect.Descriptor instead.
func (*ListAPIGatewayRespData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{171}
}

func (x *ListAPIGatewayRespData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAPIGatewayRespData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListAPIGatewaysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	AssetID   string          `protobuf:"bytes,4,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *ListAPIGatewaysReq) Reset() {
	*x = ListAPIGatewaysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPIGatewaysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPIGatewaysReq) ProtoMessage() {}

func (x *ListAPIGatewaysReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPIGatewaysReq.ProtoReflect.Descriptor instead.
func (*ListAPIGatewaysReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{172}
}

func (x *ListAPIGatewaysReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListAPIGatewaysReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListAPIGatewaysReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListAPIGatewaysReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type ListAPIGatewaysResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAPIGatewaysResp) Reset() {
	*x = ListAPIGatewaysResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPIGatewaysResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPIGatewaysResp) ProtoMessage() {}

func (x *ListAPIGatewaysResp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPIGatewaysResp.ProtoReflect.Descriptor instead.
func (*ListAPIGatewaysResp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{173}
}

func (x *ListAPIGatewaysResp) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListAccessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,3,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
}

func (x *ListAccessReq) Reset() {
	*x = ListAccessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessReq) ProtoMessage() {}

func (x *ListAccessReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessReq.ProtoReflect.Descriptor instead.
func (*ListAccessReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{174}
}

func (x *ListAccessReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListAccessReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListAccessReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type ListAccessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID uint64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Total uint64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListAccessRsp) Reset() {
	*x = ListAccessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessRsp) ProtoMessage() {}

func (x *ListAccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessRsp.ProtoReflect.Descriptor instead.
func (*ListAccessRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{175}
}

func (x *ListAccessRsp) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListAccessRsp) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListAccessRsp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListContractRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID      uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity   *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams  *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	ClientID   string          `protobuf:"bytes,4,opt,name=clientID,proto3" json:"clientID,omitempty"`     // generated from path variable: clientID. You should change the proto type if necessary.
	ContractID string          `protobuf:"bytes,5,opt,name=contractID,proto3" json:"contractID,omitempty"` // generated from path variable: contractID. You should change the proto type if necessary.
}

func (x *ListContractRecordsReq) Reset() {
	*x = ListContractRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractRecordsReq) ProtoMessage() {}

func (x *ListContractRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractRecordsReq.ProtoReflect.Descriptor instead.
func (*ListContractRecordsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{176}
}

func (x *ListContractRecordsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListContractRecordsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListContractRecordsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListContractRecordsReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ListContractRecordsReq) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

type ListContractRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListContractRecordsRsp) Reset() {
	*x = ListContractRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractRecordsRsp) ProtoMessage() {}

func (x *ListContractRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractRecordsRsp.ProtoReflect.Descriptor instead.
func (*ListContractRecordsRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{177}
}

func (x *ListContractRecordsRsp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContractRecordsRsp) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListContractsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams   *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	ClientID    string          `protobuf:"bytes,5,opt,name=clientID,proto3" json:"clientID,omitempty"` // generated from path variable: clientID. You should change the proto type if necessary.
}

func (x *ListContractsReq) Reset() {
	*x = ListContractsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractsReq) ProtoMessage() {}

func (x *ListContractsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractsReq.ProtoReflect.Descriptor instead.
func (*ListContractsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{178}
}

func (x *ListContractsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListContractsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListContractsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListContractsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *ListContractsReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type ListContractsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListContractsRsp) Reset() {
	*x = ListContractsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractsRsp) ProtoMessage() {}

func (x *ListContractsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractsRsp.ProtoReflect.Descriptor instead.
func (*ListContractsRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{179}
}

func (x *ListContractsRsp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContractsRsp) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListInstantiations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInstantiations_Request) Reset() {
	*x = ListInstantiations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstantiations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstantiations_Request) ProtoMessage() {}

func (x *ListInstantiations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstantiations_Request.ProtoReflect.Descriptor instead.
func (*ListInstantiations_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{180}
}

type ListMyClientsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,3,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
}

func (x *ListMyClientsReq) Reset() {
	*x = ListMyClientsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMyClientsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyClientsReq) ProtoMessage() {}

func (x *ListMyClientsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyClientsReq.ProtoReflect.Descriptor instead.
func (*ListMyClientsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{181}
}

func (x *ListMyClientsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListMyClientsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListMyClientsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type ListProjectAPIGatewaysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	ProjectID string          `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
}

func (x *ListProjectAPIGatewaysReq) Reset() {
	*x = ListProjectAPIGatewaysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectAPIGatewaysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectAPIGatewaysReq) ProtoMessage() {}

func (x *ListProjectAPIGatewaysReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectAPIGatewaysReq.ProtoReflect.Descriptor instead.
func (*ListProjectAPIGatewaysReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{182}
}

func (x *ListProjectAPIGatewaysReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListProjectAPIGatewaysReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListProjectAPIGatewaysReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListProjectAPIGatewaysReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ListRuntimeServices_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"` // generated from path variable: appID. You should change the proto type if necessary.
}

func (x *ListRuntimeServices_Request) Reset() {
	*x = ListRuntimeServices_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuntimeServices_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuntimeServices_Request) ProtoMessage() {}

func (x *ListRuntimeServices_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuntimeServices_Request.ProtoReflect.Descriptor instead.
func (*ListRuntimeServices_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{183}
}

func (x *ListRuntimeServices_Request) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type ListSLAsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams    *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	AssetID        string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	SlaID          string          `protobuf:"bytes,7,opt,name=slaID,proto3" json:"slaID,omitempty"`                   // generated from path variable: slaID. You should change the proto type if necessary.
}

func (x *ListSLAsReq) Reset() {
	*x = ListSLAsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSLAsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSLAsReq) ProtoMessage() {}

func (x *ListSLAsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSLAsReq.ProtoReflect.Descriptor instead.
func (*ListSLAsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{184}
}

func (x *ListSLAsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListSLAsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListSLAsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListSLAsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *ListSLAsReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *ListSLAsReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *ListSLAsReq) GetSlaID() string {
	if x != nil {
		return x.SlaID
	}
	return ""
}

type ListSLAsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListSLAsRsp) Reset() {
	*x = ListSLAsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSLAsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSLAsRsp) ProtoMessage() {}

func (x *ListSLAsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSLAsRsp.ProtoReflect.Descriptor instead.
func (*ListSLAsRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{185}
}

func (x *ListSLAsRsp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSLAsRsp) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListSwaggerVersionClientsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams    *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	AssetID        string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
}

func (x *ListSwaggerVersionClientsReq) Reset() {
	*x = ListSwaggerVersionClientsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwaggerVersionClientsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwaggerVersionClientsReq) ProtoMessage() {}

func (x *ListSwaggerVersionClientsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwaggerVersionClientsReq.ProtoReflect.Descriptor instead.
func (*ListSwaggerVersionClientsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{186}
}

func (x *ListSwaggerVersionClientsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListSwaggerVersionClientsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListSwaggerVersionClientsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListSwaggerVersionClientsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *ListSwaggerVersionClientsReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *ListSwaggerVersionClientsReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

type ListSwaggerVersionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListSwaggerVersionRsp) Reset() {
	*x = ListSwaggerVersionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwaggerVersionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwaggerVersionRsp) ProtoMessage() {}

func (x *ListSwaggerVersionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwaggerVersionRsp.ProtoReflect.Descriptor instead.
func (*ListSwaggerVersionRsp) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{187}
}

func (x *ListSwaggerVersionRsp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSwaggerVersionRsp) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListSwaggerVersionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams   *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	AssetID     string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *ListSwaggerVersionsReq) Reset() {
	*x = ListSwaggerVersionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwaggerVersionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwaggerVersionsReq) ProtoMessage() {}

func (x *ListSwaggerVersionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwaggerVersionsReq.ProtoReflect.Descriptor instead.
func (*ListSwaggerVersionsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{188}
}

func (x *ListSwaggerVersionsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListSwaggerVersionsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ListSwaggerVersionsReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *ListSwaggerVersionsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *ListSwaggerVersionsReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type ListTestFileRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID          uint64   `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectIDs         []uint64 `protobuf:"varint,2,rep,packed,name=projectIDs,json=-,proto3" json:"projectIDs,omitempty"`
	ProjectName        string   `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string   `protobuf:"bytes,4,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	OrgID              uint64   `protobuf:"varint,5,opt,name=orgID,proto3" json:"orgID,omitempty"`
	SpaceID            uint64   `protobuf:"varint,6,opt,name=spaceID,proto3" json:"spaceID,omitempty"`
	Types              []string `protobuf:"bytes,7,rep,name=types,proto3" json:"types,omitempty"`
	Locale             string   `protobuf:"bytes,8,opt,name=locale,proto3" json:"locale,omitempty"`
	PageNo             int64    `protobuf:"varint,9,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize           int64    `protobuf:"varint,10,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Asc                bool     `protobuf:"varint,11,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (x *ListTestFileRecordsRequest) Reset() {
	*x = ListTestFileRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestFileRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestFileRecordsRequest) ProtoMessage() {}

func (x *ListTestFileRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestFileRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListTestFileRecordsRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{189}
}

func (x *ListTestFileRecordsRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ListTestFileRecordsRequest) GetProjectIDs() []uint64 {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

func (x *ListTestFileRecordsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListTestFileRecordsRequest) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ListTestFileRecordsRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListTestFileRecordsRequest) GetSpaceID() uint64 {
	if x != nil {
		return x.SpaceID
	}
	return 0
}

func (x *ListTestFileRecordsRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListTestFileRecordsRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ListTestFileRecordsRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListTestFileRecordsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestFileRecordsRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

type ListTestFileRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *ListTestFileRecordsResponse) Reset() {
	*x = ListTestFileRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestFileRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestFileRecordsResponse) ProtoMessage() {}

func (x *ListTestFileRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestFileRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListTestFileRecordsResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{190}
}

func (x *ListTestFileRecordsResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberRoleListResponse) Reset() {
	*x = MemberRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRoleListResponse) ProtoMessage() {}

func (x *MemberRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRoleListResponse.ProtoReflect.Descriptor instead.
func (*MemberRoleListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{191}
}

func (x *MemberRoleListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MessageCertificateKeyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MessageCertificateKeyDTO) Reset() {
	*x = MessageCertificateKeyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCertificateKeyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCertificateKeyDTO) ProtoMessage() {}

func (x *MessageCertificateKeyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCertificateKeyDTO.ProtoReflect.Descriptor instead.
func (*MessageCertificateKeyDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{192}
}

func (x *MessageCertificateKeyDTO) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type MonitorKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AK    string `protobuf:"bytes,1,opt,name=aK,json=ak,proto3" json:"aK,omitempty"`
	AI    string `protobuf:"bytes,2,opt,name=aI,json=ai,proto3" json:"aI,omitempty"`
	Env   string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	AppID int64  `protobuf:"varint,4,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
}

func (x *MonitorKeys) Reset() {
	*x = MonitorKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorKeys) ProtoMessage() {}

func (x *MonitorKeys) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorKeys.ProtoReflect.Descriptor instead.
func (*MonitorKeys) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{193}
}

func (x *MonitorKeys) GetAK() string {
	if x != nil {
		return x.AK
	}
	return ""
}

func (x *MonitorKeys) GetAI() string {
	if x != nil {
		return x.AI
	}
	return ""
}

func (x *MonitorKeys) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *MonitorKeys) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

type OrgCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo          string   `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName   string   `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc          string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Locale        string   `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	Admins        []string `protobuf:"bytes,6,rep,name=admins,proto3" json:"admins,omitempty"`
	PublisherName string   `protobuf:"bytes,7,opt,name=publisherName,proto3" json:"publisherName,omitempty"`
	IsPublic      bool     `protobuf:"varint,8,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Type          string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *OrgCreateRequest) Reset() {
	*x = OrgCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgCreateRequest) ProtoMessage() {}

func (x *OrgCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgCreateRequest.ProtoReflect.Descriptor instead.
func (*OrgCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{194}
}

func (x *OrgCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *OrgCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgCreateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OrgCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OrgCreateRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrgCreateRequest) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *OrgCreateRequest) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

func (x *OrgCreateRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *OrgCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type OrgCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OrgCreateResponse) Reset() {
	*x = OrgCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgCreateResponse) ProtoMessage() {}

func (x *OrgCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgCreateResponse.ProtoReflect.Descriptor instead.
func (*OrgCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{195}
}

func (x *OrgCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Creator                   string                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Desc                      string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo                      string                 `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Name                      string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName               string                 `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Locale                    string                 `protobuf:"bytes,7,opt,name=locale,proto3" json:"locale,omitempty"`
	Config                    *structpb.Value        `protobuf:"bytes,8,opt,name=config,proto3,oneof" json:"config,omitempty"`
	IsPublic                  bool                   `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	BlockoutConfig            *structpb.Value        `protobuf:"bytes,10,opt,name=blockoutConfig,proto3" json:"blockoutConfig,omitempty"`
	EnableReleaseCrossCluster bool                   `protobuf:"varint,11,opt,name=enableReleaseCrossCluster,proto3" json:"enableReleaseCrossCluster,omitempty"`
	Selected                  bool                   `protobuf:"varint,12,opt,name=selected,proto3" json:"selected,omitempty"`
	Operation                 string                 `protobuf:"bytes,13,opt,name=operation,proto3" json:"operation,omitempty"`
	Status                    string                 `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Type                      string                 `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	PublisherID               int64                  `protobuf:"varint,16,opt,name=publisherID,json=publisherId,proto3" json:"publisherID,omitempty"`
	Domain                    string                 `protobuf:"bytes,17,opt,name=domain,proto3" json:"domain,omitempty"`
	OpenFdp                   bool                   `protobuf:"varint,18,opt,name=openFdp,proto3" json:"openFdp,omitempty"`
	Version                   int64                  `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt                 *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                 *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AuditMessage              *structpb.Value        `protobuf:"bytes,22,opt,name=auditMessage,proto3" json:"auditMessage,omitempty"`
}

func (x *OrgDTO) Reset() {
	*x = OrgDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgDTO) ProtoMessage() {}

func (x *OrgDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgDTO.ProtoReflect.Descriptor instead.
func (*OrgDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{196}
}

func (x *OrgDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OrgDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *OrgDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OrgDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *OrgDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgDTO) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OrgDTO) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrgDTO) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OrgDTO) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *OrgDTO) GetBlockoutConfig() *structpb.Value {
	if x != nil {
		return x.BlockoutConfig
	}
	return nil
}

func (x *OrgDTO) GetEnableReleaseCrossCluster() bool {
	if x != nil {
		return x.EnableReleaseCrossCluster
	}
	return false
}

func (x *OrgDTO) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

func (x *OrgDTO) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *OrgDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrgDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrgDTO) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

func (x *OrgDTO) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *OrgDTO) GetOpenFdp() bool {
	if x != nil {
		return x.OpenFdp
	}
	return false
}

func (x *OrgDTO) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OrgDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrgDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrgDTO) GetAuditMessage() *structpb.Value {
	if x != nil {
		return x.AuditMessage
	}
	return nil
}

type OrgFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDOrName string `protobuf:"bytes,1,opt,name=IDOrName,json=idOrName,proto3" json:"IDOrName,omitempty"`
	OrgID    string `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID,omitempty"` // generated from path variable: orgID. You should change the proto type if necessary.
}

func (x *OrgFetchRequest) Reset() {
	*x = OrgFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgFetchRequest) ProtoMessage() {}

func (x *OrgFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgFetchRequest.ProtoReflect.Descriptor instead.
func (*OrgFetchRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{197}
}

func (x *OrgFetchRequest) GetIDOrName() string {
	if x != nil {
		return x.IDOrName
	}
	return ""
}

func (x *OrgFetchRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type OrgGetByDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	OrgName string `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *OrgGetByDomainRequest) Reset() {
	*x = OrgGetByDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgGetByDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgGetByDomainRequest) ProtoMessage() {}

func (x *OrgGetByDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgGetByDomainRequest.ProtoReflect.Descriptor instead.
func (*OrgGetByDomainRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{198}
}

func (x *OrgGetByDomainRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *OrgGetByDomainRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type OrgGetByDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *OrgGetByDomainResponse) Reset() {
	*x = OrgGetByDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgGetByDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgGetByDomainResponse) ProtoMessage() {}

func (x *OrgGetByDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgGetByDomainResponse.ProtoReflect.Descriptor instead.
func (*OrgGetByDomainResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{199}
}

func (x *OrgGetByDomainResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgNexusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formats []string `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty"`
	Types   []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	OrgID   string   `protobuf:"bytes,3,opt,name=orgID,proto3" json:"orgID,omitempty"` // generated from path variable: orgID. You should change the proto type if necessary.
}

func (x *OrgNexusGetRequest) Reset() {
	*x = OrgNexusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNexusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNexusGetRequest) ProtoMessage() {}

func (x *OrgNexusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNexusGetRequest.ProtoReflect.Descriptor instead.
func (*OrgNexusGetRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{200}
}

func (x *OrgNexusGetRequest) GetFormats() []string {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *OrgNexusGetRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *OrgNexusGetRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type OrgNexusGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *OrgNexusGetResponse) Reset() {
	*x = OrgNexusGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNexusGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNexusGetResponse) ProtoMessage() {}

func (x *OrgNexusGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNexusGetResponse.ProtoReflect.Descriptor instead.
func (*OrgNexusGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{201}
}

func (x *OrgNexusGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgNexusShowPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID        uint64   `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	NexusUserIDs []uint64 `protobuf:"varint,2,rep,packed,name=nexusUserIDs,proto3" json:"nexusUserIDs,omitempty"`
}

func (x *OrgNexusShowPasswordRequest) Reset() {
	*x = OrgNexusShowPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNexusShowPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNexusShowPasswordRequest) ProtoMessage() {}

func (x *OrgNexusShowPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNexusShowPasswordRequest.ProtoReflect.Descriptor instead.
func (*OrgNexusShowPasswordRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{202}
}

func (x *OrgNexusShowPasswordRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgNexusShowPasswordRequest) GetNexusUserIDs() []uint64 {
	if x != nil {
		return x.NexusUserIDs
	}
	return nil
}

type OrgNexusShowPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[uint64]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OrgNexusShowPasswordResponse) Reset() {
	*x = OrgNexusShowPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNexusShowPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNexusShowPasswordResponse) ProtoMessage() {}

func (x *OrgNexusShowPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNexusShowPasswordResponse.ProtoReflect.Descriptor instead.
func (*OrgNexusShowPasswordResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{203}
}

func (x *OrgNexusShowPasswordResponse) GetData() map[uint64]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCpu     float64 `protobuf:"fixed64,1,opt,name=totalCpu,proto3" json:"totalCpu,omitempty"`
	TotalMem     float64 `protobuf:"fixed64,2,opt,name=totalMem,proto3" json:"totalMem,omitempty"`
	AvailableCpu float64 `protobuf:"fixed64,3,opt,name=availableCpu,proto3" json:"availableCpu,omitempty"`
	AvailableMem float64 `protobuf:"fixed64,4,opt,name=availableMem,proto3" json:"availableMem,omitempty"`
}

func (x *OrgResourceInfo) Reset() {
	*x = OrgResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgResourceInfo) ProtoMessage() {}

func (x *OrgResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgResourceInfo.ProtoReflect.Descriptor instead.
func (*OrgResourceInfo) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{204}
}

func (x *OrgResourceInfo) GetTotalCpu() float64 {
	if x != nil {
		return x.TotalCpu
	}
	return 0
}

func (x *OrgResourceInfo) GetTotalMem() float64 {
	if x != nil {
		return x.TotalMem
	}
	return 0
}

func (x *OrgResourceInfo) GetAvailableCpu() float64 {
	if x != nil {
		return x.AvailableCpu
	}
	return 0
}

func (x *OrgResourceInfo) GetAvailableMem() float64 {
	if x != nil {
		return x.AvailableMem
	}
	return 0
}

type OrgSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q        string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	PageNo   int64  `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Org      string `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *OrgSearchRequest) Reset() {
	*x = OrgSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgSearchRequest) ProtoMessage() {}

func (x *OrgSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgSearchRequest.ProtoReflect.Descriptor instead.
func (*OrgSearchRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{205}
}

func (x *OrgSearchRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *OrgSearchRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *OrgSearchRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OrgSearchRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

type OrgSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OrgSearchResponse) Reset() {
	*x = OrgSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgSearchResponse) ProtoMessage() {}

func (x *OrgSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgSearchResponse.ProtoReflect.Descriptor instead.
func (*OrgSearchResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{206}
}

func (x *OrgSearchResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID int64           `protobuf:"varint,1,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	Body  *structpb.Value `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *OrgUpdateRequest) Reset() {
	*x = OrgUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateRequest) ProtoMessage() {}

func (x *OrgUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateRequest.ProtoReflect.Descriptor instead.
func (*OrgUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{207}
}

func (x *OrgUpdateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgUpdateRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type OrgUpdateRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo           string          `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName    string          `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc           string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Locale         string          `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	ID             uint64          `protobuf:"varint,6,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PublisherName  string          `protobuf:"bytes,7,opt,name=publisherName,proto3" json:"publisherName,omitempty"`
	Config         *structpb.Value `protobuf:"bytes,8,opt,name=config,proto3,oneof" json:"config,omitempty"`
	BlockoutConfig *structpb.Value `protobuf:"bytes,9,opt,name=blockoutConfig,proto3,oneof" json:"blockoutConfig,omitempty"`
	IsPublic       bool            `protobuf:"varint,10,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *OrgUpdateRequestBody) Reset() {
	*x = OrgUpdateRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateRequestBody) ProtoMessage() {}

func (x *OrgUpdateRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateRequestBody.ProtoReflect.Descriptor instead.
func (*OrgUpdateRequestBody) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{208}
}

func (x *OrgUpdateRequestBody) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OrgUpdateRequestBody) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

func (x *OrgUpdateRequestBody) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OrgUpdateRequestBody) GetBlockoutConfig() *structpb.Value {
	if x != nil {
		return x.BlockoutConfig
	}
	return nil
}

func (x *OrgUpdateRequestBody) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type PUBLISH_ITEM_CERTIFICATION_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_CERTIFICATION_GET_Request) Reset() {
	*x = PUBLISH_ITEM_CERTIFICATION_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_CERTIFICATION_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_CERTIFICATION_GET_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_CERTIFICATION_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_CERTIFICATION_GET_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_CERTIFICATION_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{209}
}

func (x *PUBLISH_ITEM_CERTIFICATION_GET_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_ERR_EFFACTS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_ERR_EFFACTS_Request) Reset() {
	*x = PUBLISH_ITEM_ERR_EFFACTS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_ERR_EFFACTS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_ERR_EFFACTS_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_ERR_EFFACTS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_ERR_EFFACTS_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_ERR_EFFACTS_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{210}
}

func (x *PUBLISH_ITEM_ERR_EFFACTS_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_ERR_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_ERR_LIST_Request) Reset() {
	*x = PUBLISH_ITEM_ERR_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_ERR_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_ERR_LIST_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_ERR_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_ERR_LIST_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_ERR_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{211}
}

func (x *PUBLISH_ITEM_ERR_LIST_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_ERR_RATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_ERR_RATE_Request) Reset() {
	*x = PUBLISH_ITEM_ERR_RATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_ERR_RATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_ERR_RATE_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_ERR_RATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_ERR_RATE_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_ERR_RATE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{212}
}

func (x *PUBLISH_ITEM_ERR_RATE_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_ERR_TREND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_ERR_TREND_Request) Reset() {
	*x = PUBLISH_ITEM_ERR_TREND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_ERR_TREND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_ERR_TREND_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_ERR_TREND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_ERR_TREND_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_ERR_TREND_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{213}
}

func (x *PUBLISH_ITEM_ERR_TREND_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_METIRCS_COMMON_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	MetricName    string `protobuf:"bytes,2,opt,name=metricName,proto3" json:"metricName,omitempty"`       // generated from path variable: metricName. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_METIRCS_COMMON_Request) Reset() {
	*x = PUBLISH_ITEM_METIRCS_COMMON_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_METIRCS_COMMON_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_METIRCS_COMMON_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_METIRCS_COMMON_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_METIRCS_COMMON_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_METIRCS_COMMON_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{214}
}

func (x *PUBLISH_ITEM_METIRCS_COMMON_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

func (x *PUBLISH_ITEM_METIRCS_COMMON_Request) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

type PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	MetricName    string `protobuf:"bytes,2,opt,name=metricName,proto3" json:"metricName,omitempty"`       // generated from path variable: metricName. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) Reset() {
	*x = PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{215}
}

func (x *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

func (x *PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

type PUBLISH_ITEM_STATISTICS_TREND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_STATISTICS_TREND_Request) Reset() {
	*x = PUBLISH_ITEM_STATISTICS_TREND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_STATISTICS_TREND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_STATISTICS_TREND_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_STATISTICS_TREND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_STATISTICS_TREND_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_STATISTICS_TREND_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{216}
}

func (x *PUBLISH_ITEM_STATISTICS_TREND_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PUBLISH_ITEM_USERS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId string `protobuf:"bytes,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PUBLISH_ITEM_USERS_Request) Reset() {
	*x = PUBLISH_ITEM_USERS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUBLISH_ITEM_USERS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUBLISH_ITEM_USERS_Request) ProtoMessage() {}

func (x *PUBLISH_ITEM_USERS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUBLISH_ITEM_USERS_Request.ProtoReflect.Descriptor instead.
func (*PUBLISH_ITEM_USERS_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{217}
}

func (x *PUBLISH_ITEM_USERS_Request) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PagingAPIAssetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,3,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
}

func (x *PagingAPIAssetsReq) Reset() {
	*x = PagingAPIAssetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingAPIAssetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingAPIAssetsReq) ProtoMessage() {}

func (x *PagingAPIAssetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingAPIAssetsReq.ProtoReflect.Descriptor instead.
func (*PagingAPIAssetsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{218}
}

func (x *PagingAPIAssetsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PagingAPIAssetsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *PagingAPIAssetsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type PagingAppCertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingAppCertificateDTO) Reset() {
	*x = PagingAppCertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingAppCertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingAppCertificateDTO) ProtoMessage() {}

func (x *PagingAppCertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingAppCertificateDTO.ProtoReflect.Descriptor instead.
func (*PagingAppCertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{219}
}

func (x *PagingAppCertificateDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingAppCertificateDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type PagingCertificateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingCertificateDTO) Reset() {
	*x = PagingCertificateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingCertificateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingCertificateDTO) ProtoMessage() {}

func (x *PagingCertificateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingCertificateDTO.ProtoReflect.Descriptor instead.
func (*PagingCertificateDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{220}
}

func (x *PagingCertificateDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingCertificateDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type PagingOrgDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PagingOrgDTO) Reset() {
	*x = PagingOrgDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingOrgDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingOrgDTO) ProtoMessage() {}

func (x *PagingOrgDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingOrgDTO.ProtoReflect.Descriptor instead.
func (*PagingOrgDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{221}
}

func (x *PagingOrgDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *PagingOrgDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PagingProjectDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingProjectDTO) Reset() {
	*x = PagingProjectDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingProjectDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingProjectDTO) ProtoMessage() {}

func (x *PagingProjectDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingProjectDTO.ProtoReflect.Descriptor instead.
func (*PagingProjectDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{222}
}

func (x *PagingProjectDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingProjectDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type PagingPublisherDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingPublisherDTO) Reset() {
	*x = PagingPublisherDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingPublisherDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingPublisherDTO) ProtoMessage() {}

func (x *PagingPublisherDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingPublisherDTO.ProtoReflect.Descriptor instead.
func (*PagingPublisherDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{223}
}

func (x *PagingPublisherDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingPublisherDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type PipelineAppAllValidBranchWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineAppAllValidBranchWorkspaceResponse) Reset() {
	*x = PipelineAppAllValidBranchWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineAppAllValidBranchWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineAppAllValidBranchWorkspaceResponse) ProtoMessage() {}

func (x *PipelineAppAllValidBranchWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineAppAllValidBranchWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*PipelineAppAllValidBranchWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{224}
}

func (x *PipelineAppAllValidBranchWorkspaceResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineCancelResponse) Reset() {
	*x = PipelineCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCancelResponse) ProtoMessage() {}

func (x *PipelineCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCancelResponse.ProtoReflect.Descriptor instead.
func (*PipelineCancelResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{225}
}

type PipelineConfigNamespacesFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineConfigNamespacesFetchResponse) Reset() {
	*x = PipelineConfigNamespacesFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineConfigNamespacesFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineConfigNamespacesFetchResponse) ProtoMessage() {}

func (x *PipelineConfigNamespacesFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineConfigNamespacesFetchResponse.ProtoReflect.Descriptor instead.
func (*PipelineConfigNamespacesFetchResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{226}
}

func (x *PipelineConfigNamespacesFetchResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID              uint64   `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch             string   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Source             string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	PipelineYmlSource  string   `protobuf:"bytes,4,opt,name=pipelineYmlSource,proto3" json:"pipelineYmlSource,omitempty"`
	PipelineYmlName    string   `protobuf:"bytes,5,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	PipelineYmlContent string   `protobuf:"bytes,6,opt,name=pipelineYmlContent,proto3" json:"pipelineYmlContent,omitempty"`
	AutoRun            bool     `protobuf:"varint,7,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	CallbackURLs       []string `protobuf:"bytes,8,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
	UserID             string   `protobuf:"bytes,9,opt,name=userID,proto3" json:"userID,omitempty"`
	IsCronTriggered    bool     `protobuf:"varint,10,opt,name=isCronTriggered,proto3" json:"isCronTriggered,omitempty"`
}

func (x *PipelineCreateRequest) Reset() {
	*x = PipelineCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateRequest) ProtoMessage() {}

func (x *PipelineCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateRequest.ProtoReflect.Descriptor instead.
func (*PipelineCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{227}
}

func (x *PipelineCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelineCreateRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlSource() string {
	if x != nil {
		return x.PipelineYmlSource
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlContent() string {
	if x != nil {
		return x.PipelineYmlContent
	}
	return ""
}

func (x *PipelineCreateRequest) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *PipelineCreateRequest) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

func (x *PipelineCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineCreateRequest) GetIsCronTriggered() bool {
	if x != nil {
		return x.IsCronTriggered
	}
	return false
}

type PipelineCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineCreateResponse) Reset() {
	*x = PipelineCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateResponse) ProtoMessage() {}

func (x *PipelineCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateResponse.ProtoReflect.Descriptor instead.
func (*PipelineCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{228}
}

func (x *PipelineCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCronDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	TimeCreated            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	ApplicationID          uint64                 `protobuf:"varint,4,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	Branch                 string                 `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CronExpr               string                 `protobuf:"bytes,6,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	CronStartTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=cronStartTime,proto3,oneof" json:"cronStartTime,omitempty"`
	PipelineYmlName        string                 `protobuf:"bytes,8,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	BasePipelineID         uint64                 `protobuf:"varint,9,opt,name=basePipelineID,proto3" json:"basePipelineID,omitempty"`
	Enable                 *bool                  `protobuf:"varint,10,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	PipelineYml            string                 `protobuf:"bytes,11,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	ConfigManageNamespaces []string               `protobuf:"bytes,12,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	Secrets                map[string]string      `protobuf:"bytes,13,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserID                 string                 `protobuf:"bytes,14,opt,name=userID,proto3" json:"userID,omitempty"`
	OrgID                  uint64                 `protobuf:"varint,15,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PipelineDefinitionID   string                 `protobuf:"bytes,16,opt,name=pipelineDefinitionID,proto3" json:"pipelineDefinitionID,omitempty"`
	PipelineSource         string                 `protobuf:"bytes,17,opt,name=pipelineSource,proto3" json:"pipelineSource,omitempty"`
	ClusterName            string                 `protobuf:"bytes,18,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *PipelineCronDTO) Reset() {
	*x = PipelineCronDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCronDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCronDTO) ProtoMessage() {}

func (x *PipelineCronDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCronDTO.ProtoReflect.Descriptor instead.
func (*PipelineCronDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{229}
}

func (x *PipelineCronDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineCronDTO) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineCronDTO) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineCronDTO) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *PipelineCronDTO) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineCronDTO) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *PipelineCronDTO) GetCronStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartTime
	}
	return nil
}

func (x *PipelineCronDTO) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *PipelineCronDTO) GetBasePipelineID() uint64 {
	if x != nil {
		return x.BasePipelineID
	}
	return 0
}

func (x *PipelineCronDTO) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *PipelineCronDTO) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *PipelineCronDTO) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineCronDTO) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PipelineCronDTO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineCronDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PipelineCronDTO) GetPipelineDefinitionID() string {
	if x != nil {
		return x.PipelineDefinitionID
	}
	return ""
}

func (x *PipelineCronDTO) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

func (x *PipelineCronDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type PipelineCronListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineCronListResponse) Reset() {
	*x = PipelineCronListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCronListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCronListResponse) ProtoMessage() {}

func (x *PipelineCronListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCronListResponse.ProtoReflect.Descriptor instead.
func (*PipelineCronListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{230}
}

func (x *PipelineCronListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCronStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineCronStartResponse) Reset() {
	*x = PipelineCronStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCronStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCronStartResponse) ProtoMessage() {}

func (x *PipelineCronStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCronStartResponse.ProtoReflect.Descriptor instead.
func (*PipelineCronStartResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{231}
}

func (x *PipelineCronStartResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCronStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineCronStopResponse) Reset() {
	*x = PipelineCronStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCronStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCronStopResponse) ProtoMessage() {}

func (x *PipelineCronStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCronStopResponse.ProtoReflect.Descriptor instead.
func (*PipelineCronStopResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{232}
}

func (x *PipelineCronStopResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineDetailResponse) Reset() {
	*x = PipelineDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailResponse) ProtoMessage() {}

func (x *PipelineDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailResponse.ProtoReflect.Descriptor instead.
func (*PipelineDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{233}
}

func (x *PipelineDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineGetBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineGetBranchRuleResponse) Reset() {
	*x = PipelineGetBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineGetBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineGetBranchRuleResponse) ProtoMessage() {}

func (x *PipelineGetBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineGetBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*PipelineGetBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{234}
}

func (x *PipelineGetBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineInvokedCombo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch         string                 `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Source         string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	YmlName        string                 `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	PagingYmlNames []string               `protobuf:"bytes,4,rep,name=pagingYmlNames,proto3" json:"pagingYmlNames,omitempty"`
	PipelineID     uint64                 `protobuf:"varint,5,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Commit         string                 `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Status         string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	TimeCreated    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeCreated,proto3,oneof" json:"timeCreated,omitempty"`
	CancelUser     *structpb.Value        `protobuf:"bytes,9,opt,name=cancelUser,proto3,oneof" json:"cancelUser,omitempty"`
	TriggerMode    string                 `protobuf:"bytes,10,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	Workspace      string                 `protobuf:"bytes,11,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *PipelineInvokedCombo) Reset() {
	*x = PipelineInvokedCombo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInvokedCombo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInvokedCombo) ProtoMessage() {}

func (x *PipelineInvokedCombo) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInvokedCombo.ProtoReflect.Descriptor instead.
func (*PipelineInvokedCombo) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{235}
}

func (x *PipelineInvokedCombo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineInvokedCombo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineInvokedCombo) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineInvokedCombo) GetPagingYmlNames() []string {
	if x != nil {
		return x.PagingYmlNames
	}
	return nil
}

func (x *PipelineInvokedCombo) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineInvokedCombo) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PipelineInvokedCombo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineInvokedCombo) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineInvokedCombo) GetCancelUser() *structpb.Value {
	if x != nil {
		return x.CancelUser
	}
	return nil
}

func (x *PipelineInvokedCombo) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineInvokedCombo) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type PipelineInvokedComboRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branches string `protobuf:"bytes,2,opt,name=branches,proto3" json:"branches,omitempty"`
	Sources  string `protobuf:"bytes,3,opt,name=sources,proto3" json:"sources,omitempty"`
	YmlNames string `protobuf:"bytes,4,opt,name=ymlNames,proto3" json:"ymlNames,omitempty"`
}

func (x *PipelineInvokedComboRequest) Reset() {
	*x = PipelineInvokedComboRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInvokedComboRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInvokedComboRequest) ProtoMessage() {}

func (x *PipelineInvokedComboRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInvokedComboRequest.ProtoReflect.Descriptor instead.
func (*PipelineInvokedComboRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{236}
}

func (x *PipelineInvokedComboRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelineInvokedComboRequest) GetBranches() string {
	if x != nil {
		return x.Branches
	}
	return ""
}

func (x *PipelineInvokedComboRequest) GetSources() string {
	if x != nil {
		return x.Sources
	}
	return ""
}

func (x *PipelineInvokedComboRequest) GetYmlNames() string {
	if x != nil {
		return x.YmlNames
	}
	return ""
}

type PipelineInvokedComboResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineInvokedComboResponse) Reset() {
	*x = PipelineInvokedComboResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInvokedComboResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInvokedComboResponse) ProtoMessage() {}

func (x *PipelineInvokedComboResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInvokedComboResponse.ProtoReflect.Descriptor instead.
func (*PipelineInvokedComboResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{237}
}

func (x *PipelineInvokedComboResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskOperates []*structpb.Value `protobuf:"bytes,1,rep,name=taskOperates,proto3" json:"taskOperates,omitempty"`
	PipelineID   string            `protobuf:"bytes,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *PipelineOperateRequest) Reset() {
	*x = PipelineOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateRequest) ProtoMessage() {}

func (x *PipelineOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineOperateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{238}
}

func (x *PipelineOperateRequest) GetTaskOperates() []*structpb.Value {
	if x != nil {
		return x.TaskOperates
	}
	return nil
}

func (x *PipelineOperateRequest) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type PipelineOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineOperateResponse) Reset() {
	*x = PipelineOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateResponse) ProtoMessage() {}

func (x *PipelineOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateResponse.ProtoReflect.Descriptor instead.
func (*PipelineOperateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{239}
}

type PipelinePageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommaBranches                       string                     `protobuf:"bytes,1,opt,name=commaBranches,proto3" json:"commaBranches,omitempty"`
	CommaSources                        string                     `protobuf:"bytes,2,opt,name=commaSources,proto3" json:"commaSources,omitempty"`
	CommaYmlNames                       string                     `protobuf:"bytes,3,opt,name=commaYmlNames,proto3" json:"commaYmlNames,omitempty"`
	CommaStatuses                       string                     `protobuf:"bytes,4,opt,name=commaStatuses,proto3" json:"commaStatuses,omitempty"`
	AppID                               uint64                     `protobuf:"varint,5,opt,name=appID,proto3" json:"appID,omitempty"`
	Branches                            []string                   `protobuf:"bytes,6,rep,name=branches,proto3" json:"branches,omitempty"`
	Sources                             []string                   `protobuf:"bytes,7,rep,name=sources,proto3" json:"sources,omitempty"`
	AllSources                          bool                       `protobuf:"varint,8,opt,name=allSources,proto3" json:"allSources,omitempty"`
	YmlNames                            []string                   `protobuf:"bytes,9,rep,name=ymlNames,proto3" json:"ymlNames,omitempty"`
	Statuses                            []string                   `protobuf:"bytes,10,rep,name=statuses,proto3" json:"statuses,omitempty"`
	NotStatuses                         []string                   `protobuf:"bytes,11,rep,name=notStatuses,proto3" json:"notStatuses,omitempty"`
	TriggerModes                        []string                   `protobuf:"bytes,12,rep,name=triggerModes,proto3" json:"triggerModes,omitempty"`
	ClusterNames                        []string                   `protobuf:"bytes,13,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	IncludeSnippet                      bool                       `protobuf:"varint,14,opt,name=includeSnippet,proto3" json:"includeSnippet,omitempty"`
	StartTimeBegin                      *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=startTimeBegin,proto3" json:"startTimeBegin,omitempty"`
	StartTimeBeginTimestamp             int64                      `protobuf:"varint,16,opt,name=startTimeBeginTimestamp,proto3" json:"startTimeBeginTimestamp,omitempty"`
	StartTimeBeginCST                   string                     `protobuf:"bytes,17,opt,name=startTimeBeginCST,proto3" json:"startTimeBeginCST,omitempty"`
	EndTimeBegin                        *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=endTimeBegin,proto3" json:"endTimeBegin,omitempty"`
	EndTimeBeginTimestamp               int64                      `protobuf:"varint,19,opt,name=endTimeBeginTimestamp,proto3" json:"endTimeBeginTimestamp,omitempty"`
	EndTimeBeginCST                     string                     `protobuf:"bytes,20,opt,name=endTimeBeginCST,proto3" json:"endTimeBeginCST,omitempty"`
	StartTimeCreated                    *timestamppb.Timestamp     `protobuf:"bytes,21,opt,name=startTimeCreated,proto3" json:"startTimeCreated,omitempty"`
	StartTimeCreatedTimestamp           int64                      `protobuf:"varint,22,opt,name=startTimeCreatedTimestamp,proto3" json:"startTimeCreatedTimestamp,omitempty"`
	EndTimeCreated                      *timestamppb.Timestamp     `protobuf:"bytes,23,opt,name=endTimeCreated,proto3" json:"endTimeCreated,omitempty"`
	EndTimeCreatedTimestamp             int64                      `protobuf:"varint,24,opt,name=endTimeCreatedTimestamp,proto3" json:"endTimeCreatedTimestamp,omitempty"`
	MustMatchLabelsJSON                 string                     `protobuf:"bytes,25,opt,name=mustMatchLabelsJSON,proto3" json:"mustMatchLabelsJSON,omitempty"`
	MustMatchLabelsQueryParams          []string                   `protobuf:"bytes,26,rep,name=mustMatchLabelsQueryParams,proto3" json:"mustMatchLabelsQueryParams,omitempty"`
	MustMatchLabels                     map[string]*structpb.Value `protobuf:"bytes,27,rep,name=mustMatchLabels,proto3" json:"mustMatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AnyMatchLabelsJSON                  string                     `protobuf:"bytes,28,opt,name=anyMatchLabelsJSON,proto3" json:"anyMatchLabelsJSON,omitempty"`
	AnyMatchLabelsQueryParams           []string                   `protobuf:"bytes,29,rep,name=anyMatchLabelsQueryParams,proto3" json:"anyMatchLabelsQueryParams,omitempty"`
	AnyMatchLabels                      map[string]*structpb.Value `protobuf:"bytes,30,rep,name=anyMatchLabels,proto3" json:"anyMatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageNum                             int64                      `protobuf:"varint,31,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageNo                              int64                      `protobuf:"varint,32,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize                            int64                      `protobuf:"varint,33,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	LargePageSize                       bool                       `protobuf:"varint,34,opt,name=largePageSize,proto3" json:"largePageSize,omitempty"`
	CountOnly                           bool                       `protobuf:"varint,35,opt,name=countOnly,proto3" json:"countOnly,omitempty"`
	SelectCols                          []string                   `protobuf:"bytes,36,rep,name=selectCols,proto3" json:"selectCols,omitempty"`
	AscCols                             []string                   `protobuf:"bytes,37,rep,name=ascCols,proto3" json:"ascCols,omitempty"`
	DescCols                            []string                   `protobuf:"bytes,38,rep,name=descCols,proto3" json:"descCols,omitempty"`
	StartIDGt                           uint64                     `protobuf:"varint,39,opt,name=startIDGt,proto3" json:"startIDGt,omitempty"`
	EndIDLt                             uint64                     `protobuf:"varint,40,opt,name=endIDLt,proto3" json:"endIDLt,omitempty"`
	PipelineDefinitionRequest           *structpb.Value            `protobuf:"bytes,41,opt,name=pipelineDefinitionRequest,proto3,oneof" json:"pipelineDefinitionRequest,omitempty"`
	PipelineDefinitionRequestJSONBase64 string                     `protobuf:"bytes,42,opt,name=pipelineDefinitionRequestJSONBase64,proto3" json:"pipelineDefinitionRequestJSONBase64,omitempty"`
}

func (x *PipelinePageListRequest) Reset() {
	*x = PipelinePageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePageListRequest) ProtoMessage() {}

func (x *PipelinePageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePageListRequest.ProtoReflect.Descriptor instead.
func (*PipelinePageListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{240}
}

func (x *PipelinePageListRequest) GetCommaBranches() string {
	if x != nil {
		return x.CommaBranches
	}
	return ""
}

func (x *PipelinePageListRequest) GetCommaSources() string {
	if x != nil {
		return x.CommaSources
	}
	return ""
}

func (x *PipelinePageListRequest) GetCommaYmlNames() string {
	if x != nil {
		return x.CommaYmlNames
	}
	return ""
}

func (x *PipelinePageListRequest) GetCommaStatuses() string {
	if x != nil {
		return x.CommaStatuses
	}
	return ""
}

func (x *PipelinePageListRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelinePageListRequest) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *PipelinePageListRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *PipelinePageListRequest) GetAllSources() bool {
	if x != nil {
		return x.AllSources
	}
	return false
}

func (x *PipelinePageListRequest) GetYmlNames() []string {
	if x != nil {
		return x.YmlNames
	}
	return nil
}

func (x *PipelinePageListRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *PipelinePageListRequest) GetNotStatuses() []string {
	if x != nil {
		return x.NotStatuses
	}
	return nil
}

func (x *PipelinePageListRequest) GetTriggerModes() []string {
	if x != nil {
		return x.TriggerModes
	}
	return nil
}

func (x *PipelinePageListRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *PipelinePageListRequest) GetIncludeSnippet() bool {
	if x != nil {
		return x.IncludeSnippet
	}
	return false
}

func (x *PipelinePageListRequest) GetStartTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeBegin
	}
	return nil
}

func (x *PipelinePageListRequest) GetStartTimeBeginTimestamp() int64 {
	if x != nil {
		return x.StartTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePageListRequest) GetStartTimeBeginCST() string {
	if x != nil {
		return x.StartTimeBeginCST
	}
	return ""
}

func (x *PipelinePageListRequest) GetEndTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeBegin
	}
	return nil
}

func (x *PipelinePageListRequest) GetEndTimeBeginTimestamp() int64 {
	if x != nil {
		return x.EndTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePageListRequest) GetEndTimeBeginCST() string {
	if x != nil {
		return x.EndTimeBeginCST
	}
	return ""
}

func (x *PipelinePageListRequest) GetStartTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeCreated
	}
	return nil
}

func (x *PipelinePageListRequest) GetStartTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.StartTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePageListRequest) GetEndTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeCreated
	}
	return nil
}

func (x *PipelinePageListRequest) GetEndTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.EndTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePageListRequest) GetMustMatchLabelsJSON() string {
	if x != nil {
		return x.MustMatchLabelsJSON
	}
	return ""
}

func (x *PipelinePageListRequest) GetMustMatchLabelsQueryParams() []string {
	if x != nil {
		return x.MustMatchLabelsQueryParams
	}
	return nil
}

func (x *PipelinePageListRequest) GetMustMatchLabels() map[string]*structpb.Value {
	if x != nil {
		return x.MustMatchLabels
	}
	return nil
}

func (x *PipelinePageListRequest) GetAnyMatchLabelsJSON() string {
	if x != nil {
		return x.AnyMatchLabelsJSON
	}
	return ""
}

func (x *PipelinePageListRequest) GetAnyMatchLabelsQueryParams() []string {
	if x != nil {
		return x.AnyMatchLabelsQueryParams
	}
	return nil
}

func (x *PipelinePageListRequest) GetAnyMatchLabels() map[string]*structpb.Value {
	if x != nil {
		return x.AnyMatchLabels
	}
	return nil
}

func (x *PipelinePageListRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PipelinePageListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PipelinePageListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PipelinePageListRequest) GetLargePageSize() bool {
	if x != nil {
		return x.LargePageSize
	}
	return false
}

func (x *PipelinePageListRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *PipelinePageListRequest) GetSelectCols() []string {
	if x != nil {
		return x.SelectCols
	}
	return nil
}

func (x *PipelinePageListRequest) GetAscCols() []string {
	if x != nil {
		return x.AscCols
	}
	return nil
}

func (x *PipelinePageListRequest) GetDescCols() []string {
	if x != nil {
		return x.DescCols
	}
	return nil
}

func (x *PipelinePageListRequest) GetStartIDGt() uint64 {
	if x != nil {
		return x.StartIDGt
	}
	return 0
}

func (x *PipelinePageListRequest) GetEndIDLt() uint64 {
	if x != nil {
		return x.EndIDLt
	}
	return 0
}

func (x *PipelinePageListRequest) GetPipelineDefinitionRequest() *structpb.Value {
	if x != nil {
		return x.PipelineDefinitionRequest
	}
	return nil
}

func (x *PipelinePageListRequest) GetPipelineDefinitionRequestJSONBase64() string {
	if x != nil {
		return x.PipelineDefinitionRequestJSONBase64
	}
	return ""
}

type PipelinePageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelinePageListResponse) Reset() {
	*x = PipelinePageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePageListResponse) ProtoMessage() {}

func (x *PipelinePageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePageListResponse.ProtoReflect.Descriptor instead.
func (*PipelinePageListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{241}
}

func (x *PipelinePageListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineRerunFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
	PipelineID string          `protobuf:"bytes,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *PipelineRerunFailedResponse) Reset() {
	*x = PipelineRerunFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunFailedResponse) ProtoMessage() {}

func (x *PipelineRerunFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunFailedResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunFailedResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{242}
}

func (x *PipelineRerunFailedResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PipelineRerunFailedResponse) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type PipelineRerunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *PipelineRerunResponse) Reset() {
	*x = PipelineRerunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunResponse) ProtoMessage() {}

func (x *PipelineRerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{243}
}

func (x *PipelineRerunResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineRunResponse) Reset() {
	*x = PipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunResponse) ProtoMessage() {}

func (x *PipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{244}
}

type PipelineTaskOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskAlias string `protobuf:"bytes,2,opt,name=taskAlias,proto3" json:"taskAlias,omitempty"`
	Disable   *bool  `protobuf:"varint,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
	Pause     *bool  `protobuf:"varint,4,opt,name=pause,proto3,oneof" json:"pause,omitempty"`
}

func (x *PipelineTaskOperateRequest) Reset() {
	*x = PipelineTaskOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskOperateRequest) ProtoMessage() {}

func (x *PipelineTaskOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskOperateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{245}
}

func (x *PipelineTaskOperateRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PipelineTaskOperateRequest) GetTaskAlias() string {
	if x != nil {
		return x.TaskAlias
	}
	return ""
}

func (x *PipelineTaskOperateRequest) GetDisable() bool {
	if x != nil && x.Disable != nil {
		return *x.Disable
	}
	return false
}

func (x *PipelineTaskOperateRequest) GetPause() bool {
	if x != nil && x.Pause != nil {
		return *x.Pause
	}
	return false
}

type ProjectCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo            string            `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	DdHook          string            `protobuf:"bytes,4,opt,name=ddHook,proto3" json:"ddHook,omitempty"`
	Desc            string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Creator         string            `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	OrgID           uint64            `protobuf:"varint,7,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ClusterID       uint64            `protobuf:"varint,8,opt,name=clusterID,json=clusterId,proto3" json:"clusterID,omitempty"`
	ClusterName     string            `protobuf:"bytes,9,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterConfig   map[string]string `protobuf:"bytes,10,rep,name=clusterConfig,proto3" json:"clusterConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceConfigs *structpb.Value   `protobuf:"bytes,11,opt,name=resourceConfigs,json=resourceConfig,proto3,oneof" json:"resourceConfigs,omitempty"`
	RollbackConfig  map[string]int64  `protobuf:"bytes,12,rep,name=rollbackConfig,proto3" json:"rollbackConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CpuQuota        float64           `protobuf:"fixed64,13,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`
	MemQuota        float64           `protobuf:"fixed64,14,opt,name=memQuota,proto3" json:"memQuota,omitempty"`
	Template        string            `protobuf:"bytes,15,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *ProjectCreateRequest) Reset() {
	*x = ProjectCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectCreateRequest) ProtoMessage() {}

func (x *ProjectCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectCreateRequest.ProtoReflect.Descriptor instead.
func (*ProjectCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{246}
}

func (x *ProjectCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectCreateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectCreateRequest) GetDdHook() string {
	if x != nil {
		return x.DdHook
	}
	return ""
}

func (x *ProjectCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProjectCreateRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ProjectCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectCreateRequest) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *ProjectCreateRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ProjectCreateRequest) GetClusterConfig() map[string]string {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

func (x *ProjectCreateRequest) GetResourceConfigs() *structpb.Value {
	if x != nil {
		return x.ResourceConfigs
	}
	return nil
}

func (x *ProjectCreateRequest) GetRollbackConfig() map[string]int64 {
	if x != nil {
		return x.RollbackConfig
	}
	return nil
}

func (x *ProjectCreateRequest) GetCpuQuota() float64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *ProjectCreateRequest) GetMemQuota() float64 {
	if x != nil {
		return x.MemQuota
	}
	return 0
}

func (x *ProjectCreateRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type ProjectCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectCreateResponse) Reset() {
	*x = ProjectCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectCreateResponse) ProtoMessage() {}

func (x *ProjectCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectCreateResponse.ProtoReflect.Descriptor instead.
func (*ProjectCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{247}
}

func (x *ProjectCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type ProjectDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string                 `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	DDHook               string                 `protobuf:"bytes,4,opt,name=dDHook,json=ddHook,proto3" json:"dDHook,omitempty"`
	OrgID                uint64                 `protobuf:"varint,5,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Creator              string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Logo                 string                 `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc                 string                 `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	Owners               []string               `protobuf:"bytes,9,rep,name=owners,proto3" json:"owners,omitempty"`
	ActiveTime           string                 `protobuf:"bytes,10,opt,name=activeTime,proto3" json:"activeTime,omitempty"`
	Joined               bool                   `protobuf:"varint,11,opt,name=joined,proto3" json:"joined,omitempty"`
	CanUnblock           *bool                  `protobuf:"varint,12,opt,name=canUnblock,proto3,oneof" json:"canUnblock,omitempty"`
	BlockStatus          string                 `protobuf:"bytes,13,opt,name=blockStatus,proto3" json:"blockStatus,omitempty"`
	CanManage            bool                   `protobuf:"varint,14,opt,name=canManage,json=CanManage,proto3" json:"canManage,omitempty"`
	IsPublic             bool                   `protobuf:"varint,15,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Stats                *structpb.Value        `protobuf:"bytes,16,opt,name=stats,proto3" json:"stats,omitempty"`
	ProjectResourceUsage *structpb.Value        `protobuf:"bytes,17,opt,name=projectResourceUsage,proto3" json:"projectResourceUsage,omitempty"`
	ClusterConfig        map[string]string      `protobuf:"bytes,18,rep,name=clusterConfig,proto3" json:"clusterConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceConfig       *structpb.Value        `protobuf:"bytes,19,opt,name=resourceConfig,proto3,oneof" json:"resourceConfig,omitempty"`
	RollbackConfig       map[string]int64       `protobuf:"bytes,20,rep,name=rollbackConfig,proto3" json:"rollbackConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CpuQuota             float64                `protobuf:"fixed64,21,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`
	MemQuota             float64                `protobuf:"fixed64,22,opt,name=memQuota,proto3" json:"memQuota,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Type                 string                 `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ProjectDTO) Reset() {
	*x = ProjectDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDTO) ProtoMessage() {}

func (x *ProjectDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDTO.ProtoReflect.Descriptor instead.
func (*ProjectDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{248}
}

func (x *ProjectDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProjectDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectDTO) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectDTO) GetDDHook() string {
	if x != nil {
		return x.DDHook
	}
	return ""
}

func (x *ProjectDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ProjectDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProjectDTO) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *ProjectDTO) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *ProjectDTO) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *ProjectDTO) GetCanUnblock() bool {
	if x != nil && x.CanUnblock != nil {
		return *x.CanUnblock
	}
	return false
}

func (x *ProjectDTO) GetBlockStatus() string {
	if x != nil {
		return x.BlockStatus
	}
	return ""
}

func (x *ProjectDTO) GetCanManage() bool {
	if x != nil {
		return x.CanManage
	}
	return false
}

func (x *ProjectDTO) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ProjectDTO) GetStats() *structpb.Value {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ProjectDTO) GetProjectResourceUsage() *structpb.Value {
	if x != nil {
		return x.ProjectResourceUsage
	}
	return nil
}

func (x *ProjectDTO) GetClusterConfig() map[string]string {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

func (x *ProjectDTO) GetResourceConfig() *structpb.Value {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *ProjectDTO) GetRollbackConfig() map[string]int64 {
	if x != nil {
		return x.RollbackConfig
	}
	return nil
}

func (x *ProjectDTO) GetCpuQuota() float64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *ProjectDTO) GetMemQuota() float64 {
	if x != nil {
		return x.MemQuota
	}
	return 0
}

func (x *ProjectDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProjectDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProjectDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
}

func (x *ProjectDeleteRequest) Reset() {
	*x = ProjectDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDeleteRequest) ProtoMessage() {}

func (x *ProjectDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDeleteRequest.ProtoReflect.Descriptor instead.
func (*ProjectDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{249}
}

func (x *ProjectDeleteRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type ProjectDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectDeleteResponse) Reset() {
	*x = ProjectDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDeleteResponse) ProtoMessage() {}

func (x *ProjectDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDeleteResponse.ProtoReflect.Descriptor instead.
func (*ProjectDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{250}
}

func (x *ProjectDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIDOrName string `protobuf:"bytes,1,opt,name=projectIDOrName,json=projectIdOrName,proto3" json:"projectIDOrName,omitempty"`
	OrgID           uint64 `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName         uint64 `protobuf:"varint,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *ProjectDetailRequest) Reset() {
	*x = ProjectDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDetailRequest) ProtoMessage() {}

func (x *ProjectDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDetailRequest.ProtoReflect.Descriptor instead.
func (*ProjectDetailRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{251}
}

func (x *ProjectDetailRequest) GetProjectIDOrName() string {
	if x != nil {
		return x.ProjectIDOrName
	}
	return ""
}

func (x *ProjectDetailRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectDetailRequest) GetOrgName() uint64 {
	if x != nil {
		return x.OrgName
	}
	return 0
}

type ProjectDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectDetailResponse) Reset() {
	*x = ProjectDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDetailResponse) ProtoMessage() {}

func (x *ProjectDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDetailResponse.ProtoReflect.Descriptor instead.
func (*ProjectDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{252}
}

func (x *ProjectDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID      uint64   `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Query      string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrderBy    string   `protobuf:"bytes,4,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Asc        bool     `protobuf:"varint,5,opt,name=asc,proto3" json:"asc,omitempty"`
	Joined     bool     `protobuf:"varint,6,opt,name=joined,proto3" json:"joined,omitempty"`
	PageNo     int64    `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize   int64    `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ProjectIDs []uint64 `protobuf:"varint,9,rep,packed,name=projectIDs,proto3" json:"projectIDs,omitempty"`
	KeepMsp    bool     `protobuf:"varint,10,opt,name=keepMsp,proto3" json:"keepMsp,omitempty"`
	IsPublic   bool     `protobuf:"varint,11,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *ProjectListRequest) Reset() {
	*x = ProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListRequest) ProtoMessage() {}

func (x *ProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListRequest.ProtoReflect.Descriptor instead.
func (*ProjectListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{253}
}

func (x *ProjectListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ProjectListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ProjectListRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *ProjectListRequest) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *ProjectListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ProjectListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProjectListRequest) GetProjectIDs() []uint64 {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

func (x *ProjectListRequest) GetKeepMsp() bool {
	if x != nil {
		return x.KeepMsp
	}
	return false
}

func (x *ProjectListRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type ProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectListResponse) Reset() {
	*x = ProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListResponse) ProtoMessage() {}

func (x *ProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListResponse.ProtoReflect.Descriptor instead.
func (*ProjectListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{254}
}

func (x *ProjectListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectPackageParse_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProjectPackageParse_Request) Reset() {
	*x = ProjectPackageParse_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectPackageParse_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectPackageParse_Request) ProtoMessage() {}

func (x *ProjectPackageParse_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectPackageParse_Request.ProtoReflect.Descriptor instead.
func (*ProjectPackageParse_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{255}
}

type ProjectPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID          uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName        string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string `protobuf:"bytes,3,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	OrgID              uint64 `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName            string `protobuf:"bytes,5,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *ProjectPackageRequest) Reset() {
	*x = ProjectPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectPackageRequest) ProtoMessage() {}

func (x *ProjectPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectPackageRequest.ProtoReflect.Descriptor instead.
func (*ProjectPackageRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{256}
}

func (x *ProjectPackageRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectPackageRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectPackageRequest) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ProjectPackageRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectPackageRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type ProjectResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuServiceUsed float64 `protobuf:"fixed64,1,opt,name=cpuServiceUsed,proto3" json:"cpuServiceUsed,omitempty"`
	MemServiceUsed float64 `protobuf:"fixed64,2,opt,name=memServiceUsed,proto3" json:"memServiceUsed,omitempty"`
	CpuAddonUsed   float64 `protobuf:"fixed64,3,opt,name=cpuAddonUsed,proto3" json:"cpuAddonUsed,omitempty"`
	MemAddonUsed   float64 `protobuf:"fixed64,4,opt,name=memAddonUsed,proto3" json:"memAddonUsed,omitempty"`
}

func (x *ProjectResourceUsage) Reset() {
	*x = ProjectResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectResourceUsage) ProtoMessage() {}

func (x *ProjectResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectResourceUsage.ProtoReflect.Descriptor instead.
func (*ProjectResourceUsage) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{257}
}

func (x *ProjectResourceUsage) GetCpuServiceUsed() float64 {
	if x != nil {
		return x.CpuServiceUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetMemServiceUsed() float64 {
	if x != nil {
		return x.MemServiceUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetCpuAddonUsed() float64 {
	if x != nil {
		return x.CpuAddonUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetMemAddonUsed() float64 {
	if x != nil {
		return x.MemAddonUsed
	}
	return 0
}

type ProjectStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountApplications       int64   `protobuf:"varint,1,opt,name=countApplications,proto3" json:"countApplications,omitempty"`
	CountMembers            int64   `protobuf:"varint,2,opt,name=countMembers,proto3" json:"countMembers,omitempty"`
	TotalApplicationsCount  int64   `protobuf:"varint,3,opt,name=totalApplicationsCount,proto3" json:"totalApplicationsCount,omitempty"`
	TotalMembersCount       int64   `protobuf:"varint,4,opt,name=totalMembersCount,proto3" json:"totalMembersCount,omitempty"`
	TotalIterationsCount    int64   `protobuf:"varint,5,opt,name=totalIterationsCount,proto3" json:"totalIterationsCount,omitempty"`
	RunningIterationsCount  int64   `protobuf:"varint,6,opt,name=runningIterationsCount,proto3" json:"runningIterationsCount,omitempty"`
	PlanningIterationsCount int64   `protobuf:"varint,7,opt,name=planningIterationsCount,proto3" json:"planningIterationsCount,omitempty"`
	TotalManHourCount       float64 `protobuf:"fixed64,8,opt,name=totalManHourCount,proto3" json:"totalManHourCount,omitempty"`
	UsedManHourCount        float64 `protobuf:"fixed64,9,opt,name=usedManHourCount,proto3" json:"usedManHourCount,omitempty"`
	PlanningManHourCount    float64 `protobuf:"fixed64,10,opt,name=planningManHourCount,proto3" json:"planningManHourCount,omitempty"`
	DoneBugCount            int64   `protobuf:"varint,11,opt,name=doneBugCount,proto3" json:"doneBugCount,omitempty"`
	TotalBugCount           int64   `protobuf:"varint,12,opt,name=totalBugCount,proto3" json:"totalBugCount,omitempty"`
	DoneBugPercent          float64 `protobuf:"fixed64,13,opt,name=doneBugPercent,proto3" json:"doneBugPercent,omitempty"`
}

func (x *ProjectStats) Reset() {
	*x = ProjectStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectStats) ProtoMessage() {}

func (x *ProjectStats) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectStats.ProtoReflect.Descriptor instead.
func (*ProjectStats) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{258}
}

func (x *ProjectStats) GetCountApplications() int64 {
	if x != nil {
		return x.CountApplications
	}
	return 0
}

func (x *ProjectStats) GetCountMembers() int64 {
	if x != nil {
		return x.CountMembers
	}
	return 0
}

func (x *ProjectStats) GetTotalApplicationsCount() int64 {
	if x != nil {
		return x.TotalApplicationsCount
	}
	return 0
}

func (x *ProjectStats) GetTotalMembersCount() int64 {
	if x != nil {
		return x.TotalMembersCount
	}
	return 0
}

func (x *ProjectStats) GetTotalIterationsCount() int64 {
	if x != nil {
		return x.TotalIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetRunningIterationsCount() int64 {
	if x != nil {
		return x.RunningIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetPlanningIterationsCount() int64 {
	if x != nil {
		return x.PlanningIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetTotalManHourCount() float64 {
	if x != nil {
		return x.TotalManHourCount
	}
	return 0
}

func (x *ProjectStats) GetUsedManHourCount() float64 {
	if x != nil {
		return x.UsedManHourCount
	}
	return 0
}

func (x *ProjectStats) GetPlanningManHourCount() float64 {
	if x != nil {
		return x.PlanningManHourCount
	}
	return 0
}

func (x *ProjectStats) GetDoneBugCount() int64 {
	if x != nil {
		return x.DoneBugCount
	}
	return 0
}

func (x *ProjectStats) GetTotalBugCount() int64 {
	if x != nil {
		return x.TotalBugCount
	}
	return 0
}

func (x *ProjectStats) GetDoneBugPercent() float64 {
	if x != nil {
		return x.DoneBugPercent
	}
	return 0
}

type ProxyMetrics_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProxyMetrics_Request) Reset() {
	*x = ProxyMetrics_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyMetrics_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyMetrics_Request) ProtoMessage() {}

func (x *ProxyMetrics_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyMetrics_Request.ProtoReflect.Descriptor instead.
func (*ProxyMetrics_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{259}
}

type PublishItemStatisticsDetailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemStatisticsDetailData) Reset() {
	*x = PublishItemStatisticsDetailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsDetailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsDetailData) ProtoMessage() {}

func (x *PublishItemStatisticsDetailData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsDetailData.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsDetailData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{260}
}

func (x *PublishItemStatisticsDetailData) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemStatisticsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime       uint64 `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PublishItemId string `protobuf:"bytes,2,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *PublishItemStatisticsDetailRequest) Reset() {
	*x = PublishItemStatisticsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsDetailRequest) ProtoMessage() {}

func (x *PublishItemStatisticsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsDetailRequest.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsDetailRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{261}
}

func (x *PublishItemStatisticsDetailRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PublishItemStatisticsDetailRequest) GetPublishItemId() string {
	if x != nil {
		return x.PublishItemId
	}
	return ""
}

type PublishItemStatisticsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               string `protobuf:"bytes,1,opt,name=key,json=versionOrChannel,proto3" json:"key,omitempty"`
	TotalUsers        uint64 `protobuf:"varint,2,opt,name=totalUsers,proto3" json:"totalUsers,omitempty"`
	TotalUsersGrowth  string `protobuf:"bytes,3,opt,name=totalUsersGrowth,proto3" json:"totalUsersGrowth,omitempty"`
	NewUsers          uint64 `protobuf:"varint,4,opt,name=newUsers,proto3" json:"newUsers,omitempty"`
	ActiveUsers       uint64 `protobuf:"varint,5,opt,name=activeUsers,proto3" json:"activeUsers,omitempty"`
	ActiveUsersGrowth string `protobuf:"bytes,6,opt,name=activeUsersGrowth,proto3" json:"activeUsersGrowth,omitempty"`
	Launches          uint64 `protobuf:"varint,7,opt,name=launches,proto3" json:"launches,omitempty"`
	UpgradeUser       uint64 `protobuf:"varint,8,opt,name=upgradeUser,proto3" json:"upgradeUser,omitempty"`
}

func (x *PublishItemStatisticsDetailResponse) Reset() {
	*x = PublishItemStatisticsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsDetailResponse) ProtoMessage() {}

func (x *PublishItemStatisticsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsDetailResponse.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{262}
}

func (x *PublishItemStatisticsDetailResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PublishItemStatisticsDetailResponse) GetTotalUsers() uint64 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *PublishItemStatisticsDetailResponse) GetTotalUsersGrowth() string {
	if x != nil {
		return x.TotalUsersGrowth
	}
	return ""
}

func (x *PublishItemStatisticsDetailResponse) GetNewUsers() uint64 {
	if x != nil {
		return x.NewUsers
	}
	return 0
}

func (x *PublishItemStatisticsDetailResponse) GetActiveUsers() uint64 {
	if x != nil {
		return x.ActiveUsers
	}
	return 0
}

func (x *PublishItemStatisticsDetailResponse) GetActiveUsersGrowth() string {
	if x != nil {
		return x.ActiveUsersGrowth
	}
	return ""
}

func (x *PublishItemStatisticsDetailResponse) GetLaunches() uint64 {
	if x != nil {
		return x.Launches
	}
	return 0
}

func (x *PublishItemStatisticsDetailResponse) GetUpgradeUser() uint64 {
	if x != nil {
		return x.UpgradeUser
	}
	return 0
}

type PublishItemStatisticsErrListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemStatisticsErrListData) Reset() {
	*x = PublishItemStatisticsErrListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsErrListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsErrListData) ProtoMessage() {}

func (x *PublishItemStatisticsErrListData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsErrListData.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsErrListData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{263}
}

func (x *PublishItemStatisticsErrListData) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemStatisticsErrListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrSummary   string                 `protobuf:"bytes,1,opt,name=errSummary,proto3" json:"errSummary,omitempty"`
	AppVersion   string                 `protobuf:"bytes,2,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	TimeOfFirst  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeOfFirst,proto3" json:"timeOfFirst,omitempty"`
	TimeOfRecent *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timeOfRecent,proto3" json:"timeOfRecent,omitempty"`
	TotalErr     uint64                 `protobuf:"varint,5,opt,name=totalErr,proto3" json:"totalErr,omitempty"`
	AffectUsers  uint64                 `protobuf:"varint,6,opt,name=affectUsers,proto3" json:"affectUsers,omitempty"`
}

func (x *PublishItemStatisticsErrListResponse) Reset() {
	*x = PublishItemStatisticsErrListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsErrListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsErrListResponse) ProtoMessage() {}

func (x *PublishItemStatisticsErrListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsErrListResponse.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsErrListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{264}
}

func (x *PublishItemStatisticsErrListResponse) GetErrSummary() string {
	if x != nil {
		return x.ErrSummary
	}
	return ""
}

func (x *PublishItemStatisticsErrListResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *PublishItemStatisticsErrListResponse) GetTimeOfFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeOfFirst
	}
	return nil
}

func (x *PublishItemStatisticsErrListResponse) GetTimeOfRecent() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeOfRecent
	}
	return nil
}

func (x *PublishItemStatisticsErrListResponse) GetTotalErr() uint64 {
	if x != nil {
		return x.TotalErr
	}
	return 0
}

func (x *PublishItemStatisticsErrListResponse) GetAffectUsers() uint64 {
	if x != nil {
		return x.AffectUsers
	}
	return 0
}

type PublishItemStatisticsErrTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemStatisticsErrTrendData) Reset() {
	*x = PublishItemStatisticsErrTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsErrTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsErrTrendData) ProtoMessage() {}

func (x *PublishItemStatisticsErrTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsErrTrendData.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsErrTrendData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{265}
}

func (x *PublishItemStatisticsErrTrendData) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemStatisticsErrTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrashTimes                  uint64  `protobuf:"varint,1,opt,name=crashTimes,proto3" json:"crashTimes,omitempty"`
	CrashRate                   string  `protobuf:"bytes,2,opt,name=crashRate,proto3" json:"crashRate,omitempty"`
	CrashRateGrowth             float64 `protobuf:"fixed64,3,opt,name=crashRateGrowth,proto3" json:"crashRateGrowth,omitempty"`
	AffectUsers                 uint64  `protobuf:"varint,4,opt,name=affectUsers,proto3" json:"affectUsers,omitempty"`
	AffectUsersProportion       string  `protobuf:"bytes,5,opt,name=affectUsersProportion,proto3" json:"affectUsersProportion,omitempty"`
	AffectUsersProportionGrowth float64 `protobuf:"fixed64,6,opt,name=affectUsersProportionGrowth,proto3" json:"affectUsersProportionGrowth,omitempty"`
}

func (x *PublishItemStatisticsErrTrendResponse) Reset() {
	*x = PublishItemStatisticsErrTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsErrTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsErrTrendResponse) ProtoMessage() {}

func (x *PublishItemStatisticsErrTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsErrTrendResponse.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsErrTrendResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{266}
}

func (x *PublishItemStatisticsErrTrendResponse) GetCrashTimes() uint64 {
	if x != nil {
		return x.CrashTimes
	}
	return 0
}

func (x *PublishItemStatisticsErrTrendResponse) GetCrashRate() string {
	if x != nil {
		return x.CrashRate
	}
	return ""
}

func (x *PublishItemStatisticsErrTrendResponse) GetCrashRateGrowth() float64 {
	if x != nil {
		return x.CrashRateGrowth
	}
	return 0
}

func (x *PublishItemStatisticsErrTrendResponse) GetAffectUsers() uint64 {
	if x != nil {
		return x.AffectUsers
	}
	return 0
}

func (x *PublishItemStatisticsErrTrendResponse) GetAffectUsersProportion() string {
	if x != nil {
		return x.AffectUsersProportion
	}
	return ""
}

func (x *PublishItemStatisticsErrTrendResponse) GetAffectUsersProportionGrowth() float64 {
	if x != nil {
		return x.AffectUsersProportionGrowth
	}
	return 0
}

type PublishItemStatisticsTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemStatisticsTrendData) Reset() {
	*x = PublishItemStatisticsTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsTrendData) ProtoMessage() {}

func (x *PublishItemStatisticsTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsTrendData.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsTrendData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{267}
}

func (x *PublishItemStatisticsTrendData) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemStatisticsTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SevenDayAvgNewUsers                uint64  `protobuf:"varint,1,opt,name=sevenDayAvgNewUsers,json=7dAvgNewUsers,proto3" json:"sevenDayAvgNewUsers,omitempty"`
	SevenDayAvgNewUsersGrowth          float64 `protobuf:"fixed64,2,opt,name=sevenDayAvgNewUsersGrowth,json=7dAvgNewUsersGrowth,proto3" json:"sevenDayAvgNewUsersGrowth,omitempty"`
	SevenDayAvgActiveUsers             uint64  `protobuf:"varint,3,opt,name=sevenDayAvgActiveUsers,json=7dAvgActiveUsers,proto3" json:"sevenDayAvgActiveUsers,omitempty"`
	SevenDayAvgActiveUsersGrowth       float64 `protobuf:"fixed64,4,opt,name=sevenDayAvgActiveUsersGrowth,json=7dAvgActiveUsersGrowth,proto3" json:"sevenDayAvgActiveUsersGrowth,omitempty"`
	SevenDayAvgNewUsersRetention       string  `protobuf:"bytes,5,opt,name=sevenDayAvgNewUsersRetention,json=7dAvgNewUsersRetention,proto3" json:"sevenDayAvgNewUsersRetention,omitempty"`
	SevenDayAvgNewUsersRetentionGrowth float64 `protobuf:"fixed64,6,opt,name=sevenDayAvgNewUsersRetentionGrowth,json=7dAvgNewUsersRetentionGrowth,proto3" json:"sevenDayAvgNewUsersRetentionGrowth,omitempty"`
	SevenDayAvgDuration                string  `protobuf:"bytes,7,opt,name=sevenDayAvgDuration,json=7dAvgDuration,proto3" json:"sevenDayAvgDuration,omitempty"`
	SevenDayAvgDurationGrowth          float64 `protobuf:"fixed64,8,opt,name=sevenDayAvgDurationGrowth,json=7dAvgDurationGrowth,proto3" json:"sevenDayAvgDurationGrowth,omitempty"`
	SevenDayTotalActiveUsers           uint64  `protobuf:"varint,9,opt,name=sevenDayTotalActiveUsers,json=7dTotalActiveUsers,proto3" json:"sevenDayTotalActiveUsers,omitempty"`
	SevenDayTotalActiveUsersGrowth     float64 `protobuf:"fixed64,10,opt,name=sevenDayTotalActiveUsersGrowth,json=7dTotalActiveUsersGrowth,proto3" json:"sevenDayTotalActiveUsersGrowth,omitempty"`
	MonthTotalActiveUsers              uint64  `protobuf:"varint,11,opt,name=monthTotalActiveUsers,proto3" json:"monthTotalActiveUsers,omitempty"`
	MonthTotalActiveUsersGrowth        float64 `protobuf:"fixed64,12,opt,name=monthTotalActiveUsersGrowth,proto3" json:"monthTotalActiveUsersGrowth,omitempty"`
	TotalUsers                         uint64  `protobuf:"varint,13,opt,name=totalUsers,proto3" json:"totalUsers,omitempty"`
	TotalCrashRate                     string  `protobuf:"bytes,14,opt,name=totalCrashRate,proto3" json:"totalCrashRate,omitempty"`
}

func (x *PublishItemStatisticsTrendResponse) Reset() {
	*x = PublishItemStatisticsTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemStatisticsTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemStatisticsTrendResponse) ProtoMessage() {}

func (x *PublishItemStatisticsTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemStatisticsTrendResponse.ProtoReflect.Descriptor instead.
func (*PublishItemStatisticsTrendResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{268}
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgNewUsers() uint64 {
	if x != nil {
		return x.SevenDayAvgNewUsers
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgNewUsersGrowth() float64 {
	if x != nil {
		return x.SevenDayAvgNewUsersGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgActiveUsers() uint64 {
	if x != nil {
		return x.SevenDayAvgActiveUsers
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgActiveUsersGrowth() float64 {
	if x != nil {
		return x.SevenDayAvgActiveUsersGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgNewUsersRetention() string {
	if x != nil {
		return x.SevenDayAvgNewUsersRetention
	}
	return ""
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgNewUsersRetentionGrowth() float64 {
	if x != nil {
		return x.SevenDayAvgNewUsersRetentionGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgDuration() string {
	if x != nil {
		return x.SevenDayAvgDuration
	}
	return ""
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayAvgDurationGrowth() float64 {
	if x != nil {
		return x.SevenDayAvgDurationGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayTotalActiveUsers() uint64 {
	if x != nil {
		return x.SevenDayTotalActiveUsers
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetSevenDayTotalActiveUsersGrowth() float64 {
	if x != nil {
		return x.SevenDayTotalActiveUsersGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetMonthTotalActiveUsers() uint64 {
	if x != nil {
		return x.MonthTotalActiveUsers
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetMonthTotalActiveUsersGrowth() float64 {
	if x != nil {
		return x.MonthTotalActiveUsersGrowth
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetTotalUsers() uint64 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *PublishItemStatisticsTrendResponse) GetTotalCrashRate() string {
	if x != nil {
		return x.TotalCrashRate
	}
	return ""
}

type PublisherCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublisherType string `protobuf:"bytes,2,opt,name=publisherType,proto3" json:"publisherType,omitempty"`
	Logo          string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc          string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	OrgID         uint64 `protobuf:"varint,5,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
}

func (x *PublisherCreateRequest) Reset() {
	*x = PublisherCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherCreateRequest) ProtoMessage() {}

func (x *PublisherCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherCreateRequest.ProtoReflect.Descriptor instead.
func (*PublisherCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{269}
}

func (x *PublisherCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublisherCreateRequest) GetPublisherType() string {
	if x != nil {
		return x.PublisherType
	}
	return ""
}

func (x *PublisherCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublisherCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PublisherCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type PublisherCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublisherCreateResponse) Reset() {
	*x = PublisherCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherCreateResponse) ProtoMessage() {}

func (x *PublisherCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherCreateResponse.ProtoReflect.Descriptor instead.
func (*PublisherCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{270}
}

func (x *PublisherCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type PublisherDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PublisherType        string                 `protobuf:"bytes,3,opt,name=publisherType,json=publishType,proto3" json:"publisherType,omitempty"`
	PublisherKey         string                 `protobuf:"bytes,4,opt,name=publisherKey,json=publishKey,proto3" json:"publisherKey,omitempty"`
	OrgID                uint64                 `protobuf:"varint,5,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Creator              string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Logo                 string                 `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc                 string                 `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	Joined               bool                   `protobuf:"varint,9,opt,name=joined,proto3" json:"joined,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	NexusRepositories    []*structpb.Value      `protobuf:"bytes,12,rep,name=nexusRepositories,proto3" json:"nexusRepositories,omitempty"`
	PipelineCmNamespaces []string               `protobuf:"bytes,13,rep,name=pipelineCmNamespaces,proto3" json:"pipelineCmNamespaces,omitempty"`
}

func (x *PublisherDTO) Reset() {
	*x = PublisherDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherDTO) ProtoMessage() {}

func (x *PublisherDTO) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherDTO.ProtoReflect.Descriptor instead.
func (*PublisherDTO) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{271}
}

func (x *PublisherDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PublisherDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublisherDTO) GetPublisherType() string {
	if x != nil {
		return x.PublisherType
	}
	return ""
}

func (x *PublisherDTO) GetPublisherKey() string {
	if x != nil {
		return x.PublisherKey
	}
	return ""
}

func (x *PublisherDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PublisherDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *PublisherDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublisherDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PublisherDTO) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *PublisherDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublisherDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PublisherDTO) GetNexusRepositories() []*structpb.Value {
	if x != nil {
		return x.NexusRepositories
	}
	return nil
}

func (x *PublisherDTO) GetPipelineCmNamespaces() []string {
	if x != nil {
		return x.PipelineCmNamespaces
	}
	return nil
}

type PublisherDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublisherDeleteResponse) Reset() {
	*x = PublisherDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherDeleteResponse) ProtoMessage() {}

func (x *PublisherDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherDeleteResponse.ProtoReflect.Descriptor instead.
func (*PublisherDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{272}
}

func (x *PublisherDeleteResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type PublisherDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublisherDetailResponse) Reset() {
	*x = PublisherDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherDetailResponse) ProtoMessage() {}

func (x *PublisherDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherDetailResponse.ProtoReflect.Descriptor instead.
func (*PublisherDetailResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{273}
}

func (x *PublisherDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublisherListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Joined   bool   `protobuf:"varint,2,opt,name=joined,proto3" json:"joined,omitempty"`
	Query    string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PageNo   int64  `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *PublisherListRequest) Reset() {
	*x = PublisherListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherListRequest) ProtoMessage() {}

func (x *PublisherListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherListRequest.ProtoReflect.Descriptor instead.
func (*PublisherListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{274}
}

func (x *PublisherListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PublisherListRequest) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *PublisherListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *PublisherListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublisherListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PublisherListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PublisherListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublisherListResponse) Reset() {
	*x = PublisherListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherListResponse) ProtoMessage() {}

func (x *PublisherListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherListResponse.ProtoReflect.Descriptor instead.
func (*PublisherListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{275}
}

func (x *PublisherListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublisherUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PublisherUpdateRequest) Reset() {
	*x = PublisherUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherUpdateRequest) ProtoMessage() {}

func (x *PublisherUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherUpdateRequest.ProtoReflect.Descriptor instead.
func (*PublisherUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{276}
}

func (x *PublisherUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PublisherUpdateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublisherUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PublisherUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublisherUpdateResponse) Reset() {
	*x = PublisherUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherUpdateResponse) ProtoMessage() {}

func (x *PublisherUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherUpdateResponse.ProtoReflect.Descriptor instead.
func (*PublisherUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{277}
}

func (x *PublisherUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PushCertificateConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool            `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Envs            []string        `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty"`
	CertificateType string          `protobuf:"bytes,3,opt,name=certificateType,proto3" json:"certificateType,omitempty"`
	IOSKey          *structpb.Value `protobuf:"bytes,4,opt,name=iOSKey,json=iosKey,proto3" json:"iOSKey,omitempty"`
	AndroidKey      *structpb.Value `protobuf:"bytes,5,opt,name=androidKey,proto3" json:"androidKey,omitempty"`
	MessageKey      *structpb.Value `protobuf:"bytes,6,opt,name=messageKey,proto3" json:"messageKey,omitempty"`
}

func (x *PushCertificateConfigs) Reset() {
	*x = PushCertificateConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCertificateConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCertificateConfigs) ProtoMessage() {}

func (x *PushCertificateConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCertificateConfigs.ProtoReflect.Descriptor instead.
func (*PushCertificateConfigs) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{278}
}

func (x *PushCertificateConfigs) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PushCertificateConfigs) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PushCertificateConfigs) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *PushCertificateConfigs) GetIOSKey() *structpb.Value {
	if x != nil {
		return x.IOSKey
	}
	return nil
}

func (x *PushCertificateConfigs) GetAndroidKey() *structpb.Value {
	if x != nil {
		return x.AndroidKey
	}
	return nil
}

func (x *PushCertificateConfigs) GetMessageKey() *structpb.Value {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

type PushCertificateConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool            `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	AppID           uint64          `protobuf:"varint,2,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
	CertificateID   uint64          `protobuf:"varint,3,opt,name=certificateID,json=certificateId,proto3" json:"certificateID,omitempty"`
	CertificateType string          `protobuf:"bytes,4,opt,name=certificateType,proto3" json:"certificateType,omitempty"`
	Envs            []string        `protobuf:"bytes,5,rep,name=envs,proto3" json:"envs,omitempty"`
	IOSKey          *structpb.Value `protobuf:"bytes,6,opt,name=iOSKey,json=iosKey,proto3" json:"iOSKey,omitempty"`
	AndroidKey      *structpb.Value `protobuf:"bytes,7,opt,name=androidKey,proto3" json:"androidKey,omitempty"`
	MessageKey      *structpb.Value `protobuf:"bytes,8,opt,name=messageKey,proto3" json:"messageKey,omitempty"`
}

func (x *PushCertificateConfigsRequest) Reset() {
	*x = PushCertificateConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCertificateConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCertificateConfigsRequest) ProtoMessage() {}

func (x *PushCertificateConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCertificateConfigsRequest.ProtoReflect.Descriptor instead.
func (*PushCertificateConfigsRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{279}
}

func (x *PushCertificateConfigsRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PushCertificateConfigsRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PushCertificateConfigsRequest) GetCertificateID() uint64 {
	if x != nil {
		return x.CertificateID
	}
	return 0
}

func (x *PushCertificateConfigsRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *PushCertificateConfigsRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PushCertificateConfigsRequest) GetIOSKey() *structpb.Value {
	if x != nil {
		return x.IOSKey
	}
	return nil
}

func (x *PushCertificateConfigsRequest) GetAndroidKey() *structpb.Value {
	if x != nil {
		return x.AndroidKey
	}
	return nil
}

func (x *PushCertificateConfigsRequest) GetMessageKey() *structpb.Value {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

type QA_APITESTS_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_APITESTS_GET_Request) Reset() {
	*x = QA_APITESTS_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_APITESTS_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_APITESTS_GET_Request) ProtoMessage() {}

func (x *QA_APITESTS_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_APITESTS_GET_Request.ProtoReflect.Descriptor instead.
func (*QA_APITESTS_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{280}
}

func (x *QA_APITESTS_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_AUTOTEST_SPACE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_AUTOTEST_SPACE_GET_Request) Reset() {
	*x = QA_AUTOTEST_SPACE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_AUTOTEST_SPACE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_AUTOTEST_SPACE_GET_Request) ProtoMessage() {}

func (x *QA_AUTOTEST_SPACE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_AUTOTEST_SPACE_GET_Request.ProtoReflect.Descriptor instead.
func (*QA_AUTOTEST_SPACE_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{281}
}

func (x *QA_AUTOTEST_SPACE_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_PIPELINE_TASK_LOGS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
	TaskID     string `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`         // generated from path variable: taskID. You should change the proto type if necessary.
}

func (x *QA_PIPELINE_TASK_LOGS_Request) Reset() {
	*x = QA_PIPELINE_TASK_LOGS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_PIPELINE_TASK_LOGS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_PIPELINE_TASK_LOGS_Request) ProtoMessage() {}

func (x *QA_PIPELINE_TASK_LOGS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_PIPELINE_TASK_LOGS_Request.ProtoReflect.Descriptor instead.
func (*QA_PIPELINE_TASK_LOGS_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{282}
}

func (x *QA_PIPELINE_TASK_LOGS_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

func (x *QA_PIPELINE_TASK_LOGS_Request) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type QA_RECORDS_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_RECORDS_GET_Request) Reset() {
	*x = QA_RECORDS_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_RECORDS_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_RECORDS_GET_Request) ProtoMessage() {}

func (x *QA_RECORDS_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_RECORDS_GET_Request.ProtoReflect.Descriptor instead.
func (*QA_RECORDS_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{283}
}

func (x *QA_RECORDS_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_SONAR_GET_CREDENTIAL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QA_SONAR_GET_CREDENTIAL_Request) Reset() {
	*x = QA_SONAR_GET_CREDENTIAL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_SONAR_GET_CREDENTIAL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_SONAR_GET_CREDENTIAL_Request) ProtoMessage() {}

func (x *QA_SONAR_GET_CREDENTIAL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_SONAR_GET_CREDENTIAL_Request.ProtoReflect.Descriptor instead.
func (*QA_SONAR_GET_CREDENTIAL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{284}
}

type QA_SONAR_ISSUES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QA_SONAR_ISSUES_Request) Reset() {
	*x = QA_SONAR_ISSUES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_SONAR_ISSUES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_SONAR_ISSUES_Request) ProtoMessage() {}

func (x *QA_SONAR_ISSUES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_SONAR_ISSUES_Request.ProtoReflect.Descriptor instead.
func (*QA_SONAR_ISSUES_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{285}
}

type QA_SONAR_METRIC_RULES_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_SONAR_METRIC_RULES_GET_Request) Reset() {
	*x = QA_SONAR_METRIC_RULES_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_SONAR_METRIC_RULES_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_SONAR_METRIC_RULES_GET_Request) ProtoMessage() {}

func (x *QA_SONAR_METRIC_RULES_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_SONAR_METRIC_RULES_GET_Request.ProtoReflect.Descriptor instead.
func (*QA_SONAR_METRIC_RULES_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{286}
}

func (x *QA_SONAR_METRIC_RULES_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_TESTENV_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QA_TESTENV_CREATE_Request) Reset() {
	*x = QA_TESTENV_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_TESTENV_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_TESTENV_CREATE_Request) ProtoMessage() {}

func (x *QA_TESTENV_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_TESTENV_CREATE_Request.ProtoReflect.Descriptor instead.
func (*QA_TESTENV_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{287}
}

type QA_TESTENV_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_TESTENV_DELETE_Request) Reset() {
	*x = QA_TESTENV_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_TESTENV_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_TESTENV_DELETE_Request) ProtoMessage() {}

func (x *QA_TESTENV_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_TESTENV_DELETE_Request.ProtoReflect.Descriptor instead.
func (*QA_TESTENV_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{288}
}

func (x *QA_TESTENV_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_TESTENV_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *QA_TESTENV_GET_Request) Reset() {
	*x = QA_TESTENV_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_TESTENV_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_TESTENV_GET_Request) ProtoMessage() {}

func (x *QA_TESTENV_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_TESTENV_GET_Request.ProtoReflect.Descriptor instead.
func (*QA_TESTENV_GET_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{289}
}

func (x *QA_TESTENV_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QA_TESTENV_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QA_TESTENV_LIST_Request) Reset() {
	*x = QA_TESTENV_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_TESTENV_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_TESTENV_LIST_Request) ProtoMessage() {}

func (x *QA_TESTENV_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_TESTENV_LIST_Request.ProtoReflect.Descriptor instead.
func (*QA_TESTENV_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{290}
}

type QA_TESTPLAN_PIPELINE_DETAIL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string `protobuf:"bytes,1,opt,name=pipelineId,proto3" json:"pipelineId,omitempty"` // generated from path variable: pipelineId. You should change the proto type if necessary.
}

func (x *QA_TESTPLAN_PIPELINE_DETAIL_Request) Reset() {
	*x = QA_TESTPLAN_PIPELINE_DETAIL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_TESTPLAN_PIPELINE_DETAIL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_TESTPLAN_PIPELINE_DETAIL_Request) ProtoMessage() {}

func (x *QA_TESTPLAN_PIPELINE_DETAIL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_TESTPLAN_PIPELINE_DETAIL_Request.ProtoReflect.Descriptor instead.
func (*QA_TESTPLAN_PIPELINE_DETAIL_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{291}
}

func (x *QA_TESTPLAN_PIPELINE_DETAIL_Request) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

type QueryAppPublishItemRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAppPublishItemRelationResponse) Reset() {
	*x = QueryAppPublishItemRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAppPublishItemRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAppPublishItemRelationResponse) ProtoMessage() {}

func (x *QueryAppPublishItemRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAppPublishItemRelationResponse.ProtoReflect.Descriptor instead.
func (*QueryAppPublishItemRelationResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{292}
}

func (x *QueryAppPublishItemRelationResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryBranchRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID int64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AppID     int64 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
}

func (x *QueryBranchRuleRequest) Reset() {
	*x = QueryBranchRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBranchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBranchRuleRequest) ProtoMessage() {}

func (x *QueryBranchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBranchRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryBranchRuleRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{293}
}

func (x *QueryBranchRuleRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *QueryBranchRuleRequest) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

type QueryBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryBranchRuleResponse) Reset() {
	*x = QueryBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBranchRuleResponse) ProtoMessage() {}

func (x *QueryBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{294}
}

func (x *QueryBranchRuleResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{295}
}

func (x *RoleInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RoleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RoleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RoleList) Reset() {
	*x = RoleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleList) ProtoMessage() {}

func (x *RoleList) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleList.ProtoReflect.Descriptor instead.
func (*RoleList) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{296}
}

func (x *RoleList) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RoleList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SLAModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseModel *structpb.Value `protobuf:"bytes,1,opt,name=baseModel,proto3" json:"baseModel,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string          `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Approval  string          `protobuf:"bytes,4,opt,name=approval,proto3" json:"approval,omitempty"`
	AccessID  uint64          `protobuf:"varint,5,opt,name=accessID,proto3" json:"accessID,omitempty"`
	Source    string          `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SLAModel) Reset() {
	*x = SLAModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAModel) ProtoMessage() {}

func (x *SLAModel) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAModel.ProtoReflect.Descriptor instead.
func (*SLAModel) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{297}
}

func (x *SLAModel) GetBaseModel() *structpb.Value {
	if x != nil {
		return x.BaseModel
	}
	return nil
}

func (x *SLAModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SLAModel) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SLAModel) GetApproval() string {
	if x != nil {
		return x.Approval
	}
	return ""
}

func (x *SLAModel) GetAccessID() uint64 {
	if x != nil {
		return x.AccessID
	}
	return 0
}

func (x *SLAModel) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type SPOT_APITESTS_LOGS_DOWNLOAD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SPOT_APITESTS_LOGS_DOWNLOAD_Request) Reset() {
	*x = SPOT_APITESTS_LOGS_DOWNLOAD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPOT_APITESTS_LOGS_DOWNLOAD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPOT_APITESTS_LOGS_DOWNLOAD_Request) ProtoMessage() {}

func (x *SPOT_APITESTS_LOGS_DOWNLOAD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPOT_APITESTS_LOGS_DOWNLOAD_Request.ProtoReflect.Descriptor instead.
func (*SPOT_APITESTS_LOGS_DOWNLOAD_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{298}
}

type SPOT_APITESTS_LOGS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SPOT_APITESTS_LOGS_Request) Reset() {
	*x = SPOT_APITESTS_LOGS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPOT_APITESTS_LOGS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPOT_APITESTS_LOGS_Request) ProtoMessage() {}

func (x *SPOT_APITESTS_LOGS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPOT_APITESTS_LOGS_Request.ProtoReflect.Descriptor instead.
func (*SPOT_APITESTS_LOGS_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{299}
}

type SearchOperationQueryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *SearchOperationQueryParameters) Reset() {
	*x = SearchOperationQueryParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOperationQueryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationQueryParameters) ProtoMessage() {}

func (x *SearchOperationQueryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationQueryParameters.ProtoReflect.Descriptor instead.
func (*SearchOperationQueryParameters) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{300}
}

func (x *SearchOperationQueryParameters) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SearchOperationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,3,opt,name=queryParams,proto3" json:"queryParams,omitempty"`
}

func (x *SearchOperationsReq) Reset() {
	*x = SearchOperationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOperationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationsReq) ProtoMessage() {}

func (x *SearchOperationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationsReq.ProtoReflect.Descriptor instead.
func (*SearchOperationsReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{301}
}

func (x *SearchOperationsReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *SearchOperationsReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SearchOperationsReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type SonarCredentialGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *SonarCredentialGetResponse) Reset() {
	*x = SonarCredentialGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarCredentialGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarCredentialGetResponse) ProtoMessage() {}

func (x *SonarCredentialGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarCredentialGetResponse.ProtoReflect.Descriptor instead.
func (*SonarCredentialGetResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{302}
}

func (x *SonarCredentialGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type SonarIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SonarIssueResponse) Reset() {
	*x = SonarIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarIssueResponse) ProtoMessage() {}

func (x *SonarIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarIssueResponse.ProtoReflect.Descriptor instead.
func (*SonarIssueResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{303}
}

func (x *SonarIssueResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type SonarMetricRuleDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ScopeType     string                 `protobuf:"bytes,5,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID       string                 `protobuf:"bytes,6,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	MetricKey     string                 `protobuf:"bytes,7,opt,name=metricKey,proto3" json:"metricKey,omitempty"`
	MetricKeyID   int64                  `protobuf:"varint,8,opt,name=metricKeyID,json=metricKeyId,proto3" json:"metricKeyID,omitempty"`
	Operational   string                 `protobuf:"bytes,9,opt,name=operational,proto3" json:"operational,omitempty"`
	MetricValue   string                 `protobuf:"bytes,10,opt,name=metricValue,proto3" json:"metricValue,omitempty"`
	MetricKeyDesc string                 `protobuf:"bytes,11,opt,name=metricKeyDesc,proto3" json:"metricKeyDesc,omitempty"`
	DecimalScale  int64                  `protobuf:"varint,12,opt,name=decimalScale,proto3" json:"decimalScale,omitempty"`
	ValueType     string                 `protobuf:"bytes,13,opt,name=valueType,proto3" json:"valueType,omitempty"`
}

func (x *SonarMetricRuleDto) Reset() {
	*x = SonarMetricRuleDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRuleDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRuleDto) ProtoMessage() {}

func (x *SonarMetricRuleDto) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRuleDto.ProtoReflect.Descriptor instead.
func (*SonarMetricRuleDto) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{304}
}

func (x *SonarMetricRuleDto) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SonarMetricRuleDto) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SonarMetricRuleDto) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SonarMetricRuleDto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SonarMetricRuleDto) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRuleDto) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *SonarMetricRuleDto) GetMetricKey() string {
	if x != nil {
		return x.MetricKey
	}
	return ""
}

func (x *SonarMetricRuleDto) GetMetricKeyID() int64 {
	if x != nil {
		return x.MetricKeyID
	}
	return 0
}

func (x *SonarMetricRuleDto) GetOperational() string {
	if x != nil {
		return x.Operational
	}
	return ""
}

func (x *SonarMetricRuleDto) GetMetricValue() string {
	if x != nil {
		return x.MetricValue
	}
	return ""
}

func (x *SonarMetricRuleDto) GetMetricKeyDesc() string {
	if x != nil {
		return x.MetricKeyDesc
	}
	return ""
}

func (x *SonarMetricRuleDto) GetDecimalScale() int64 {
	if x != nil {
		return x.DecimalScale
	}
	return 0
}

func (x *SonarMetricRuleDto) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

type SonarMetricRulesBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string  `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string  `protobuf:"bytes,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	IDs       []int64 `protobuf:"varint,3,rep,packed,name=IDs,json=ids,proto3" json:"IDs,omitempty"`
}

func (x *SonarMetricRulesBatchDeleteRequest) Reset() {
	*x = SonarMetricRulesBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesBatchDeleteRequest) ProtoMessage() {}

func (x *SonarMetricRulesBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{305}
}

func (x *SonarMetricRulesBatchDeleteRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesBatchDeleteRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *SonarMetricRulesBatchDeleteRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type SonarMetricRulesBatchInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string            `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string            `protobuf:"bytes,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	Metrics   []*structpb.Value `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *SonarMetricRulesBatchInsertRequest) Reset() {
	*x = SonarMetricRulesBatchInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesBatchInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesBatchInsertRequest) ProtoMessage() {}

func (x *SonarMetricRulesBatchInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesBatchInsertRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesBatchInsertRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{306}
}

func (x *SonarMetricRulesBatchInsertRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesBatchInsertRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *SonarMetricRulesBatchInsertRequest) GetMetrics() []*structpb.Value {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type SonarMetricRulesDefinitionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
}

func (x *SonarMetricRulesDefinitionListRequest) Reset() {
	*x = SonarMetricRulesDefinitionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesDefinitionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesDefinitionListRequest) ProtoMessage() {}

func (x *SonarMetricRulesDefinitionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesDefinitionListRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesDefinitionListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{307}
}

func (x *SonarMetricRulesDefinitionListRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesDefinitionListRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type SonarMetricRulesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	ScopeType string `protobuf:"bytes,2,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string `protobuf:"bytes,3,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
}

func (x *SonarMetricRulesDeleteRequest) Reset() {
	*x = SonarMetricRulesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesDeleteRequest) ProtoMessage() {}

func (x *SonarMetricRulesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesDeleteRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{308}
}

func (x *SonarMetricRulesDeleteRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SonarMetricRulesDeleteRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesDeleteRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type SonarMetricRulesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
}

func (x *SonarMetricRulesListRequest) Reset() {
	*x = SonarMetricRulesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesListRequest) ProtoMessage() {}

func (x *SonarMetricRulesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesListRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{309}
}

func (x *SonarMetricRulesListRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesListRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type SonarMetricRulesPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	PageNo    int64  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SonarMetricRulesPagingRequest) Reset() {
	*x = SonarMetricRulesPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesPagingRequest) ProtoMessage() {}

func (x *SonarMetricRulesPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesPagingRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesPagingRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{310}
}

func (x *SonarMetricRulesPagingRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesPagingRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *SonarMetricRulesPagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SonarMetricRulesPagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SonarMetricRulesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MetricValue string `protobuf:"bytes,3,opt,name=metricValue,proto3" json:"metricValue,omitempty"`
	ScopeType   string `protobuf:"bytes,4,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID     string `protobuf:"bytes,5,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
}

func (x *SonarMetricRulesUpdateRequest) Reset() {
	*x = SonarMetricRulesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarMetricRulesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarMetricRulesUpdateRequest) ProtoMessage() {}

func (x *SonarMetricRulesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarMetricRulesUpdateRequest.ProtoReflect.Descriptor instead.
func (*SonarMetricRulesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{311}
}

func (x *SonarMetricRulesUpdateRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SonarMetricRulesUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SonarMetricRulesUpdateRequest) GetMetricValue() string {
	if x != nil {
		return x.MetricValue
	}
	return ""
}

func (x *SonarMetricRulesUpdateRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *SonarMetricRulesUpdateRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type SonarStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationID    int64             `protobuf:"varint,1,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	BuildID          int64             `protobuf:"varint,2,opt,name=buildID,json=buildId,proto3" json:"buildID,omitempty"`
	ProjectID        int64             `protobuf:"varint,3,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationName  string            `protobuf:"bytes,4,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch           string            `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	GitRepo          string            `protobuf:"bytes,6,opt,name=gitRepo,proto3" json:"gitRepo,omitempty"`
	CommitID         string            `protobuf:"bytes,7,opt,name=commitID,json=commitId,proto3" json:"commitID,omitempty"`
	ProjectName      string            `protobuf:"bytes,8,opt,name=projectName,proto3" json:"projectName,omitempty"`
	OperatorID       string            `protobuf:"bytes,9,opt,name=operatorID,json=operatorId,proto3" json:"operatorID,omitempty"`
	LogID            string            `protobuf:"bytes,10,opt,name=logID,json=logId,proto3" json:"logID,omitempty"`
	Key              string            `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
	Bugs             []*structpb.Value `protobuf:"bytes,12,rep,name=bugs,proto3" json:"bugs,omitempty"`
	CodeSmells       []*structpb.Value `protobuf:"bytes,13,rep,name=codeSmells,json=code_smells,proto3" json:"codeSmells,omitempty"`
	Vulnerabilities  []*structpb.Value `protobuf:"bytes,14,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	Coverage         []*structpb.Value `protobuf:"bytes,15,rep,name=coverage,proto3" json:"coverage,omitempty"`
	Duplications     []*structpb.Value `protobuf:"bytes,16,rep,name=duplications,proto3" json:"duplications,omitempty"`
	IssuesStatistics *structpb.Value   `protobuf:"bytes,17,opt,name=issuesStatistics,json=issues_statistics,proto3" json:"issuesStatistics,omitempty"`
}

func (x *SonarStoreRequest) Reset() {
	*x = SonarStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarStoreRequest) ProtoMessage() {}

func (x *SonarStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarStoreRequest.ProtoReflect.Descriptor instead.
func (*SonarStoreRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{312}
}

func (x *SonarStoreRequest) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *SonarStoreRequest) GetBuildID() int64 {
	if x != nil {
		return x.BuildID
	}
	return 0
}

func (x *SonarStoreRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *SonarStoreRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *SonarStoreRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SonarStoreRequest) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *SonarStoreRequest) GetCommitID() string {
	if x != nil {
		return x.CommitID
	}
	return ""
}

func (x *SonarStoreRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SonarStoreRequest) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *SonarStoreRequest) GetLogID() string {
	if x != nil {
		return x.LogID
	}
	return ""
}

func (x *SonarStoreRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SonarStoreRequest) GetBugs() []*structpb.Value {
	if x != nil {
		return x.Bugs
	}
	return nil
}

func (x *SonarStoreRequest) GetCodeSmells() []*structpb.Value {
	if x != nil {
		return x.CodeSmells
	}
	return nil
}

func (x *SonarStoreRequest) GetVulnerabilities() []*structpb.Value {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *SonarStoreRequest) GetCoverage() []*structpb.Value {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *SonarStoreRequest) GetDuplications() []*structpb.Value {
	if x != nil {
		return x.Duplications
	}
	return nil
}

func (x *SonarStoreRequest) GetIssuesStatistics() *structpb.Value {
	if x != nil {
		return x.IssuesStatistics
	}
	return nil
}

type SonarStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SonarStoreResponse) Reset() {
	*x = SonarStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonarStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonarStoreResponse) ProtoMessage() {}

func (x *SonarStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonarStoreResponse.ProtoReflect.Descriptor instead.
func (*SonarStoreResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{313}
}

func (x *SonarStoreResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestFileRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	FileName           string                 `protobuf:"bytes,2,opt,name=fileName,json=name,proto3" json:"fileName,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProjectName        string                 `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string                 `protobuf:"bytes,5,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	OrgID              uint64                 `protobuf:"varint,6,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID          uint64                 `protobuf:"varint,7,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TestSetID          uint64                 `protobuf:"varint,8,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	ApiFileUUID        string                 `protobuf:"bytes,9,opt,name=apiFileUUID,proto3" json:"apiFileUUID,omitempty"`
	SpaceID            uint64                 `protobuf:"varint,10,opt,name=spaceID,proto3" json:"spaceID,omitempty"`
	Type               string                 `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	State              string                 `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	ErrorInfo          string                 `protobuf:"bytes,13,opt,name=errorInfo,proto3" json:"errorInfo,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OperatorID         string                 `protobuf:"bytes,16,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
}

func (x *TestFileRecord) Reset() {
	*x = TestFileRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFileRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFileRecord) ProtoMessage() {}

func (x *TestFileRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFileRecord.ProtoReflect.Descriptor instead.
func (*TestFileRecord) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{314}
}

func (x *TestFileRecord) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestFileRecord) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TestFileRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestFileRecord) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *TestFileRecord) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *TestFileRecord) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *TestFileRecord) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestFileRecord) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestFileRecord) GetApiFileUUID() string {
	if x != nil {
		return x.ApiFileUUID
	}
	return ""
}

func (x *TestFileRecord) GetSpaceID() uint64 {
	if x != nil {
		return x.SpaceID
	}
	return 0
}

func (x *TestFileRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestFileRecord) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TestFileRecord) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *TestFileRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestFileRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestFileRecord) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

type TestIssuesStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bugs            string                 `protobuf:"bytes,1,opt,name=bugs,proto3" json:"bugs,omitempty"`
	Coverage        string                 `protobuf:"bytes,2,opt,name=coverage,proto3" json:"coverage,omitempty"`
	Vulnerabilities string                 `protobuf:"bytes,3,opt,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	CodeSmells      string                 `protobuf:"bytes,4,opt,name=codeSmells,proto3" json:"codeSmells,omitempty"`
	Duplications    string                 `protobuf:"bytes,5,opt,name=duplications,proto3" json:"duplications,omitempty"`
	Rating          *structpb.Value        `protobuf:"bytes,6,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	SonarKey        string                 `protobuf:"bytes,7,opt,name=sonarKey,proto3" json:"sonarKey,omitempty"`
	Path            string                 `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	UT              string                 `protobuf:"bytes,9,opt,name=uT,json=ut,proto3" json:"uT,omitempty"`
	CommitID        string                 `protobuf:"bytes,10,opt,name=commitID,json=commitId,proto3" json:"commitID,omitempty"`
	Branch          string                 `protobuf:"bytes,11,opt,name=branch,proto3" json:"branch,omitempty"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TestIssuesStatistics) Reset() {
	*x = TestIssuesStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIssuesStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIssuesStatistics) ProtoMessage() {}

func (x *TestIssuesStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIssuesStatistics.ProtoReflect.Descriptor instead.
func (*TestIssuesStatistics) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{315}
}

func (x *TestIssuesStatistics) GetBugs() string {
	if x != nil {
		return x.Bugs
	}
	return ""
}

func (x *TestIssuesStatistics) GetCoverage() string {
	if x != nil {
		return x.Coverage
	}
	return ""
}

func (x *TestIssuesStatistics) GetVulnerabilities() string {
	if x != nil {
		return x.Vulnerabilities
	}
	return ""
}

func (x *TestIssuesStatistics) GetCodeSmells() string {
	if x != nil {
		return x.CodeSmells
	}
	return ""
}

func (x *TestIssuesStatistics) GetDuplications() string {
	if x != nil {
		return x.Duplications
	}
	return ""
}

func (x *TestIssuesStatistics) GetRating() *structpb.Value {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *TestIssuesStatistics) GetSonarKey() string {
	if x != nil {
		return x.SonarKey
	}
	return ""
}

func (x *TestIssuesStatistics) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestIssuesStatistics) GetUT() string {
	if x != nil {
		return x.UT
	}
	return ""
}

func (x *TestIssuesStatistics) GetCommitID() string {
	if x != nil {
		return x.CommitID
	}
	return ""
}

func (x *TestIssuesStatistics) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TestIssuesStatistics) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID     int64                      `protobuf:"varint,1,opt,name=ticketID,json=id,proto3" json:"ticketID,omitempty"`
	Title        string                     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content      string                     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Type         string                     `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Priority     string                     `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Status       string                     `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Key          string                     `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	OrgID        string                     `protobuf:"bytes,8,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Metric       string                     `protobuf:"bytes,9,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricID     string                     `protobuf:"bytes,10,opt,name=metricID,proto3" json:"metricID,omitempty"`
	Count        int64                      `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	Creator      string                     `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	LastOperator string                     `protobuf:"bytes,13,opt,name=lastOperator,proto3" json:"lastOperator,omitempty"`
	Label        map[string]*structpb.Value `protobuf:"bytes,14,rep,name=label,proto3" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetType   string                     `protobuf:"bytes,15,opt,name=targetType,proto3" json:"targetType,omitempty"`
	LastComment  *structpb.Value            `protobuf:"bytes,16,opt,name=lastComment,proto3,oneof" json:"lastComment,omitempty"`
	TargetID     string                     `protobuf:"bytes,17,opt,name=targetID,proto3" json:"targetID,omitempty"`
	CreatedAt    *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp     `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClosedAt     *timestamppb.Timestamp     `protobuf:"bytes,20,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	TriggeredAt  *timestamppb.Timestamp     `protobuf:"bytes,21,opt,name=triggeredAt,proto3" json:"triggeredAt,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{316}
}

func (x *Ticket) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Ticket) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ticket) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *Ticket) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Ticket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Ticket) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Ticket) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *Ticket) GetMetricID() string {
	if x != nil {
		return x.MetricID
	}
	return ""
}

func (x *Ticket) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Ticket) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Ticket) GetLastOperator() string {
	if x != nil {
		return x.LastOperator
	}
	return ""
}

func (x *Ticket) GetLabel() map[string]*structpb.Value {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Ticket) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *Ticket) GetLastComment() *structpb.Value {
	if x != nil {
		return x.LastComment
	}
	return nil
}

func (x *Ticket) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Ticket) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Ticket) GetTriggeredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggeredAt
	}
	return nil
}

type TicketCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64 `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *TicketCloseRequest) Reset() {
	*x = TicketCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCloseRequest) ProtoMessage() {}

func (x *TicketCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCloseRequest.ProtoReflect.Descriptor instead.
func (*TicketCloseRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{317}
}

func (x *TicketCloseRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type TicketCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketCloseResponse) Reset() {
	*x = TicketCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCloseResponse) ProtoMessage() {}

func (x *TicketCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCloseResponse.ProtoReflect.Descriptor instead.
func (*TicketCloseResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{318}
}

func (x *TicketCloseResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TicketCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content     string                     `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type        string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Priority    string                     `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Key         string                     `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	OrgID       string                     `protobuf:"bytes,6,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Metric      string                     `protobuf:"bytes,7,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricID    string                     `protobuf:"bytes,8,opt,name=metricID,proto3" json:"metricID,omitempty"`
	UserID      string                     `protobuf:"bytes,9,opt,name=userID,proto3" json:"userID,omitempty"`
	Label       map[string]*structpb.Value `protobuf:"bytes,10,rep,name=label,proto3" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetType  string                     `protobuf:"bytes,11,opt,name=targetType,proto3" json:"targetType,omitempty"`
	TargetID    string                     `protobuf:"bytes,12,opt,name=targetID,proto3" json:"targetID,omitempty"`
	TriggeredAt int64                      `protobuf:"varint,13,opt,name=triggeredAt,proto3" json:"triggeredAt,omitempty"`
	ClosedAt    int64                      `protobuf:"varint,14,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
}

func (x *TicketCreateRequest) Reset() {
	*x = TicketCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCreateRequest) ProtoMessage() {}

func (x *TicketCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCreateRequest.ProtoReflect.Descriptor instead.
func (*TicketCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{319}
}

func (x *TicketCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TicketCreateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TicketCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TicketCreateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TicketCreateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TicketCreateRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *TicketCreateRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *TicketCreateRequest) GetMetricID() string {
	if x != nil {
		return x.MetricID
	}
	return ""
}

func (x *TicketCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TicketCreateRequest) GetLabel() map[string]*structpb.Value {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *TicketCreateRequest) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *TicketCreateRequest) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *TicketCreateRequest) GetTriggeredAt() int64 {
	if x != nil {
		return x.TriggeredAt
	}
	return 0
}

func (x *TicketCreateRequest) GetClosedAt() int64 {
	if x != nil {
		return x.ClosedAt
	}
	return 0
}

type TicketCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketCreateResponse) Reset() {
	*x = TicketCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCreateResponse) ProtoMessage() {}

func (x *TicketCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCreateResponse.ProtoReflect.Descriptor instead.
func (*TicketCreateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{320}
}

func (x *TicketCreateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TicketDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64 `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *TicketDeleteRequest) Reset() {
	*x = TicketDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketDeleteRequest) ProtoMessage() {}

func (x *TicketDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketDeleteRequest.ProtoReflect.Descriptor instead.
func (*TicketDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{321}
}

func (x *TicketDeleteRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type TicketDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketDeleteResponse) Reset() {
	*x = TicketDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketDeleteResponse) ProtoMessage() {}

func (x *TicketDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketDeleteResponse.ProtoReflect.Descriptor instead.
func (*TicketDeleteResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{322}
}

func (x *TicketDeleteResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TicketFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64 `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *TicketFetchRequest) Reset() {
	*x = TicketFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketFetchRequest) ProtoMessage() {}

func (x *TicketFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketFetchRequest.ProtoReflect.Descriptor instead.
func (*TicketFetchRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{323}
}

func (x *TicketFetchRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type TicketFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketFetchResponse) Reset() {
	*x = TicketFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketFetchResponse) ProtoMessage() {}

func (x *TicketFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketFetchResponse.ProtoReflect.Descriptor instead.
func (*TicketFetchResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{324}
}

func (x *TicketFetchResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TicketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       []string `protobuf:"bytes,1,rep,name=type,proto3" json:"type,omitempty"`
	Priority   string   `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Status     string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	TargetType string   `protobuf:"bytes,4,opt,name=targetType,proto3" json:"targetType,omitempty"`
	TargetID   string   `protobuf:"bytes,5,opt,name=targetID,proto3" json:"targetID,omitempty"`
	Key        string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	OrgID      int64    `protobuf:"varint,7,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Metric     string   `protobuf:"bytes,8,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricID   []string `protobuf:"bytes,9,rep,name=metricID,proto3" json:"metricID,omitempty"`
	StartTime  int64    `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int64    `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Comment    bool     `protobuf:"varint,12,opt,name=comment,proto3" json:"comment,omitempty"`
	Q          string   `protobuf:"bytes,13,opt,name=q,proto3" json:"q,omitempty"`
	PageNo     int64    `protobuf:"varint,14,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize   int64    `protobuf:"varint,15,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *TicketListRequest) Reset() {
	*x = TicketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListRequest) ProtoMessage() {}

func (x *TicketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListRequest.ProtoReflect.Descriptor instead.
func (*TicketListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{325}
}

func (x *TicketListRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TicketListRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TicketListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TicketListRequest) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *TicketListRequest) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *TicketListRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TicketListRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *TicketListRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *TicketListRequest) GetMetricID() []string {
	if x != nil {
		return x.MetricID
	}
	return nil
}

func (x *TicketListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TicketListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TicketListRequest) GetComment() bool {
	if x != nil {
		return x.Comment
	}
	return false
}

func (x *TicketListRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TicketListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TicketListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TicketListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketListResponse) Reset() {
	*x = TicketListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListResponse) ProtoMessage() {}

func (x *TicketListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListResponse.ProtoReflect.Descriptor instead.
func (*TicketListResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{326}
}

func (x *TicketListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TicketListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tickets []*structpb.Value `protobuf:"bytes,2,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *TicketListResponseData) Reset() {
	*x = TicketListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListResponseData) ProtoMessage() {}

func (x *TicketListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListResponseData.ProtoReflect.Descriptor instead.
func (*TicketListResponseData) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{327}
}

func (x *TicketListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TicketListResponseData) GetTickets() []*structpb.Value {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type TicketReopenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64 `protobuf:"varint,1,opt,name=ticketID,proto3" json:"ticketID,omitempty"`
}

func (x *TicketReopenRequest) Reset() {
	*x = TicketReopenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketReopenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketReopenRequest) ProtoMessage() {}

func (x *TicketReopenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketReopenRequest.ProtoReflect.Descriptor instead.
func (*TicketReopenRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{328}
}

func (x *TicketReopenRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

type TicketReopenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketReopenResponse) Reset() {
	*x = TicketReopenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketReopenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketReopenResponse) ProtoMessage() {}

func (x *TicketReopenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketReopenResponse.ProtoReflect.Descriptor instead.
func (*TicketReopenResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{329}
}

func (x *TicketReopenResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TicketUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketID int64           `protobuf:"varint,1,opt,name=ticketID,json=-,proto3" json:"ticketID,omitempty"`
	Body     *structpb.Value `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *TicketUpdateRequest) Reset() {
	*x = TicketUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketUpdateRequest) ProtoMessage() {}

func (x *TicketUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketUpdateRequest.ProtoReflect.Descriptor instead.
func (*TicketUpdateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{330}
}

func (x *TicketUpdateRequest) GetTicketID() int64 {
	if x != nil {
		return x.TicketID
	}
	return 0
}

func (x *TicketUpdateRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type TicketUpdateRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Priority string `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *TicketUpdateRequestBody) Reset() {
	*x = TicketUpdateRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketUpdateRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketUpdateRequestBody) ProtoMessage() {}

func (x *TicketUpdateRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketUpdateRequestBody.ProtoReflect.Descriptor instead.
func (*TicketUpdateRequestBody) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{331}
}

func (x *TicketUpdateRequestBody) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TicketUpdateRequestBody) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TicketUpdateRequestBody) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TicketUpdateRequestBody) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

type TicketUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TicketUpdateResponse) Reset() {
	*x = TicketUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketUpdateResponse) ProtoMessage() {}

func (x *TicketUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketUpdateResponse.ProtoReflect.Descriptor instead.
func (*TicketUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{332}
}

func (x *TicketUpdateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type UnifiedFileTreeNodeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Pinode  string `protobuf:"bytes,4,opt,name=pinode,proto3" json:"pinode,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Desc    string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *UnifiedFileTreeNodeCreateRequest) Reset() {
	*x = UnifiedFileTreeNodeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeCreateRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeCreateRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeCreateRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{333}
}

func (x *UnifiedFileTreeNodeCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type UnifiedFileTreeNodeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeDeleteRequest) Reset() {
	*x = UnifiedFileTreeNodeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeDeleteRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeDeleteRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{334}
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeFindAncestorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) Reset() {
	*x = UnifiedFileTreeNodeFindAncestorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFindAncestorsRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFindAncestorsRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFindAncestorsRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{335}
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeFuzzySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID     string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	FromPinode  string `protobuf:"bytes,3,opt,name=fromPinode,proto3" json:"fromPinode,omitempty"`
	Recursive   bool   `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	PrefixFuzzy string `protobuf:"bytes,5,opt,name=prefixFuzzy,proto3" json:"prefixFuzzy,omitempty"`
	SuffixFuzzy string `protobuf:"bytes,6,opt,name=suffixFuzzy,proto3" json:"suffixFuzzy,omitempty"`
	Fuzzy       string `protobuf:"bytes,7,opt,name=fuzzy,proto3" json:"fuzzy,omitempty"`
	CreatorID   string `protobuf:"bytes,8,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) Reset() {
	*x = UnifiedFileTreeNodeFuzzySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFuzzySearchRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFuzzySearchRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFuzzySearchRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{336}
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetFromPinode() string {
	if x != nil {
		return x.FromPinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetPrefixFuzzy() string {
	if x != nil {
		return x.PrefixFuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetSuffixFuzzy() string {
	if x != nil {
		return x.SuffixFuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetFuzzy() string {
	if x != nil {
		return x.Fuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

type UnifiedFileTreeNodeGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeGetRequest) Reset() {
	*x = UnifiedFileTreeNodeGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeGetRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeGetRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeGetRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{337}
}

func (x *UnifiedFileTreeNodeGetRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeGetRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeGetRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope               string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID             string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Pinode              string `protobuf:"bytes,3,opt,name=pinode,proto3" json:"pinode,omitempty"`
	PipelineCategoryKey string `protobuf:"bytes,4,opt,name=pipelineCategoryKey,proto3" json:"pipelineCategoryKey,omitempty"`
}

func (x *UnifiedFileTreeNodeListRequest) Reset() {
	*x = UnifiedFileTreeNodeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeListRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeListRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeListRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{338}
}

func (x *UnifiedFileTreeNodeListRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetPipelineCategoryKey() string {
	if x != nil {
		return x.PipelineCategoryKey
	}
	return ""
}

type UpdateAPIAssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64                     `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value            `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value            `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Keys      map[string]*structpb.Value `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AssetID   string                     `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"` // generated from path variable: assetID. You should change the proto type if necessary.
}

func (x *UpdateAPIAssetReq) Reset() {
	*x = UpdateAPIAssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAPIAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAPIAssetReq) ProtoMessage() {}

func (x *UpdateAPIAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAPIAssetReq.ProtoReflect.Descriptor instead.
func (*UpdateAPIAssetReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{339}
}

func (x *UpdateAPIAssetReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateAPIAssetReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateAPIAssetReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *UpdateAPIAssetReq) GetKeys() map[string]*structpb.Value {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateAPIAssetReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

type UpdateAccess_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessID string `protobuf:"bytes,1,opt,name=accessID,proto3" json:"accessID,omitempty"` // generated from path variable: accessID. You should change the proto type if necessary.
}

func (x *UpdateAccess_Request) Reset() {
	*x = UpdateAccess_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccess_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccess_Request) ProtoMessage() {}

func (x *UpdateAccess_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccess_Request.ProtoReflect.Descriptor instead.
func (*UpdateAccess_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{340}
}

func (x *UpdateAccess_Request) GetAccessID() string {
	if x != nil {
		return x.AccessID
	}
	return ""
}

type UpdateAppPublishItemRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID         int64                      `protobuf:"varint,1,opt,name=appID,json=-,proto3" json:"appID,omitempty"`
	UserID        string                     `protobuf:"bytes,2,opt,name=userID,json=-,proto3" json:"userID,omitempty"`
	ProdItemID    int64                      `protobuf:"varint,3,opt,name=prodItemID,json=PROD,proto3" json:"prodItemID,omitempty"`
	STAGINGItemID int64                      `protobuf:"varint,4,opt,name=sTAGINGItemID,json=STAGING,proto3" json:"sTAGINGItemID,omitempty"`
	TESTItemID    int64                      `protobuf:"varint,5,opt,name=tESTItemID,json=TEST,proto3" json:"tESTItemID,omitempty"`
	DEVItemID     int64                      `protobuf:"varint,6,opt,name=dEVItemID,json=DEV,proto3" json:"dEVItemID,omitempty"`
	AKAIMap       map[string]*structpb.Value `protobuf:"bytes,7,rep,name=aKAIMap,json=-,proto3" json:"aKAIMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Application   string                     `protobuf:"bytes,8,opt,name=application,proto3" json:"application,omitempty"` // generated from path variable: application. You should change the proto type if necessary.
}

func (x *UpdateAppPublishItemRelationRequest) Reset() {
	*x = UpdateAppPublishItemRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPublishItemRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPublishItemRelationRequest) ProtoMessage() {}

func (x *UpdateAppPublishItemRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPublishItemRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppPublishItemRelationRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{341}
}

func (x *UpdateAppPublishItemRelationRequest) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *UpdateAppPublishItemRelationRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateAppPublishItemRelationRequest) GetProdItemID() int64 {
	if x != nil {
		return x.ProdItemID
	}
	return 0
}

func (x *UpdateAppPublishItemRelationRequest) GetSTAGINGItemID() int64 {
	if x != nil {
		return x.STAGINGItemID
	}
	return 0
}

func (x *UpdateAppPublishItemRelationRequest) GetTESTItemID() int64 {
	if x != nil {
		return x.TESTItemID
	}
	return 0
}

func (x *UpdateAppPublishItemRelationRequest) GetDEVItemID() int64 {
	if x != nil {
		return x.DEVItemID
	}
	return 0
}

func (x *UpdateAppPublishItemRelationRequest) GetAKAIMap() map[string]*structpb.Value {
	if x != nil {
		return x.AKAIMap
	}
	return nil
}

func (x *UpdateAppPublishItemRelationRequest) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

type UpdateAppPublishItemRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppPublishItemRelationResponse) Reset() {
	*x = UpdateAppPublishItemRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPublishItemRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPublishItemRelationResponse) ProtoMessage() {}

func (x *UpdateAppPublishItemRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPublishItemRelationResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppPublishItemRelationResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{342}
}

type UpdateAssetVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity  *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	AssetID   string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`     // generated from path variable: assetID. You should change the proto type if necessary.
	VersionID string          `protobuf:"bytes,6,opt,name=versionID,proto3" json:"versionID,omitempty"` // generated from path variable: versionID. You should change the proto type if necessary.
}

func (x *UpdateAssetVersionReq) Reset() {
	*x = UpdateAssetVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetVersionReq) ProtoMessage() {}

func (x *UpdateAssetVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetVersionReq.ProtoReflect.Descriptor instead.
func (*UpdateAssetVersionReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{343}
}

func (x *UpdateAssetVersionReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateAssetVersionReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateAssetVersionReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *UpdateAssetVersionReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *UpdateAssetVersionReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *UpdateAssetVersionReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type UpdateBranchRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64  `protobuf:"varint,1,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
	Rule              string `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	IsProtect         bool   `protobuf:"varint,3,opt,name=isProtect,proto3" json:"isProtect,omitempty"`
	NeedApproval      bool   `protobuf:"varint,4,opt,name=needApproval,proto3" json:"needApproval,omitempty"`
	IsTriggerPipeline bool   `protobuf:"varint,5,opt,name=isTriggerPipeline,proto3" json:"isTriggerPipeline,omitempty"`
	Desc              string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Workspace         string `protobuf:"bytes,7,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ArtifactWorkspace string `protobuf:"bytes,8,opt,name=artifactWorkspace,proto3" json:"artifactWorkspace,omitempty"`
}

func (x *UpdateBranchRuleRequest) Reset() {
	*x = UpdateBranchRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBranchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBranchRuleRequest) ProtoMessage() {}

func (x *UpdateBranchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBranchRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateBranchRuleRequest) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{344}
}

func (x *UpdateBranchRuleRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateBranchRuleRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *UpdateBranchRuleRequest) GetIsProtect() bool {
	if x != nil {
		return x.IsProtect
	}
	return false
}

func (x *UpdateBranchRuleRequest) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

func (x *UpdateBranchRuleRequest) GetIsTriggerPipeline() bool {
	if x != nil {
		return x.IsTriggerPipeline
	}
	return false
}

func (x *UpdateBranchRuleRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateBranchRuleRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *UpdateBranchRuleRequest) GetArtifactWorkspace() string {
	if x != nil {
		return x.ArtifactWorkspace
	}
	return ""
}

type UpdateBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UpdateBranchRuleResponse) Reset() {
	*x = UpdateBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBranchRuleResponse) ProtoMessage() {}

func (x *UpdateBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{345}
}

func (x *UpdateBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateClientReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity    *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams   *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	QueryParams *structpb.Value `protobuf:"bytes,4,opt,name=queryParams,proto3,oneof" json:"queryParams,omitempty"`
	Body        *structpb.Value `protobuf:"bytes,5,opt,name=body,proto3,oneof" json:"body,omitempty"`
	ClientID    string          `protobuf:"bytes,6,opt,name=clientID,proto3" json:"clientID,omitempty"` // generated from path variable: clientID. You should change the proto type if necessary.
}

func (x *UpdateClientReq) Reset() {
	*x = UpdateClientReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientReq) ProtoMessage() {}

func (x *UpdateClientReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientReq.ProtoReflect.Descriptor instead.
func (*UpdateClientReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{346}
}

func (x *UpdateClientReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateClientReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateClientReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *UpdateClientReq) GetQueryParams() *structpb.Value {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *UpdateClientReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *UpdateClientReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type UpdateContract_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID   string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`     // generated from path variable: clientID. You should change the proto type if necessary.
	ContractID string `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"` // generated from path variable: contractID. You should change the proto type if necessary.
}

func (x *UpdateContract_Request) Reset() {
	*x = UpdateContract_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContract_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContract_Request) ProtoMessage() {}

func (x *UpdateContract_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContract_Request.ProtoReflect.Descriptor instead.
func (*UpdateContract_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{347}
}

func (x *UpdateContract_Request) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *UpdateContract_Request) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

type UpdateInstantiationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID           uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity        *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams       *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body            *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	AssetID         string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`                 // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion  string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"`   // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	Minor           string          `protobuf:"bytes,7,opt,name=minor,proto3" json:"minor,omitempty"`                     // generated from path variable: minor. You should change the proto type if necessary.
	InstantiationID string          `protobuf:"bytes,8,opt,name=instantiationID,proto3" json:"instantiationID,omitempty"` // generated from path variable: instantiationID. You should change the proto type if necessary.
}

func (x *UpdateInstantiationReq) Reset() {
	*x = UpdateInstantiationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstantiationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstantiationReq) ProtoMessage() {}

func (x *UpdateInstantiationReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstantiationReq.ProtoReflect.Descriptor instead.
func (*UpdateInstantiationReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{348}
}

func (x *UpdateInstantiationReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateInstantiationReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateInstantiationReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *UpdateInstantiationReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *UpdateInstantiationReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *UpdateInstantiationReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *UpdateInstantiationReq) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *UpdateInstantiationReq) GetInstantiationID() string {
	if x != nil {
		return x.InstantiationID
	}
	return ""
}

type UpdateSLAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID          uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Identity       *structpb.Value `protobuf:"bytes,2,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
	URIParams      *structpb.Value `protobuf:"bytes,3,opt,name=uRIParams,proto3,oneof" json:"uRIParams,omitempty"`
	Body           *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
	AssetID        string          `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`               // generated from path variable: assetID. You should change the proto type if necessary.
	SwaggerVersion string          `protobuf:"bytes,6,opt,name=swaggerVersion,proto3" json:"swaggerVersion,omitempty"` // generated from path variable: swaggerVersion. You should change the proto type if necessary.
	SlaID          string          `protobuf:"bytes,7,opt,name=slaID,proto3" json:"slaID,omitempty"`                   // generated from path variable: slaID. You should change the proto type if necessary.
}

func (x *UpdateSLAReq) Reset() {
	*x = UpdateSLAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSLAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSLAReq) ProtoMessage() {}

func (x *UpdateSLAReq) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSLAReq.ProtoReflect.Descriptor instead.
func (*UpdateSLAReq) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{349}
}

func (x *UpdateSLAReq) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateSLAReq) GetIdentity() *structpb.Value {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateSLAReq) GetURIParams() *structpb.Value {
	if x != nil {
		return x.URIParams
	}
	return nil
}

func (x *UpdateSLAReq) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *UpdateSLAReq) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *UpdateSLAReq) GetSwaggerVersion() string {
	if x != nil {
		return x.SwaggerVersion
	}
	return ""
}

func (x *UpdateSLAReq) GetSlaID() string {
	if x != nil {
		return x.SlaID
	}
	return ""
}

type ValidBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsProtect         bool   `protobuf:"varint,2,opt,name=isProtect,proto3" json:"isProtect,omitempty"`
	NeedApproval      bool   `protobuf:"varint,3,opt,name=needApproval,proto3" json:"needApproval,omitempty"`
	IsTriggerPipeline bool   `protobuf:"varint,4,opt,name=isTriggerPipeline,proto3" json:"isTriggerPipeline,omitempty"`
	Workspace         string `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ArtifactWorkspace string `protobuf:"bytes,6,opt,name=artifactWorkspace,proto3" json:"artifactWorkspace,omitempty"`
}

func (x *ValidBranch) Reset() {
	*x = ValidBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidBranch) ProtoMessage() {}

func (x *ValidBranch) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidBranch.ProtoReflect.Descriptor instead.
func (*ValidBranch) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{350}
}

func (x *ValidBranch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidBranch) GetIsProtect() bool {
	if x != nil {
		return x.IsProtect
	}
	return false
}

func (x *ValidBranch) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

func (x *ValidBranch) GetIsTriggerPipeline() bool {
	if x != nil {
		return x.IsTriggerPipeline
	}
	return false
}

func (x *ValidBranch) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ValidBranch) GetArtifactWorkspace() string {
	if x != nil {
		return x.ArtifactWorkspace
	}
	return ""
}

type ValidateSwagger_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateSwagger_Request) Reset() {
	*x = ValidateSwagger_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dop_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSwagger_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSwagger_Request) ProtoMessage() {}

func (x *ValidateSwagger_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dop_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSwagger_Request.ProtoReflect.Descriptor instead.
func (*ValidateSwagger_Request) Descriptor() ([]byte, []int) {
	return file_dop_proto_rawDescGZIP(), []int{351}
}

var File_dop_proto protoreflect.FileDescriptor

var file_dop_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x27,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x42, 0x52, 0x41,
	0x4e, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1b, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a,
	0x1f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49,
	0x43, 0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x33,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x24, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x49, 0x43, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x24, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x49, 0x43, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3c, 0x0a, 0x1a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43,
	0x44, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22,
	0x3a, 0x0a, 0x18, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f,
	0x52, 0x55, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x26, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x57, 0x0a,
	0x1d, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xdc, 0x03,
	0x0a, 0x1c, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x44, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x44, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0xfa, 0x01, 0x0a,
	0x24, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x41, 0x50,
	0x49, 0x44, 0x6f, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x0a, 0x17,
	0x41, 0x50, 0x49, 0x44, 0x6f, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a,
	0x17, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x50, 0x49, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x50, 0x49, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x03, 0x0a, 0x0e, 0x41, 0x50, 0x49,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x76, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x15, 0x41,
	0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44,
	0x0a, 0x16, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x61, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x61, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2e, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xba, 0x01, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x61, 0x50, 0x49, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x76, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x04, 0x61, 0x50, 0x49, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x41,
	0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x19, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x54, 0x4f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x15, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x18, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7d, 0x0a, 0x1d, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x54, 0x4f, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x23, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x54, 0x4f,
	0x12, 0x46, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x5c, 0x0a, 0x1d, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x54, 0x4f, 0x22, 0x36, 0x0a, 0x14, 0x41, 0x70, 0x69, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x15, 0x41, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x0b,
	0x41, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x69, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x70, 0x69,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x15, 0x41, 0x70,
	0x69, 0x54, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x41, 0x70, 0x69,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x7d, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb0,
	0x02, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x10, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x4b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x49, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61,
	0x69, 0x22, 0xbf, 0x04, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x69, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x92, 0x04, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd0, 0x0a, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x46, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c,
	0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0a, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x0a, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x65, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x65, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x3b,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x10, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x2d, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x5e, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01,
	0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x01, 0x2d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0x60, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xc8, 0x03, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x19,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5a, 0x48, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5a, 0x48, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x4e, 0x22, 0x51, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x45, 0x56, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x45, 0x53, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x43, 0x49, 0x43, 0x44, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x31, 0x0a, 0x1b, 0x43, 0x49, 0x43, 0x44, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x31, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x1f,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x2f, 0x0a,
	0x1d, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x20,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x25, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x07, 0x69, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc2, 0x03, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x4f, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x69, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x51, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x17, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x58, 0x6d, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x58, 0x6d, 0x6c, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0xba, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x09, 0x69, 0x52, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x52, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22,
	0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x63, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x44, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x44, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0xa7,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x8e, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x4c,
	0x41, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x14,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x57, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0x32,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x22, 0x54, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x8b, 0x02, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x61,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x13, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09,
	0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5f,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x74, 0x78, 0x22,
	0xd5, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x4e,
	0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x4b,
	0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4d, 0x76, 0x43, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x1a, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc3, 0x02, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd8, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68,
	0x61, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xf1,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2b,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0xf2, 0x01, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0xa3, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x52, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x08, 0x73, 0x4c, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x4c, 0x41, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x4e, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22,
	0xd9, 0x01, 0x0a, 0x11, 0x49, 0x4f, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x42, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x14, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32, 0x22, 0x82, 0x01, 0x0a, 0x1c,
	0x49, 0x4f, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32, 0x44, 0x54, 0x4f, 0x12, 0x46, 0x0a, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x54, 0x4f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xde, 0x01, 0x0a, 0x14, 0x49, 0x4f, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x28, 0x0a, 0x0f, 0x6b, 0x65, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x31, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x31, 0x32, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x49, 0x52, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x49, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0d, 0x49, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x44,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x81, 0x05, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x76, 0x43, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x43, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x44, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc,
	0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x03,
	0x0a, 0x09, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x53, 0x0a, 0x17,
	0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x42, 0x0a, 0x14, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x16, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x17, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x02,
	0x0a, 0x16, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d, 0x0a, 0x17, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x02, 0x0a, 0x0c, 0x4c,
	0x69, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x62, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x4c, 0x69, 0x62, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x62, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x4c,
	0x69, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x1c, 0x4c, 0x69, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xd3, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x67, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xf9, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5a, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x54, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x33, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x22, 0xd9, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x4c, 0x41, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x41, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x59, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xc7, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x01, 0x2d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x22, 0x57, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x44, 0x54, 0x4f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x55, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x61, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xf6, 0x01,
	0x0a, 0x10, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x06, 0x0a, 0x06, 0x4f, 0x72, 0x67, 0x44,
	0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x43, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x44, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x22, 0x4f, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x57, 0x0a, 0x1b, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x4f,
	0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f,
	0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x70, 0x75, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x22, 0x66, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x22, 0x3f, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x50, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xf6, 0x02, 0x0a, 0x14, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4e, 0x0a, 0x26,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x20,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x45, 0x46, 0x46, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x23,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x54,
	0x49, 0x52, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x2d, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x49, 0x52, 0x43,
	0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4d, 0x0a, 0x25, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x1a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x50,
	0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x0c,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x44, 0x54, 0x4f, 0x12, 0x2a, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x54,
	0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x2a,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x41, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x0a, 0x25, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x72,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd8, 0x06, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x72, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d,
	0x6c, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x55, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x18, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x52, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x1d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb7,
	0x03, 0x0a, 0x14, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x59, 0x6d, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x4a, 0x0a, 0x1c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x16,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x11,
	0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x59, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53, 0x54, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53,
	0x54, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53, 0x54, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53,
	0x54, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x75, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x75, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x67, 0x0a, 0x0e, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x6e, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x63, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x63, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x43, 0x6f,
	0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x43, 0x6f,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x44, 0x47, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x44, 0x47, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x4c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x4c, 0x74, 0x12, 0x59, 0x0a, 0x19, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x23, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x23, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x1a, 0x5a, 0x0a, 0x14, 0x4d, 0x75, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x77, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x15, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15,
	0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x22, 0xf8, 0x05, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x40, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xee, 0x08, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x54,
	0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x44, 0x48, 0x6f, 0x6f,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x43, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x40, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x34, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x41, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1d, 0x0a,
	0x1b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x22, 0xec, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x65,
	0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x67, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d,
	0x0a, 0x1f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a,
	0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x23, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x4e, 0x0a, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x02, 0x0a, 0x24, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x4f, 0x0a, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72,
	0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x25, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x45, 0x72, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x1b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x22, 0x4c, 0x0a, 0x1e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x9c, 0x06, 0x0a, 0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x13, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x37, 0x64, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x19, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41,
	0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x37, 0x64, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x16, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x37, 0x64, 0x41,
	0x76, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a,
	0x1c, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x37, 0x64, 0x41, 0x76, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x1c, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x37, 0x64, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x22, 0x73, 0x65, 0x76,
	0x65, 0x6e, 0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x37, 0x64, 0x41, 0x76, 0x67, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x13, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41,
	0x76, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x37, 0x64, 0x41, 0x76, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x19, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x41, 0x76, 0x67, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x37, 0x64, 0x41, 0x76, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x18, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x44, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x37, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x1e, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x37, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd6, 0x03, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44,
	0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x44, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x17, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x16, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x45, 0x0a, 0x17,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x73, 0x68, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x4f, 0x53, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6f,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0xd1, 0x02, 0x0a, 0x1d, 0x50, 0x75, 0x73, 0x68, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x4f, 0x53, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x69, 0x6f, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x17, 0x51, 0x41, 0x5f, 0x41,
	0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x51, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x51, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x28, 0x0a,
	0x16, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x51, 0x41, 0x5f, 0x53, 0x4f,
	0x4e, 0x41, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x51, 0x41,
	0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x21, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x51, 0x41,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x51, 0x41, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45,
	0x4e, 0x56, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x23, 0x51, 0x41, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x22, 0x45, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x08,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x53,
	0x4c, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x41, 0x50,
	0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a,
	0x53, 0x50, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x4f,
	0x47, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12,
	0x53, 0x6f, 0x6e, 0x61, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xde,
	0x03, 0x0a, 0x12, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6e, 0x0a, 0x22, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x22, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x5f, 0x0a, 0x25, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x22, 0x67, 0x0a, 0x1d, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1b, 0x53, 0x6f,
	0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x1d, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x05,
	0x0a, 0x11, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x75, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x75, 0x67, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x40, 0x0a, 0x12, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x96, 0x04, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x98, 0x03, 0x0a, 0x14, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x75, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x54, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xca, 0x06, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x1a, 0x50, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xff, 0x03, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x1a,
	0x50, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a,
	0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x2a, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x12,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x41,
	0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x87, 0x03, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a,
	0x16, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22,
	0x31, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56,
	0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x79, 0x0a, 0x17, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01,
	0x0a, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x68, 0x0a, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44,
	0x22, 0x6f, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x22, 0x8d, 0x02, 0x0a, 0x25, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x50, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x75,
	0x7a, 0x7a, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x22, 0x65, 0x0a, 0x1d, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x55, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xe8, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x1a, 0x4f, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x32, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x22, 0x86, 0x03, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x11,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x2d, 0x12, 0x18, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x52, 0x4f, 0x44, 0x12, 0x1e, 0x0a, 0x0d, 0x73,
	0x54, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x53, 0x54, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x12, 0x18, 0x0a, 0x0a, 0x74,
	0x45, 0x53, 0x54, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x54, 0x45, 0x53, 0x54, 0x12, 0x16, 0x0a, 0x09, 0x64, 0x45, 0x56, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x44, 0x45, 0x56, 0x12, 0x58, 0x0a,
	0x07, 0x61, 0x4b, 0x41, 0x49, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x4b, 0x41, 0x49, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x2d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c, 0x41, 0x4b, 0x41,
	0x49, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a,
	0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x02, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0d, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x2d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x02, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22,
	0xf9, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x52, 0x49,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xc5, 0x02, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x75,
	0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x61,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x52, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x81,
	0xdb, 0x02, 0x0a, 0x03, 0x64, 0x6f, 0x70, 0x12, 0xd2, 0x01, 0x0a, 0x17, 0x41, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x38, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d,
	0x63, 0x72, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0x20, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x87, 0x03, 0x0a,
	0x1f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49,
	0x43, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x41, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x61,
	0x6c, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0xa6, 0x01,
	0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x61, 0x6c, 0x6c, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x6a, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0xac, 0xa6, 0xe5, 0x90, 0x88,
	0x20, 0x67, 0x69, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0xe8, 0xa7, 0x84, 0xe8, 0x8c, 0x83, 0xe7,
	0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc,
	0x8c, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe5, 0x88, 0x86,
	0xe6, 0x94, 0xaf, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x12, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f,
	0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x48,
	0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0x20,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xf8, 0x01, 0x0a, 0x17, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x47, 0x45, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x61, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x38, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0x12, 0xb8, 0x02, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x67, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69,
	0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7,
	0x9a, 0x84, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xa8,
	0x02, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x53, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x49, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x5f, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
	0xab, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe7, 0x8e, 0xaf,
	0xe5, 0xa2, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x12, 0xb1, 0x01, 0x0a, 0x13, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x22, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x2c, 0x0a, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x81, 0x02,
	0x0a, 0x17, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43,
	0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0xfa, 0x81,
	0xf9, 0x1b, 0x4e, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x63,
	0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xbc, 0x80, 0xe5,
	0xa7, 0x8b, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0xfb, 0x01, 0x0a, 0x16, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49,
	0x43, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x12, 0x32, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x43,
	0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0xfa, 0x81, 0xf9,
	0x1b, 0x4d, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x63, 0x72,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2,
	0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x86, 0x02, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44,
	0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x44, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x69, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x5e, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x69, 0x64,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x30, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x26,
	0x20, 0x61, 0x70, 0x70, 0x49, 0x44, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0xce, 0x01, 0x0a, 0x1c, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52,
	0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0xfa, 0x81, 0xf9, 0x1b,
	0x38, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0xde, 0x01, 0x0a, 0x1c, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x2a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0xa7, 0x02, 0x0a, 0x24, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x54, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x53, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x12, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x2d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x62, 0x0a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x66, 0x69, 0x6e, 0x64, 0x2d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x88, 0xb6, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0x12, 0x8c, 0x02, 0x0a, 0x22, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52,
	0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46,
	0x55, 0x5a, 0x5a, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x12, 0x39, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x92,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69,
	0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x75, 0x7a,
	0x7a, 0x79, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x55, 0x0a, 0x30,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0x12, 0xe0, 0x01, 0x0a, 0x19, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xc5, 0x02, 0x0a, 0x2b, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x12, 0x47, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x2d,
	0x62, 0x79, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x6e,
	0x0a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x2d,
	0x62, 0x79, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x2b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x64, 0x20, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe7, 0xba, 0xbf, 0x12, 0xd5,
	0x01, 0x0a, 0x1a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x32, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x43, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2d, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xad, 0x90, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xa6, 0x02, 0x0a, 0x1c, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x5c, 0x0a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f,
	0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x23, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94,
	0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12,
	0x84, 0x02, 0x0a, 0x1a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x12, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x70, 0x70, 0x2d, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe4, 0xbe, 0xa7, 0xe8, 0xbe, 0xb9, 0xe6, 0xa0, 0x8f,
	0x20, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2c,
	0x0a, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xce, 0x01, 0x0a,
	0x14, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63,
	0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x39, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73,
	0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xe5, 0x01,
	0x0a, 0x1c, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50,
	0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x12, 0x38,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44,
	0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xfa, 0x81, 0xf9, 0x1b,
	0x44, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xf3, 0x01, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x59, 0x4d, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x49,
	0x43, 0x44, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x49,
	0x43, 0x44, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d,
	0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69,
	0x63, 0x64, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x20, 0x79, 0x6d, 0x6c, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xa9, 0x01, 0x0a, 0x1b,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x1a, 0x0a, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x12, 0xd9, 0x01, 0x0a, 0x1b, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xfa, 0x81, 0xf9, 0x1b,
	0x32, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x12, 0xf4, 0x01, 0x0a, 0x12, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x49, 0x43, 0x44, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x52, 0x45, 0x52,
	0x55, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x72, 0x75, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x72, 0x75,
	0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe5, 0x85, 0xa8, 0xe6, 0xb5,
	0x81, 0xe7, 0xa8, 0x8b, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x12, 0x86, 0x02, 0x0a, 0x19, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x52, 0x45, 0x52, 0x55,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x72, 0x75,
	0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x66, 0x0a, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x72, 0x75, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x30, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x20, 0xe4, 0xbb, 0x8e, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xa4, 0x84, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe9, 0x87, 0x8d,
	0xe8, 0xaf, 0x95, 0x12, 0xe0, 0x01, 0x0a, 0x10, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x49, 0x43, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69,
	0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0xfa, 0x81, 0xf9, 0x1b,
	0x45, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x73, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x20, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x15, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49,
	0x43, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2f,
	0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x54, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x63, 0x64,
	0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x6c, 0x6f, 0x67,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0x63, 0x69, 0x63, 0x64, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x12, 0xa4, 0x02, 0x0a, 0x1e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x12, 0x3a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x49, 0x43, 0x44, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x69, 0x63, 0x64, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d,
	0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x65, 0x0a, 0x3b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x69, 0x63, 0x64, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x20,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x63, 0x69, 0x63, 0x64, 0x20, 0xe4, 0xb8,
	0x8b, 0xe8, 0xbd, 0xbd, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97,
	0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x44, 0x6f, 0x63, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x44, 0x6f, 0x63,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2d, 0x77, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2d, 0x77, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0x61, 0x70,
	0x69, 0x20, 0x64, 0x6f, 0x63, 0x20, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0xfc, 0x01, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x4d, 0x50, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x60, 0x0a, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x34, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x75, 0x73, 0x65, 0x63,
	0x61, 0x73, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x12, 0x99,
	0x02, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x37,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xa8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x6b, 0x0a,
	0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x31, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0xd2, 0x02, 0x0a, 0x1d, 0x41,
	0x50, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x39, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69,
	0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x6d, 0x0a, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x12,
	0xda, 0x02, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47,
	0x22, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x70, 0x0a, 0x45, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x12, 0xd9, 0x01, 0x0a,
	0x0e, 0x43, 0x49, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x12,
	0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x48,
	0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0x20, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x30, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x12, 0xe6, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2c, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x12, 0xe9, 0x01, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x69,
	0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x12, 0xe6, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a,
	0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x12,
	0xc8, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88,
	0x86, 0xe6, 0x94, 0xaf, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xda, 0x01, 0x0a, 0x17, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x39, 0x0a, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0x86, 0xe6, 0x94,
	0xaf, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xc5, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12,
	0xd2, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x39, 0x0a, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0xe8, 0xa7,
	0x84, 0xe5, 0x88, 0x99, 0x12, 0xaa, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x22,
	0xaf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x71,
	0x0a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x36, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5,
	0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0x82, 0x02, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x56,
	0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x8b, 0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x2a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x5b, 0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe8, 0xaf,
	0x81, 0xe4, 0xb9, 0xa6, 0x12, 0xf6, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x58, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x75, 0x73, 0x68, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x8e, 0xa8, 0xe9,
	0x80, 0x81, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0xe5, 0x88,
	0xb0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0xea, 0x01,
	0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x12, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x4e, 0x0a, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0xbc,
	0x95, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x12, 0xc4, 0x01, 0x0a, 0x17, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x2e, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xb9,
	0xa6, 0x12, 0xed, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x33, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x3f, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0x81, 0xe4, 0xb9,
	0xa6, 0x12, 0xeb, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12,
	0xe4, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd0, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb7, 0xa5,
	0xe5, 0x8d, 0x95, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe8, 0xbf, 0xad, 0xe4, 0xbb, 0xa3, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x33,
	0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xbf, 0xad,
	0xe4, 0xbb, 0xa3, 0x12, 0xc4, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0xbf,
	0xad, 0xe4, 0xbb, 0xa3, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xc2, 0x01, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x0f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x86,
	0xe9, 0xa1, 0xb5, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xbf, 0xad, 0xe4, 0xbb, 0xa3, 0x12,
	0xc6, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0xbf, 0xad, 0xe4, 0xbb, 0xa3, 0x12, 0xd0, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x62, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62,
	0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0xba, 0x93, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0x12, 0xc9, 0x01, 0x0a, 0x18,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3a, 0x0a, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xba,
	0x93, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0x12, 0xca, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xba, 0x93, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x83, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x49,
	0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x55, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x62, 0x2d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xae,
	0xa2, 0xe9, 0x98, 0x85, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0x80, 0x02, 0x0a, 0x17, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52,
	0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2d, 0x6d, 0x79, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x58, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x6d, 0x79, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x9e, 0x01,
	0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x28, 0x0a, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0x12, 0xa6,
	0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x12, 0xac, 0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x4f, 0x72, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0x12, 0xe7, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x4f, 0x52, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x4f, 0x72, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79,
	0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x04, 0x18, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x9f,
	0x9f, 0xe5, 0x90, 0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87,
	0x12, 0xce, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x4e, 0x45,
	0x58, 0x55, 0x53, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f,
	0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x78, 0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x41,
	0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x22, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0x20, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x12, 0x85, 0x02, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x4e,
	0x45, 0x58, 0x55, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x65, 0x78, 0x75,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x7d, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x2d, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x4f, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x68,
	0x6f, 0x77, 0x2d, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x22, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x20, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x20, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x12, 0x24, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x42, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x04, 0x18, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xac, 0xe5,
	0xbc, 0x80, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0x12, 0xf0, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x95, 0x86, 0x12, 0xf8, 0x01, 0x0a, 0x1d,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x39, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x8f, 0x91,
	0xe5, 0xb8, 0x83, 0xe5, 0x95, 0x86, 0x12, 0xeb, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x4f, 0x52, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f, 0x52,
	0x47, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72,
	0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x28, 0x0a, 0x09, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7,
	0xbb, 0x84, 0xe7, 0xbb, 0x87, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4f,
	0x52, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f,
	0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x1a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0x12, 0xae, 0x01, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2c, 0x0a, 0x0d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x12, 0xb2, 0x01, 0x0a, 0x13, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x2c, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x12,
	0xca, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x38, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x12, 0xdc, 0x01, 0x0a,
	0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xc6, 0x01, 0x0a, 0x14,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3d, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x19, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0xe1, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12,
	0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x19,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0xe0, 0x01, 0x0a, 0x12, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54,
	0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xbe, 0x01, 0x0a,
	0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x1a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x0f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x19, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0xe2, 0x01,
	0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d,
	0x95, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d,
	0x95, 0x12, 0xc3, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x36, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x12, 0x26, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85,
	0x12, 0xa7, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xb7,
	0xa5, 0xe5, 0x8d, 0x95, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xf1, 0x01, 0x0a, 0x12, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4f, 0x50, 0x45,
	0x4e, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x54, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe5,
	0xb7, 0xb2, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0x12, 0xc3,
	0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x36, 0x0a, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb7,
	0xa5, 0xe5, 0x8d, 0x95, 0x12, 0xdf, 0x01, 0x0a, 0x1a, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65,
	0x6e, 0x64, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x46,
	0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x64,
	0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xe8, 0x01, 0x0a, 0x1c, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x80,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x17, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0xcd, 0x01, 0x0a, 0x1a, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3a, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xe9, 0x01, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0xfa,
	0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x9b, 0x01,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x2a, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12, 0xec, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x17, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5,
	0x84, 0xe6, 0x96, 0x99, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x26, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x83, 0x02, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb2, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
	0xfa, 0x81, 0xf9, 0x1b, 0x5d, 0x0a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x27, 0x0a,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0xb9, 0x02, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x22,
	0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x77, 0x0a,
	0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xed, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x4c, 0x41, 0x12, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x40, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x54, 0x0a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x73, 0x6c, 0x61, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x53, 0x4c, 0x41, 0x12, 0xf6, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x91, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x56, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x20, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xe7, 0x9a, 0x84, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12,
	0xb0, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x32,
	0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x11, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6,
	0x96, 0x99, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x1a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0xac, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xd9,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8a, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0xfd, 0x01, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x12, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x2a,
	0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61,
	0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x5c, 0x0a, 0x48,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73,
	0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x53, 0x4c, 0x41, 0x12, 0xe4, 0x01, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a,
	0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0xe5, 0xaf, 0xbc, 0xe5,
	0x87, 0xba, 0x20, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x20, 0xe6, 0x96, 0x87, 0xe6, 0x9c,
	0xac, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50,
	0x49, 0x44, 0x6f, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72,
	0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65,
	0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x65, 0x65, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f,
	0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74,
	0x72, 0x65, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x65,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x74, 0x72, 0x65, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x10, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x76, 0x43, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x76, 0x43,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x36, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x17, 0x6d, 0x76, 0x20, 0x6f, 0x72,
	0x20, 0x63, 0x70, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x65, 0x65, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x6d, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x2f, 0x7b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x74, 0x72, 0x65, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xf8, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x53, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x41, 0x50,
	0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x50,
	0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12, 0xa1, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x2e, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x0a, 0x67, 0x65, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x9e, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x2f, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0a, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0xd3, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x87, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0c, 0x67, 0x65, 0x74, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0xcf, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5b, 0x12, 0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x75, 0x0a, 0x59, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0xe6, 0x90, 0x9c, 0xe7,
	0xb4, 0xa2, 0xe9, 0x9b, 0x86, 0xe5, 0xb8, 0x82, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0x12, 0xfb, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x12,
	0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x41, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x41, 0x73, 0x52, 0x73,
	0x70, 0x22, 0xae, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c,
	0x61, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61,
	0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x07, 0x67, 0x65, 0x74, 0x20, 0x53,
	0x4c, 0x41, 0x12, 0xe1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x76,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20,
	0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a,
	0x25, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12,
	0x94, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x24, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0xa4, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x73, 0x70, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x63, 0x0a, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12,
	0x67, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x28, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6d, 0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x60, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x37, 0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0xe9, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x41, 0x12, 0x1d, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x52, 0x73, 0x70, 0x22, 0x9f, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a, 0x40, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x53, 0x4c, 0x41, 0x12, 0xb4, 0x02,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x45, 0x12, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x69, 0x0a, 0x43, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x15, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x20, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x1e, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x98, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x5b, 0x0a, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x7d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xae, 0x02, 0x0a, 0x15, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x53, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x64, 0x0a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb8,
	0xa0, 0xe9, 0x81, 0x93, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0x8e,
	0xe7, 0xbb, 0x86, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x12, 0x88, 0x02, 0x0a, 0x18, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45,
	0x46, 0x46, 0x41, 0x43, 0x54, 0x53, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x46, 0x46,
	0x41, 0x43, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x65, 0x66, 0x66, 0x61, 0x63, 0x74, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x62, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x65, 0x66, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xef,
	0xbc, 0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x8d,
	0xa0, 0xe6, 0xaf, 0x94, 0x12, 0x94, 0x02, 0x0a, 0x15, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9,
	0x1b, 0x59, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xef, 0xbc, 0x8c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xf3, 0x01, 0x0a, 0x15,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72,
	0x72, 0x2f, 0x72, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x56, 0x0a, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f,
	0x65, 0x72, 0x72, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xef, 0xbc, 0x8c, 0xe5, 0xb4, 0xa9, 0xe6, 0xba, 0x83, 0xe7, 0x8e,
	0x87, 0x12, 0x99, 0x02, 0x0a, 0x16, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x12, 0x32, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0xfa, 0x81,
	0xf9, 0x1b, 0x5a, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x72, 0x2f, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xef, 0xbc,
	0x8c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe8, 0xb6, 0x8b, 0xe5, 0x8a, 0xbf, 0x12, 0x9f, 0x02,
	0x0a, 0x1b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x45, 0x54, 0x49, 0x52, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x12, 0x37, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x4d, 0x45, 0x54, 0x49, 0x52, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xae,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x6a, 0x0a, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0x02,
	0x08, 0x01, 0x3a, 0x2b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x80, 0x9a,
	0xe7, 0x94, 0xa8, 0x6d, 0x65, 0x74, 0x72, 0x63, 0x69, 0x73, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xef, 0xbc, 0x8c, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x12,
	0xd1, 0x02, 0x0a, 0x25, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x4d, 0x45, 0x54, 0x49, 0x52, 0x43, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x12, 0x41, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x49,
	0x52, 0x43, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0xcc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0xfa, 0x81, 0xf9, 0x1b, 0x7e, 0x0a, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x02, 0x08, 0x01, 0x3a, 0x35, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x6d, 0x65, 0x74,
	0x72, 0x63, 0x69, 0x73, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x12, 0xb8, 0x02, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f,
	0x54, 0x52, 0x45, 0x4e, 0x44, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x67, 0x0a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe7, 0xbb, 0x9f,
	0xe4, 0xb8, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9b, 0x98, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe4,
	0xbd, 0x93, 0xe8, 0xb6, 0x8b, 0xe5, 0x8a, 0xbf, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x12, 0x80,
	0x02, 0x0a, 0x12, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x53, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa1, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x61,
	0x0a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe5, 0xa4, 0xa7, 0xe7,
	0x9b, 0x98, 0xef, 0xbc, 0x8c, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x12, 0xb7, 0x02, 0x0a, 0x1e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x64, 0x0a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xef, 0xbc, 0x8c, 0xe6,
	0x98, 0x8e, 0xe7, 0xbb, 0x86, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x12, 0xb1, 0x01, 0x0a, 0x0f,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x50, 0x49, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x2e, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12,
	0x8f, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x63, 0x0a, 0x3d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x18,
	0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5,
	0x87, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xb7, 0xa5, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c,
	0x85, 0x12, 0x8f, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x63,
	0x0a, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x32,
	0x02, 0x18, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xb7, 0xa5, 0xe7, 0xa8, 0x8b,
	0xe5, 0x8c, 0x85, 0x12, 0xd9, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x32, 0x02, 0x18, 0x01, 0x3a,
	0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0xa7, 0xa3, 0xe6, 0x9e, 0x90,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xb7, 0xa5, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c, 0x85, 0x12,
	0x90, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x61, 0x0a, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x32, 0x02, 0x18, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0x12, 0x90, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22,
	0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0xfa,
	0x81, 0xf9, 0x1b, 0x61, 0x0a, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x18, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x12, 0xda, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x32, 0x02, 0x18, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0xa7, 0xa3, 0xe6, 0x9e, 0x90, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x15, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x91, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x12, 0xe7, 0x01, 0x0a, 0x12, 0x51, 0x41,
	0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x41, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1,
	0xe5, 0x88, 0x92, 0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x51, 0x41, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f,
	0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70, 0x69, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x38, 0x0a, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x51, 0x41, 0x5f, 0x41, 0x50,
	0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x41, 0x70, 0x69, 0x54, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x70,
	0x69, 0x54, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x61, 0x70, 0x69, 0x20, 0x74, 0x65, 0x73, 0x74,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xe5, 0x01, 0x0a, 0x15, 0x51, 0x41,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x23, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x61, 0x75, 0x74,
	0x6f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0x12, 0xb0, 0x02, 0x0a, 0x15, 0x51, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x12, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x51, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x72, 0x0a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x32, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0xe6, 0x97,
	0xa5, 0xe5, 0xbf, 0x97, 0x12, 0xd2, 0x01, 0x0a, 0x0e, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3d, 0x0a, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xd0, 0x01, 0x0a, 0x0f, 0x51, 0x41,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x39, 0x0a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x19, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x85, 0x02, 0x0a,
	0x17, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41,
	0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xfa, 0x81, 0xf9, 0x1b,
	0x53, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x02, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x0f, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41,
	0x52, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41,
	0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0xfa, 0x81,
	0xf9, 0x1b, 0x2d, 0x0a, 0x07, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x1c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x8e, 0x02, 0x0a, 0x22, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e,
	0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x2a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x5e, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x28, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x12, 0x8e, 0x02, 0x0a, 0x22, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f,
	0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0xfa,
	0x81, 0xf9, 0x1b, 0x5e, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72,
	0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x28, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x8f, 0x92, 0xe5, 0x85, 0xa5, 0x20,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84, 0xe5,
	0x88, 0x99, 0x12, 0xdc, 0x01, 0x0a, 0x1c, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x71,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x22, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x12, 0xdd, 0x01, 0x0a, 0x19, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x12,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x71,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x22, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x12, 0xd8, 0x01, 0x0a, 0x1c, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x49, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x28, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x86,
	0xe9, 0xa1, 0xb5, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20,
	0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xb4, 0x02, 0x0a,
	0x26, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e,
	0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b,
	0x72, 0x0a, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x31, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x20, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0xaa, 0xe6, 0xb7,
	0xbb, 0xe5, 0x8a, 0xa0, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0x12, 0xfe, 0x01, 0x0a, 0x20, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f,
	0x6e, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x25, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x1c, 0x51, 0x41, 0x5f, 0x53, 0x4f, 0x4e, 0x41,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x6e, 0x61, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x22, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0x20, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x20, 0xe6, 0x89, 0xab, 0xe6, 0x8f, 0x8f, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0x12, 0xc7, 0x01, 0x0a, 0x11, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45,
	0x4e, 0x56, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51,
	0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50,
	0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0xfa, 0x81, 0xf9, 0x1b, 0x3d,
	0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2,
	0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd2, 0x01,
	0x0a, 0x11, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x45, 0x4e, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x76, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x42,
	0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x12, 0xd5, 0x01, 0x0a, 0x0e, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e,
	0x56, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x76, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x6e, 0x76, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4e, 0x0a, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x41, 0x50, 0x49, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9a, 0x84, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xf0, 0x01, 0x0a, 0x0f, 0x51,
	0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x76, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x58, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x6e, 0x76, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x65, 0x6e, 0x76, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x30, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x41, 0x50, 0x49, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2,
	0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc7, 0x01,
	0x0a, 0x11, 0x51, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x4e, 0x56, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x6e, 0x76, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x39, 0x0a, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x6e, 0x76, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x8e, 0x02, 0x0a, 0x1b, 0x51, 0x41, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x51, 0x41, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2c, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x53, 0x50, 0x4f,
	0x54, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x12,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x20, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x20, 0xe7, 0x9a, 0x84, 0xe6,
	0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x12, 0xf2, 0x01, 0x0a, 0x1b,
	0x53, 0x50, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x4f,
	0x47, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x12, 0x37, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x81, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0xe4, 0xb8,
	0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9,
	0x12, 0xb6, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x36, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x18, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe9, 0x9b, 0x86, 0xe5, 0xb8, 0x82, 0xe4, 0xb8, 0xad,
	0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x12, 0xac, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x20, 0x41, 0x50,
	0x49, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x56, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x20, 0x41, 0x50, 0x49,
	0x20, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x2f, 0x0a,
	0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x0a, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xe1,
	0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x1a, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0xde, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x82,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x1a, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x89, 0x01, 0x0a, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xfd, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x4c,
	0x41, 0x12, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x1a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x49,
	0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x5c, 0x0a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x49, 0x44,
	0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x53, 0x4c, 0x41, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x32, 0x02, 0x08, 0x01, 0x3a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x0a, 0xc2, 0xc4, 0xcb, 0x1c, 0x05, 0x22, 0x03,
	0x64, 0x6f, 0x70, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x70, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dop_proto_rawDescOnce sync.Once
	file_dop_proto_rawDescData = file_dop_proto_rawDesc
)

func file_dop_proto_rawDescGZIP() []byte {
	file_dop_proto_rawDescOnce.Do(func() {
		file_dop_proto_rawDescData = protoimpl.X.CompressGZIP(file_dop_proto_rawDescData)
	})
	return file_dop_proto_rawDescData
}

var file_dop_proto_msgTypes = make([]protoimpl.MessageInfo, 370)
var file_dop_proto_goTypes = []interface{}{
	(*AADAPTOR_CICD_CRON_LIST_Request)(nil),                     // 0: erda.openapiv1.dop.AADAPTOR_CICD_CRON_LIST_Request
	(*ADAPTOR_CICD_BRANCHES_ALL_VALID_Request)(nil),             // 1: erda.openapiv1.dop.ADAPTOR_CICD_BRANCHES_ALL_VALID_Request
	(*ADAPTOR_CICD_CANCEL_Request)(nil),                         // 2: erda.openapiv1.dop.ADAPTOR_CICD_CANCEL_Request
	(*ADAPTOR_CICD_CONFIG_GET_Request)(nil),                     // 3: erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_GET_Request
	(*ADAPTOR_CICD_CONFIG_NAMESPACES_Request)(nil),              // 4: erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_NAMESPACES_Request
	(*ADAPTOR_CICD_CONFIG_WORKSPACES_Request)(nil),              // 5: erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_WORKSPACES_Request
	(*ADAPTOR_CICD_CRON_START_Request)(nil),                     // 6: erda.openapiv1.dop.ADAPTOR_CICD_CRON_START_Request
	(*ADAPTOR_CICD_CRON_STOP_Request)(nil),                      // 7: erda.openapiv1.dop.ADAPTOR_CICD_CRON_STOP_Request
	(*ADAPTOR_CICD_FETCH_PIPELINE_ID_Request)(nil),              // 8: erda.openapiv1.dop.ADAPTOR_CICD_FETCH_PIPELINE_ID_Request
	(*ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request)(nil), // 9: erda.openapiv1.dop.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request
	(*ADAPTOR_CICD_GET_BRANCH_RULE_Request)(nil),                // 10: erda.openapiv1.dop.ADAPTOR_CICD_GET_BRANCH_RULE_Request
	(*ADAPTOR_CICD_PIPELINE_DETAIL_Request)(nil),                // 11: erda.openapiv1.dop.ADAPTOR_CICD_PIPELINE_DETAIL_Request
	(*ADAPTOR_CICD_PROJECT_CREATE_Request)(nil),                 // 12: erda.openapiv1.dop.ADAPTOR_CICD_PROJECT_CREATE_Request
	(*ADAPTOR_CICD_PROJECT_DETAIL_Request)(nil),                 // 13: erda.openapiv1.dop.ADAPTOR_CICD_PROJECT_DETAIL_Request
	(*ADAPTOR_CICD_RERUN_Request)(nil),                          // 14: erda.openapiv1.dop.ADAPTOR_CICD_RERUN_Request
	(*ADAPTOR_CICD_RUN_Request)(nil),                            // 15: erda.openapiv1.dop.ADAPTOR_CICD_RUN_Request
	(*ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request)(nil),              // 16: erda.openapiv1.dop.ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request
	(*ADAPTOR_CICD_TASK_LOG_Request)(nil),                       // 17: erda.openapiv1.dop.ADAPTOR_CICD_TASK_LOG_Request
	(*APIAssetCreateRequest)(nil),                               // 18: erda.openapiv1.dop.APIAssetCreateRequest
	(*APIAssetGetResponse)(nil),                                 // 19: erda.openapiv1.dop.APIAssetGetResponse
	(*APIAssetPagingResponse)(nil),                              // 20: erda.openapiv1.dop.APIAssetPagingResponse
	(*APIAssetVersionCreateRequest)(nil),                        // 21: erda.openapiv1.dop.APIAssetVersionCreateRequest
	(*APIAssetVersionInstanceCreateRequest)(nil),                // 22: erda.openapiv1.dop.APIAssetVersionInstanceCreateRequest
	(*APIDocCreateNodeReq)(nil),                                 // 23: erda.openapiv1.dop.APIDocCreateNodeReq
	(*APIDocWebsocket_Request)(nil),                             // 24: erda.openapiv1.dop.APIDocWebsocket_Request
	(*APITestEnvCreateRequest)(nil),                             // 25: erda.openapiv1.dop.APITestEnvCreateRequest
	(*APITestEnvData)(nil),                                      // 26: erda.openapiv1.dop.APITestEnvData
	(*APITestEnvDeleteResponse)(nil),                            // 27: erda.openapiv1.dop.APITestEnvDeleteResponse
	(*APITestEnvGetResponse)(nil),                               // 28: erda.openapiv1.dop.APITestEnvGetResponse
	(*APITestEnvListResponse)(nil),                              // 29: erda.openapiv1.dop.APITestEnvListResponse
	(*APITestEnvUpdateRequest)(nil),                             // 30: erda.openapiv1.dop.APITestEnvUpdateRequest
	(*APITestEnvUpdateResponse)(nil),                            // 31: erda.openapiv1.dop.APITestEnvUpdateResponse
	(*APITestReq)(nil),                                          // 32: erda.openapiv1.dop.APITestReq
	(*APITestsAttemptRequest)(nil),                              // 33: erda.openapiv1.dop.APITestsAttemptRequest
	(*APITestsAttemptResponse)(nil),                             // 34: erda.openapiv1.dop.APITestsAttemptResponse
	(*APPLICATIONS_RESOURCES_LIST_Request)(nil),                 // 35: erda.openapiv1.dop.APPLICATIONS_RESOURCES_LIST_Request
	(*APP_PUBLISH_ITEM_RELATION_GET_Request)(nil),               // 36: erda.openapiv1.dop.APP_PUBLISH_ITEM_RELATION_GET_Request
	(*AndroidCertificateAutoDTO)(nil),                           // 37: erda.openapiv1.dop.AndroidCertificateAutoDTO
	(*AndroidCertificateDTO)(nil),                               // 38: erda.openapiv1.dop.AndroidCertificateDTO
	(*AndroidCertificateKeyDTO)(nil),                            // 39: erda.openapiv1.dop.AndroidCertificateKeyDTO
	(*AndroidCertificateKeyStoreDTO)(nil),                       // 40: erda.openapiv1.dop.AndroidCertificateKeyStoreDTO
	(*AndroidCertificateManualDTO)(nil),                         // 41: erda.openapiv1.dop.AndroidCertificateManualDTO
	(*AndroidCertificateManualKeyStoreDTO)(nil),                 // 42: erda.openapiv1.dop.AndroidCertificateManualKeyStoreDTO
	(*ApiTestCancelRequest)(nil),                                // 43: erda.openapiv1.dop.ApiTestCancelRequest
	(*ApiTestCancelResponse)(nil),                               // 44: erda.openapiv1.dop.ApiTestCancelResponse
	(*ApiTestInfo)(nil),                                         // 45: erda.openapiv1.dop.ApiTestInfo
	(*ApiTestsGetResponse)(nil),                                 // 46: erda.openapiv1.dop.ApiTestsGetResponse
	(*ApiTestsUpdateRequest)(nil),                               // 47: erda.openapiv1.dop.ApiTestsUpdateRequest
	(*ApiTestsUpdateResponse)(nil),                              // 48: erda.openapiv1.dop.ApiTestsUpdateResponse
	(*AppCertificateListRequest)(nil),                           // 49: erda.openapiv1.dop.AppCertificateListRequest
	(*AppPublishItemRelation)(nil),                              // 50: erda.openapiv1.dop.AppPublishItemRelation
	(*ApplicationCertificateDTO)(nil),                           // 51: erda.openapiv1.dop.ApplicationCertificateDTO
	(*ApplicationCreateRequest)(nil),                            // 52: erda.openapiv1.dop.ApplicationCreateRequest
	(*ApplicationCreateResponse)(nil),                           // 53: erda.openapiv1.dop.ApplicationCreateResponse
	(*ApplicationDTO)(nil),                                      // 54: erda.openapiv1.dop.ApplicationDTO
	(*ApplicationDeleteRequest)(nil),                            // 55: erda.openapiv1.dop.ApplicationDeleteRequest
	(*ApplicationDeleteResponse)(nil),                           // 56: erda.openapiv1.dop.ApplicationDeleteResponse
	(*ApplicationInitRequest)(nil),                              // 57: erda.openapiv1.dop.ApplicationInitRequest
	(*ApplicationStats)(nil),                                    // 58: erda.openapiv1.dop.ApplicationStats
	(*ApplicationUpdateRequest)(nil),                            // 59: erda.openapiv1.dop.ApplicationUpdateRequest
	(*ApplicationUpdateRequestBody)(nil),                        // 60: erda.openapiv1.dop.ApplicationUpdateRequestBody
	(*ApplicationUpdateResponse)(nil),                           // 61: erda.openapiv1.dop.ApplicationUpdateResponse
	(*ApplicationWorkspace)(nil),                                // 62: erda.openapiv1.dop.ApplicationWorkspace
	(*Artifact)(nil),                                            // 63: erda.openapiv1.dop.Artifact
	(*AuditMessage)(nil),                                        // 64: erda.openapiv1.dop.AuditMessage
	(*AutoTestSpaceResponse)(nil),                               // 65: erda.openapiv1.dop.AutoTestSpaceResponse
	(*BaseModel)(nil),                                           // 66: erda.openapiv1.dop.BaseModel
	(*BaseResponse)(nil),                                        // 67: erda.openapiv1.dop.BaseResponse
	(*BlockoutConfig)(nil),                                      // 68: erda.openapiv1.dop.BlockoutConfig
	(*CICDPipelineYmlListRequest)(nil),                          // 69: erda.openapiv1.dop.CICDPipelineYmlListRequest
	(*CICDPipelineYmlListResponse)(nil),                         // 70: erda.openapiv1.dop.CICDPipelineYmlListResponse
	(*CMDB_BRANCH_RULE_DELETE_Request)(nil),                     // 71: erda.openapiv1.dop.CMDB_BRANCH_RULE_DELETE_Request
	(*CMDB_CERTIFICATE_APP_CANCEL_Request)(nil),                 // 72: erda.openapiv1.dop.CMDB_CERTIFICATE_APP_CANCEL_Request
	(*CMDB_CERTIFICATE_DELETE_Request)(nil),                     // 73: erda.openapiv1.dop.CMDB_CERTIFICATE_DELETE_Request
	(*CMDB_CERTIFICATE_GET_Request)(nil),                        // 74: erda.openapiv1.dop.CMDB_CERTIFICATE_GET_Request
	(*CMDB_ITERATION_DELETE_Request)(nil),                       // 75: erda.openapiv1.dop.CMDB_ITERATION_DELETE_Request
	(*CMDB_ITERATION_GET_Request)(nil),                          // 76: erda.openapiv1.dop.CMDB_ITERATION_GET_Request
	(*CMDB_LIBREFERENCE_DELETE_Request)(nil),                    // 77: erda.openapiv1.dop.CMDB_LIBREFERENCE_DELETE_Request
	(*CMDB_LIBREFERENCE_LIST_VERSION_Request)(nil),              // 78: erda.openapiv1.dop.CMDB_LIBREFERENCE_LIST_VERSION_Request
	(*CMDB_ORG_DELETE_Request)(nil),                             // 79: erda.openapiv1.dop.CMDB_ORG_DELETE_Request
	(*CMDB_ORG_PUBLISHER_CREATE_GET_Request)(nil),               // 80: erda.openapiv1.dop.CMDB_ORG_PUBLISHER_CREATE_GET_Request
	(*CMDB_ORG_PUBLISHER_CREATE_Request)(nil),                   // 81: erda.openapiv1.dop.CMDB_ORG_PUBLISHER_CREATE_Request
	(*CMDB_ORG_RESOURCE_GET_Request)(nil),                       // 82: erda.openapiv1.dop.CMDB_ORG_RESOURCE_GET_Request
	(*CMDB_PUBLISHER_DELETE_Request)(nil),                       // 83: erda.openapiv1.dop.CMDB_PUBLISHER_DELETE_Request
	(*CMDB_PUBLISHER_GET_Request)(nil),                          // 84: erda.openapiv1.dop.CMDB_PUBLISHER_GET_Request
	(*CMDB_ROLES_LIST_Request)(nil),                             // 85: erda.openapiv1.dop.CMDB_ROLES_LIST_Request
	(*CertificateCreateRequest)(nil),                            // 86: erda.openapiv1.dop.CertificateCreateRequest
	(*CertificateCreateResponse)(nil),                           // 87: erda.openapiv1.dop.CertificateCreateResponse
	(*CertificateDTO)(nil),                                      // 88: erda.openapiv1.dop.CertificateDTO
	(*CertificateDeleteResponse)(nil),                           // 89: erda.openapiv1.dop.CertificateDeleteResponse
	(*CertificateDetailResponse)(nil),                           // 90: erda.openapiv1.dop.CertificateDetailResponse
	(*CertificateFileDTO)(nil),                                  // 91: erda.openapiv1.dop.CertificateFileDTO
	(*CertificateListRequest)(nil),                              // 92: erda.openapiv1.dop.CertificateListRequest
	(*CertificateListResponse)(nil),                             // 93: erda.openapiv1.dop.CertificateListResponse
	(*CertificateQuoteRequest)(nil),                             // 94: erda.openapiv1.dop.CertificateQuoteRequest
	(*CertificateUpdateRequest)(nil),                            // 95: erda.openapiv1.dop.CertificateUpdateRequest
	(*CertificateUpdateResponse)(nil),                           // 96: erda.openapiv1.dop.CertificateUpdateResponse
	(*CodeCoverageUpdateRequest)(nil),                           // 97: erda.openapiv1.dop.CodeCoverageUpdateRequest
	(*Comment)(nil),                                             // 98: erda.openapiv1.dop.Comment
	(*CommentCreateRequest)(nil),                                // 99: erda.openapiv1.dop.CommentCreateRequest
	(*CommentCreateResponse)(nil),                               // 100: erda.openapiv1.dop.CommentCreateResponse
	(*CommentListRequest)(nil),                                  // 101: erda.openapiv1.dop.CommentListRequest
	(*CommentListResponse)(nil),                                 // 102: erda.openapiv1.dop.CommentListResponse
	(*CommentListResponseData)(nil),                             // 103: erda.openapiv1.dop.CommentListResponseData
	(*CommentUpdateRequest)(nil),                                // 104: erda.openapiv1.dop.CommentUpdateRequest
	(*CommentUpdateRequestBody)(nil),                            // 105: erda.openapiv1.dop.CommentUpdateRequestBody
	(*CommentUpdateResponse)(nil),                               // 106: erda.openapiv1.dop.CommentUpdateResponse
	(*CreateAPIAssetVersionBody)(nil),                           // 107: erda.openapiv1.dop.CreateAPIAssetVersionBody
	(*CreateAccessReq)(nil),                                     // 108: erda.openapiv1.dop.CreateAccessReq
	(*CreateBranchRuleRequest)(nil),                             // 109: erda.openapiv1.dop.CreateBranchRuleRequest
	(*CreateBranchRuleResponse)(nil),                            // 110: erda.openapiv1.dop.CreateBranchRuleResponse
	(*CreateClientReq)(nil),                                     // 111: erda.openapiv1.dop.CreateClientReq
	(*CreateContractReq)(nil),                                   // 112: erda.openapiv1.dop.CreateContractReq
	(*CreateInstantiationReq)(nil),                              // 113: erda.openapiv1.dop.CreateInstantiationReq
	(*CreateSLAReq)(nil),                                        // 114: erda.openapiv1.dop.CreateSLAReq
	(*DashboardSpotLogData)(nil),                                // 115: erda.openapiv1.dop.DashboardSpotLogData
	(*DashboardSpotLogLine)(nil),                                // 116: erda.openapiv1.dop.DashboardSpotLogLine
	(*DashboardSpotLogResponse)(nil),                            // 117: erda.openapiv1.dop.DashboardSpotLogResponse
	(*DeleteAPIAssetVersion_Request)(nil),                       // 118: erda.openapiv1.dop.DeleteAPIAssetVersion_Request
	(*DeleteAPIAssets_Request)(nil),                             // 119: erda.openapiv1.dop.DeleteAPIAssets_Request
	(*DeleteAccess_Request)(nil),                                // 120: erda.openapiv1.dop.DeleteAccess_Request
	(*DeleteBranchRuleResponse)(nil),                            // 121: erda.openapiv1.dop.DeleteBranchRuleResponse
	(*DeleteClient_Request)(nil),                                // 122: erda.openapiv1.dop.DeleteClient_Request
	(*DeleteSLAReq)(nil),                                        // 123: erda.openapiv1.dop.DeleteSLAReq
	(*DownloadSpecTextReq)(nil),                                 // 124: erda.openapiv1.dop.DownloadSpecTextReq
	(*ErrorResponse)(nil),                                       // 125: erda.openapiv1.dop.ErrorResponse
	(*ExportProjectPackageRequest)(nil),                         // 126: erda.openapiv1.dop.ExportProjectPackageRequest
	(*ExportProjectTemplateRequest)(nil),                        // 127: erda.openapiv1.dop.ExportProjectTemplateRequest
	(*FileTreeDeleteNode_Request)(nil),                          // 128: erda.openapiv1.dop.FileTreeDeleteNode_Request
	(*FileTreeGetNode_Request)(nil),                             // 129: erda.openapiv1.dop.FileTreeGetNode_Request
	(*FileTreeListNodes_Request)(nil),                           // 130: erda.openapiv1.dop.FileTreeListNodes_Request
	(*FileTreeMvCpNode_Request)(nil),                            // 131: erda.openapiv1.dop.FileTreeMvCpNode_Request
	(*FileTreeUpdateNode_Request)(nil),                          // 132: erda.openapiv1.dop.FileTreeUpdateNode_Request
	(*GetAPIAssetReq)(nil),                                      // 133: erda.openapiv1.dop.GetAPIAssetReq
	(*GetAPIAssetVersionReq)(nil),                               // 134: erda.openapiv1.dop.GetAPIAssetVersionReq
	(*GetAccess_Request)(nil),                                   // 135: erda.openapiv1.dop.GetAccess_Request
	(*GetAddonInstanceDetailResponse)(nil),                      // 136: erda.openapiv1.dop.GetAddonInstanceDetailResponse
	(*GetAssetVersionRsp)(nil),                                  // 137: erda.openapiv1.dop.GetAssetVersionRsp
	(*GetClientReq)(nil),                                        // 138: erda.openapiv1.dop.GetClientReq
	(*GetContractReq)(nil),                                      // 139: erda.openapiv1.dop.GetContractReq
	(*GetInstantiationsReq)(nil),                                // 140: erda.openapiv1.dop.GetInstantiationsReq
	(*GetOperationReq)(nil),                                     // 141: erda.openapiv1.dop.GetOperationReq
	(*GetOperationURIParameters)(nil),                           // 142: erda.openapiv1.dop.GetOperationURIParameters
	(*GetSLAReq)(nil),                                           // 143: erda.openapiv1.dop.GetSLAReq
	(*GetSLARsp)(nil),                                           // 144: erda.openapiv1.dop.GetSLARsp
	(*GetTestFileRecordResponse)(nil),                           // 145: erda.openapiv1.dop.GetTestFileRecordResponse
	(*Header)(nil),                                              // 146: erda.openapiv1.dop.Header
	(*IOSCertificateDTO)(nil),                                   // 147: erda.openapiv1.dop.IOSCertificateDTO
	(*IOSCertificateKeyChainP12DTO)(nil),                        // 148: erda.openapiv1.dop.IOSCertificateKeyChainP12DTO
	(*IOSCertificateKeyDTO)(nil),                                // 149: erda.openapiv1.dop.IOSCertificateKeyDTO
	(*IRComment)(nil),                                           // 150: erda.openapiv1.dop.IRComment
	(*ISummary)(nil),                                            // 151: erda.openapiv1.dop.ISummary
	(*ISummaryState)(nil),                                       // 152: erda.openapiv1.dop.ISummaryState
	(*ImportProjectPackageRequest)(nil),                         // 153: erda.openapiv1.dop.ImportProjectPackageRequest
	(*ImportProjectTemplateRequest)(nil),                        // 154: erda.openapiv1.dop.ImportProjectTemplateRequest
	(*InstanceDetailRes)(nil),                                   // 155: erda.openapiv1.dop.InstanceDetailRes
	(*InstanceReferenceRes)(nil),                                // 156: erda.openapiv1.dop.InstanceReferenceRes
	(*Iteration)(nil),                                           // 157: erda.openapiv1.dop.Iteration
	(*IterationCreateRequest)(nil),                              // 158: erda.openapiv1.dop.IterationCreateRequest
	(*IterationCreateResponse)(nil),                             // 159: erda.openapiv1.dop.IterationCreateResponse
	(*IterationGetResponse)(nil),                                // 160: erda.openapiv1.dop.IterationGetResponse
	(*IterationPagingRequest)(nil),                              // 161: erda.openapiv1.dop.IterationPagingRequest
	(*IterationPagingResponse)(nil),                             // 162: erda.openapiv1.dop.IterationPagingResponse
	(*IterationUpdateRequest)(nil),                              // 163: erda.openapiv1.dop.IterationUpdateRequest
	(*IterationUpdateResponse)(nil),                             // 164: erda.openapiv1.dop.IterationUpdateResponse
	(*LibReference)(nil),                                        // 165: erda.openapiv1.dop.LibReference
	(*LibReferenceCreateRequest)(nil),                           // 166: erda.openapiv1.dop.LibReferenceCreateRequest
	(*LibReferenceCreateResponse)(nil),                          // 167: erda.openapiv1.dop.LibReferenceCreateResponse
	(*LibReferenceListRequest)(nil),                             // 168: erda.openapiv1.dop.LibReferenceListRequest
	(*LibReferenceListResponse)(nil),                            // 169: erda.openapiv1.dop.LibReferenceListResponse
	(*LibReferenceListResponseData)(nil),                        // 170: erda.openapiv1.dop.LibReferenceListResponseData
	(*ListAPIGatewayRespData)(nil),                              // 171: erda.openapiv1.dop.ListAPIGatewayRespData
	(*ListAPIGatewaysReq)(nil),                                  // 172: erda.openapiv1.dop.ListAPIGatewaysReq
	(*ListAPIGatewaysResp)(nil),                                 // 173: erda.openapiv1.dop.ListAPIGatewaysResp
	(*ListAccessReq)(nil),                                       // 174: erda.openapiv1.dop.ListAccessReq
	(*ListAccessRsp)(nil),                                       // 175: erda.openapiv1.dop.ListAccessRsp
	(*ListContractRecordsReq)(nil),                              // 176: erda.openapiv1.dop.ListContractRecordsReq
	(*ListContractRecordsRsp)(nil),                              // 177: erda.openapiv1.dop.ListContractRecordsRsp
	(*ListContractsReq)(nil),                                    // 178: erda.openapiv1.dop.ListContractsReq
	(*ListContractsRsp)(nil),                                    // 179: erda.openapiv1.dop.ListContractsRsp
	(*ListInstantiations_Request)(nil),                          // 180: erda.openapiv1.dop.ListInstantiations_Request
	(*ListMyClientsReq)(nil),                                    // 181: erda.openapiv1.dop.ListMyClientsReq
	(*ListProjectAPIGatewaysReq)(nil),                           // 182: erda.openapiv1.dop.ListProjectAPIGatewaysReq
	(*ListRuntimeServices_Request)(nil),                         // 183: erda.openapiv1.dop.ListRuntimeServices_Request
	(*ListSLAsReq)(nil),                                         // 184: erda.openapiv1.dop.ListSLAsReq
	(*ListSLAsRsp)(nil),                                         // 185: erda.openapiv1.dop.ListSLAsRsp
	(*ListSwaggerVersionClientsReq)(nil),                        // 186: erda.openapiv1.dop.ListSwaggerVersionClientsReq
	(*ListSwaggerVersionRsp)(nil),                               // 187: erda.openapiv1.dop.ListSwaggerVersionRsp
	(*ListSwaggerVersionsReq)(nil),                              // 188: erda.openapiv1.dop.ListSwaggerVersionsReq
	(*ListTestFileRecordsRequest)(nil),                          // 189: erda.openapiv1.dop.ListTestFileRecordsRequest
	(*ListTestFileRecordsResponse)(nil),                         // 190: erda.openapiv1.dop.ListTestFileRecordsResponse
	(*MemberRoleListResponse)(nil),                              // 191: erda.openapiv1.dop.MemberRoleListResponse
	(*MessageCertificateKeyDTO)(nil),                            // 192: erda.openapiv1.dop.MessageCertificateKeyDTO
	(*MonitorKeys)(nil),                                         // 193: erda.openapiv1.dop.MonitorKeys
	(*OrgCreateRequest)(nil),                                    // 194: erda.openapiv1.dop.OrgCreateRequest
	(*OrgCreateResponse)(nil),                                   // 195: erda.openapiv1.dop.OrgCreateResponse
	(*OrgDTO)(nil),                                              // 196: erda.openapiv1.dop.OrgDTO
	(*OrgFetchRequest)(nil),                                     // 197: erda.openapiv1.dop.OrgFetchRequest
	(*OrgGetByDomainRequest)(nil),                               // 198: erda.openapiv1.dop.OrgGetByDomainRequest
	(*OrgGetByDomainResponse)(nil),                              // 199: erda.openapiv1.dop.OrgGetByDomainResponse
	(*OrgNexusGetRequest)(nil),                                  // 200: erda.openapiv1.dop.OrgNexusGetRequest
	(*OrgNexusGetResponse)(nil),                                 // 201: erda.openapiv1.dop.OrgNexusGetResponse
	(*OrgNexusShowPasswordRequest)(nil),                         // 202: erda.openapiv1.dop.OrgNexusShowPasswordRequest
	(*OrgNexusShowPasswordResponse)(nil),                        // 203: erda.openapiv1.dop.OrgNexusShowPasswordResponse
	(*OrgResourceInfo)(nil),                                     // 204: erda.openapiv1.dop.OrgResourceInfo
	(*OrgSearchRequest)(nil),                                    // 205: erda.openapiv1.dop.OrgSearchRequest
	(*OrgSearchResponse)(nil),                                   // 206: erda.openapiv1.dop.OrgSearchResponse
	(*OrgUpdateRequest)(nil),                                    // 207: erda.openapiv1.dop.OrgUpdateRequest
	(*OrgUpdateRequestBody)(nil),                                // 208: erda.openapiv1.dop.OrgUpdateRequestBody
	(*PUBLISH_ITEM_CERTIFICATION_GET_Request)(nil),              // 209: erda.openapiv1.dop.PUBLISH_ITEM_CERTIFICATION_GET_Request
	(*PUBLISH_ITEM_ERR_EFFACTS_Request)(nil),                    // 210: erda.openapiv1.dop.PUBLISH_ITEM_ERR_EFFACTS_Request
	(*PUBLISH_ITEM_ERR_LIST_Request)(nil),                       // 211: erda.openapiv1.dop.PUBLISH_ITEM_ERR_LIST_Request
	(*PUBLISH_ITEM_ERR_RATE_Request)(nil),                       // 212: erda.openapiv1.dop.PUBLISH_ITEM_ERR_RATE_Request
	(*PUBLISH_ITEM_ERR_TREND_Request)(nil),                      // 213: erda.openapiv1.dop.PUBLISH_ITEM_ERR_TREND_Request
	(*PUBLISH_ITEM_METIRCS_COMMON_Request)(nil),                 // 214: erda.openapiv1.dop.PUBLISH_ITEM_METIRCS_COMMON_Request
	(*PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request)(nil),       // 215: erda.openapiv1.dop.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request
	(*PUBLISH_ITEM_STATISTICS_TREND_Request)(nil),               // 216: erda.openapiv1.dop.PUBLISH_ITEM_STATISTICS_TREND_Request
	(*PUBLISH_ITEM_USERS_Request)(nil),                          // 217: erda.openapiv1.dop.PUBLISH_ITEM_USERS_Request
	(*PagingAPIAssetsReq)(nil),                                  // 218: erda.openapiv1.dop.PagingAPIAssetsReq
	(*PagingAppCertificateDTO)(nil),                             // 219: erda.openapiv1.dop.PagingAppCertificateDTO
	(*PagingCertificateDTO)(nil),                                // 220: erda.openapiv1.dop.PagingCertificateDTO
	(*PagingOrgDTO)(nil),                                        // 221: erda.openapiv1.dop.PagingOrgDTO
	(*PagingProjectDTO)(nil),                                    // 222: erda.openapiv1.dop.PagingProjectDTO
	(*PagingPublisherDTO)(nil),                                  // 223: erda.openapiv1.dop.PagingPublisherDTO
	(*PipelineAppAllValidBranchWorkspaceResponse)(nil),          // 224: erda.openapiv1.dop.PipelineAppAllValidBranchWorkspaceResponse
	(*PipelineCancelResponse)(nil),                              // 225: erda.openapiv1.dop.PipelineCancelResponse
	(*PipelineConfigNamespacesFetchResponse)(nil),               // 226: erda.openapiv1.dop.PipelineConfigNamespacesFetchResponse
	(*PipelineCreateRequest)(nil),                               // 227: erda.openapiv1.dop.PipelineCreateRequest
	(*PipelineCreateResponse)(nil),                              // 228: erda.openapiv1.dop.PipelineCreateResponse
	(*PipelineCronDTO)(nil),                                     // 229: erda.openapiv1.dop.PipelineCronDTO
	(*PipelineCronListResponse)(nil),                            // 230: erda.openapiv1.dop.PipelineCronListResponse
	(*PipelineCronStartResponse)(nil),                           // 231: erda.openapiv1.dop.PipelineCronStartResponse
	(*PipelineCronStopResponse)(nil),                            // 232: erda.openapiv1.dop.PipelineCronStopResponse
	(*PipelineDetailResponse)(nil),                              // 233: erda.openapiv1.dop.PipelineDetailResponse
	(*PipelineGetBranchRuleResponse)(nil),                       // 234: erda.openapiv1.dop.PipelineGetBranchRuleResponse
	(*PipelineInvokedCombo)(nil),                                // 235: erda.openapiv1.dop.PipelineInvokedCombo
	(*PipelineInvokedComboRequest)(nil),                         // 236: erda.openapiv1.dop.PipelineInvokedComboRequest
	(*PipelineInvokedComboResponse)(nil),                        // 237: erda.openapiv1.dop.PipelineInvokedComboResponse
	(*PipelineOperateRequest)(nil),                              // 238: erda.openapiv1.dop.PipelineOperateRequest
	(*PipelineOperateResponse)(nil),                             // 239: erda.openapiv1.dop.PipelineOperateResponse
	(*PipelinePageListRequest)(nil),                             // 240: erda.openapiv1.dop.PipelinePageListRequest
	(*PipelinePageListResponse)(nil),                            // 241: erda.openapiv1.dop.PipelinePageListResponse
	(*PipelineRerunFailedResponse)(nil),                         // 242: erda.openapiv1.dop.PipelineRerunFailedResponse
	(*PipelineRerunResponse)(nil),                               // 243: erda.openapiv1.dop.PipelineRerunResponse
	(*PipelineRunResponse)(nil),                                 // 244: erda.openapiv1.dop.PipelineRunResponse
	(*PipelineTaskOperateRequest)(nil),                          // 245: erda.openapiv1.dop.PipelineTaskOperateRequest
	(*ProjectCreateRequest)(nil),                                // 246: erda.openapiv1.dop.ProjectCreateRequest
	(*ProjectCreateResponse)(nil),                               // 247: erda.openapiv1.dop.ProjectCreateResponse
	(*ProjectDTO)(nil),                                          // 248: erda.openapiv1.dop.ProjectDTO
	(*ProjectDeleteRequest)(nil),                                // 249: erda.openapiv1.dop.ProjectDeleteRequest
	(*ProjectDeleteResponse)(nil),                               // 250: erda.openapiv1.dop.ProjectDeleteResponse
	(*ProjectDetailRequest)(nil),                                // 251: erda.openapiv1.dop.ProjectDetailRequest
	(*ProjectDetailResponse)(nil),                               // 252: erda.openapiv1.dop.ProjectDetailResponse
	(*ProjectListRequest)(nil),                                  // 253: erda.openapiv1.dop.ProjectListRequest
	(*ProjectListResponse)(nil),                                 // 254: erda.openapiv1.dop.ProjectListResponse
	(*ProjectPackageParse_Request)(nil),                         // 255: erda.openapiv1.dop.ProjectPackageParse_Request
	(*ProjectPackageRequest)(nil),                               // 256: erda.openapiv1.dop.ProjectPackageRequest
	(*ProjectResourceUsage)(nil),                                // 257: erda.openapiv1.dop.ProjectResourceUsage
	(*ProjectStats)(nil),                                        // 258: erda.openapiv1.dop.ProjectStats
	(*ProxyMetrics_Request)(nil),                                // 259: erda.openapiv1.dop.ProxyMetrics_Request
	(*PublishItemStatisticsDetailData)(nil),                     // 260: erda.openapiv1.dop.PublishItemStatisticsDetailData
	(*PublishItemStatisticsDetailRequest)(nil),                  // 261: erda.openapiv1.dop.PublishItemStatisticsDetailRequest
	(*PublishItemStatisticsDetailResponse)(nil),                 // 262: erda.openapiv1.dop.PublishItemStatisticsDetailResponse
	(*PublishItemStatisticsErrListData)(nil),                    // 263: erda.openapiv1.dop.PublishItemStatisticsErrListData
	(*PublishItemStatisticsErrListResponse)(nil),                // 264: erda.openapiv1.dop.PublishItemStatisticsErrListResponse
	(*PublishItemStatisticsErrTrendData)(nil),                   // 265: erda.openapiv1.dop.PublishItemStatisticsErrTrendData
	(*PublishItemStatisticsErrTrendResponse)(nil),               // 266: erda.openapiv1.dop.PublishItemStatisticsErrTrendResponse
	(*PublishItemStatisticsTrendData)(nil),                      // 267: erda.openapiv1.dop.PublishItemStatisticsTrendData
	(*PublishItemStatisticsTrendResponse)(nil),                  // 268: erda.openapiv1.dop.PublishItemStatisticsTrendResponse
	(*PublisherCreateRequest)(nil),                              // 269: erda.openapiv1.dop.PublisherCreateRequest
	(*PublisherCreateResponse)(nil),                             // 270: erda.openapiv1.dop.PublisherCreateResponse
	(*PublisherDTO)(nil),                                        // 271: erda.openapiv1.dop.PublisherDTO
	(*PublisherDeleteResponse)(nil),                             // 272: erda.openapiv1.dop.PublisherDeleteResponse
	(*PublisherDetailResponse)(nil),                             // 273: erda.openapiv1.dop.PublisherDetailResponse
	(*PublisherListRequest)(nil),                                // 274: erda.openapiv1.dop.PublisherListRequest
	(*PublisherListResponse)(nil),                               // 275: erda.openapiv1.dop.PublisherListResponse
	(*PublisherUpdateRequest)(nil),                              // 276: erda.openapiv1.dop.PublisherUpdateRequest
	(*PublisherUpdateResponse)(nil),                             // 277: erda.openapiv1.dop.PublisherUpdateResponse
	(*PushCertificateConfigs)(nil),                              // 278: erda.openapiv1.dop.PushCertificateConfigs
	(*PushCertificateConfigsRequest)(nil),                       // 279: erda.openapiv1.dop.PushCertificateConfigsRequest
	(*QA_APITESTS_GET_Request)(nil),                             // 280: erda.openapiv1.dop.QA_APITESTS_GET_Request
	(*QA_AUTOTEST_SPACE_GET_Request)(nil),                       // 281: erda.openapiv1.dop.QA_AUTOTEST_SPACE_GET_Request
	(*QA_PIPELINE_TASK_LOGS_Request)(nil),                       // 282: erda.openapiv1.dop.QA_PIPELINE_TASK_LOGS_Request
	(*QA_RECORDS_GET_Request)(nil),                              // 283: erda.openapiv1.dop.QA_RECORDS_GET_Request
	(*QA_SONAR_GET_CREDENTIAL_Request)(nil),                     // 284: erda.openapiv1.dop.QA_SONAR_GET_CREDENTIAL_Request
	(*QA_SONAR_ISSUES_Request)(nil),                             // 285: erda.openapiv1.dop.QA_SONAR_ISSUES_Request
	(*QA_SONAR_METRIC_RULES_GET_Request)(nil),                   // 286: erda.openapiv1.dop.QA_SONAR_METRIC_RULES_GET_Request
	(*QA_TESTENV_CREATE_Request)(nil),                           // 287: erda.openapiv1.dop.QA_TESTENV_CREATE_Request
	(*QA_TESTENV_DELETE_Request)(nil),                           // 288: erda.openapiv1.dop.QA_TESTENV_DELETE_Request
	(*QA_TESTENV_GET_Request)(nil),                              // 289: erda.openapiv1.dop.QA_TESTENV_GET_Request
	(*QA_TESTENV_LIST_Request)(nil),                             // 290: erda.openapiv1.dop.QA_TESTENV_LIST_Request
	(*QA_TESTPLAN_PIPELINE_DETAIL_Request)(nil),                 // 291: erda.openapiv1.dop.QA_TESTPLAN_PIPELINE_DETAIL_Request
	(*QueryAppPublishItemRelationResponse)(nil),                 // 292: erda.openapiv1.dop.QueryAppPublishItemRelationResponse
	(*QueryBranchRuleRequest)(nil),                              // 293: erda.openapiv1.dop.QueryBranchRuleRequest
	(*QueryBranchRuleResponse)(nil),                             // 294: erda.openapiv1.dop.QueryBranchRuleResponse
	(*RoleInfo)(nil),                                            // 295: erda.openapiv1.dop.RoleInfo
	(*RoleList)(nil),                                            // 296: erda.openapiv1.dop.RoleList
	(*SLAModel)(nil),                                            // 297: erda.openapiv1.dop.SLAModel
	(*SPOT_APITESTS_LOGS_DOWNLOAD_Request)(nil),                 // 298: erda.openapiv1.dop.SPOT_APITESTS_LOGS_DOWNLOAD_Request
	(*SPOT_APITESTS_LOGS_Request)(nil),                          // 299: erda.openapiv1.dop.SPOT_APITESTS_LOGS_Request
	(*SearchOperationQueryParameters)(nil),                      // 300: erda.openapiv1.dop.SearchOperationQueryParameters
	(*SearchOperationsReq)(nil),                                 // 301: erda.openapiv1.dop.SearchOperationsReq
	(*SonarCredentialGetResponse)(nil),                          // 302: erda.openapiv1.dop.SonarCredentialGetResponse
	(*SonarIssueResponse)(nil),                                  // 303: erda.openapiv1.dop.SonarIssueResponse
	(*SonarMetricRuleDto)(nil),                                  // 304: erda.openapiv1.dop.SonarMetricRuleDto
	(*SonarMetricRulesBatchDeleteRequest)(nil),                  // 305: erda.openapiv1.dop.SonarMetricRulesBatchDeleteRequest
	(*SonarMetricRulesBatchInsertRequest)(nil),                  // 306: erda.openapiv1.dop.SonarMetricRulesBatchInsertRequest
	(*SonarMetricRulesDefinitionListRequest)(nil),               // 307: erda.openapiv1.dop.SonarMetricRulesDefinitionListRequest
	(*SonarMetricRulesDeleteRequest)(nil),                       // 308: erda.openapiv1.dop.SonarMetricRulesDeleteRequest
	(*SonarMetricRulesListRequest)(nil),                         // 309: erda.openapiv1.dop.SonarMetricRulesListRequest
	(*SonarMetricRulesPagingRequest)(nil),                       // 310: erda.openapiv1.dop.SonarMetricRulesPagingRequest
	(*SonarMetricRulesUpdateRequest)(nil),                       // 311: erda.openapiv1.dop.SonarMetricRulesUpdateRequest
	(*SonarStoreRequest)(nil),                                   // 312: erda.openapiv1.dop.SonarStoreRequest
	(*SonarStoreResponse)(nil),                                  // 313: erda.openapiv1.dop.SonarStoreResponse
	(*TestFileRecord)(nil),                                      // 314: erda.openapiv1.dop.TestFileRecord
	(*TestIssuesStatistics)(nil),                                // 315: erda.openapiv1.dop.TestIssuesStatistics
	(*Ticket)(nil),                                              // 316: erda.openapiv1.dop.Ticket
	(*TicketCloseRequest)(nil),                                  // 317: erda.openapiv1.dop.TicketCloseRequest
	(*TicketCloseResponse)(nil),                                 // 318: erda.openapiv1.dop.TicketCloseResponse
	(*TicketCreateRequest)(nil),                                 // 319: erda.openapiv1.dop.TicketCreateRequest
	(*TicketCreateResponse)(nil),                                // 320: erda.openapiv1.dop.TicketCreateResponse
	(*TicketDeleteRequest)(nil),                                 // 321: erda.openapiv1.dop.TicketDeleteRequest
	(*TicketDeleteResponse)(nil),                                // 322: erda.openapiv1.dop.TicketDeleteResponse
	(*TicketFetchRequest)(nil),                                  // 323: erda.openapiv1.dop.TicketFetchRequest
	(*TicketFetchResponse)(nil),                                 // 324: erda.openapiv1.dop.TicketFetchResponse
	(*TicketListRequest)(nil),                                   // 325: erda.openapiv1.dop.TicketListRequest
	(*TicketListResponse)(nil),                                  // 326: erda.openapiv1.dop.TicketListResponse
	(*TicketListResponseData)(nil),                              // 327: erda.openapiv1.dop.TicketListResponseData
	(*TicketReopenRequest)(nil),                                 // 328: erda.openapiv1.dop.TicketReopenRequest
	(*TicketReopenResponse)(nil),                                // 329: erda.openapiv1.dop.TicketReopenResponse
	(*TicketUpdateRequest)(nil),                                 // 330: erda.openapiv1.dop.TicketUpdateRequest
	(*TicketUpdateRequestBody)(nil),                             // 331: erda.openapiv1.dop.TicketUpdateRequestBody
	(*TicketUpdateResponse)(nil),                                // 332: erda.openapiv1.dop.TicketUpdateResponse
	(*UnifiedFileTreeNodeCreateRequest)(nil),                    // 333: erda.openapiv1.dop.UnifiedFileTreeNodeCreateRequest
	(*UnifiedFileTreeNodeDeleteRequest)(nil),                    // 334: erda.openapiv1.dop.UnifiedFileTreeNodeDeleteRequest
	(*UnifiedFileTreeNodeFindAncestorsRequest)(nil),             // 335: erda.openapiv1.dop.UnifiedFileTreeNodeFindAncestorsRequest
	(*UnifiedFileTreeNodeFuzzySearchRequest)(nil),               // 336: erda.openapiv1.dop.UnifiedFileTreeNodeFuzzySearchRequest
	(*UnifiedFileTreeNodeGetRequest)(nil),                       // 337: erda.openapiv1.dop.UnifiedFileTreeNodeGetRequest
	(*UnifiedFileTreeNodeListRequest)(nil),                      // 338: erda.openapiv1.dop.UnifiedFileTreeNodeListRequest
	(*UpdateAPIAssetReq)(nil),                                   // 339: erda.openapiv1.dop.UpdateAPIAssetReq
	(*UpdateAccess_Request)(nil),                                // 340: erda.openapiv1.dop.UpdateAccess_Request
	(*UpdateAppPublishItemRelationRequest)(nil),                 // 341: erda.openapiv1.dop.UpdateAppPublishItemRelationRequest
	(*UpdateAppPublishItemRelationResponse)(nil),                // 342: erda.openapiv1.dop.UpdateAppPublishItemRelationResponse
	(*UpdateAssetVersionReq)(nil),                               // 343: erda.openapiv1.dop.UpdateAssetVersionReq
	(*UpdateBranchRuleRequest)(nil),                             // 344: erda.openapiv1.dop.UpdateBranchRuleRequest
	(*UpdateBranchRuleResponse)(nil),                            // 345: erda.openapiv1.dop.UpdateBranchRuleResponse
	(*UpdateClientReq)(nil),                                     // 346: erda.openapiv1.dop.UpdateClientReq
	(*UpdateContract_Request)(nil),                              // 347: erda.openapiv1.dop.UpdateContract_Request
	(*UpdateInstantiationReq)(nil),                              // 348: erda.openapiv1.dop.UpdateInstantiationReq
	(*UpdateSLAReq)(nil),                                        // 349: erda.openapiv1.dop.UpdateSLAReq
	(*ValidBranch)(nil),                                         // 350: erda.openapiv1.dop.ValidBranch
	(*ValidateSwagger_Request)(nil),                             // 351: erda.openapiv1.dop.ValidateSwagger_Request
	nil,                                                         // 352: erda.openapiv1.dop.APITestEnvData.HeaderEntry
	nil,                                                         // 353: erda.openapiv1.dop.APITestEnvData.GlobalEntry
	nil,                                                         // 354: erda.openapiv1.dop.ApplicationCreateRequest.ConfigEntry
	nil,                                                         // 355: erda.openapiv1.dop.ApplicationDTO.ConfigEntry
	nil,                                                         // 356: erda.openapiv1.dop.ApplicationUpdateRequestBody.ConfigEntry
	nil,                                                         // 357: erda.openapiv1.dop.InstanceDetailRes.ConfigEntry
	nil,                                                         // 358: erda.openapiv1.dop.OrgNexusShowPasswordResponse.DataEntry
	nil,                                                         // 359: erda.openapiv1.dop.PipelineCronDTO.SecretsEntry
	nil,                                                         // 360: erda.openapiv1.dop.PipelinePageListRequest.MustMatchLabelsEntry
	nil,                                                         // 361: erda.openapiv1.dop.PipelinePageListRequest.AnyMatchLabelsEntry
	nil,                                                         // 362: erda.openapiv1.dop.ProjectCreateRequest.ClusterConfigEntry
	nil,                                                         // 363: erda.openapiv1.dop.ProjectCreateRequest.RollbackConfigEntry
	nil,                                                         // 364: erda.openapiv1.dop.ProjectDTO.ClusterConfigEntry
	nil,                                                         // 365: erda.openapiv1.dop.ProjectDTO.RollbackConfigEntry
	nil,                                                         // 366: erda.openapiv1.dop.Ticket.LabelEntry
	nil,                                                         // 367: erda.openapiv1.dop.TicketCreateRequest.LabelEntry
	nil,                                                         // 368: erda.openapiv1.dop.UpdateAPIAssetReq.KeysEntry
	nil,                                                         // 369: erda.openapiv1.dop.UpdateAppPublishItemRelationRequest.AKAIMapEntry
	(*structpb.Value)(nil),                                      // 370: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                               // 371: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                       // 372: google.protobuf.Empty
}
var file_dop_proto_depIdxs = []int32{
	370, // 0: erda.openapiv1.dop.APIAssetCreateRequest.versions:type_name -> google.protobuf.Value
	370, // 1: erda.openapiv1.dop.APIAssetGetResponse.data:type_name -> google.protobuf.Value
	370, // 2: erda.openapiv1.dop.APIAssetPagingResponse.list:type_name -> google.protobuf.Value
	370, // 3: erda.openapiv1.dop.APIAssetVersionCreateRequest.instances:type_name -> google.protobuf.Value
	370, // 4: erda.openapiv1.dop.APIDocCreateNodeReq.identity:type_name -> google.protobuf.Value
	370, // 5: erda.openapiv1.dop.APIDocCreateNodeReq.uRIParams:type_name -> google.protobuf.Value
	370, // 6: erda.openapiv1.dop.APIDocCreateNodeReq.body:type_name -> google.protobuf.Value
	370, // 7: erda.openapiv1.dop.APITestEnvCreateRequest.aPITestEnvData:type_name -> google.protobuf.Value
	352, // 8: erda.openapiv1.dop.APITestEnvData.header:type_name -> erda.openapiv1.dop.APITestEnvData.HeaderEntry
	353, // 9: erda.openapiv1.dop.APITestEnvData.global:type_name -> erda.openapiv1.dop.APITestEnvData.GlobalEntry
	370, // 10: erda.openapiv1.dop.APITestEnvDeleteResponse.data:type_name -> google.protobuf.Value
	370, // 11: erda.openapiv1.dop.APITestEnvGetResponse.data:type_name -> google.protobuf.Value
	370, // 12: erda.openapiv1.dop.APITestEnvListResponse.data:type_name -> google.protobuf.Value
	370, // 13: erda.openapiv1.dop.APITestEnvUpdateRequest.aPITestEnvData:type_name -> google.protobuf.Value
	370, // 14: erda.openapiv1.dop.APITestReq.aPIs:type_name -> google.protobuf.Value
	370, // 15: erda.openapiv1.dop.APITestsAttemptRequest.aPIs:type_name -> google.protobuf.Value
	370, // 16: erda.openapiv1.dop.APITestsAttemptResponse.data:type_name -> google.protobuf.Value
	370, // 17: erda.openapiv1.dop.AndroidCertificateAutoDTO.debugKeyStore:type_name -> google.protobuf.Value
	370, // 18: erda.openapiv1.dop.AndroidCertificateAutoDTO.releaseKeyStore:type_name -> google.protobuf.Value
	370, // 19: erda.openapiv1.dop.AndroidCertificateDTO.manualInfo:type_name -> google.protobuf.Value
	370, // 20: erda.openapiv1.dop.AndroidCertificateDTO.autoInfo:type_name -> google.protobuf.Value
	370, // 21: erda.openapiv1.dop.AndroidCertificateManualDTO.debugKeyStore:type_name -> google.protobuf.Value
	370, // 22: erda.openapiv1.dop.AndroidCertificateManualDTO.releaseKeyStore:type_name -> google.protobuf.Value
	370, // 23: erda.openapiv1.dop.AndroidCertificateManualKeyStoreDTO.certificateFileDTO:type_name -> google.protobuf.Value
	370, // 24: erda.openapiv1.dop.AndroidCertificateManualKeyStoreDTO.androidCertificateKeyStoreDTO:type_name -> google.protobuf.Value
	370, // 25: erda.openapiv1.dop.ApiTestsGetResponse.data:type_name -> google.protobuf.Value
	370, // 26: erda.openapiv1.dop.ApiTestsUpdateRequest.apiTestInfo:type_name -> google.protobuf.Value
	370, // 27: erda.openapiv1.dop.ApiTestsUpdateResponse.data:type_name -> google.protobuf.Value
	370, // 28: erda.openapiv1.dop.ApplicationCertificateDTO.androidInfo:type_name -> google.protobuf.Value
	370, // 29: erda.openapiv1.dop.ApplicationCertificateDTO.iOSInfo:type_name -> google.protobuf.Value
	370, // 30: erda.openapiv1.dop.ApplicationCertificateDTO.messageInfo:type_name -> google.protobuf.Value
	370, // 31: erda.openapiv1.dop.ApplicationCertificateDTO.pushConfig:type_name -> google.protobuf.Value
	371, // 32: erda.openapiv1.dop.ApplicationCertificateDTO.createdAt:type_name -> google.protobuf.Timestamp
	354, // 33: erda.openapiv1.dop.ApplicationCreateRequest.config:type_name -> erda.openapiv1.dop.ApplicationCreateRequest.ConfigEntry
	370, // 34: erda.openapiv1.dop.ApplicationCreateRequest.repoConfig:type_name -> google.protobuf.Value
	370, // 35: erda.openapiv1.dop.ApplicationCreateRequest.sonarConfig:type_name -> google.protobuf.Value
	370, // 36: erda.openapiv1.dop.ApplicationCreateResponse.data:type_name -> google.protobuf.Value
	355, // 37: erda.openapiv1.dop.ApplicationDTO.config:type_name -> erda.openapiv1.dop.ApplicationDTO.ConfigEntry
	371, // 38: erda.openapiv1.dop.ApplicationDTO.unBlockStart:type_name -> google.protobuf.Timestamp
	371, // 39: erda.openapiv1.dop.ApplicationDTO.unBlockEnd:type_name -> google.protobuf.Timestamp
	370, // 40: erda.openapiv1.dop.ApplicationDTO.stats:type_name -> google.protobuf.Value
	370, // 41: erda.openapiv1.dop.ApplicationDTO.workspaces:type_name -> google.protobuf.Value
	370, // 42: erda.openapiv1.dop.ApplicationDTO.repoConfig:type_name -> google.protobuf.Value
	370, // 43: erda.openapiv1.dop.ApplicationDTO.sonarConfig:type_name -> google.protobuf.Value
	371, // 44: erda.openapiv1.dop.ApplicationDTO.createdAt:type_name -> google.protobuf.Timestamp
	371, // 45: erda.openapiv1.dop.ApplicationDTO.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 46: erda.openapiv1.dop.ApplicationDeleteResponse.data:type_name -> google.protobuf.Value
	370, // 47: erda.openapiv1.dop.ApplicationUpdateRequest.body:type_name -> google.protobuf.Value
	356, // 48: erda.openapiv1.dop.ApplicationUpdateRequestBody.config:type_name -> erda.openapiv1.dop.ApplicationUpdateRequestBody.ConfigEntry
	370, // 49: erda.openapiv1.dop.ApplicationUpdateRequestBody.repoConfig:type_name -> google.protobuf.Value
	370, // 50: erda.openapiv1.dop.ApplicationUpdateRequestBody.sonarConfig:type_name -> google.protobuf.Value
	370, // 51: erda.openapiv1.dop.ApplicationUpdateResponse.data:type_name -> google.protobuf.Value
	370, // 52: erda.openapiv1.dop.AutoTestSpaceResponse.data:type_name -> google.protobuf.Value
	371, // 53: erda.openapiv1.dop.BaseModel.createdAt:type_name -> google.protobuf.Timestamp
	371, // 54: erda.openapiv1.dop.BaseModel.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 55: erda.openapiv1.dop.BaseResponse.err:type_name -> google.protobuf.Value
	370, // 56: erda.openapiv1.dop.CertificateCreateRequest.androidInfo:type_name -> google.protobuf.Value
	370, // 57: erda.openapiv1.dop.CertificateCreateRequest.iOSInfo:type_name -> google.protobuf.Value
	370, // 58: erda.openapiv1.dop.CertificateCreateRequest.messageInfo:type_name -> google.protobuf.Value
	370, // 59: erda.openapiv1.dop.CertificateCreateResponse.data:type_name -> google.protobuf.Value
	370, // 60: erda.openapiv1.dop.CertificateDTO.androidInfo:type_name -> google.protobuf.Value
	370, // 61: erda.openapiv1.dop.CertificateDTO.iOSInfo:type_name -> google.protobuf.Value
	370, // 62: erda.openapiv1.dop.CertificateDTO.messageInfo:type_name -> google.protobuf.Value
	371, // 63: erda.openapiv1.dop.CertificateDTO.createdAt:type_name -> google.protobuf.Timestamp
	371, // 64: erda.openapiv1.dop.CertificateDTO.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 65: erda.openapiv1.dop.CertificateDeleteResponse.data:type_name -> google.protobuf.Value
	370, // 66: erda.openapiv1.dop.CertificateDetailResponse.certificateDTO:type_name -> google.protobuf.Value
	370, // 67: erda.openapiv1.dop.CertificateListResponse.data:type_name -> google.protobuf.Value
	370, // 68: erda.openapiv1.dop.CertificateUpdateResponse.data:type_name -> google.protobuf.Value
	370, // 69: erda.openapiv1.dop.Comment.iRComment:type_name -> google.protobuf.Value
	371, // 70: erda.openapiv1.dop.Comment.createdAt:type_name -> google.protobuf.Timestamp
	371, // 71: erda.openapiv1.dop.Comment.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 72: erda.openapiv1.dop.CommentCreateRequest.iRComment:type_name -> google.protobuf.Value
	370, // 73: erda.openapiv1.dop.CommentListResponse.data:type_name -> google.protobuf.Value
	370, // 74: erda.openapiv1.dop.CommentListResponseData.comments:type_name -> google.protobuf.Value
	370, // 75: erda.openapiv1.dop.CommentUpdateRequest.body:type_name -> google.protobuf.Value
	370, // 76: erda.openapiv1.dop.CreateAccessReq.identity:type_name -> google.protobuf.Value
	370, // 77: erda.openapiv1.dop.CreateAccessReq.body:type_name -> google.protobuf.Value
	370, // 78: erda.openapiv1.dop.CreateBranchRuleResponse.data:type_name -> google.protobuf.Value
	370, // 79: erda.openapiv1.dop.CreateClientReq.identity:type_name -> google.protobuf.Value
	370, // 80: erda.openapiv1.dop.CreateClientReq.body:type_name -> google.protobuf.Value
	370, // 81: erda.openapiv1.dop.CreateContractReq.identity:type_name -> google.protobuf.Value
	370, // 82: erda.openapiv1.dop.CreateContractReq.uRIParams:type_name -> google.protobuf.Value
	370, // 83: erda.openapiv1.dop.CreateContractReq.body:type_name -> google.protobuf.Value
	370, // 84: erda.openapiv1.dop.CreateInstantiationReq.identity:type_name -> google.protobuf.Value
	370, // 85: erda.openapiv1.dop.CreateInstantiationReq.uRIParams:type_name -> google.protobuf.Value
	370, // 86: erda.openapiv1.dop.CreateInstantiationReq.body:type_name -> google.protobuf.Value
	370, // 87: erda.openapiv1.dop.CreateSLAReq.identity:type_name -> google.protobuf.Value
	370, // 88: erda.openapiv1.dop.CreateSLAReq.uRIParams:type_name -> google.protobuf.Value
	370, // 89: erda.openapiv1.dop.CreateSLAReq.body:type_name -> google.protobuf.Value
	370, // 90: erda.openapiv1.dop.DashboardSpotLogData.lines:type_name -> google.protobuf.Value
	370, // 91: erda.openapiv1.dop.DashboardSpotLogResponse.data:type_name -> google.protobuf.Value
	370, // 92: erda.openapiv1.dop.DeleteBranchRuleResponse.data:type_name -> google.protobuf.Value
	370, // 93: erda.openapiv1.dop.DeleteSLAReq.identity:type_name -> google.protobuf.Value
	370, // 94: erda.openapiv1.dop.DeleteSLAReq.uRIParams:type_name -> google.protobuf.Value
	370, // 95: erda.openapiv1.dop.DownloadSpecTextReq.identity:type_name -> google.protobuf.Value
	370, // 96: erda.openapiv1.dop.DownloadSpecTextReq.uRIParams:type_name -> google.protobuf.Value
	370, // 97: erda.openapiv1.dop.DownloadSpecTextReq.queryParams:type_name -> google.protobuf.Value
	370, // 98: erda.openapiv1.dop.ErrorResponse.ctx:type_name -> google.protobuf.Value
	370, // 99: erda.openapiv1.dop.ExportProjectPackageRequest.projectPackageRequest:type_name -> google.protobuf.Value
	370, // 100: erda.openapiv1.dop.ExportProjectPackageRequest.artifacts:type_name -> google.protobuf.Value
	370, // 101: erda.openapiv1.dop.GetAPIAssetReq.identity:type_name -> google.protobuf.Value
	370, // 102: erda.openapiv1.dop.GetAPIAssetReq.uRIParams:type_name -> google.protobuf.Value
	370, // 103: erda.openapiv1.dop.GetAPIAssetVersionReq.identity:type_name -> google.protobuf.Value
	370, // 104: erda.openapiv1.dop.GetAPIAssetVersionReq.uRIParams:type_name -> google.protobuf.Value
	370, // 105: erda.openapiv1.dop.GetAPIAssetVersionReq.queryParams:type_name -> google.protobuf.Value
	370, // 106: erda.openapiv1.dop.GetAddonInstanceDetailResponse.data:type_name -> google.protobuf.Value
	370, // 107: erda.openapiv1.dop.GetAssetVersionRsp.asset:type_name -> google.protobuf.Value
	370, // 108: erda.openapiv1.dop.GetAssetVersionRsp.version:type_name -> google.protobuf.Value
	370, // 109: erda.openapiv1.dop.GetAssetVersionRsp.spec:type_name -> google.protobuf.Value
	370, // 110: erda.openapiv1.dop.GetAssetVersionRsp.access:type_name -> google.protobuf.Value
	370, // 111: erda.openapiv1.dop.GetClientReq.identity:type_name -> google.protobuf.Value
	370, // 112: erda.openapiv1.dop.GetClientReq.uRIParams:type_name -> google.protobuf.Value
	370, // 113: erda.openapiv1.dop.GetContractReq.identity:type_name -> google.protobuf.Value
	370, // 114: erda.openapiv1.dop.GetContractReq.uRIParams:type_name -> google.protobuf.Value
	370, // 115: erda.openapiv1.dop.GetInstantiationsReq.identity:type_name -> google.protobuf.Value
	370, // 116: erda.openapiv1.dop.GetInstantiationsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 117: erda.openapiv1.dop.GetOperationReq.identity:type_name -> google.protobuf.Value
	370, // 118: erda.openapiv1.dop.GetOperationReq.uRIParams:type_name -> google.protobuf.Value
	370, // 119: erda.openapiv1.dop.GetSLAReq.identity:type_name -> google.protobuf.Value
	370, // 120: erda.openapiv1.dop.GetSLAReq.uRIParams:type_name -> google.protobuf.Value
	370, // 121: erda.openapiv1.dop.GetSLARsp.sLAModel:type_name -> google.protobuf.Value
	370, // 122: erda.openapiv1.dop.GetSLARsp.limits:type_name -> google.protobuf.Value
	370, // 123: erda.openapiv1.dop.GetTestFileRecordResponse.data:type_name -> google.protobuf.Value
	370, // 124: erda.openapiv1.dop.Header.error:type_name -> google.protobuf.Value
	370, // 125: erda.openapiv1.dop.IOSCertificateDTO.debugProvisionFile:type_name -> google.protobuf.Value
	370, // 126: erda.openapiv1.dop.IOSCertificateDTO.releaseProvisionFile:type_name -> google.protobuf.Value
	370, // 127: erda.openapiv1.dop.IOSCertificateDTO.keyChainP12:type_name -> google.protobuf.Value
	370, // 128: erda.openapiv1.dop.IOSCertificateKeyChainP12DTO.certificateFileDTO:type_name -> google.protobuf.Value
	370, // 129: erda.openapiv1.dop.ISummary.requirement:type_name -> google.protobuf.Value
	370, // 130: erda.openapiv1.dop.ISummary.task:type_name -> google.protobuf.Value
	370, // 131: erda.openapiv1.dop.ISummary.bug:type_name -> google.protobuf.Value
	370, // 132: erda.openapiv1.dop.ImportProjectPackageRequest.projectPackageRequest:type_name -> google.protobuf.Value
	357, // 133: erda.openapiv1.dop.InstanceDetailRes.config:type_name -> erda.openapiv1.dop.InstanceDetailRes.ConfigEntry
	370, // 134: erda.openapiv1.dop.InstanceDetailRes.referenceInfo:type_name -> google.protobuf.Value
	371, // 135: erda.openapiv1.dop.Iteration.createdAt:type_name -> google.protobuf.Timestamp
	371, // 136: erda.openapiv1.dop.Iteration.updatedAt:type_name -> google.protobuf.Timestamp
	371, // 137: erda.openapiv1.dop.Iteration.startedAt:type_name -> google.protobuf.Timestamp
	371, // 138: erda.openapiv1.dop.Iteration.finishedAt:type_name -> google.protobuf.Timestamp
	370, // 139: erda.openapiv1.dop.Iteration.issueSummary:type_name -> google.protobuf.Value
	371, // 140: erda.openapiv1.dop.IterationCreateRequest.startedAt:type_name -> google.protobuf.Timestamp
	371, // 141: erda.openapiv1.dop.IterationCreateRequest.finishedAt:type_name -> google.protobuf.Timestamp
	370, // 142: erda.openapiv1.dop.IterationCreateResponse.data:type_name -> google.protobuf.Value
	370, // 143: erda.openapiv1.dop.IterationGetResponse.data:type_name -> google.protobuf.Value
	370, // 144: erda.openapiv1.dop.IterationPagingResponse.data:type_name -> google.protobuf.Value
	371, // 145: erda.openapiv1.dop.IterationUpdateRequest.startedAt:type_name -> google.protobuf.Timestamp
	371, // 146: erda.openapiv1.dop.IterationUpdateRequest.finishedAt:type_name -> google.protobuf.Timestamp
	371, // 147: erda.openapiv1.dop.LibReference.createdAt:type_name -> google.protobuf.Timestamp
	371, // 148: erda.openapiv1.dop.LibReference.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 149: erda.openapiv1.dop.LibReferenceListResponse.data:type_name -> google.protobuf.Value
	370, // 150: erda.openapiv1.dop.LibReferenceListResponseData.list:type_name -> google.protobuf.Value
	370, // 151: erda.openapiv1.dop.ListAPIGatewayRespData.list:type_name -> google.protobuf.Value
	370, // 152: erda.openapiv1.dop.ListAPIGatewaysReq.identity:type_name -> google.protobuf.Value
	370, // 153: erda.openapiv1.dop.ListAPIGatewaysReq.uRIParams:type_name -> google.protobuf.Value
	370, // 154: erda.openapiv1.dop.ListAPIGatewaysResp.data:type_name -> google.protobuf.Value
	370, // 155: erda.openapiv1.dop.ListAccessReq.identity:type_name -> google.protobuf.Value
	370, // 156: erda.openapiv1.dop.ListAccessReq.queryParams:type_name -> google.protobuf.Value
	370, // 157: erda.openapiv1.dop.ListAccessRsp.list:type_name -> google.protobuf.Value
	370, // 158: erda.openapiv1.dop.ListContractRecordsReq.identity:type_name -> google.protobuf.Value
	370, // 159: erda.openapiv1.dop.ListContractRecordsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 160: erda.openapiv1.dop.ListContractRecordsRsp.list:type_name -> google.protobuf.Value
	370, // 161: erda.openapiv1.dop.ListContractsReq.identity:type_name -> google.protobuf.Value
	370, // 162: erda.openapiv1.dop.ListContractsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 163: erda.openapiv1.dop.ListContractsReq.queryParams:type_name -> google.protobuf.Value
	370, // 164: erda.openapiv1.dop.ListContractsRsp.list:type_name -> google.protobuf.Value
	370, // 165: erda.openapiv1.dop.ListMyClientsReq.identity:type_name -> google.protobuf.Value
	370, // 166: erda.openapiv1.dop.ListMyClientsReq.queryParams:type_name -> google.protobuf.Value
	370, // 167: erda.openapiv1.dop.ListProjectAPIGatewaysReq.identity:type_name -> google.protobuf.Value
	370, // 168: erda.openapiv1.dop.ListProjectAPIGatewaysReq.uRIParams:type_name -> google.protobuf.Value
	370, // 169: erda.openapiv1.dop.ListSLAsReq.identity:type_name -> google.protobuf.Value
	370, // 170: erda.openapiv1.dop.ListSLAsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 171: erda.openapiv1.dop.ListSLAsReq.queryParams:type_name -> google.protobuf.Value
	370, // 172: erda.openapiv1.dop.ListSLAsRsp.list:type_name -> google.protobuf.Value
	370, // 173: erda.openapiv1.dop.ListSwaggerVersionClientsReq.identity:type_name -> google.protobuf.Value
	370, // 174: erda.openapiv1.dop.ListSwaggerVersionClientsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 175: erda.openapiv1.dop.ListSwaggerVersionClientsReq.queryParams:type_name -> google.protobuf.Value
	370, // 176: erda.openapiv1.dop.ListSwaggerVersionRsp.list:type_name -> google.protobuf.Value
	370, // 177: erda.openapiv1.dop.ListSwaggerVersionsReq.identity:type_name -> google.protobuf.Value
	370, // 178: erda.openapiv1.dop.ListSwaggerVersionsReq.uRIParams:type_name -> google.protobuf.Value
	370, // 179: erda.openapiv1.dop.ListSwaggerVersionsReq.queryParams:type_name -> google.protobuf.Value
	370, // 180: erda.openapiv1.dop.ListTestFileRecordsResponse.data:type_name -> google.protobuf.Value
	370, // 181: erda.openapiv1.dop.MemberRoleListResponse.data:type_name -> google.protobuf.Value
	370, // 182: erda.openapiv1.dop.OrgCreateResponse.data:type_name -> google.protobuf.Value
	370, // 183: erda.openapiv1.dop.OrgDTO.config:type_name -> google.protobuf.Value
	370, // 184: erda.openapiv1.dop.OrgDTO.blockoutConfig:type_name -> google.protobuf.Value
	371, // 185: erda.openapiv1.dop.OrgDTO.createdAt:type_name -> google.protobuf.Timestamp
	371, // 186: erda.openapiv1.dop.OrgDTO.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 187: erda.openapiv1.dop.OrgDTO.auditMessage:type_name -> google.protobuf.Value
	370, // 188: erda.openapiv1.dop.OrgGetByDomainResponse.data:type_name -> google.protobuf.Value
	370, // 189: erda.openapiv1.dop.OrgNexusGetResponse.data:type_name -> google.protobuf.Value
	358, // 190: erda.openapiv1.dop.OrgNexusShowPasswordResponse.data:type_name -> erda.openapiv1.dop.OrgNexusShowPasswordResponse.DataEntry
	370, // 191: erda.openapiv1.dop.OrgSearchResponse.data:type_name -> google.protobuf.Value
	370, // 192: erda.openapiv1.dop.OrgUpdateRequest.body:type_name -> google.protobuf.Value
	370, // 193: erda.openapiv1.dop.OrgUpdateRequestBody.config:type_name -> google.protobuf.Value
	370, // 194: erda.openapiv1.dop.OrgUpdateRequestBody.blockoutConfig:type_name -> google.protobuf.Value
	370, // 195: erda.openapiv1.dop.PagingAPIAssetsReq.identity:type_name -> google.protobuf.Value
	370, // 196: erda.openapiv1.dop.PagingAPIAssetsReq.queryParams:type_name -> google.protobuf.Value
	370, // 197: erda.openapiv1.dop.PagingAppCertificateDTO.list:type_name -> google.protobuf.Value
	370, // 198: erda.openapiv1.dop.PagingCertificateDTO.list:type_name -> google.protobuf.Value
	370, // 199: erda.openapiv1.dop.PagingOrgDTO.list:type_name -> google.protobuf.Value
	370, // 200: erda.openapiv1.dop.PagingProjectDTO.list:type_name -> google.protobuf.Value
	370, // 201: erda.openapiv1.dop.PagingPublisherDTO.list:type_name -> google.protobuf.Value
	370, // 202: erda.openapiv1.dop.PipelineAppAllValidBranchWorkspaceResponse.data:type_name -> google.protobuf.Value
	370, // 203: erda.openapiv1.dop.PipelineConfigNamespacesFetchResponse.data:type_name -> google.protobuf.Value
	370, // 204: erda.openapiv1.dop.PipelineCreateResponse.data:type_name -> google.protobuf.Value
	371, // 205: erda.openapiv1.dop.PipelineCronDTO.timeCreated:type_name -> google.protobuf.Timestamp
	371, // 206: erda.openapiv1.dop.PipelineCronDTO.timeUpdated:type_name -> google.protobuf.Timestamp
	371, // 207: erda.openapiv1.dop.PipelineCronDTO.cronStartTime:type_name -> google.protobuf.Timestamp
	359, // 208: erda.openapiv1.dop.PipelineCronDTO.secrets:type_name -> erda.openapiv1.dop.PipelineCronDTO.SecretsEntry
	370, // 209: erda.openapiv1.dop.PipelineCronListResponse.data:type_name -> google.protobuf.Value
	370, // 210: erda.openapiv1.dop.PipelineCronStartResponse.data:type_name -> google.protobuf.Value
	370, // 211: erda.openapiv1.dop.PipelineCronStopResponse.data:type_name -> google.protobuf.Value
	370, // 212: erda.openapiv1.dop.PipelineDetailResponse.data:type_name -> google.protobuf.Value
	370, // 213: erda.openapiv1.dop.PipelineGetBranchRuleResponse.data:type_name -> google.protobuf.Value
	371, // 214: erda.openapiv1.dop.PipelineInvokedCombo.timeCreated:type_name -> google.protobuf.Timestamp
	370, // 215: erda.openapiv1.dop.PipelineInvokedCombo.cancelUser:type_name -> google.protobuf.Value
	370, // 216: erda.openapiv1.dop.PipelineInvokedComboResponse.data:type_name -> google.protobuf.Value
	370, // 217: erda.openapiv1.dop.PipelineOperateRequest.taskOperates:type_name -> google.protobuf.Value
	371, // 218: erda.openapiv1.dop.PipelinePageListRequest.startTimeBegin:type_name -> google.protobuf.Timestamp
	371, // 219: erda.openapiv1.dop.PipelinePageListRequest.endTimeBegin:type_name -> google.protobuf.Timestamp
	371, // 220: erda.openapiv1.dop.PipelinePageListRequest.startTimeCreated:type_name -> google.protobuf.Timestamp
	371, // 221: erda.openapiv1.dop.PipelinePageListRequest.endTimeCreated:type_name -> google.protobuf.Timestamp
	360, // 222: erda.openapiv1.dop.PipelinePageListRequest.mustMatchLabels:type_name -> erda.openapiv1.dop.PipelinePageListRequest.MustMatchLabelsEntry
	361, // 223: erda.openapiv1.dop.PipelinePageListRequest.anyMatchLabels:type_name -> erda.openapiv1.dop.PipelinePageListRequest.AnyMatchLabelsEntry
	370, // 224: erda.openapiv1.dop.PipelinePageListRequest.pipelineDefinitionRequest:type_name -> google.protobuf.Value
	370, // 225: erda.openapiv1.dop.PipelinePageListResponse.data:type_name -> google.protobuf.Value
	370, // 226: erda.openapiv1.dop.PipelineRerunFailedResponse.data:type_name -> google.protobuf.Value
	370, // 227: erda.openapiv1.dop.PipelineRerunResponse.data:type_name -> google.protobuf.Value
	362, // 228: erda.openapiv1.dop.ProjectCreateRequest.clusterConfig:type_name -> erda.openapiv1.dop.ProjectCreateRequest.ClusterConfigEntry
	370, // 229: erda.openapiv1.dop.ProjectCreateRequest.resourceConfigs:type_name -> google.protobuf.Value
	363, // 230: erda.openapiv1.dop.ProjectCreateRequest.rollbackConfig:type_name -> erda.openapiv1.dop.ProjectCreateRequest.RollbackConfigEntry
	370, // 231: erda.openapiv1.dop.ProjectDTO.stats:type_name -> google.protobuf.Value
	370, // 232: erda.openapiv1.dop.ProjectDTO.projectResourceUsage:type_name -> google.protobuf.Value
	364, // 233: erda.openapiv1.dop.ProjectDTO.clusterConfig:type_name -> erda.openapiv1.dop.ProjectDTO.ClusterConfigEntry
	370, // 234: erda.openapiv1.dop.ProjectDTO.resourceConfig:type_name -> google.protobuf.Value
	365, // 235: erda.openapiv1.dop.ProjectDTO.rollbackConfig:type_name -> erda.openapiv1.dop.ProjectDTO.RollbackConfigEntry
	371, // 236: erda.openapiv1.dop.ProjectDTO.createdAt:type_name -> google.protobuf.Timestamp
	371, // 237: erda.openapiv1.dop.ProjectDTO.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 238: erda.openapiv1.dop.ProjectDeleteResponse.data:type_name -> google.protobuf.Value
	370, // 239: erda.openapiv1.dop.ProjectDetailResponse.data:type_name -> google.protobuf.Value
	370, // 240: erda.openapiv1.dop.ProjectListResponse.data:type_name -> google.protobuf.Value
	370, // 241: erda.openapiv1.dop.PublishItemStatisticsDetailData.data:type_name -> google.protobuf.Value
	370, // 242: erda.openapiv1.dop.PublishItemStatisticsErrListData.data:type_name -> google.protobuf.Value
	371, // 243: erda.openapiv1.dop.PublishItemStatisticsErrListResponse.timeOfFirst:type_name -> google.protobuf.Timestamp
	371, // 244: erda.openapiv1.dop.PublishItemStatisticsErrListResponse.timeOfRecent:type_name -> google.protobuf.Timestamp
	370, // 245: erda.openapiv1.dop.PublishItemStatisticsErrTrendData.data:type_name -> google.protobuf.Value
	370, // 246: erda.openapiv1.dop.PublishItemStatisticsTrendData.data:type_name -> google.protobuf.Value
	371, // 247: erda.openapiv1.dop.PublisherDTO.createdAt:type_name -> google.protobuf.Timestamp
	371, // 248: erda.openapiv1.dop.PublisherDTO.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 249: erda.openapiv1.dop.PublisherDTO.nexusRepositories:type_name -> google.protobuf.Value
	370, // 250: erda.openapiv1.dop.PublisherDetailResponse.data:type_name -> google.protobuf.Value
	370, // 251: erda.openapiv1.dop.PublisherListResponse.data:type_name -> google.protobuf.Value
	370, // 252: erda.openapiv1.dop.PublisherUpdateResponse.data:type_name -> google.protobuf.Value
	370, // 253: erda.openapiv1.dop.PushCertificateConfigs.iOSKey:type_name -> google.protobuf.Value
	370, // 254: erda.openapiv1.dop.PushCertificateConfigs.androidKey:type_name -> google.protobuf.Value
	370, // 255: erda.openapiv1.dop.PushCertificateConfigs.messageKey:type_name -> google.protobuf.Value
	370, // 256: erda.openapiv1.dop.PushCertificateConfigsRequest.iOSKey:type_name -> google.protobuf.Value
	370, // 257: erda.openapiv1.dop.PushCertificateConfigsRequest.androidKey:type_name -> google.protobuf.Value
	370, // 258: erda.openapiv1.dop.PushCertificateConfigsRequest.messageKey:type_name -> google.protobuf.Value
	370, // 259: erda.openapiv1.dop.QueryAppPublishItemRelationResponse.data:type_name -> google.protobuf.Value
	370, // 260: erda.openapiv1.dop.QueryBranchRuleResponse.data:type_name -> google.protobuf.Value
	370, // 261: erda.openapiv1.dop.RoleList.list:type_name -> google.protobuf.Value
	370, // 262: erda.openapiv1.dop.SLAModel.baseModel:type_name -> google.protobuf.Value
	370, // 263: erda.openapiv1.dop.SearchOperationsReq.identity:type_name -> google.protobuf.Value
	370, // 264: erda.openapiv1.dop.SearchOperationsReq.queryParams:type_name -> google.protobuf.Value
	370, // 265: erda.openapiv1.dop.SonarCredentialGetResponse.data:type_name -> google.protobuf.Value
	370, // 266: erda.openapiv1.dop.SonarIssueResponse.data:type_name -> google.protobuf.Value
	371, // 267: erda.openapiv1.dop.SonarMetricRuleDto.createdAt:type_name -> google.protobuf.Timestamp
	371, // 268: erda.openapiv1.dop.SonarMetricRuleDto.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 269: erda.openapiv1.dop.SonarMetricRulesBatchInsertRequest.metrics:type_name -> google.protobuf.Value
	370, // 270: erda.openapiv1.dop.SonarStoreRequest.bugs:type_name -> google.protobuf.Value
	370, // 271: erda.openapiv1.dop.SonarStoreRequest.codeSmells:type_name -> google.protobuf.Value
	370, // 272: erda.openapiv1.dop.SonarStoreRequest.vulnerabilities:type_name -> google.protobuf.Value
	370, // 273: erda.openapiv1.dop.SonarStoreRequest.coverage:type_name -> google.protobuf.Value
	370, // 274: erda.openapiv1.dop.SonarStoreRequest.duplications:type_name -> google.protobuf.Value
	370, // 275: erda.openapiv1.dop.SonarStoreRequest.issuesStatistics:type_name -> google.protobuf.Value
	370, // 276: erda.openapiv1.dop.SonarStoreResponse.data:type_name -> google.protobuf.Value
	371, // 277: erda.openapiv1.dop.TestFileRecord.createdAt:type_name -> google.protobuf.Timestamp
	371, // 278: erda.openapiv1.dop.TestFileRecord.updatedAt:type_name -> google.protobuf.Timestamp
	370, // 279: erda.openapiv1.dop.TestIssuesStatistics.rating:type_name -> google.protobuf.Value
	371, // 280: erda.openapiv1.dop.TestIssuesStatistics.time:type_name -> google.protobuf.Timestamp
	366, // 281: erda.openapiv1.dop.Ticket.label:type_name -> erda.openapiv1.dop.Ticket.LabelEntry
	370, // 282: erda.openapiv1.dop.Ticket.lastComment:type_name -> google.protobuf.Value
	371, // 283: erda.openapiv1.dop.Ticket.createdAt:type_name -> google.protobuf.Timestamp
	371, // 284: erda.openapiv1.dop.Ticket.updatedAt:type_name -> google.protobuf.Timestamp
	371, // 285: erda.openapiv1.dop.Ticket.closedAt:type_name -> google.protobuf.Timestamp
	371, // 286: erda.openapiv1.dop.Ticket.triggeredAt:type_name -> google.protobuf.Timestamp
	367, // 287: erda.openapiv1.dop.TicketCreateRequest.label:type_name -> erda.openapiv1.dop.TicketCreateRequest.LabelEntry
	370, // 288: erda.openapiv1.dop.TicketFetchResponse.data:type_name -> google.protobuf.Value
	370, // 289: erda.openapiv1.dop.TicketListResponse.data:type_name -> google.protobuf.Value
	370, // 290: erda.openapiv1.dop.TicketListResponseData.tickets:type_name -> google.protobuf.Value
	370, // 291: erda.openapiv1.dop.TicketUpdateRequest.body:type_name -> google.protobuf.Value
	370, // 292: erda.openapiv1.dop.UpdateAPIAssetReq.identity:type_name -> google.protobuf.Value
	370, // 293: erda.openapiv1.dop.UpdateAPIAssetReq.uRIParams:type_name -> google.protobuf.Value
	368, // 294: erda.openapiv1.dop.UpdateAPIAssetReq.keys:type_name -> erda.openapiv1.dop.UpdateAPIAssetReq.KeysEntry
	369, // 295: erda.openapiv1.dop.UpdateAppPublishItemRelationRequest.aKAIMap:type_name -> erda.openapiv1.dop.UpdateAppPublishItemRelationRequest.AKAIMapEntry
	370, // 296: erda.openapiv1.dop.UpdateAssetVersionReq.identity:type_name -> google.protobuf.Value
	370, // 297: erda.openapiv1.dop.UpdateAssetVersionReq.uRIParams:type_name -> google.protobuf.Value
	370, // 298: erda.openapiv1.dop.UpdateAssetVersionReq.body:type_name -> google.protobuf.Value
	370, // 299: erda.openapiv1.dop.UpdateBranchRuleResponse.data:type_name -> google.protobuf.Value
	370, // 300: erda.openapiv1.dop.UpdateClientReq.identity:type_name -> google.protobuf.Value
	370, // 301: erda.openapiv1.dop.UpdateClientReq.uRIParams:type_name -> google.protobuf.Value
	370, // 302: erda.openapiv1.dop.UpdateClientReq.queryParams:type_name -> google.protobuf.Value
	370, // 303: erda.openapiv1.dop.UpdateClientReq.body:type_name -> google.protobuf.Value
	370, // 304: erda.openapiv1.dop.UpdateInstantiationReq.identity:type_name -> google.protobuf.Value
	370, // 305: erda.openapiv1.dop.UpdateInstantiationReq.uRIParams:type_name -> google.protobuf.Value
	370, // 306: erda.openapiv1.dop.UpdateInstantiationReq.body:type_name -> google.protobuf.Value
	370, // 307: erda.openapiv1.dop.UpdateSLAReq.identity:type_name -> google.protobuf.Value
	370, // 308: erda.openapiv1.dop.UpdateSLAReq.uRIParams:type_name -> google.protobuf.Value
	370, // 309: erda.openapiv1.dop.UpdateSLAReq.body:type_name -> google.protobuf.Value
	370, // 310: erda.openapiv1.dop.APITestEnvData.GlobalEntry.value:type_name -> google.protobuf.Value
	370, // 311: erda.openapiv1.dop.ApplicationCreateRequest.ConfigEntry.value:type_name -> google.protobuf.Value
	370, // 312: erda.openapiv1.dop.ApplicationDTO.ConfigEntry.value:type_name -> google.protobuf.Value
	370, // 313: erda.openapiv1.dop.ApplicationUpdateRequestBody.ConfigEntry.value:type_name -> google.protobuf.Value
	370, // 314: erda.openapiv1.dop.PipelinePageListRequest.MustMatchLabelsEntry.value:type_name -> google.protobuf.Value
	370, // 315: erda.openapiv1.dop.PipelinePageListRequest.AnyMatchLabelsEntry.value:type_name -> google.protobuf.Value
	370, // 316: erda.openapiv1.dop.Ticket.LabelEntry.value:type_name -> google.protobuf.Value
	370, // 317: erda.openapiv1.dop.TicketCreateRequest.LabelEntry.value:type_name -> google.protobuf.Value
	370, // 318: erda.openapiv1.dop.UpdateAPIAssetReq.KeysEntry.value:type_name -> google.protobuf.Value
	370, // 319: erda.openapiv1.dop.UpdateAppPublishItemRelationRequest.AKAIMapEntry.value:type_name -> google.protobuf.Value
	0,   // 320: erda.openapiv1.dop.dop.AADAPTOR_CICD_CRON_LIST:input_type -> erda.openapiv1.dop.AADAPTOR_CICD_CRON_LIST_Request
	1,   // 321: erda.openapiv1.dop.dop.ADAPTOR_CICD_BRANCHES_ALL_VALID:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_BRANCHES_ALL_VALID_Request
	2,   // 322: erda.openapiv1.dop.dop.ADAPTOR_CICD_CANCEL:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CANCEL_Request
	3,   // 323: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_GET:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_GET_Request
	4,   // 324: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_NAMESPACES:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_NAMESPACES_Request
	5,   // 325: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_WORKSPACES:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CONFIG_WORKSPACES_Request
	227, // 326: erda.openapiv1.dop.dop.ADAPTOR_CICD_CREATE:input_type -> erda.openapiv1.dop.PipelineCreateRequest
	6,   // 327: erda.openapiv1.dop.dop.ADAPTOR_CICD_CRON_START:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CRON_START_Request
	7,   // 328: erda.openapiv1.dop.dop.ADAPTOR_CICD_CRON_STOP:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_CRON_STOP_Request
	8,   // 329: erda.openapiv1.dop.dop.ADAPTOR_CICD_FETCH_PIPELINE_ID:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_FETCH_PIPELINE_ID_Request
	333, // 330: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_CREATE:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeCreateRequest
	334, // 331: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_DELETE:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeDeleteRequest
	335, // 332: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_FIND_ANCESTORS:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeFindAncestorsRequest
	336, // 333: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_FUZZY_SEARCH:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeFuzzySearchRequest
	337, // 334: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_GET:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeGetRequest
	9,   // 335: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request
	338, // 336: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_LIST:input_type -> erda.openapiv1.dop.UnifiedFileTreeNodeListRequest
	10,  // 337: erda.openapiv1.dop.dop.ADAPTOR_CICD_GET_BRANCH_RULE:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_GET_BRANCH_RULE_Request
	236, // 338: erda.openapiv1.dop.dop.ADAPTOR_CICD_INVOKED_COMBO:input_type -> erda.openapiv1.dop.PipelineInvokedComboRequest
	240, // 339: erda.openapiv1.dop.dop.ADAPTOR_CICD_LIST:input_type -> erda.openapiv1.dop.PipelinePageListRequest
	238, // 340: erda.openapiv1.dop.dop.ADAPTOR_CICD_OPERATE:input_type -> erda.openapiv1.dop.PipelineOperateRequest
	11,  // 341: erda.openapiv1.dop.dop.ADAPTOR_CICD_PIPELINE_DETAIL:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_PIPELINE_DETAIL_Request
	69,  // 342: erda.openapiv1.dop.dop.ADAPTOR_CICD_PIPELINE_YML_LIST:input_type -> erda.openapiv1.dop.CICDPipelineYmlListRequest
	12,  // 343: erda.openapiv1.dop.dop.ADAPTOR_CICD_PROJECT_CREATE:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_PROJECT_CREATE_Request
	13,  // 344: erda.openapiv1.dop.dop.ADAPTOR_CICD_PROJECT_DETAIL:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_PROJECT_DETAIL_Request
	14,  // 345: erda.openapiv1.dop.dop.ADAPTOR_CICD_RERUN:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_RERUN_Request
	242, // 346: erda.openapiv1.dop.dop.ADAPTOR_CICD_RERUN_FAILED:input_type -> erda.openapiv1.dop.PipelineRerunFailedResponse
	15,  // 347: erda.openapiv1.dop.dop.ADAPTOR_CICD_RUN:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_RUN_Request
	17,  // 348: erda.openapiv1.dop.dop.ADAPTOR_CICD_TASK_LOG:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_TASK_LOG_Request
	16,  // 349: erda.openapiv1.dop.dop.ADAPTOR_CICD_TASK_LOG_DOWNLOAD:input_type -> erda.openapiv1.dop.ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request
	24,  // 350: erda.openapiv1.dop.dop.APIDocWebsocket:input_type -> erda.openapiv1.dop.APIDocWebsocket_Request
	33,  // 351: erda.openapiv1.dop.dop.APITEST_ATTEMPT:input_type -> erda.openapiv1.dop.APITestsAttemptRequest
	35,  // 352: erda.openapiv1.dop.dop.APPLICATIONS_RESOURCES_LIST:input_type -> erda.openapiv1.dop.APPLICATIONS_RESOURCES_LIST_Request
	36,  // 353: erda.openapiv1.dop.dop.APP_PUBLISH_ITEM_RELATION_GET:input_type -> erda.openapiv1.dop.APP_PUBLISH_ITEM_RELATION_GET_Request
	341, // 354: erda.openapiv1.dop.dop.APP_PUBLISH_ITEM_RELATION_UPDATE:input_type -> erda.openapiv1.dop.UpdateAppPublishItemRelationRequest
	312, // 355: erda.openapiv1.dop.dop.CI_SONAR_STORE:input_type -> erda.openapiv1.dop.SonarStoreRequest
	52,  // 356: erda.openapiv1.dop.dop.CMDB_APPLICATION_CREATE:input_type -> erda.openapiv1.dop.ApplicationCreateRequest
	55,  // 357: erda.openapiv1.dop.dop.CMDB_APPLICATION_DELETE:input_type -> erda.openapiv1.dop.ApplicationDeleteRequest
	57,  // 358: erda.openapiv1.dop.dop.CMDB_APPLICATION_INIT:input_type -> erda.openapiv1.dop.ApplicationInitRequest
	59,  // 359: erda.openapiv1.dop.dop.CMDB_APPLICATION_UPDATE:input_type -> erda.openapiv1.dop.ApplicationUpdateRequest
	109, // 360: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_CREATE:input_type -> erda.openapiv1.dop.CreateBranchRuleRequest
	71,  // 361: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_DELETE:input_type -> erda.openapiv1.dop.CMDB_BRANCH_RULE_DELETE_Request
	293, // 362: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_QUERY:input_type -> erda.openapiv1.dop.QueryBranchRuleRequest
	344, // 363: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_UPDATE:input_type -> erda.openapiv1.dop.UpdateBranchRuleRequest
	49,  // 364: erda.openapiv1.dop.dop.CMDB_CERTIFICATES_APP_LIST:input_type -> erda.openapiv1.dop.AppCertificateListRequest
	92,  // 365: erda.openapiv1.dop.dop.CMDB_CERTIFICATES_LIST:input_type -> erda.openapiv1.dop.CertificateListRequest
	72,  // 366: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_CANCEL:input_type -> erda.openapiv1.dop.CMDB_CERTIFICATE_APP_CANCEL_Request
	279, // 367: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_CONFIG:input_type -> erda.openapiv1.dop.PushCertificateConfigsRequest
	94,  // 368: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_QUOTE:input_type -> erda.openapiv1.dop.CertificateQuoteRequest
	86,  // 369: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_CREATE:input_type -> erda.openapiv1.dop.CertificateCreateRequest
	73,  // 370: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_DELETE:input_type -> erda.openapiv1.dop.CMDB_CERTIFICATE_DELETE_Request
	74,  // 371: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_GET:input_type -> erda.openapiv1.dop.CMDB_CERTIFICATE_GET_Request
	95,  // 372: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_UPDATE:input_type -> erda.openapiv1.dop.CertificateUpdateRequest
	99,  // 373: erda.openapiv1.dop.dop.CMDB_COMMENT_CREATE:input_type -> erda.openapiv1.dop.CommentCreateRequest
	101, // 374: erda.openapiv1.dop.dop.CMDB_COMMENT_LIST:input_type -> erda.openapiv1.dop.CommentListRequest
	104, // 375: erda.openapiv1.dop.dop.CMDB_COMMENT_UPDATE:input_type -> erda.openapiv1.dop.CommentUpdateRequest
	158, // 376: erda.openapiv1.dop.dop.CMDB_ITERATION_CREATE:input_type -> erda.openapiv1.dop.IterationCreateRequest
	75,  // 377: erda.openapiv1.dop.dop.CMDB_ITERATION_DELETE:input_type -> erda.openapiv1.dop.CMDB_ITERATION_DELETE_Request
	76,  // 378: erda.openapiv1.dop.dop.CMDB_ITERATION_GET:input_type -> erda.openapiv1.dop.CMDB_ITERATION_GET_Request
	161, // 379: erda.openapiv1.dop.dop.CMDB_ITERATION_PAGING:input_type -> erda.openapiv1.dop.IterationPagingRequest
	163, // 380: erda.openapiv1.dop.dop.CMDB_ITERATION_UPDATE:input_type -> erda.openapiv1.dop.IterationUpdateRequest
	166, // 381: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_CREATE:input_type -> erda.openapiv1.dop.LibReferenceCreateRequest
	77,  // 382: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_DELETE:input_type -> erda.openapiv1.dop.CMDB_LIBREFERENCE_DELETE_Request
	168, // 383: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_LIST:input_type -> erda.openapiv1.dop.LibReferenceListRequest
	78,  // 384: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_LIST_VERSION:input_type -> erda.openapiv1.dop.CMDB_LIBREFERENCE_LIST_VERSION_Request
	274, // 385: erda.openapiv1.dop.dop.CMDB_MY_PUBLISHERS_LIST:input_type -> erda.openapiv1.dop.PublisherListRequest
	194, // 386: erda.openapiv1.dop.dop.CMDB_ORG_CREATE:input_type -> erda.openapiv1.dop.OrgCreateRequest
	79,  // 387: erda.openapiv1.dop.dop.CMDB_ORG_DELETE:input_type -> erda.openapiv1.dop.CMDB_ORG_DELETE_Request
	197, // 388: erda.openapiv1.dop.dop.CMDB_ORG_FETCH:input_type -> erda.openapiv1.dop.OrgFetchRequest
	198, // 389: erda.openapiv1.dop.dop.CMDB_ORG_GET_BY_DOMAIN:input_type -> erda.openapiv1.dop.OrgGetByDomainRequest
	200, // 390: erda.openapiv1.dop.dop.CMDB_ORG_NEXUS_FETCH:input_type -> erda.openapiv1.dop.OrgNexusGetRequest
	202, // 391: erda.openapiv1.dop.dop.CMDB_ORG_NEXUS_SHOW_PASSWORD:input_type -> erda.openapiv1.dop.OrgNexusShowPasswordRequest
	205, // 392: erda.openapiv1.dop.dop.CMDB_ORG_PUBLIC:input_type -> erda.openapiv1.dop.OrgSearchRequest
	81,  // 393: erda.openapiv1.dop.dop.CMDB_ORG_PUBLISHER_CREATE:input_type -> erda.openapiv1.dop.CMDB_ORG_PUBLISHER_CREATE_Request
	80,  // 394: erda.openapiv1.dop.dop.CMDB_ORG_PUBLISHER_CREATE_GET:input_type -> erda.openapiv1.dop.CMDB_ORG_PUBLISHER_CREATE_GET_Request
	82,  // 395: erda.openapiv1.dop.dop.CMDB_ORG_RESOURCE_GET:input_type -> erda.openapiv1.dop.CMDB_ORG_RESOURCE_GET_Request
	205, // 396: erda.openapiv1.dop.dop.CMDB_ORG_SEARCH:input_type -> erda.openapiv1.dop.OrgSearchRequest
	207, // 397: erda.openapiv1.dop.dop.CMDB_ORG_UPDATE:input_type -> erda.openapiv1.dop.OrgUpdateRequest
	253, // 398: erda.openapiv1.dop.dop.CMDB_PROJECTS_FETCH:input_type -> erda.openapiv1.dop.ProjectListRequest
	246, // 399: erda.openapiv1.dop.dop.CMDB_PROJECT_CREATE:input_type -> erda.openapiv1.dop.ProjectCreateRequest
	249, // 400: erda.openapiv1.dop.dop.CMDB_PROJECT_DELETE:input_type -> erda.openapiv1.dop.ProjectDeleteRequest
	251, // 401: erda.openapiv1.dop.dop.CMDB_PROJECT_DETAIL:input_type -> erda.openapiv1.dop.ProjectDetailRequest
	274, // 402: erda.openapiv1.dop.dop.CMDB_PUBLISHERS_LIST:input_type -> erda.openapiv1.dop.PublisherListRequest
	269, // 403: erda.openapiv1.dop.dop.CMDB_PUBLISHER_CREATE:input_type -> erda.openapiv1.dop.PublisherCreateRequest
	83,  // 404: erda.openapiv1.dop.dop.CMDB_PUBLISHER_DELETE:input_type -> erda.openapiv1.dop.CMDB_PUBLISHER_DELETE_Request
	84,  // 405: erda.openapiv1.dop.dop.CMDB_PUBLISHER_GET:input_type -> erda.openapiv1.dop.CMDB_PUBLISHER_GET_Request
	276, // 406: erda.openapiv1.dop.dop.CMDB_PUBLISHER_UPDATE:input_type -> erda.openapiv1.dop.PublisherUpdateRequest
	85,  // 407: erda.openapiv1.dop.dop.CMDB_ROLES_LIST:input_type -> erda.openapiv1.dop.CMDB_ROLES_LIST_Request
	317, // 408: erda.openapiv1.dop.dop.CMDB_TICKET_CLOSE:input_type -> erda.openapiv1.dop.TicketCloseRequest
	319, // 409: erda.openapiv1.dop.dop.CMDB_TICKET_CREATE:input_type -> erda.openapiv1.dop.TicketCreateRequest
	321, // 410: erda.openapiv1.dop.dop.CMDB_TICKET_DELETE:input_type -> erda.openapiv1.dop.TicketDeleteRequest
	323, // 411: erda.openapiv1.dop.dop.CMDB_TICKET_FETCH:input_type -> erda.openapiv1.dop.TicketFetchRequest
	325, // 412: erda.openapiv1.dop.dop.CMDB_TICKET_LIST:input_type -> erda.openapiv1.dop.TicketListRequest
	328, // 413: erda.openapiv1.dop.dop.CMDB_TICKET_REOPEN:input_type -> erda.openapiv1.dop.TicketReopenRequest
	330, // 414: erda.openapiv1.dop.dop.CMDB_TICKET_UPDATE:input_type -> erda.openapiv1.dop.TicketUpdateRequest
	97,  // 415: erda.openapiv1.dop.dop.CODE_COVERAGE_END_CALLBACK:input_type -> erda.openapiv1.dop.CodeCoverageUpdateRequest
	97,  // 416: erda.openapiv1.dop.dop.CODE_COVERAGE_READY_CALLBACK:input_type -> erda.openapiv1.dop.CodeCoverageUpdateRequest
	97,  // 417: erda.openapiv1.dop.dop.CODE_COVERAGE_READY_STATUS:input_type -> erda.openapiv1.dop.CodeCoverageUpdateRequest
	97,  // 418: erda.openapiv1.dop.dop.CODE_COVERAGE_REPORT_CALLBACK:input_type -> erda.openapiv1.dop.CodeCoverageUpdateRequest
	18,  // 419: erda.openapiv1.dop.dop.CreateAPIAsset:input_type -> erda.openapiv1.dop.APIAssetCreateRequest
	21,  // 420: erda.openapiv1.dop.dop.CreateAPIAssetVersion:input_type -> erda.openapiv1.dop.APIAssetVersionCreateRequest
	108, // 421: erda.openapiv1.dop.dop.CreateAccess:input_type -> erda.openapiv1.dop.CreateAccessReq
	32,  // 422: erda.openapiv1.dop.dop.CreateAttempTest:input_type -> erda.openapiv1.dop.APITestReq
	111, // 423: erda.openapiv1.dop.dop.CreateClient:input_type -> erda.openapiv1.dop.CreateClientReq
	112, // 424: erda.openapiv1.dop.dop.CreateContract:input_type -> erda.openapiv1.dop.CreateContractReq
	113, // 425: erda.openapiv1.dop.dop.CreateInstantiation:input_type -> erda.openapiv1.dop.CreateInstantiationReq
	114, // 426: erda.openapiv1.dop.dop.CreateSLA:input_type -> erda.openapiv1.dop.CreateSLAReq
	118, // 427: erda.openapiv1.dop.dop.DeleteAPIAssetVersion:input_type -> erda.openapiv1.dop.DeleteAPIAssetVersion_Request
	119, // 428: erda.openapiv1.dop.dop.DeleteAPIAssets:input_type -> erda.openapiv1.dop.DeleteAPIAssets_Request
	120, // 429: erda.openapiv1.dop.dop.DeleteAccess:input_type -> erda.openapiv1.dop.DeleteAccess_Request
	122, // 430: erda.openapiv1.dop.dop.DeleteClient:input_type -> erda.openapiv1.dop.DeleteClient_Request
	139, // 431: erda.openapiv1.dop.dop.DeleteContract:input_type -> erda.openapiv1.dop.GetContractReq
	123, // 432: erda.openapiv1.dop.dop.DeleteSLA:input_type -> erda.openapiv1.dop.DeleteSLAReq
	124, // 433: erda.openapiv1.dop.dop.ExportSpec:input_type -> erda.openapiv1.dop.DownloadSpecTextReq
	23,  // 434: erda.openapiv1.dop.dop.FileTreeCreateNode:input_type -> erda.openapiv1.dop.APIDocCreateNodeReq
	128, // 435: erda.openapiv1.dop.dop.FileTreeDeleteNode:input_type -> erda.openapiv1.dop.FileTreeDeleteNode_Request
	129, // 436: erda.openapiv1.dop.dop.FileTreeGetNode:input_type -> erda.openapiv1.dop.FileTreeGetNode_Request
	130, // 437: erda.openapiv1.dop.dop.FileTreeListNodes:input_type -> erda.openapiv1.dop.FileTreeListNodes_Request
	131, // 438: erda.openapiv1.dop.dop.FileTreeMvCpNode:input_type -> erda.openapiv1.dop.FileTreeMvCpNode_Request
	132, // 439: erda.openapiv1.dop.dop.FileTreeUpdateNode:input_type -> erda.openapiv1.dop.FileTreeUpdateNode_Request
	134, // 440: erda.openapiv1.dop.dop.GetAPIAssetVersion:input_type -> erda.openapiv1.dop.GetAPIAssetVersionReq
	133, // 441: erda.openapiv1.dop.dop.GetAPIAssets:input_type -> erda.openapiv1.dop.GetAPIAssetReq
	135, // 442: erda.openapiv1.dop.dop.GetAccess:input_type -> erda.openapiv1.dop.GetAccess_Request
	138, // 443: erda.openapiv1.dop.dop.GetClient:input_type -> erda.openapiv1.dop.GetClientReq
	139, // 444: erda.openapiv1.dop.dop.GetContract:input_type -> erda.openapiv1.dop.GetContractReq
	140, // 445: erda.openapiv1.dop.dop.GetInstantiations:input_type -> erda.openapiv1.dop.GetInstantiationsReq
	141, // 446: erda.openapiv1.dop.dop.GetOperation:input_type -> erda.openapiv1.dop.GetOperationReq
	184, // 447: erda.openapiv1.dop.dop.GetSLA:input_type -> erda.openapiv1.dop.ListSLAsReq
	134, // 448: erda.openapiv1.dop.dop.ListAPIAssetVersions:input_type -> erda.openapiv1.dop.GetAPIAssetVersionReq
	172, // 449: erda.openapiv1.dop.dop.ListAPIGateways:input_type -> erda.openapiv1.dop.ListAPIGatewaysReq
	174, // 450: erda.openapiv1.dop.dop.ListAccess:input_type -> erda.openapiv1.dop.ListAccessReq
	178, // 451: erda.openapiv1.dop.dop.ListContract:input_type -> erda.openapiv1.dop.ListContractsReq
	176, // 452: erda.openapiv1.dop.dop.ListContractRecords:input_type -> erda.openapiv1.dop.ListContractRecordsReq
	180, // 453: erda.openapiv1.dop.dop.ListInstantiations:input_type -> erda.openapiv1.dop.ListInstantiations_Request
	181, // 454: erda.openapiv1.dop.dop.ListMyClients:input_type -> erda.openapiv1.dop.ListMyClientsReq
	182, // 455: erda.openapiv1.dop.dop.ListProjectAPIGateways:input_type -> erda.openapiv1.dop.ListProjectAPIGatewaysReq
	183, // 456: erda.openapiv1.dop.dop.ListRuntimeServices:input_type -> erda.openapiv1.dop.ListRuntimeServices_Request
	143, // 457: erda.openapiv1.dop.dop.ListSLA:input_type -> erda.openapiv1.dop.GetSLAReq
	186, // 458: erda.openapiv1.dop.dop.ListSwaggerVersionClients:input_type -> erda.openapiv1.dop.ListSwaggerVersionClientsReq
	188, // 459: erda.openapiv1.dop.dop.ListSwaggerVersions:input_type -> erda.openapiv1.dop.ListSwaggerVersionsReq
	209, // 460: erda.openapiv1.dop.dop.PUBLISH_ITEM_CERTIFICATION_GET:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_CERTIFICATION_GET_Request
	261, // 461: erda.openapiv1.dop.dop.PUBLISH_ITEM_CHANNELS:input_type -> erda.openapiv1.dop.PublishItemStatisticsDetailRequest
	210, // 462: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_EFFACTS:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_ERR_EFFACTS_Request
	211, // 463: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_LIST:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_ERR_LIST_Request
	212, // 464: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_RATE:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_ERR_RATE_Request
	213, // 465: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_TREND:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_ERR_TREND_Request
	214, // 466: erda.openapiv1.dop.dop.PUBLISH_ITEM_METIRCS_COMMON:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_METIRCS_COMMON_Request
	215, // 467: erda.openapiv1.dop.dop.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request
	216, // 468: erda.openapiv1.dop.dop.PUBLISH_ITEM_STATISTICS_TREND:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_STATISTICS_TREND_Request
	217, // 469: erda.openapiv1.dop.dop.PUBLISH_ITEM_USERS:input_type -> erda.openapiv1.dop.PUBLISH_ITEM_USERS_Request
	261, // 470: erda.openapiv1.dop.dop.PUBLISH_ITEM_VERSION_INFO_LIST:input_type -> erda.openapiv1.dop.PublishItemStatisticsDetailRequest
	218, // 471: erda.openapiv1.dop.dop.PagingAPIAssets:input_type -> erda.openapiv1.dop.PagingAPIAssetsReq
	126, // 472: erda.openapiv1.dop.dop.ProjectPackageExport:input_type -> erda.openapiv1.dop.ExportProjectPackageRequest
	153, // 473: erda.openapiv1.dop.dop.ProjectPackageImport:input_type -> erda.openapiv1.dop.ImportProjectPackageRequest
	255, // 474: erda.openapiv1.dop.dop.ProjectPackageParse:input_type -> erda.openapiv1.dop.ProjectPackageParse_Request
	127, // 475: erda.openapiv1.dop.dop.ProjectTemplateExport:input_type -> erda.openapiv1.dop.ExportProjectTemplateRequest
	154, // 476: erda.openapiv1.dop.dop.ProjectTemplateImport:input_type -> erda.openapiv1.dop.ImportProjectTemplateRequest
	154, // 477: erda.openapiv1.dop.dop.ProjectTemplateParse:input_type -> erda.openapiv1.dop.ImportProjectTemplateRequest
	259, // 478: erda.openapiv1.dop.dop.ProxyMetrics:input_type -> erda.openapiv1.dop.ProxyMetrics_Request
	43,  // 479: erda.openapiv1.dop.dop.QA_APITESTS_CANCEL:input_type -> erda.openapiv1.dop.ApiTestCancelRequest
	280, // 480: erda.openapiv1.dop.dop.QA_APITESTS_GET:input_type -> erda.openapiv1.dop.QA_APITESTS_GET_Request
	47,  // 481: erda.openapiv1.dop.dop.QA_APITESTS_UPDATE:input_type -> erda.openapiv1.dop.ApiTestsUpdateRequest
	281, // 482: erda.openapiv1.dop.dop.QA_AUTOTEST_SPACE_GET:input_type -> erda.openapiv1.dop.QA_AUTOTEST_SPACE_GET_Request
	282, // 483: erda.openapiv1.dop.dop.QA_PIPELINE_TASK_LOGS:input_type -> erda.openapiv1.dop.QA_PIPELINE_TASK_LOGS_Request
	283, // 484: erda.openapiv1.dop.dop.QA_RECORDS_GET:input_type -> erda.openapiv1.dop.QA_RECORDS_GET_Request
	189, // 485: erda.openapiv1.dop.dop.QA_RECORDS_LIST:input_type -> erda.openapiv1.dop.ListTestFileRecordsRequest
	284, // 486: erda.openapiv1.dop.dop.QA_SONAR_GET_CREDENTIAL:input_type -> erda.openapiv1.dop.QA_SONAR_GET_CREDENTIAL_Request
	285, // 487: erda.openapiv1.dop.dop.QA_SONAR_ISSUES:input_type -> erda.openapiv1.dop.QA_SONAR_ISSUES_Request
	305, // 488: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_BATCH_DELETE:input_type -> erda.openapiv1.dop.SonarMetricRulesBatchDeleteRequest
	306, // 489: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_BATCH_INSERT:input_type -> erda.openapiv1.dop.SonarMetricRulesBatchInsertRequest
	308, // 490: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_DELETE:input_type -> erda.openapiv1.dop.SonarMetricRulesDeleteRequest
	286, // 491: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_GET:input_type -> erda.openapiv1.dop.QA_SONAR_METRIC_RULES_GET_Request
	310, // 492: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_PAGING:input_type -> erda.openapiv1.dop.SonarMetricRulesPagingRequest
	307, // 493: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_QUERY_DEFINITION:input_type -> erda.openapiv1.dop.SonarMetricRulesDefinitionListRequest
	309, // 494: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_QUERY_LIST:input_type -> erda.openapiv1.dop.SonarMetricRulesListRequest
	311, // 495: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_UPDATE:input_type -> erda.openapiv1.dop.SonarMetricRulesUpdateRequest
	287, // 496: erda.openapiv1.dop.dop.QA_TESTENV_CREATE:input_type -> erda.openapiv1.dop.QA_TESTENV_CREATE_Request
	288, // 497: erda.openapiv1.dop.dop.QA_TESTENV_DELETE:input_type -> erda.openapiv1.dop.QA_TESTENV_DELETE_Request
	289, // 498: erda.openapiv1.dop.dop.QA_TESTENV_GET:input_type -> erda.openapiv1.dop.QA_TESTENV_GET_Request
	290, // 499: erda.openapiv1.dop.dop.QA_TESTENV_LIST:input_type -> erda.openapiv1.dop.QA_TESTENV_LIST_Request
	30,  // 500: erda.openapiv1.dop.dop.QA_TESTENV_UPDATE:input_type -> erda.openapiv1.dop.APITestEnvUpdateRequest
	291, // 501: erda.openapiv1.dop.dop.QA_TESTPLAN_PIPELINE_DETAIL:input_type -> erda.openapiv1.dop.QA_TESTPLAN_PIPELINE_DETAIL_Request
	299, // 502: erda.openapiv1.dop.dop.SPOT_APITESTS_LOGS:input_type -> erda.openapiv1.dop.SPOT_APITESTS_LOGS_Request
	298, // 503: erda.openapiv1.dop.dop.SPOT_APITESTS_LOGS_DOWNLOAD:input_type -> erda.openapiv1.dop.SPOT_APITESTS_LOGS_DOWNLOAD_Request
	301, // 504: erda.openapiv1.dop.dop.SearchOperations:input_type -> erda.openapiv1.dop.SearchOperationsReq
	339, // 505: erda.openapiv1.dop.dop.UpdateAPIAssset:input_type -> erda.openapiv1.dop.UpdateAPIAssetReq
	340, // 506: erda.openapiv1.dop.dop.UpdateAccess:input_type -> erda.openapiv1.dop.UpdateAccess_Request
	343, // 507: erda.openapiv1.dop.dop.UpdateAssetVersion:input_type -> erda.openapiv1.dop.UpdateAssetVersionReq
	346, // 508: erda.openapiv1.dop.dop.UpdateClient:input_type -> erda.openapiv1.dop.UpdateClientReq
	347, // 509: erda.openapiv1.dop.dop.UpdateContract:input_type -> erda.openapiv1.dop.UpdateContract_Request
	348, // 510: erda.openapiv1.dop.dop.UpdateInstantiation:input_type -> erda.openapiv1.dop.UpdateInstantiationReq
	349, // 511: erda.openapiv1.dop.dop.UpdateSLA:input_type -> erda.openapiv1.dop.UpdateSLAReq
	351, // 512: erda.openapiv1.dop.dop.ValidateSwagger:input_type -> erda.openapiv1.dop.ValidateSwagger_Request
	230, // 513: erda.openapiv1.dop.dop.AADAPTOR_CICD_CRON_LIST:output_type -> erda.openapiv1.dop.PipelineCronListResponse
	224, // 514: erda.openapiv1.dop.dop.ADAPTOR_CICD_BRANCHES_ALL_VALID:output_type -> erda.openapiv1.dop.PipelineAppAllValidBranchWorkspaceResponse
	225, // 515: erda.openapiv1.dop.dop.ADAPTOR_CICD_CANCEL:output_type -> erda.openapiv1.dop.PipelineCancelResponse
	372, // 516: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_GET:output_type -> google.protobuf.Empty
	226, // 517: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_NAMESPACES:output_type -> erda.openapiv1.dop.PipelineConfigNamespacesFetchResponse
	226, // 518: erda.openapiv1.dop.dop.ADAPTOR_CICD_CONFIG_WORKSPACES:output_type -> erda.openapiv1.dop.PipelineConfigNamespacesFetchResponse
	228, // 519: erda.openapiv1.dop.dop.ADAPTOR_CICD_CREATE:output_type -> erda.openapiv1.dop.PipelineCreateResponse
	231, // 520: erda.openapiv1.dop.dop.ADAPTOR_CICD_CRON_START:output_type -> erda.openapiv1.dop.PipelineCronStartResponse
	232, // 521: erda.openapiv1.dop.dop.ADAPTOR_CICD_CRON_STOP:output_type -> erda.openapiv1.dop.PipelineCronStopResponse
	372, // 522: erda.openapiv1.dop.dop.ADAPTOR_CICD_FETCH_PIPELINE_ID:output_type -> google.protobuf.Empty
	372, // 523: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_CREATE:output_type -> google.protobuf.Empty
	372, // 524: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_DELETE:output_type -> google.protobuf.Empty
	372, // 525: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_FIND_ANCESTORS:output_type -> google.protobuf.Empty
	372, // 526: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_FUZZY_SEARCH:output_type -> google.protobuf.Empty
	372, // 527: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_GET:output_type -> google.protobuf.Empty
	372, // 528: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE:output_type -> google.protobuf.Empty
	372, // 529: erda.openapiv1.dop.dop.ADAPTOR_CICD_FILETREE_LIST:output_type -> google.protobuf.Empty
	234, // 530: erda.openapiv1.dop.dop.ADAPTOR_CICD_GET_BRANCH_RULE:output_type -> erda.openapiv1.dop.PipelineGetBranchRuleResponse
	237, // 531: erda.openapiv1.dop.dop.ADAPTOR_CICD_INVOKED_COMBO:output_type -> erda.openapiv1.dop.PipelineInvokedComboResponse
	241, // 532: erda.openapiv1.dop.dop.ADAPTOR_CICD_LIST:output_type -> erda.openapiv1.dop.PipelinePageListResponse
	239, // 533: erda.openapiv1.dop.dop.ADAPTOR_CICD_OPERATE:output_type -> erda.openapiv1.dop.PipelineOperateResponse
	372, // 534: erda.openapiv1.dop.dop.ADAPTOR_CICD_PIPELINE_DETAIL:output_type -> google.protobuf.Empty
	70,  // 535: erda.openapiv1.dop.dop.ADAPTOR_CICD_PIPELINE_YML_LIST:output_type -> erda.openapiv1.dop.CICDPipelineYmlListResponse
	372, // 536: erda.openapiv1.dop.dop.ADAPTOR_CICD_PROJECT_CREATE:output_type -> google.protobuf.Empty
	372, // 537: erda.openapiv1.dop.dop.ADAPTOR_CICD_PROJECT_DETAIL:output_type -> google.protobuf.Empty
	243, // 538: erda.openapiv1.dop.dop.ADAPTOR_CICD_RERUN:output_type -> erda.openapiv1.dop.PipelineRerunResponse
	372, // 539: erda.openapiv1.dop.dop.ADAPTOR_CICD_RERUN_FAILED:output_type -> google.protobuf.Empty
	244, // 540: erda.openapiv1.dop.dop.ADAPTOR_CICD_RUN:output_type -> erda.openapiv1.dop.PipelineRunResponse
	372, // 541: erda.openapiv1.dop.dop.ADAPTOR_CICD_TASK_LOG:output_type -> google.protobuf.Empty
	372, // 542: erda.openapiv1.dop.dop.ADAPTOR_CICD_TASK_LOG_DOWNLOAD:output_type -> google.protobuf.Empty
	372, // 543: erda.openapiv1.dop.dop.APIDocWebsocket:output_type -> google.protobuf.Empty
	34,  // 544: erda.openapiv1.dop.dop.APITEST_ATTEMPT:output_type -> erda.openapiv1.dop.APITestsAttemptResponse
	372, // 545: erda.openapiv1.dop.dop.APPLICATIONS_RESOURCES_LIST:output_type -> google.protobuf.Empty
	292, // 546: erda.openapiv1.dop.dop.APP_PUBLISH_ITEM_RELATION_GET:output_type -> erda.openapiv1.dop.QueryAppPublishItemRelationResponse
	342, // 547: erda.openapiv1.dop.dop.APP_PUBLISH_ITEM_RELATION_UPDATE:output_type -> erda.openapiv1.dop.UpdateAppPublishItemRelationResponse
	313, // 548: erda.openapiv1.dop.dop.CI_SONAR_STORE:output_type -> erda.openapiv1.dop.SonarStoreResponse
	53,  // 549: erda.openapiv1.dop.dop.CMDB_APPLICATION_CREATE:output_type -> erda.openapiv1.dop.ApplicationCreateResponse
	56,  // 550: erda.openapiv1.dop.dop.CMDB_APPLICATION_DELETE:output_type -> erda.openapiv1.dop.ApplicationDeleteResponse
	372, // 551: erda.openapiv1.dop.dop.CMDB_APPLICATION_INIT:output_type -> google.protobuf.Empty
	61,  // 552: erda.openapiv1.dop.dop.CMDB_APPLICATION_UPDATE:output_type -> erda.openapiv1.dop.ApplicationUpdateResponse
	110, // 553: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_CREATE:output_type -> erda.openapiv1.dop.CreateBranchRuleResponse
	121, // 554: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_DELETE:output_type -> erda.openapiv1.dop.DeleteBranchRuleResponse
	294, // 555: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_QUERY:output_type -> erda.openapiv1.dop.QueryBranchRuleResponse
	345, // 556: erda.openapiv1.dop.dop.CMDB_BRANCH_RULE_UPDATE:output_type -> erda.openapiv1.dop.UpdateBranchRuleResponse
	219, // 557: erda.openapiv1.dop.dop.CMDB_CERTIFICATES_APP_LIST:output_type -> erda.openapiv1.dop.PagingAppCertificateDTO
	93,  // 558: erda.openapiv1.dop.dop.CMDB_CERTIFICATES_LIST:output_type -> erda.openapiv1.dop.CertificateListResponse
	372, // 559: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_CANCEL:output_type -> google.protobuf.Empty
	372, // 560: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_CONFIG:output_type -> google.protobuf.Empty
	372, // 561: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_APP_QUOTE:output_type -> google.protobuf.Empty
	87,  // 562: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_CREATE:output_type -> erda.openapiv1.dop.CertificateCreateResponse
	89,  // 563: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_DELETE:output_type -> erda.openapiv1.dop.CertificateDeleteResponse
	90,  // 564: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_GET:output_type -> erda.openapiv1.dop.CertificateDetailResponse
	96,  // 565: erda.openapiv1.dop.dop.CMDB_CERTIFICATE_UPDATE:output_type -> erda.openapiv1.dop.CertificateUpdateResponse
	100, // 566: erda.openapiv1.dop.dop.CMDB_COMMENT_CREATE:output_type -> erda.openapiv1.dop.CommentCreateResponse
	102, // 567: erda.openapiv1.dop.dop.CMDB_COMMENT_LIST:output_type -> erda.openapiv1.dop.CommentListResponse
	106, // 568: erda.openapiv1.dop.dop.CMDB_COMMENT_UPDATE:output_type -> erda.openapiv1.dop.CommentUpdateResponse
	159, // 569: erda.openapiv1.dop.dop.CMDB_ITERATION_CREATE:output_type -> erda.openapiv1.dop.IterationCreateResponse
	372, // 570: erda.openapiv1.dop.dop.CMDB_ITERATION_DELETE:output_type -> google.protobuf.Empty
	160, // 571: erda.openapiv1.dop.dop.CMDB_ITERATION_GET:output_type -> erda.openapiv1.dop.IterationGetResponse
	162, // 572: erda.openapiv1.dop.dop.CMDB_ITERATION_PAGING:output_type -> erda.openapiv1.dop.IterationPagingResponse
	164, // 573: erda.openapiv1.dop.dop.CMDB_ITERATION_UPDATE:output_type -> erda.openapiv1.dop.IterationUpdateResponse
	167, // 574: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_CREATE:output_type -> erda.openapiv1.dop.LibReferenceCreateResponse
	372, // 575: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_DELETE:output_type -> google.protobuf.Empty
	169, // 576: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_LIST:output_type -> erda.openapiv1.dop.LibReferenceListResponse
	372, // 577: erda.openapiv1.dop.dop.CMDB_LIBREFERENCE_LIST_VERSION:output_type -> google.protobuf.Empty
	275, // 578: erda.openapiv1.dop.dop.CMDB_MY_PUBLISHERS_LIST:output_type -> erda.openapiv1.dop.PublisherListResponse
	195, // 579: erda.openapiv1.dop.dop.CMDB_ORG_CREATE:output_type -> erda.openapiv1.dop.OrgCreateResponse
	372, // 580: erda.openapiv1.dop.dop.CMDB_ORG_DELETE:output_type -> google.protobuf.Empty
	206, // 581: erda.openapiv1.dop.dop.CMDB_ORG_FETCH:output_type -> erda.openapiv1.dop.OrgSearchResponse
	199, // 582: erda.openapiv1.dop.dop.CMDB_ORG_GET_BY_DOMAIN:output_type -> erda.openapiv1.dop.OrgGetByDomainResponse
	201, // 583: erda.openapiv1.dop.dop.CMDB_ORG_NEXUS_FETCH:output_type -> erda.openapiv1.dop.OrgNexusGetResponse
	203, // 584: erda.openapiv1.dop.dop.CMDB_ORG_NEXUS_SHOW_PASSWORD:output_type -> erda.openapiv1.dop.OrgNexusShowPasswordResponse
	206, // 585: erda.openapiv1.dop.dop.CMDB_ORG_PUBLIC:output_type -> erda.openapiv1.dop.OrgSearchResponse
	372, // 586: erda.openapiv1.dop.dop.CMDB_ORG_PUBLISHER_CREATE:output_type -> google.protobuf.Empty
	372, // 587: erda.openapiv1.dop.dop.CMDB_ORG_PUBLISHER_CREATE_GET:output_type -> google.protobuf.Empty
	204, // 588: erda.openapiv1.dop.dop.CMDB_ORG_RESOURCE_GET:output_type -> erda.openapiv1.dop.OrgResourceInfo
	206, // 589: erda.openapiv1.dop.dop.CMDB_ORG_SEARCH:output_type -> erda.openapiv1.dop.OrgSearchResponse
	208, // 590: erda.openapiv1.dop.dop.CMDB_ORG_UPDATE:output_type -> erda.openapiv1.dop.OrgUpdateRequestBody
	254, // 591: erda.openapiv1.dop.dop.CMDB_PROJECTS_FETCH:output_type -> erda.openapiv1.dop.ProjectListResponse
	247, // 592: erda.openapiv1.dop.dop.CMDB_PROJECT_CREATE:output_type -> erda.openapiv1.dop.ProjectCreateResponse
	250, // 593: erda.openapiv1.dop.dop.CMDB_PROJECT_DELETE:output_type -> erda.openapiv1.dop.ProjectDeleteResponse
	252, // 594: erda.openapiv1.dop.dop.CMDB_PROJECT_DETAIL:output_type -> erda.openapiv1.dop.ProjectDetailResponse
	275, // 595: erda.openapiv1.dop.dop.CMDB_PUBLISHERS_LIST:output_type -> erda.openapiv1.dop.PublisherListResponse
	270, // 596: erda.openapiv1.dop.dop.CMDB_PUBLISHER_CREATE:output_type -> erda.openapiv1.dop.PublisherCreateResponse
	272, // 597: erda.openapiv1.dop.dop.CMDB_PUBLISHER_DELETE:output_type -> erda.openapiv1.dop.PublisherDeleteResponse
	273, // 598: erda.openapiv1.dop.dop.CMDB_PUBLISHER_GET:output_type -> erda.openapiv1.dop.PublisherDetailResponse
	277, // 599: erda.openapiv1.dop.dop.CMDB_PUBLISHER_UPDATE:output_type -> erda.openapiv1.dop.PublisherUpdateResponse
	191, // 600: erda.openapiv1.dop.dop.CMDB_ROLES_LIST:output_type -> erda.openapiv1.dop.MemberRoleListResponse
	318, // 601: erda.openapiv1.dop.dop.CMDB_TICKET_CLOSE:output_type -> erda.openapiv1.dop.TicketCloseResponse
	320, // 602: erda.openapiv1.dop.dop.CMDB_TICKET_CREATE:output_type -> erda.openapiv1.dop.TicketCreateResponse
	322, // 603: erda.openapiv1.dop.dop.CMDB_TICKET_DELETE:output_type -> erda.openapiv1.dop.TicketDeleteResponse
	324, // 604: erda.openapiv1.dop.dop.CMDB_TICKET_FETCH:output_type -> erda.openapiv1.dop.TicketFetchResponse
	326, // 605: erda.openapiv1.dop.dop.CMDB_TICKET_LIST:output_type -> erda.openapiv1.dop.TicketListResponse
	329, // 606: erda.openapiv1.dop.dop.CMDB_TICKET_REOPEN:output_type -> erda.openapiv1.dop.TicketReopenResponse
	332, // 607: erda.openapiv1.dop.dop.CMDB_TICKET_UPDATE:output_type -> erda.openapiv1.dop.TicketUpdateResponse
	372, // 608: erda.openapiv1.dop.dop.CODE_COVERAGE_END_CALLBACK:output_type -> google.protobuf.Empty
	372, // 609: erda.openapiv1.dop.dop.CODE_COVERAGE_READY_CALLBACK:output_type -> google.protobuf.Empty
	372, // 610: erda.openapiv1.dop.dop.CODE_COVERAGE_READY_STATUS:output_type -> google.protobuf.Empty
	372, // 611: erda.openapiv1.dop.dop.CODE_COVERAGE_REPORT_CALLBACK:output_type -> google.protobuf.Empty
	372, // 612: erda.openapiv1.dop.dop.CreateAPIAsset:output_type -> google.protobuf.Empty
	107, // 613: erda.openapiv1.dop.dop.CreateAPIAssetVersion:output_type -> erda.openapiv1.dop.CreateAPIAssetVersionBody
	372, // 614: erda.openapiv1.dop.dop.CreateAccess:output_type -> google.protobuf.Empty
	146, // 615: erda.openapiv1.dop.dop.CreateAttempTest:output_type -> erda.openapiv1.dop.Header
	372, // 616: erda.openapiv1.dop.dop.CreateClient:output_type -> google.protobuf.Empty
	372, // 617: erda.openapiv1.dop.dop.CreateContract:output_type -> google.protobuf.Empty
	372, // 618: erda.openapiv1.dop.dop.CreateInstantiation:output_type -> google.protobuf.Empty
	146, // 619: erda.openapiv1.dop.dop.CreateSLA:output_type -> erda.openapiv1.dop.Header
	372, // 620: erda.openapiv1.dop.dop.DeleteAPIAssetVersion:output_type -> google.protobuf.Empty
	372, // 621: erda.openapiv1.dop.dop.DeleteAPIAssets:output_type -> google.protobuf.Empty
	372, // 622: erda.openapiv1.dop.dop.DeleteAccess:output_type -> google.protobuf.Empty
	372, // 623: erda.openapiv1.dop.dop.DeleteClient:output_type -> google.protobuf.Empty
	372, // 624: erda.openapiv1.dop.dop.DeleteContract:output_type -> google.protobuf.Empty
	146, // 625: erda.openapiv1.dop.dop.DeleteSLA:output_type -> erda.openapiv1.dop.Header
	372, // 626: erda.openapiv1.dop.dop.ExportSpec:output_type -> google.protobuf.Empty
	372, // 627: erda.openapiv1.dop.dop.FileTreeCreateNode:output_type -> google.protobuf.Empty
	372, // 628: erda.openapiv1.dop.dop.FileTreeDeleteNode:output_type -> google.protobuf.Empty
	372, // 629: erda.openapiv1.dop.dop.FileTreeGetNode:output_type -> google.protobuf.Empty
	372, // 630: erda.openapiv1.dop.dop.FileTreeListNodes:output_type -> google.protobuf.Empty
	372, // 631: erda.openapiv1.dop.dop.FileTreeMvCpNode:output_type -> google.protobuf.Empty
	372, // 632: erda.openapiv1.dop.dop.FileTreeUpdateNode:output_type -> google.protobuf.Empty
	137, // 633: erda.openapiv1.dop.dop.GetAPIAssetVersion:output_type -> erda.openapiv1.dop.GetAssetVersionRsp
	19,  // 634: erda.openapiv1.dop.dop.GetAPIAssets:output_type -> erda.openapiv1.dop.APIAssetGetResponse
	372, // 635: erda.openapiv1.dop.dop.GetAccess:output_type -> google.protobuf.Empty
	372, // 636: erda.openapiv1.dop.dop.GetClient:output_type -> google.protobuf.Empty
	372, // 637: erda.openapiv1.dop.dop.GetContract:output_type -> google.protobuf.Empty
	136, // 638: erda.openapiv1.dop.dop.GetInstantiations:output_type -> erda.openapiv1.dop.GetAddonInstanceDetailResponse
	67,  // 639: erda.openapiv1.dop.dop.GetOperation:output_type -> erda.openapiv1.dop.BaseResponse
	185, // 640: erda.openapiv1.dop.dop.GetSLA:output_type -> erda.openapiv1.dop.ListSLAsRsp
	137, // 641: erda.openapiv1.dop.dop.ListAPIAssetVersions:output_type -> erda.openapiv1.dop.GetAssetVersionRsp
	173, // 642: erda.openapiv1.dop.dop.ListAPIGateways:output_type -> erda.openapiv1.dop.ListAPIGatewaysResp
	175, // 643: erda.openapiv1.dop.dop.ListAccess:output_type -> erda.openapiv1.dop.ListAccessRsp
	179, // 644: erda.openapiv1.dop.dop.ListContract:output_type -> erda.openapiv1.dop.ListContractsRsp
	177, // 645: erda.openapiv1.dop.dop.ListContractRecords:output_type -> erda.openapiv1.dop.ListContractRecordsRsp
	372, // 646: erda.openapiv1.dop.dop.ListInstantiations:output_type -> google.protobuf.Empty
	372, // 647: erda.openapiv1.dop.dop.ListMyClients:output_type -> google.protobuf.Empty
	173, // 648: erda.openapiv1.dop.dop.ListProjectAPIGateways:output_type -> erda.openapiv1.dop.ListAPIGatewaysResp
	146, // 649: erda.openapiv1.dop.dop.ListRuntimeServices:output_type -> erda.openapiv1.dop.Header
	144, // 650: erda.openapiv1.dop.dop.ListSLA:output_type -> erda.openapiv1.dop.GetSLARsp
	187, // 651: erda.openapiv1.dop.dop.ListSwaggerVersionClients:output_type -> erda.openapiv1.dop.ListSwaggerVersionRsp
	187, // 652: erda.openapiv1.dop.dop.ListSwaggerVersions:output_type -> erda.openapiv1.dop.ListSwaggerVersionRsp
	372, // 653: erda.openapiv1.dop.dop.PUBLISH_ITEM_CERTIFICATION_GET:output_type -> google.protobuf.Empty
	260, // 654: erda.openapiv1.dop.dop.PUBLISH_ITEM_CHANNELS:output_type -> erda.openapiv1.dop.PublishItemStatisticsDetailData
	372, // 655: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_EFFACTS:output_type -> google.protobuf.Empty
	263, // 656: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_LIST:output_type -> erda.openapiv1.dop.PublishItemStatisticsErrListData
	372, // 657: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_RATE:output_type -> google.protobuf.Empty
	265, // 658: erda.openapiv1.dop.dop.PUBLISH_ITEM_ERR_TREND:output_type -> erda.openapiv1.dop.PublishItemStatisticsErrTrendData
	372, // 659: erda.openapiv1.dop.dop.PUBLISH_ITEM_METIRCS_COMMON:output_type -> google.protobuf.Empty
	372, // 660: erda.openapiv1.dop.dop.PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON:output_type -> google.protobuf.Empty
	267, // 661: erda.openapiv1.dop.dop.PUBLISH_ITEM_STATISTICS_TREND:output_type -> erda.openapiv1.dop.PublishItemStatisticsTrendData
	372, // 662: erda.openapiv1.dop.dop.PUBLISH_ITEM_USERS:output_type -> google.protobuf.Empty
	260, // 663: erda.openapiv1.dop.dop.PUBLISH_ITEM_VERSION_INFO_LIST:output_type -> erda.openapiv1.dop.PublishItemStatisticsDetailData
	20,  // 664: erda.openapiv1.dop.dop.PagingAPIAssets:output_type -> erda.openapiv1.dop.APIAssetPagingResponse
	372, // 665: erda.openapiv1.dop.dop.ProjectPackageExport:output_type -> google.protobuf.Empty
	372, // 666: erda.openapiv1.dop.dop.ProjectPackageImport:output_type -> google.protobuf.Empty
	372, // 667: erda.openapiv1.dop.dop.ProjectPackageParse:output_type -> google.protobuf.Empty
	372, // 668: erda.openapiv1.dop.dop.ProjectTemplateExport:output_type -> google.protobuf.Empty
	372, // 669: erda.openapiv1.dop.dop.ProjectTemplateImport:output_type -> google.protobuf.Empty
	372, // 670: erda.openapiv1.dop.dop.ProjectTemplateParse:output_type -> google.protobuf.Empty
	372, // 671: erda.openapiv1.dop.dop.ProxyMetrics:output_type -> google.protobuf.Empty
	44,  // 672: erda.openapiv1.dop.dop.QA_APITESTS_CANCEL:output_type -> erda.openapiv1.dop.ApiTestCancelResponse
	46,  // 673: erda.openapiv1.dop.dop.QA_APITESTS_GET:output_type -> erda.openapiv1.dop.ApiTestsGetResponse
	48,  // 674: erda.openapiv1.dop.dop.QA_APITESTS_UPDATE:output_type -> erda.openapiv1.dop.ApiTestsUpdateResponse
	65,  // 675: erda.openapiv1.dop.dop.QA_AUTOTEST_SPACE_GET:output_type -> erda.openapiv1.dop.AutoTestSpaceResponse
	117, // 676: erda.openapiv1.dop.dop.QA_PIPELINE_TASK_LOGS:output_type -> erda.openapiv1.dop.DashboardSpotLogResponse
	145, // 677: erda.openapiv1.dop.dop.QA_RECORDS_GET:output_type -> erda.openapiv1.dop.GetTestFileRecordResponse
	190, // 678: erda.openapiv1.dop.dop.QA_RECORDS_LIST:output_type -> erda.openapiv1.dop.ListTestFileRecordsResponse
	302, // 679: erda.openapiv1.dop.dop.QA_SONAR_GET_CREDENTIAL:output_type -> erda.openapiv1.dop.SonarCredentialGetResponse
	303, // 680: erda.openapiv1.dop.dop.QA_SONAR_ISSUES:output_type -> erda.openapiv1.dop.SonarIssueResponse
	372, // 681: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_BATCH_DELETE:output_type -> google.protobuf.Empty
	372, // 682: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_BATCH_INSERT:output_type -> google.protobuf.Empty
	372, // 683: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_DELETE:output_type -> google.protobuf.Empty
	372, // 684: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_GET:output_type -> google.protobuf.Empty
	372, // 685: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_PAGING:output_type -> google.protobuf.Empty
	372, // 686: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_QUERY_DEFINITION:output_type -> google.protobuf.Empty
	372, // 687: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_QUERY_LIST:output_type -> google.protobuf.Empty
	372, // 688: erda.openapiv1.dop.dop.QA_SONAR_METRIC_RULES_UPDATE:output_type -> google.protobuf.Empty
	25,  // 689: erda.openapiv1.dop.dop.QA_TESTENV_CREATE:output_type -> erda.openapiv1.dop.APITestEnvCreateRequest
	27,  // 690: erda.openapiv1.dop.dop.QA_TESTENV_DELETE:output_type -> erda.openapiv1.dop.APITestEnvDeleteResponse
	28,  // 691: erda.openapiv1.dop.dop.QA_TESTENV_GET:output_type -> erda.openapiv1.dop.APITestEnvGetResponse
	29,  // 692: erda.openapiv1.dop.dop.QA_TESTENV_LIST:output_type -> erda.openapiv1.dop.APITestEnvListResponse
	31,  // 693: erda.openapiv1.dop.dop.QA_TESTENV_UPDATE:output_type -> erda.openapiv1.dop.APITestEnvUpdateResponse
	233, // 694: erda.openapiv1.dop.dop.QA_TESTPLAN_PIPELINE_DETAIL:output_type -> erda.openapiv1.dop.PipelineDetailResponse
	372, // 695: erda.openapiv1.dop.dop.SPOT_APITESTS_LOGS:output_type -> google.protobuf.Empty
	372, // 696: erda.openapiv1.dop.dop.SPOT_APITESTS_LOGS_DOWNLOAD:output_type -> google.protobuf.Empty
	67,  // 697: erda.openapiv1.dop.dop.SearchOperations:output_type -> erda.openapiv1.dop.BaseResponse
	372, // 698: erda.openapiv1.dop.dop.UpdateAPIAssset:output_type -> google.protobuf.Empty
	372, // 699: erda.openapiv1.dop.dop.UpdateAccess:output_type -> google.protobuf.Empty
	146, // 700: erda.openapiv1.dop.dop.UpdateAssetVersion:output_type -> erda.openapiv1.dop.Header
	372, // 701: erda.openapiv1.dop.dop.UpdateClient:output_type -> google.protobuf.Empty
	372, // 702: erda.openapiv1.dop.dop.UpdateContract:output_type -> google.protobuf.Empty
	372, // 703: erda.openapiv1.dop.dop.UpdateInstantiation:output_type -> google.protobuf.Empty
	146, // 704: erda.openapiv1.dop.dop.UpdateSLA:output_type -> erda.openapiv1.dop.Header
	372, // 705: erda.openapiv1.dop.dop.ValidateSwagger:output_type -> google.protobuf.Empty
	513, // [513:706] is the sub-list for method output_type
	320, // [320:513] is the sub-list for method input_type
	320, // [320:320] is the sub-list for extension type_name
	320, // [320:320] is the sub-list for extension extendee
	0,   // [0:320] is the sub-list for field type_name
}

func init() { file_dop_proto_init() }
func file_dop_proto_init() {
	if File_dop_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AADAPTOR_CICD_CRON_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_BRANCHES_ALL_VALID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CANCEL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CONFIG_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CONFIG_NAMESPACES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CONFIG_WORKSPACES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CRON_START_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_CRON_STOP_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_FETCH_PIPELINE_ID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_GET_BRANCH_RULE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_PIPELINE_DETAIL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_PROJECT_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_PROJECT_DETAIL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_RERUN_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_RUN_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADAPTOR_CICD_TASK_LOG_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAssetCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAssetGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAssetPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAssetVersionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAssetVersionInstanceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIDocCreateNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIDocWebsocket_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestEnvUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestsAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITestsAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APPLICATIONS_RESOURCES_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APP_PUBLISH_ITEM_RELATION_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateAutoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateKeyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateKeyStoreDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateManualDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCertificateManualKeyStoreDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTestsUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCertificateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishItemRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationUpdateRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockoutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CICDPipelineYmlListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CICDPipelineYmlListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_BRANCH_RULE_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_CERTIFICATE_APP_CANCEL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_CERTIFICATE_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_CERTIFICATE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ITERATION_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ITERATION_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_LIBREFERENCE_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_LIBREFERENCE_LIST_VERSION_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ORG_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ORG_PUBLISHER_CREATE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ORG_PUBLISHER_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ORG_RESOURCE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PUBLISHER_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PUBLISHER_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_ROLES_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateFileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeCoverageUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentUpdateRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAPIAssetVersionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstantiationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSLAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSpotLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSpotLogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSpotLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIAssetVersion_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIAssets_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccess_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClient_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSLAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSpecTextReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProjectPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportProjectTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTreeDeleteNode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTreeGetNode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTreeListNodes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTreeMvCpNode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTreeUpdateNode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAPIAssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAPIAssetVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccess_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddonInstanceDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetVersionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstantiationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationURIParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSLAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSLARsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestFileRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSCertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSCertificateKeyChainP12DTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSCertificateKeyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISummaryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProjectPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProjectTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceDetailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceReferenceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iteration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReferenceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReferenceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReferenceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReferenceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibReferenceListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPIGatewayRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPIGatewaysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPIGatewaysResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstantiations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMyClientsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectAPIGatewaysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuntimeServices_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSLAsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSLAsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwaggerVersionClientsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwaggerVersionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwaggerVersionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestFileRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestFileRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCertificateKeyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgGetByDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgGetByDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNexusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNexusGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNexusShowPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNexusShowPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_CERTIFICATION_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_ERR_EFFACTS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_ERR_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_ERR_RATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_ERR_TREND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_METIRCS_COMMON_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_STATISTICS_TREND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUBLISH_ITEM_USERS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingAPIAssetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingAppCertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingCertificateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingOrgDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingProjectDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingPublisherDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineAppAllValidBranchWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineConfigNamespacesFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCronDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCronListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCronStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCronStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineGetBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInvokedCombo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInvokedComboRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInvokedComboResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectPackageParse_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyMetrics_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsDetailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsErrListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsErrListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsErrTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsErrTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemStatisticsTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCertificateConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCertificateConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_APITESTS_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_AUTOTEST_SPACE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_PIPELINE_TASK_LOGS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_RECORDS_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_SONAR_GET_CREDENTIAL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_SONAR_ISSUES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_SONAR_METRIC_RULES_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_TESTENV_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_TESTENV_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_TESTENV_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_TESTENV_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_TESTPLAN_PIPELINE_DETAIL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAppPublishItemRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBranchRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPOT_APITESTS_LOGS_DOWNLOAD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPOT_APITESTS_LOGS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOperationQueryParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOperationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarCredentialGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRuleDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesBatchInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesDefinitionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarMetricRulesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonarStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFileRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIssuesStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketReopenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketReopenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketUpdateRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFindAncestorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFuzzySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAPIAssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccess_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPublishItemRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPublishItemRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBranchRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContract_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstantiationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSLAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dop_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSwagger_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dop_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[114].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[137].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[140].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[141].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[158].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[159].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[162].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[165].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[176].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[178].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[181].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[182].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[184].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[186].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[188].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[190].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[196].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[199].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[201].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[218].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[226].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[228].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[229].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[231].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[232].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[233].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[234].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[235].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[240].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[241].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[242].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[243].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[245].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[246].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[248].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[301].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[302].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[315].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[316].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[339].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[343].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[345].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[346].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[348].OneofWrappers = []interface{}{}
	file_dop_proto_msgTypes[349].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dop_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   370,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dop_proto_goTypes,
		DependencyIndexes: file_dop_proto_depIdxs,
		MessageInfos:      file_dop_proto_msgTypes,
	}.Build()
	File_dop_proto = out.File
	file_dop_proto_rawDesc = nil
	file_dop_proto_goTypes = nil
	file_dop_proto_depIdxs = nil
}
