// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: dop_config_manage.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/dop/config/manage/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// DopConfigManage dop_config_manage.proto
	DopConfigManage() pb.DopConfigManageClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		dopConfigManage: pb.NewDopConfigManageClient(cc),
	}
}

type serviceClients struct {
	dopConfigManage pb.DopConfigManageClient
}

func (c *serviceClients) DopConfigManage() pb.DopConfigManageClient {
	return c.dopConfigManage
}

type dopConfigManageWrapper struct {
	client pb.DopConfigManageClient
	opts   []grpc1.CallOption
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_DEL(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_DEL_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_DEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_EXPORT(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_EXPORT_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_GET(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_GET_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_IMPORT(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_IMPORT_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_POST(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_POST_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_CONFIG_PUT(ctx context.Context, req *pb.CONFIG_MANAGE_CONFIG_PUT_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_CONFIG_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_DEPLOY_CONFIG_GET(ctx context.Context, req *pb.CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_DEPLOY_CONFIG_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_MULTI_NS_CONFIG_GET(ctx context.Context, req *pb.CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_MULTI_NS_CONFIG_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_NAMESPACE_DEL(ctx context.Context, req *pb.CONFIG_MANAGE_NAMESPACE_DEL_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_NAMESPACE_DEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_NAMESPACE_FIX(ctx context.Context, req *pb.CONFIG_MANAGE_NAMESPACE_FIX_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_NAMESPACE_FIX(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *dopConfigManageWrapper) CONFIG_MANAGE_NAMESPACE_POST(ctx context.Context, req *pb.CONFIG_MANAGE_NAMESPACE_POST_Request) (*emptypb.Empty, error) {
	return s.client.CONFIG_MANAGE_NAMESPACE_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
