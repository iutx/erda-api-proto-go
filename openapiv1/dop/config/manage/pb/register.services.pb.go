// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: dop_config_manage.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterDopConfigManageImp dop_config_manage.proto
func RegisterDopConfigManageImp(regester transport.Register, srv DopConfigManageServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterDopConfigManageHandler(regester, DopConfigManageHandler(srv), _ops.HTTP...)
	RegisterDopConfigManageServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.openapiv1.dop.DopConfigManage",
	)
}

var (
	dopConfigManageClientType  = reflect.TypeOf((*DopConfigManageClient)(nil)).Elem()
	dopConfigManageServerType  = reflect.TypeOf((*DopConfigManageServer)(nil)).Elem()
	dopConfigManageHandlerType = reflect.TypeOf((*DopConfigManageHandler)(nil)).Elem()
)

// DopConfigManageClientType .
func DopConfigManageClientType() reflect.Type { return dopConfigManageClientType }

// DopConfigManageServerType .
func DopConfigManageServerType() reflect.Type { return dopConfigManageServerType }

// DopConfigManageHandlerType .
func DopConfigManageHandlerType() reflect.Type { return dopConfigManageHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		dopConfigManageClientType,
		// server types
		dopConfigManageServerType,
		// handler types
		dopConfigManageHandlerType,
	}
}
