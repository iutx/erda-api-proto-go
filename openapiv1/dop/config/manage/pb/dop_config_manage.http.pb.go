// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: dop_config_manage.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// DopConfigManageHandler is the server API for DopConfigManage service.
type DopConfigManageHandler interface {
	// DELETE /api/configmanage/configs
	CONFIG_MANAGE_CONFIG_DEL(context.Context, *CONFIG_MANAGE_CONFIG_DEL_Request) (*emptypb.Empty, error)
	// GET /api/config/actions/export
	CONFIG_MANAGE_CONFIG_EXPORT(context.Context, *CONFIG_MANAGE_CONFIG_EXPORT_Request) (*emptypb.Empty, error)
	// GET /api/configmanage/configs
	CONFIG_MANAGE_CONFIG_GET(context.Context, *CONFIG_MANAGE_CONFIG_GET_Request) (*emptypb.Empty, error)
	// POST /api/config/actions/import
	CONFIG_MANAGE_CONFIG_IMPORT(context.Context, *CONFIG_MANAGE_CONFIG_IMPORT_Request) (*emptypb.Empty, error)
	// POST /api/configmanage/configs
	CONFIG_MANAGE_CONFIG_POST(context.Context, *CONFIG_MANAGE_CONFIG_POST_Request) (*emptypb.Empty, error)
	// PUT /api/configmanage/configs
	CONFIG_MANAGE_CONFIG_PUT(context.Context, *CONFIG_MANAGE_CONFIG_PUT_Request) (*emptypb.Empty, error)
	// GET /api/configmanage/configs/deployment
	CONFIG_MANAGE_DEPLOY_CONFIG_GET(context.Context, *CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request) (*emptypb.Empty, error)
	// POST /api/configmanage/multinamespace/configs
	CONFIG_MANAGE_MULTI_NS_CONFIG_GET(context.Context, *CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request) (*emptypb.Empty, error)
	// DELETE /api/configmanage/namespace
	CONFIG_MANAGE_NAMESPACE_DEL(context.Context, *CONFIG_MANAGE_NAMESPACE_DEL_Request) (*emptypb.Empty, error)
	// GET /api/config/namespace/fix-namespace-data-err
	CONFIG_MANAGE_NAMESPACE_FIX(context.Context, *CONFIG_MANAGE_NAMESPACE_FIX_Request) (*emptypb.Empty, error)
	// POST /api/configmanage/namespace
	CONFIG_MANAGE_NAMESPACE_POST(context.Context, *CONFIG_MANAGE_NAMESPACE_POST_Request) (*emptypb.Empty, error)
}

// RegisterDopConfigManageHandler register DopConfigManageHandler to http.Router.
func RegisterDopConfigManageHandler(r http.Router, srv DopConfigManageHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CONFIG_MANAGE_CONFIG_DEL := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_DEL_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_DEL_Request))
		}
		var CONFIG_MANAGE_CONFIG_DEL_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_DEL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_DEL", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_DEL_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_DEL_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_EXPORT := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_EXPORT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_EXPORT_Request))
		}
		var CONFIG_MANAGE_CONFIG_EXPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_EXPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_EXPORT_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_EXPORT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_GET := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_GET_Request))
		}
		var CONFIG_MANAGE_CONFIG_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_GET_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_IMPORT := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_IMPORT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_IMPORT_Request))
		}
		var CONFIG_MANAGE_CONFIG_IMPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_IMPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_IMPORT_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_IMPORT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_POST := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_POST_Request))
		}
		var CONFIG_MANAGE_CONFIG_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_POST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_POST_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_PUT := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_CONFIG_PUT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_CONFIG_PUT_Request))
		}
		var CONFIG_MANAGE_CONFIG_PUT_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_CONFIG_PUT_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_CONFIG_PUT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_CONFIG_PUT_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_CONFIG_PUT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_DEPLOY_CONFIG_GET := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request))
		}
		var CONFIG_MANAGE_DEPLOY_CONFIG_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_DEPLOY_CONFIG_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_DEPLOY_CONFIG_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_DEPLOY_CONFIG_GET_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_MULTI_NS_CONFIG_GET := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request))
		}
		var CONFIG_MANAGE_MULTI_NS_CONFIG_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_MULTI_NS_CONFIG_GET_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_MULTI_NS_CONFIG_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_MULTI_NS_CONFIG_GET_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_NAMESPACE_DEL := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_NAMESPACE_DEL_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_NAMESPACE_DEL_Request))
		}
		var CONFIG_MANAGE_NAMESPACE_DEL_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_NAMESPACE_DEL_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_NAMESPACE_DEL", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_NAMESPACE_DEL_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_NAMESPACE_DEL_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_NAMESPACE_FIX := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_NAMESPACE_FIX_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_NAMESPACE_FIX_Request))
		}
		var CONFIG_MANAGE_NAMESPACE_FIX_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_NAMESPACE_FIX_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_NAMESPACE_FIX", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_NAMESPACE_FIX_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_NAMESPACE_FIX_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_NAMESPACE_POST := func(method, path string, fn func(context.Context, *CONFIG_MANAGE_NAMESPACE_POST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CONFIG_MANAGE_NAMESPACE_POST_Request))
		}
		var CONFIG_MANAGE_NAMESPACE_POST_info transport.ServiceInfo
		if h.Interceptor != nil {
			CONFIG_MANAGE_NAMESPACE_POST_info = transport.NewServiceInfo("erda.openapiv1.dop.dop_config_manage", "CONFIG_MANAGE_NAMESPACE_POST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CONFIG_MANAGE_NAMESPACE_POST_info)
				}
				r = r.WithContext(ctx)
				var in CONFIG_MANAGE_NAMESPACE_POST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CONFIG_MANAGE_CONFIG_DEL("DELETE", "/api/configmanage/configs", srv.CONFIG_MANAGE_CONFIG_DEL)
	add_CONFIG_MANAGE_CONFIG_EXPORT("GET", "/api/config/actions/export", srv.CONFIG_MANAGE_CONFIG_EXPORT)
	add_CONFIG_MANAGE_CONFIG_GET("GET", "/api/configmanage/configs", srv.CONFIG_MANAGE_CONFIG_GET)
	add_CONFIG_MANAGE_CONFIG_IMPORT("POST", "/api/config/actions/import", srv.CONFIG_MANAGE_CONFIG_IMPORT)
	add_CONFIG_MANAGE_CONFIG_POST("POST", "/api/configmanage/configs", srv.CONFIG_MANAGE_CONFIG_POST)
	add_CONFIG_MANAGE_CONFIG_PUT("PUT", "/api/configmanage/configs", srv.CONFIG_MANAGE_CONFIG_PUT)
	add_CONFIG_MANAGE_DEPLOY_CONFIG_GET("GET", "/api/configmanage/configs/deployment", srv.CONFIG_MANAGE_DEPLOY_CONFIG_GET)
	add_CONFIG_MANAGE_MULTI_NS_CONFIG_GET("POST", "/api/configmanage/multinamespace/configs", srv.CONFIG_MANAGE_MULTI_NS_CONFIG_GET)
	add_CONFIG_MANAGE_NAMESPACE_DEL("DELETE", "/api/configmanage/namespace", srv.CONFIG_MANAGE_NAMESPACE_DEL)
	add_CONFIG_MANAGE_NAMESPACE_FIX("GET", "/api/config/namespace/fix-namespace-data-err", srv.CONFIG_MANAGE_NAMESPACE_FIX)
	add_CONFIG_MANAGE_NAMESPACE_POST("POST", "/api/configmanage/namespace", srv.CONFIG_MANAGE_NAMESPACE_POST)
}
