// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: onedata.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// OnedataHandler is the server API for Onedata service.
type OnedataHandler interface {
	// GET /api/analysis
	ONEDATA_ANALYSIS(context.Context, *OneDataAnalysisRequest) (*OneDataAnalysisResponse, error)
	// GET /api/analysis/businessProcess
	ONEDATA_ANALYSIS_BUSSPROC(context.Context, *OneDataAnalysisBussProcRequest) (*OneDataAnalysisBussProcResponse, error)
	// GET /api/analysis/businessProcesses
	ONEDATA_ANALYSIS_BUSSPROCS(context.Context, *OneDataAnalysisBussProcsRequest) (*OneDataAnalysisBussProcsResponse, error)
	// GET /api/analysis/dim
	ONEDATA_ANALYSIS_DIM(context.Context, *OneDataAnalysisDimRequest) (*OneDataAnalysisDimRequest, error)
	// GET /api/analysis/fuzzyAttrs
	ONEDATA_ANALYSIS_FUZZYATTRS(context.Context, *OneDataAnalysisFuzzyAttrsRequest) (*OneDataAnalysisFuzzyAttrsResponse, error)
	// GET /api/analysis/outputTables
	ONEDATA_ANALYSIS_OUTPUTTABLES(context.Context, *OneDataAnalysisOutputTablesRequest) (*OneDataAnalysisOutputTablesResponse, error)
	// GET /api/analysis/star
	ONEDATA_ANALYSIS_STAR(context.Context, *OneDataAnalysisStarRequest) (*OneDataAnalysisStarResponse, error)
}

// RegisterOnedataHandler register OnedataHandler to http.Router.
func RegisterOnedataHandler(r http.Router, srv OnedataHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ONEDATA_ANALYSIS := func(method, path string, fn func(context.Context, *OneDataAnalysisRequest) (*OneDataAnalysisResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisRequest))
		}
		var ONEDATA_ANALYSIS_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_BUSSPROC := func(method, path string, fn func(context.Context, *OneDataAnalysisBussProcRequest) (*OneDataAnalysisBussProcResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisBussProcRequest))
		}
		var ONEDATA_ANALYSIS_BUSSPROC_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_BUSSPROC_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_BUSSPROC", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_BUSSPROC_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisBussProcRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_BUSSPROCS := func(method, path string, fn func(context.Context, *OneDataAnalysisBussProcsRequest) (*OneDataAnalysisBussProcsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisBussProcsRequest))
		}
		var ONEDATA_ANALYSIS_BUSSPROCS_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_BUSSPROCS_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_BUSSPROCS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_BUSSPROCS_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisBussProcsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_DIM := func(method, path string, fn func(context.Context, *OneDataAnalysisDimRequest) (*OneDataAnalysisDimRequest, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisDimRequest))
		}
		var ONEDATA_ANALYSIS_DIM_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_DIM_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_DIM", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_DIM_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisDimRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_FUZZYATTRS := func(method, path string, fn func(context.Context, *OneDataAnalysisFuzzyAttrsRequest) (*OneDataAnalysisFuzzyAttrsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisFuzzyAttrsRequest))
		}
		var ONEDATA_ANALYSIS_FUZZYATTRS_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_FUZZYATTRS_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_FUZZYATTRS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_FUZZYATTRS_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisFuzzyAttrsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_OUTPUTTABLES := func(method, path string, fn func(context.Context, *OneDataAnalysisOutputTablesRequest) (*OneDataAnalysisOutputTablesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisOutputTablesRequest))
		}
		var ONEDATA_ANALYSIS_OUTPUTTABLES_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_OUTPUTTABLES_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_OUTPUTTABLES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_OUTPUTTABLES_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisOutputTablesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS_STAR := func(method, path string, fn func(context.Context, *OneDataAnalysisStarRequest) (*OneDataAnalysisStarResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OneDataAnalysisStarRequest))
		}
		var ONEDATA_ANALYSIS_STAR_info transport.ServiceInfo
		if h.Interceptor != nil {
			ONEDATA_ANALYSIS_STAR_info = transport.NewServiceInfo("erda.openapiv1.onedata.onedata", "ONEDATA_ANALYSIS_STAR", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ONEDATA_ANALYSIS_STAR_info)
				}
				r = r.WithContext(ctx)
				var in OneDataAnalysisStarRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ONEDATA_ANALYSIS("GET", "/api/analysis", srv.ONEDATA_ANALYSIS)
	add_ONEDATA_ANALYSIS_BUSSPROC("GET", "/api/analysis/businessProcess", srv.ONEDATA_ANALYSIS_BUSSPROC)
	add_ONEDATA_ANALYSIS_BUSSPROCS("GET", "/api/analysis/businessProcesses", srv.ONEDATA_ANALYSIS_BUSSPROCS)
	add_ONEDATA_ANALYSIS_DIM("GET", "/api/analysis/dim", srv.ONEDATA_ANALYSIS_DIM)
	add_ONEDATA_ANALYSIS_FUZZYATTRS("GET", "/api/analysis/fuzzyAttrs", srv.ONEDATA_ANALYSIS_FUZZYATTRS)
	add_ONEDATA_ANALYSIS_OUTPUTTABLES("GET", "/api/analysis/outputTables", srv.ONEDATA_ANALYSIS_OUTPUTTABLES)
	add_ONEDATA_ANALYSIS_STAR("GET", "/api/analysis/star", srv.ONEDATA_ANALYSIS_STAR)
}
