// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: onedata.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*AtomicIndexDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AttrData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BaseParam)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BusinessDomainDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BusinessProcessDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BusinessProcessData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DataDomainDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DimDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ExtBaseParam)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MarketDomainDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisBussProcRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisBussProcResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisBussProcsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisBussProcsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisDimRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisFuzzyAttrsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisFuzzyAttrsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisOutputTablesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisOutputTablesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisStarRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataAnalysisStarResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OneDataDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OutputTableData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RelationDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*StarDTO)(nil)

// AtomicIndexDTO implement urlenc.URLValuesUnmarshaler.
func (m *AtomicIndexDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "extBaseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.ExtBaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.ExtBaseParam = val
					} else {
						m.ExtBaseParam = structpb.NewStringValue(vals[0])
					}
				}
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// AttrData implement urlenc.URLValuesUnmarshaler.
func (m *AttrData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// BaseParam implement urlenc.URLValuesUnmarshaler.
func (m *BaseParam) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enName":
				m.EnName = vals[0]
			case "cnName":
				m.CnName = vals[0]
			case "desc":
				m.Desc = vals[0]
			}
		}
	}
	return nil
}

// BusinessDomainDTO implement urlenc.URLValuesUnmarshaler.
func (m *BusinessDomainDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "baseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.BaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.BaseParam = val
					} else {
						m.BaseParam = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// BusinessProcessDTO implement urlenc.URLValuesUnmarshaler.
func (m *BusinessProcessDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "extBaseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.ExtBaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.ExtBaseParam = val
					} else {
						m.ExtBaseParam = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// BusinessProcessData implement urlenc.URLValuesUnmarshaler.
func (m *BusinessProcessData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DataDomainDTO implement urlenc.URLValuesUnmarshaler.
func (m *DataDomainDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "baseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.BaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.BaseParam = val
					} else {
						m.BaseParam = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// DimDTO implement urlenc.URLValuesUnmarshaler.
func (m *DimDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "extBaseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.ExtBaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.ExtBaseParam = val
					} else {
						m.ExtBaseParam = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ExtBaseParam implement urlenc.URLValuesUnmarshaler.
func (m *ExtBaseParam) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "baseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.BaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.BaseParam = val
					} else {
						m.BaseParam = structpb.NewStringValue(vals[0])
					}
				}
			case "table":
				m.Table = vals[0]
			case "file":
				m.File = vals[0]
			}
		}
	}
	return nil
}

// MarketDomainDTO implement urlenc.URLValuesUnmarshaler.
func (m *MarketDomainDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "baseParam":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.BaseParam = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.BaseParam = val
					} else {
						m.BaseParam = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisBussProcRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisBussProcRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "filePath":
				m.FilePath = vals[0]
			}
		}
	}
	return nil
}

// OneDataAnalysisBussProcResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisBussProcResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisBussProcsRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisBussProcsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "remoteUri":
				m.RemoteUri = vals[0]
			case "businessDomain":
				m.BusinessDomain = vals[0]
			case "dataDomain":
				m.DataDomain = vals[0]
			case "keyWord":
				m.KeyWord = vals[0]
			case "pageSize":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageSize = uint32(val)
			case "pageNo":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageNo = uint32(val)
			}
		}
	}
	return nil
}

// OneDataAnalysisBussProcsResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisBussProcsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisDimRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisDimRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "filePath":
				m.FilePath = vals[0]
			}
		}
	}
	return nil
}

// OneDataAnalysisFuzzyAttrsRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisFuzzyAttrsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "filePath":
				m.FilePath = vals[0]
			case "keyWord":
				m.KeyWord = vals[0]
			case "pageSize":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageSize = uint32(val)
			case "pageNo":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageNo = uint32(val)
			}
		}
	}
	return nil
}

// OneDataAnalysisFuzzyAttrsResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisFuzzyAttrsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisOutputTablesRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisOutputTablesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "remoteUri":
				m.RemoteUri = vals[0]
			case "businessDomain":
				m.BusinessDomain = vals[0]
			case "marketDomain":
				m.MarketDomain = vals[0]
			case "keyWord":
				m.KeyWord = vals[0]
			case "pageSize":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageSize = uint32(val)
			case "pageNo":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageNo = uint32(val)
			}
		}
	}
	return nil
}

// OneDataAnalysisOutputTablesResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisOutputTablesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "remoteUri":
				m.RemoteUri = vals[0]
			}
		}
	}
	return nil
}

// OneDataAnalysisResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataAnalysisStarRequest implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisStarRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "filePath":
				m.FilePath = vals[0]
			}
		}
	}
	return nil
}

// OneDataAnalysisStarResponse implement urlenc.URLValuesUnmarshaler.
func (m *OneDataAnalysisStarResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OneDataDTO implement urlenc.URLValuesUnmarshaler.
func (m *OneDataDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "businessDomain":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.BusinessDomain = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.BusinessDomain = val
					} else {
						m.BusinessDomain = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OutputTableData implement urlenc.URLValuesUnmarshaler.
func (m *OutputTableData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// RelationDTO implement urlenc.URLValuesUnmarshaler.
func (m *RelationDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "sourceAttr":
				m.SourceAttr = vals[0]
			case "relAttr":
				m.RelAttr = vals[0]
			case "isPK":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsPK = val
			}
		}
	}
	return nil
}

// StarDTO implement urlenc.URLValuesUnmarshaler.
func (m *StarDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
