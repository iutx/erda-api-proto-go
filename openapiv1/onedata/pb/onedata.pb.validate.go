// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: onedata.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AtomicIndexDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AtomicIndexDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AtomicIndexDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AtomicIndexDTOMultiError,
// or nil if none found.
func (m *AtomicIndexDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AtomicIndexDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AtomicIndexDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AtomicIndexDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AtomicIndexDTOValidationError{
				field:  "ExtBaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return AtomicIndexDTOMultiError(errors)
	}

	return nil
}

// AtomicIndexDTOMultiError is an error wrapping multiple validation errors
// returned by AtomicIndexDTO.ValidateAll() if the designated constraints
// aren't met.
type AtomicIndexDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AtomicIndexDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AtomicIndexDTOMultiError) AllErrors() []error { return m }

// AtomicIndexDTOValidationError is the validation error returned by
// AtomicIndexDTO.Validate if the designated constraints aren't met.
type AtomicIndexDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AtomicIndexDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AtomicIndexDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AtomicIndexDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AtomicIndexDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AtomicIndexDTOValidationError) ErrorName() string { return "AtomicIndexDTOValidationError" }

// Error satisfies the builtin error interface
func (e AtomicIndexDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAtomicIndexDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AtomicIndexDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AtomicIndexDTOValidationError{}

// Validate checks the field values on AttrData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrDataMultiError, or nil
// if none found.
func (m *AttrData) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AttrDataMultiError(errors)
	}

	return nil
}

// AttrDataMultiError is an error wrapping multiple validation errors returned
// by AttrData.ValidateAll() if the designated constraints aren't met.
type AttrDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrDataMultiError) AllErrors() []error { return m }

// AttrDataValidationError is the validation error returned by
// AttrData.Validate if the designated constraints aren't met.
type AttrDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrDataValidationError) ErrorName() string { return "AttrDataValidationError" }

// Error satisfies the builtin error interface
func (e AttrDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrDataValidationError{}

// Validate checks the field values on BaseParam with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseParam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseParamMultiError, or nil
// if none found.
func (m *BaseParam) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnName

	// no validation rules for CnName

	// no validation rules for Desc

	if len(errors) > 0 {
		return BaseParamMultiError(errors)
	}

	return nil
}

// BaseParamMultiError is an error wrapping multiple validation errors returned
// by BaseParam.ValidateAll() if the designated constraints aren't met.
type BaseParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseParamMultiError) AllErrors() []error { return m }

// BaseParamValidationError is the validation error returned by
// BaseParam.Validate if the designated constraints aren't met.
type BaseParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseParamValidationError) ErrorName() string { return "BaseParamValidationError" }

// Error satisfies the builtin error interface
func (e BaseParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseParamValidationError{}

// Validate checks the field values on BusinessDomainDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BusinessDomainDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessDomainDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessDomainDTOMultiError, or nil if none found.
func (m *BusinessDomainDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessDomainDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessDomainDTOValidationError{
				field:  "BaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessDomainDTOMultiError(errors)
	}

	return nil
}

// BusinessDomainDTOMultiError is an error wrapping multiple validation errors
// returned by BusinessDomainDTO.ValidateAll() if the designated constraints
// aren't met.
type BusinessDomainDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessDomainDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessDomainDTOMultiError) AllErrors() []error { return m }

// BusinessDomainDTOValidationError is the validation error returned by
// BusinessDomainDTO.Validate if the designated constraints aren't met.
type BusinessDomainDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessDomainDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessDomainDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessDomainDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessDomainDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessDomainDTOValidationError) ErrorName() string {
	return "BusinessDomainDTOValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessDomainDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessDomainDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessDomainDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessDomainDTOValidationError{}

// Validate checks the field values on BusinessProcessDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessProcessDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessProcessDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessProcessDTOMultiError, or nil if none found.
func (m *BusinessProcessDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessProcessDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessProcessDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessProcessDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessProcessDTOValidationError{
				field:  "ExtBaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessProcessDTOMultiError(errors)
	}

	return nil
}

// BusinessProcessDTOMultiError is an error wrapping multiple validation errors
// returned by BusinessProcessDTO.ValidateAll() if the designated constraints
// aren't met.
type BusinessProcessDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessProcessDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessProcessDTOMultiError) AllErrors() []error { return m }

// BusinessProcessDTOValidationError is the validation error returned by
// BusinessProcessDTO.Validate if the designated constraints aren't met.
type BusinessProcessDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessProcessDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessProcessDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessProcessDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessProcessDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessProcessDTOValidationError) ErrorName() string {
	return "BusinessProcessDTOValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessProcessDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessProcessDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessProcessDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessProcessDTOValidationError{}

// Validate checks the field values on BusinessProcessData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessProcessData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessProcessData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessProcessDataMultiError, or nil if none found.
func (m *BusinessProcessData) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessProcessData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BusinessProcessDataMultiError(errors)
	}

	return nil
}

// BusinessProcessDataMultiError is an error wrapping multiple validation
// errors returned by BusinessProcessData.ValidateAll() if the designated
// constraints aren't met.
type BusinessProcessDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessProcessDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessProcessDataMultiError) AllErrors() []error { return m }

// BusinessProcessDataValidationError is the validation error returned by
// BusinessProcessData.Validate if the designated constraints aren't met.
type BusinessProcessDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessProcessDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessProcessDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessProcessDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessProcessDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessProcessDataValidationError) ErrorName() string {
	return "BusinessProcessDataValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessProcessDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessProcessData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessProcessDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessProcessDataValidationError{}

// Validate checks the field values on DataDomainDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataDomainDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataDomainDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataDomainDTOMultiError, or
// nil if none found.
func (m *DataDomainDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *DataDomainDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataDomainDTOValidationError{
				field:  "BaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataDomainDTOMultiError(errors)
	}

	return nil
}

// DataDomainDTOMultiError is an error wrapping multiple validation errors
// returned by DataDomainDTO.ValidateAll() if the designated constraints
// aren't met.
type DataDomainDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataDomainDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataDomainDTOMultiError) AllErrors() []error { return m }

// DataDomainDTOValidationError is the validation error returned by
// DataDomainDTO.Validate if the designated constraints aren't met.
type DataDomainDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataDomainDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataDomainDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataDomainDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataDomainDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataDomainDTOValidationError) ErrorName() string { return "DataDomainDTOValidationError" }

// Error satisfies the builtin error interface
func (e DataDomainDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataDomainDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataDomainDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataDomainDTOValidationError{}

// Validate checks the field values on DimDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DimDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DimDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DimDTOMultiError, or nil if none found.
func (m *DimDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *DimDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DimDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DimDTOValidationError{
					field:  "ExtBaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DimDTOValidationError{
				field:  "ExtBaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DimDTOValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DimDTOValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DimDTOValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DimDTOMultiError(errors)
	}

	return nil
}

// DimDTOMultiError is an error wrapping multiple validation errors returned by
// DimDTO.ValidateAll() if the designated constraints aren't met.
type DimDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DimDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DimDTOMultiError) AllErrors() []error { return m }

// DimDTOValidationError is the validation error returned by DimDTO.Validate if
// the designated constraints aren't met.
type DimDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DimDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DimDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DimDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DimDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DimDTOValidationError) ErrorName() string { return "DimDTOValidationError" }

// Error satisfies the builtin error interface
func (e DimDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDimDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DimDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DimDTOValidationError{}

// Validate checks the field values on ExtBaseParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtBaseParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtBaseParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtBaseParamMultiError, or
// nil if none found.
func (m *ExtBaseParam) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtBaseParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtBaseParamValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtBaseParamValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtBaseParamValidationError{
				field:  "BaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Table

	// no validation rules for File

	if len(errors) > 0 {
		return ExtBaseParamMultiError(errors)
	}

	return nil
}

// ExtBaseParamMultiError is an error wrapping multiple validation errors
// returned by ExtBaseParam.ValidateAll() if the designated constraints aren't met.
type ExtBaseParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtBaseParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtBaseParamMultiError) AllErrors() []error { return m }

// ExtBaseParamValidationError is the validation error returned by
// ExtBaseParam.Validate if the designated constraints aren't met.
type ExtBaseParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtBaseParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtBaseParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtBaseParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtBaseParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtBaseParamValidationError) ErrorName() string { return "ExtBaseParamValidationError" }

// Error satisfies the builtin error interface
func (e ExtBaseParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtBaseParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtBaseParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtBaseParamValidationError{}

// Validate checks the field values on MarketDomainDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarketDomainDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarketDomainDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarketDomainDTOMultiError, or nil if none found.
func (m *MarketDomainDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *MarketDomainDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarketDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarketDomainDTOValidationError{
					field:  "BaseParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarketDomainDTOValidationError{
				field:  "BaseParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarketDomainDTOMultiError(errors)
	}

	return nil
}

// MarketDomainDTOMultiError is an error wrapping multiple validation errors
// returned by MarketDomainDTO.ValidateAll() if the designated constraints
// aren't met.
type MarketDomainDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarketDomainDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarketDomainDTOMultiError) AllErrors() []error { return m }

// MarketDomainDTOValidationError is the validation error returned by
// MarketDomainDTO.Validate if the designated constraints aren't met.
type MarketDomainDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarketDomainDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarketDomainDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarketDomainDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarketDomainDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarketDomainDTOValidationError) ErrorName() string { return "MarketDomainDTOValidationError" }

// Error satisfies the builtin error interface
func (e MarketDomainDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarketDomainDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarketDomainDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarketDomainDTOValidationError{}

// Validate checks the field values on OneDataAnalysisBussProcRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisBussProcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisBussProcRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisBussProcRequestMultiError, or nil if none found.
func (m *OneDataAnalysisBussProcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisBussProcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	if len(errors) > 0 {
		return OneDataAnalysisBussProcRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisBussProcRequestMultiError is an error wrapping multiple
// validation errors returned by OneDataAnalysisBussProcRequest.ValidateAll()
// if the designated constraints aren't met.
type OneDataAnalysisBussProcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisBussProcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisBussProcRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisBussProcRequestValidationError is the validation error
// returned by OneDataAnalysisBussProcRequest.Validate if the designated
// constraints aren't met.
type OneDataAnalysisBussProcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisBussProcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisBussProcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisBussProcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisBussProcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisBussProcRequestValidationError) ErrorName() string {
	return "OneDataAnalysisBussProcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisBussProcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisBussProcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisBussProcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisBussProcRequestValidationError{}

// Validate checks the field values on OneDataAnalysisBussProcResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisBussProcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisBussProcResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisBussProcResponseMultiError, or nil if none found.
func (m *OneDataAnalysisBussProcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisBussProcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisBussProcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisBussProcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisBussProcResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisBussProcResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisBussProcResponseMultiError is an error wrapping multiple
// validation errors returned by OneDataAnalysisBussProcResponse.ValidateAll()
// if the designated constraints aren't met.
type OneDataAnalysisBussProcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisBussProcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisBussProcResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisBussProcResponseValidationError is the validation error
// returned by OneDataAnalysisBussProcResponse.Validate if the designated
// constraints aren't met.
type OneDataAnalysisBussProcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisBussProcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisBussProcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisBussProcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisBussProcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisBussProcResponseValidationError) ErrorName() string {
	return "OneDataAnalysisBussProcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisBussProcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisBussProcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisBussProcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisBussProcResponseValidationError{}

// Validate checks the field values on OneDataAnalysisBussProcsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisBussProcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisBussProcsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisBussProcsRequestMultiError, or nil if none found.
func (m *OneDataAnalysisBussProcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisBussProcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteUri

	// no validation rules for BusinessDomain

	// no validation rules for DataDomain

	// no validation rules for KeyWord

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return OneDataAnalysisBussProcsRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisBussProcsRequestMultiError is an error wrapping multiple
// validation errors returned by OneDataAnalysisBussProcsRequest.ValidateAll()
// if the designated constraints aren't met.
type OneDataAnalysisBussProcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisBussProcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisBussProcsRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisBussProcsRequestValidationError is the validation error
// returned by OneDataAnalysisBussProcsRequest.Validate if the designated
// constraints aren't met.
type OneDataAnalysisBussProcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisBussProcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisBussProcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisBussProcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisBussProcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisBussProcsRequestValidationError) ErrorName() string {
	return "OneDataAnalysisBussProcsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisBussProcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisBussProcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisBussProcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisBussProcsRequestValidationError{}

// Validate checks the field values on OneDataAnalysisBussProcsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OneDataAnalysisBussProcsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisBussProcsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisBussProcsResponseMultiError, or nil if none found.
func (m *OneDataAnalysisBussProcsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisBussProcsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisBussProcsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisBussProcsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisBussProcsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisBussProcsResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisBussProcsResponseMultiError is an error wrapping multiple
// validation errors returned by
// OneDataAnalysisBussProcsResponse.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisBussProcsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisBussProcsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisBussProcsResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisBussProcsResponseValidationError is the validation error
// returned by OneDataAnalysisBussProcsResponse.Validate if the designated
// constraints aren't met.
type OneDataAnalysisBussProcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisBussProcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisBussProcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisBussProcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisBussProcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisBussProcsResponseValidationError) ErrorName() string {
	return "OneDataAnalysisBussProcsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisBussProcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisBussProcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisBussProcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisBussProcsResponseValidationError{}

// Validate checks the field values on OneDataAnalysisDimRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisDimRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisDimRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneDataAnalysisDimRequestMultiError, or nil if none found.
func (m *OneDataAnalysisDimRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisDimRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	if len(errors) > 0 {
		return OneDataAnalysisDimRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisDimRequestMultiError is an error wrapping multiple validation
// errors returned by OneDataAnalysisDimRequest.ValidateAll() if the
// designated constraints aren't met.
type OneDataAnalysisDimRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisDimRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisDimRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisDimRequestValidationError is the validation error returned by
// OneDataAnalysisDimRequest.Validate if the designated constraints aren't met.
type OneDataAnalysisDimRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisDimRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisDimRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisDimRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisDimRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisDimRequestValidationError) ErrorName() string {
	return "OneDataAnalysisDimRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisDimRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisDimRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisDimRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisDimRequestValidationError{}

// Validate checks the field values on OneDataAnalysisFuzzyAttrsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OneDataAnalysisFuzzyAttrsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisFuzzyAttrsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisFuzzyAttrsRequestMultiError, or nil if none found.
func (m *OneDataAnalysisFuzzyAttrsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisFuzzyAttrsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	// no validation rules for KeyWord

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return OneDataAnalysisFuzzyAttrsRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisFuzzyAttrsRequestMultiError is an error wrapping multiple
// validation errors returned by
// OneDataAnalysisFuzzyAttrsRequest.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisFuzzyAttrsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisFuzzyAttrsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisFuzzyAttrsRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisFuzzyAttrsRequestValidationError is the validation error
// returned by OneDataAnalysisFuzzyAttrsRequest.Validate if the designated
// constraints aren't met.
type OneDataAnalysisFuzzyAttrsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) ErrorName() string {
	return "OneDataAnalysisFuzzyAttrsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisFuzzyAttrsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisFuzzyAttrsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisFuzzyAttrsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisFuzzyAttrsRequestValidationError{}

// Validate checks the field values on OneDataAnalysisFuzzyAttrsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OneDataAnalysisFuzzyAttrsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisFuzzyAttrsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisFuzzyAttrsResponseMultiError, or nil if none found.
func (m *OneDataAnalysisFuzzyAttrsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisFuzzyAttrsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisFuzzyAttrsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisFuzzyAttrsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisFuzzyAttrsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisFuzzyAttrsResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisFuzzyAttrsResponseMultiError is an error wrapping multiple
// validation errors returned by
// OneDataAnalysisFuzzyAttrsResponse.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisFuzzyAttrsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisFuzzyAttrsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisFuzzyAttrsResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisFuzzyAttrsResponseValidationError is the validation error
// returned by OneDataAnalysisFuzzyAttrsResponse.Validate if the designated
// constraints aren't met.
type OneDataAnalysisFuzzyAttrsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) ErrorName() string {
	return "OneDataAnalysisFuzzyAttrsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisFuzzyAttrsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisFuzzyAttrsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisFuzzyAttrsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisFuzzyAttrsResponseValidationError{}

// Validate checks the field values on OneDataAnalysisOutputTablesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OneDataAnalysisOutputTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisOutputTablesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisOutputTablesRequestMultiError, or nil if none found.
func (m *OneDataAnalysisOutputTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisOutputTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteUri

	// no validation rules for BusinessDomain

	// no validation rules for MarketDomain

	// no validation rules for KeyWord

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return OneDataAnalysisOutputTablesRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisOutputTablesRequestMultiError is an error wrapping multiple
// validation errors returned by
// OneDataAnalysisOutputTablesRequest.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisOutputTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisOutputTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisOutputTablesRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisOutputTablesRequestValidationError is the validation error
// returned by OneDataAnalysisOutputTablesRequest.Validate if the designated
// constraints aren't met.
type OneDataAnalysisOutputTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisOutputTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisOutputTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisOutputTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisOutputTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisOutputTablesRequestValidationError) ErrorName() string {
	return "OneDataAnalysisOutputTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisOutputTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisOutputTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisOutputTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisOutputTablesRequestValidationError{}

// Validate checks the field values on OneDataAnalysisOutputTablesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OneDataAnalysisOutputTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisOutputTablesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OneDataAnalysisOutputTablesResponseMultiError, or nil if none found.
func (m *OneDataAnalysisOutputTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisOutputTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisOutputTablesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisOutputTablesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisOutputTablesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisOutputTablesResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisOutputTablesResponseMultiError is an error wrapping multiple
// validation errors returned by
// OneDataAnalysisOutputTablesResponse.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisOutputTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisOutputTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisOutputTablesResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisOutputTablesResponseValidationError is the validation error
// returned by OneDataAnalysisOutputTablesResponse.Validate if the designated
// constraints aren't met.
type OneDataAnalysisOutputTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisOutputTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisOutputTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisOutputTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisOutputTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisOutputTablesResponseValidationError) ErrorName() string {
	return "OneDataAnalysisOutputTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisOutputTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisOutputTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisOutputTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisOutputTablesResponseValidationError{}

// Validate checks the field values on OneDataAnalysisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneDataAnalysisRequestMultiError, or nil if none found.
func (m *OneDataAnalysisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteUri

	if len(errors) > 0 {
		return OneDataAnalysisRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisRequestMultiError is an error wrapping multiple validation
// errors returned by OneDataAnalysisRequest.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisRequestValidationError is the validation error returned by
// OneDataAnalysisRequest.Validate if the designated constraints aren't met.
type OneDataAnalysisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisRequestValidationError) ErrorName() string {
	return "OneDataAnalysisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisRequestValidationError{}

// Validate checks the field values on OneDataAnalysisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneDataAnalysisResponseMultiError, or nil if none found.
func (m *OneDataAnalysisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisResponseMultiError is an error wrapping multiple validation
// errors returned by OneDataAnalysisResponse.ValidateAll() if the designated
// constraints aren't met.
type OneDataAnalysisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisResponseValidationError is the validation error returned by
// OneDataAnalysisResponse.Validate if the designated constraints aren't met.
type OneDataAnalysisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisResponseValidationError) ErrorName() string {
	return "OneDataAnalysisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisResponseValidationError{}

// Validate checks the field values on OneDataAnalysisStarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisStarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisStarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneDataAnalysisStarRequestMultiError, or nil if none found.
func (m *OneDataAnalysisStarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisStarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	if len(errors) > 0 {
		return OneDataAnalysisStarRequestMultiError(errors)
	}

	return nil
}

// OneDataAnalysisStarRequestMultiError is an error wrapping multiple
// validation errors returned by OneDataAnalysisStarRequest.ValidateAll() if
// the designated constraints aren't met.
type OneDataAnalysisStarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisStarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisStarRequestMultiError) AllErrors() []error { return m }

// OneDataAnalysisStarRequestValidationError is the validation error returned
// by OneDataAnalysisStarRequest.Validate if the designated constraints aren't met.
type OneDataAnalysisStarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisStarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisStarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisStarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisStarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisStarRequestValidationError) ErrorName() string {
	return "OneDataAnalysisStarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisStarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisStarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisStarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisStarRequestValidationError{}

// Validate checks the field values on OneDataAnalysisStarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OneDataAnalysisStarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataAnalysisStarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneDataAnalysisStarResponseMultiError, or nil if none found.
func (m *OneDataAnalysisStarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataAnalysisStarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataAnalysisStarResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataAnalysisStarResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataAnalysisStarResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OneDataAnalysisStarResponseMultiError(errors)
	}

	return nil
}

// OneDataAnalysisStarResponseMultiError is an error wrapping multiple
// validation errors returned by OneDataAnalysisStarResponse.ValidateAll() if
// the designated constraints aren't met.
type OneDataAnalysisStarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataAnalysisStarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataAnalysisStarResponseMultiError) AllErrors() []error { return m }

// OneDataAnalysisStarResponseValidationError is the validation error returned
// by OneDataAnalysisStarResponse.Validate if the designated constraints
// aren't met.
type OneDataAnalysisStarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataAnalysisStarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataAnalysisStarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataAnalysisStarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataAnalysisStarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataAnalysisStarResponseValidationError) ErrorName() string {
	return "OneDataAnalysisStarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneDataAnalysisStarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataAnalysisStarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataAnalysisStarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataAnalysisStarResponseValidationError{}

// Validate checks the field values on OneDataDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OneDataDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneDataDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OneDataDTOMultiError, or
// nil if none found.
func (m *OneDataDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *OneDataDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OneDataDTOValidationError{
					field:  "BusinessDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OneDataDTOValidationError{
					field:  "BusinessDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OneDataDTOValidationError{
				field:  "BusinessDomain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneDataDTOValidationError{
						field:  fmt.Sprintf("DataDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneDataDTOValidationError{
						field:  fmt.Sprintf("DataDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneDataDTOValidationError{
					field:  fmt.Sprintf("DataDomains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMarketDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneDataDTOValidationError{
						field:  fmt.Sprintf("MarketDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneDataDTOValidationError{
						field:  fmt.Sprintf("MarketDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneDataDTOValidationError{
					field:  fmt.Sprintf("MarketDomains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OneDataDTOMultiError(errors)
	}

	return nil
}

// OneDataDTOMultiError is an error wrapping multiple validation errors
// returned by OneDataDTO.ValidateAll() if the designated constraints aren't met.
type OneDataDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneDataDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneDataDTOMultiError) AllErrors() []error { return m }

// OneDataDTOValidationError is the validation error returned by
// OneDataDTO.Validate if the designated constraints aren't met.
type OneDataDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneDataDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneDataDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneDataDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneDataDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneDataDTOValidationError) ErrorName() string { return "OneDataDTOValidationError" }

// Error satisfies the builtin error interface
func (e OneDataDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneDataDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneDataDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneDataDTOValidationError{}

// Validate checks the field values on OutputTableData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OutputTableData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutputTableData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OutputTableDataMultiError, or nil if none found.
func (m *OutputTableData) ValidateAll() error {
	return m.validate(true)
}

func (m *OutputTableData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OutputTableDataMultiError(errors)
	}

	return nil
}

// OutputTableDataMultiError is an error wrapping multiple validation errors
// returned by OutputTableData.ValidateAll() if the designated constraints
// aren't met.
type OutputTableDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputTableDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputTableDataMultiError) AllErrors() []error { return m }

// OutputTableDataValidationError is the validation error returned by
// OutputTableData.Validate if the designated constraints aren't met.
type OutputTableDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputTableDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputTableDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputTableDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputTableDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputTableDataValidationError) ErrorName() string { return "OutputTableDataValidationError" }

// Error satisfies the builtin error interface
func (e OutputTableDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputTableData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputTableDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputTableDataValidationError{}

// Validate checks the field values on RelationDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelationDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationDTOMultiError, or
// nil if none found.
func (m *RelationDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SourceAttr

	// no validation rules for RelAttr

	// no validation rules for IsPK

	if len(errors) > 0 {
		return RelationDTOMultiError(errors)
	}

	return nil
}

// RelationDTOMultiError is an error wrapping multiple validation errors
// returned by RelationDTO.ValidateAll() if the designated constraints aren't met.
type RelationDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationDTOMultiError) AllErrors() []error { return m }

// RelationDTOValidationError is the validation error returned by
// RelationDTO.Validate if the designated constraints aren't met.
type RelationDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationDTOValidationError) ErrorName() string { return "RelationDTOValidationError" }

// Error satisfies the builtin error interface
func (e RelationDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationDTOValidationError{}

// Validate checks the field values on StarDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StarDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StarDTOMultiError, or nil if none found.
func (m *StarDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *StarDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDims() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StarDTOValidationError{
						field:  fmt.Sprintf("Dims[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StarDTOValidationError{
						field:  fmt.Sprintf("Dims[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StarDTOValidationError{
					field:  fmt.Sprintf("Dims[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAtomicIndices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StarDTOValidationError{
						field:  fmt.Sprintf("AtomicIndices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StarDTOValidationError{
						field:  fmt.Sprintf("AtomicIndices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StarDTOValidationError{
					field:  fmt.Sprintf("AtomicIndices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetRelationGroup()))
		i := 0
		for key := range m.GetRelationGroup() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRelationGroup()[key]
			_ = val

			// no validation rules for RelationGroup[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StarDTOValidationError{
							field:  fmt.Sprintf("RelationGroup[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StarDTOValidationError{
							field:  fmt.Sprintf("RelationGroup[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StarDTOValidationError{
						field:  fmt.Sprintf("RelationGroup[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return StarDTOMultiError(errors)
	}

	return nil
}

// StarDTOMultiError is an error wrapping multiple validation errors returned
// by StarDTO.ValidateAll() if the designated constraints aren't met.
type StarDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarDTOMultiError) AllErrors() []error { return m }

// StarDTOValidationError is the validation error returned by StarDTO.Validate
// if the designated constraints aren't met.
type StarDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarDTOValidationError) ErrorName() string { return "StarDTOValidationError" }

// Error satisfies the builtin error interface
func (e StarDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarDTOValidationError{}
