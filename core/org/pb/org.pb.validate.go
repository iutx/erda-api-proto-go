// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: org.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgRequestMultiError, or nil if none found.
func (m *CreateOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Locale

	// no validation rules for PublisherName

	// no validation rules for IsPublic

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateOrgRequestMultiError(errors)
	}

	return nil
}

// CreateOrgRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgRequestMultiError) AllErrors() []error { return m }

// CreateOrgRequestValidationError is the validation error returned by
// CreateOrgRequest.Validate if the designated constraints aren't met.
type CreateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgRequestValidationError) ErrorName() string { return "CreateOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgRequestValidationError{}

// Validate checks the field values on CreateOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgResponseMultiError, or nil if none found.
func (m *CreateOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgResponseMultiError(errors)
	}

	return nil
}

// CreateOrgResponseMultiError is an error wrapping multiple validation errors
// returned by CreateOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgResponseMultiError) AllErrors() []error { return m }

// CreateOrgResponseValidationError is the validation error returned by
// CreateOrgResponse.Validate if the designated constraints aren't met.
type CreateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgResponseValidationError) ErrorName() string {
	return "CreateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgResponseValidationError{}

// Validate checks the field values on UpdateOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgRequestMultiError, or nil if none found.
func (m *UpdateOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Locale

	// no validation rules for ID

	// no validation rules for PublisherName

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBlockoutConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockoutConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgRequestValidationError{
				field:  "BlockoutConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsPublic

	// no validation rules for OrgID

	if len(errors) > 0 {
		return UpdateOrgRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgRequestMultiError) AllErrors() []error { return m }

// UpdateOrgRequestValidationError is the validation error returned by
// UpdateOrgRequest.Validate if the designated constraints aren't met.
type UpdateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgRequestValidationError) ErrorName() string { return "UpdateOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgRequestValidationError{}

// Validate checks the field values on UpdateOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgResponseMultiError, or nil if none found.
func (m *UpdateOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgResponseMultiError) AllErrors() []error { return m }

// UpdateOrgResponseValidationError is the validation error returned by
// UpdateOrgResponse.Validate if the designated constraints aren't met.
type UpdateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgResponseValidationError) ErrorName() string {
	return "UpdateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgResponseValidationError{}

// Validate checks the field values on GetOrgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgRequestMultiError, or
// nil if none found.
func (m *GetOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdOrName

	if len(errors) > 0 {
		return GetOrgRequestMultiError(errors)
	}

	return nil
}

// GetOrgRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgRequestMultiError) AllErrors() []error { return m }

// GetOrgRequestValidationError is the validation error returned by
// GetOrgRequest.Validate if the designated constraints aren't met.
type GetOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgRequestValidationError) ErrorName() string { return "GetOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgRequestValidationError{}

// Validate checks the field values on GetOrgResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgResponseMultiError,
// or nil if none found.
func (m *GetOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgResponseMultiError(errors)
	}

	return nil
}

// GetOrgResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgResponseMultiError) AllErrors() []error { return m }

// GetOrgResponseValidationError is the validation error returned by
// GetOrgResponse.Validate if the designated constraints aren't met.
type GetOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgResponseValidationError) ErrorName() string { return "GetOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgResponseValidationError{}

// Validate checks the field values on DeleteOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgRequestMultiError, or nil if none found.
func (m *DeleteOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdOrName

	if len(errors) > 0 {
		return DeleteOrgRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgRequestMultiError) AllErrors() []error { return m }

// DeleteOrgRequestValidationError is the validation error returned by
// DeleteOrgRequest.Validate if the designated constraints aren't met.
type DeleteOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgRequestValidationError) ErrorName() string { return "DeleteOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgRequestValidationError{}

// Validate checks the field values on DeleteOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgResponseMultiError, or nil if none found.
func (m *DeleteOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOrgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOrgResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOrgResponseMultiError(errors)
	}

	return nil
}

// DeleteOrgResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgResponseMultiError) AllErrors() []error { return m }

// DeleteOrgResponseValidationError is the validation error returned by
// DeleteOrgResponse.Validate if the designated constraints aren't met.
type DeleteOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgResponseValidationError) ErrorName() string {
	return "DeleteOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgResponseValidationError{}

// Validate checks the field values on ListOrgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrgRequestMultiError,
// or nil if none found.
func (m *ListOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Q

	// no validation rules for Key

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Joined

	if len(errors) > 0 {
		return ListOrgRequestMultiError(errors)
	}

	return nil
}

// ListOrgRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgRequestMultiError) AllErrors() []error { return m }

// ListOrgRequestValidationError is the validation error returned by
// ListOrgRequest.Validate if the designated constraints aren't met.
type ListOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgRequestValidationError) ErrorName() string { return "ListOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgRequestValidationError{}

// Validate checks the field values on ListOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgResponseMultiError, or nil if none found.
func (m *ListOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListOrgResponseMultiError(errors)
	}

	return nil
}

// ListOrgResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgResponseMultiError) AllErrors() []error { return m }

// ListOrgResponseValidationError is the validation error returned by
// ListOrgResponse.Validate if the designated constraints aren't met.
type ListOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgResponseValidationError) ErrorName() string { return "ListOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgResponseValidationError{}

// Validate checks the field values on GetOrgByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgByDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgByDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgByDomainRequestMultiError, or nil if none found.
func (m *GetOrgByDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgByDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for OrgName

	if len(errors) > 0 {
		return GetOrgByDomainRequestMultiError(errors)
	}

	return nil
}

// GetOrgByDomainRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrgByDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgByDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgByDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgByDomainRequestMultiError) AllErrors() []error { return m }

// GetOrgByDomainRequestValidationError is the validation error returned by
// GetOrgByDomainRequest.Validate if the designated constraints aren't met.
type GetOrgByDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByDomainRequestValidationError) ErrorName() string {
	return "GetOrgByDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByDomainRequestValidationError{}

// Validate checks the field values on GetOrgByDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgByDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgByDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgByDomainResponseMultiError, or nil if none found.
func (m *GetOrgByDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgByDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgByDomainResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgByDomainResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgByDomainResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgByDomainResponseMultiError(errors)
	}

	return nil
}

// GetOrgByDomainResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrgByDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrgByDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgByDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgByDomainResponseMultiError) AllErrors() []error { return m }

// GetOrgByDomainResponseValidationError is the validation error returned by
// GetOrgByDomainResponse.Validate if the designated constraints aren't met.
type GetOrgByDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByDomainResponseValidationError) ErrorName() string {
	return "GetOrgByDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByDomainResponseValidationError{}

// Validate checks the field values on ChangeCurrentOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeCurrentOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeCurrentOrgRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeCurrentOrgRequestMultiError, or nil if none found.
func (m *ChangeCurrentOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeCurrentOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for UserID

	if len(errors) > 0 {
		return ChangeCurrentOrgRequestMultiError(errors)
	}

	return nil
}

// ChangeCurrentOrgRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeCurrentOrgRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeCurrentOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeCurrentOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeCurrentOrgRequestMultiError) AllErrors() []error { return m }

// ChangeCurrentOrgRequestValidationError is the validation error returned by
// ChangeCurrentOrgRequest.Validate if the designated constraints aren't met.
type ChangeCurrentOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCurrentOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCurrentOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCurrentOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCurrentOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCurrentOrgRequestValidationError) ErrorName() string {
	return "ChangeCurrentOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCurrentOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCurrentOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCurrentOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCurrentOrgRequestValidationError{}

// Validate checks the field values on ChangeCurrentOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeCurrentOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeCurrentOrgResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeCurrentOrgResponseMultiError, or nil if none found.
func (m *ChangeCurrentOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeCurrentOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeCurrentOrgResponseMultiError(errors)
	}

	return nil
}

// ChangeCurrentOrgResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeCurrentOrgResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeCurrentOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeCurrentOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeCurrentOrgResponseMultiError) AllErrors() []error { return m }

// ChangeCurrentOrgResponseValidationError is the validation error returned by
// ChangeCurrentOrgResponse.Validate if the designated constraints aren't met.
type ChangeCurrentOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCurrentOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCurrentOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCurrentOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCurrentOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCurrentOrgResponseValidationError) ErrorName() string {
	return "ChangeCurrentOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCurrentOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCurrentOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCurrentOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCurrentOrgResponseValidationError{}

// Validate checks the field values on OrgClusterRelationCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterRelationCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterRelationCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgClusterRelationCreateRequestMultiError, or nil if none found.
func (m *OrgClusterRelationCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterRelationCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return OrgClusterRelationCreateRequestMultiError(errors)
	}

	return nil
}

// OrgClusterRelationCreateRequestMultiError is an error wrapping multiple
// validation errors returned by OrgClusterRelationCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type OrgClusterRelationCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterRelationCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterRelationCreateRequestMultiError) AllErrors() []error { return m }

// OrgClusterRelationCreateRequestValidationError is the validation error
// returned by OrgClusterRelationCreateRequest.Validate if the designated
// constraints aren't met.
type OrgClusterRelationCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterRelationCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterRelationCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterRelationCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterRelationCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterRelationCreateRequestValidationError) ErrorName() string {
	return "OrgClusterRelationCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterRelationCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterRelationCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterRelationCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterRelationCreateRequestValidationError{}

// Validate checks the field values on OrgClusterRelationCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OrgClusterRelationCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterRelationCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgClusterRelationCreateResponseMultiError, or nil if none found.
func (m *OrgClusterRelationCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterRelationCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return OrgClusterRelationCreateResponseMultiError(errors)
	}

	return nil
}

// OrgClusterRelationCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// OrgClusterRelationCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type OrgClusterRelationCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterRelationCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterRelationCreateResponseMultiError) AllErrors() []error { return m }

// OrgClusterRelationCreateResponseValidationError is the validation error
// returned by OrgClusterRelationCreateResponse.Validate if the designated
// constraints aren't met.
type OrgClusterRelationCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterRelationCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterRelationCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterRelationCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterRelationCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterRelationCreateResponseValidationError) ErrorName() string {
	return "OrgClusterRelationCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterRelationCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterRelationCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterRelationCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterRelationCreateResponseValidationError{}

// Validate checks the field values on ListOrgClusterRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgClusterRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgClusterRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrgClusterRelationRequestMultiError, or nil if none found.
func (m *ListOrgClusterRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgClusterRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	if len(errors) > 0 {
		return ListOrgClusterRelationRequestMultiError(errors)
	}

	return nil
}

// ListOrgClusterRelationRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrgClusterRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrgClusterRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgClusterRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgClusterRelationRequestMultiError) AllErrors() []error { return m }

// ListOrgClusterRelationRequestValidationError is the validation error
// returned by ListOrgClusterRelationRequest.Validate if the designated
// constraints aren't met.
type ListOrgClusterRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgClusterRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgClusterRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgClusterRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgClusterRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgClusterRelationRequestValidationError) ErrorName() string {
	return "ListOrgClusterRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgClusterRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgClusterRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgClusterRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgClusterRelationRequestValidationError{}

// Validate checks the field values on ListOrgClusterRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgClusterRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgClusterRelationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrgClusterRelationResponseMultiError, or nil if none found.
func (m *ListOrgClusterRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgClusterRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgClusterRelationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgClusterRelationResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgClusterRelationResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgClusterRelationResponseMultiError(errors)
	}

	return nil
}

// ListOrgClusterRelationResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrgClusterRelationResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrgClusterRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgClusterRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgClusterRelationResponseMultiError) AllErrors() []error { return m }

// ListOrgClusterRelationResponseValidationError is the validation error
// returned by ListOrgClusterRelationResponse.Validate if the designated
// constraints aren't met.
type ListOrgClusterRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgClusterRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgClusterRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgClusterRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgClusterRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgClusterRelationResponseValidationError) ErrorName() string {
	return "ListOrgClusterRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgClusterRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgClusterRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgClusterRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgClusterRelationResponseValidationError{}

// Validate checks the field values on OrgClusterRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgClusterRelationMultiError, or nil if none found.
func (m *OrgClusterRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgClusterRelationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgClusterRelationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgClusterRelationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgClusterRelationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgClusterRelationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgClusterRelationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgClusterRelationMultiError(errors)
	}

	return nil
}

// OrgClusterRelationMultiError is an error wrapping multiple validation errors
// returned by OrgClusterRelation.ValidateAll() if the designated constraints
// aren't met.
type OrgClusterRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterRelationMultiError) AllErrors() []error { return m }

// OrgClusterRelationValidationError is the validation error returned by
// OrgClusterRelation.Validate if the designated constraints aren't met.
type OrgClusterRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterRelationValidationError) ErrorName() string {
	return "OrgClusterRelationValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterRelationValidationError{}

// Validate checks the field values on SetReleaseCrossClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetReleaseCrossClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetReleaseCrossClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetReleaseCrossClusterRequestMultiError, or nil if none found.
func (m *SetReleaseCrossClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetReleaseCrossClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for OrgID

	if len(errors) > 0 {
		return SetReleaseCrossClusterRequestMultiError(errors)
	}

	return nil
}

// SetReleaseCrossClusterRequestMultiError is an error wrapping multiple
// validation errors returned by SetReleaseCrossClusterRequest.ValidateAll()
// if the designated constraints aren't met.
type SetReleaseCrossClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetReleaseCrossClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetReleaseCrossClusterRequestMultiError) AllErrors() []error { return m }

// SetReleaseCrossClusterRequestValidationError is the validation error
// returned by SetReleaseCrossClusterRequest.Validate if the designated
// constraints aren't met.
type SetReleaseCrossClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetReleaseCrossClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetReleaseCrossClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetReleaseCrossClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetReleaseCrossClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetReleaseCrossClusterRequestValidationError) ErrorName() string {
	return "SetReleaseCrossClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetReleaseCrossClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetReleaseCrossClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetReleaseCrossClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetReleaseCrossClusterRequestValidationError{}

// Validate checks the field values on SetReleaseCrossClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetReleaseCrossClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetReleaseCrossClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetReleaseCrossClusterResponseMultiError, or nil if none found.
func (m *SetReleaseCrossClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetReleaseCrossClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetReleaseCrossClusterResponseMultiError(errors)
	}

	return nil
}

// SetReleaseCrossClusterResponseMultiError is an error wrapping multiple
// validation errors returned by SetReleaseCrossClusterResponse.ValidateAll()
// if the designated constraints aren't met.
type SetReleaseCrossClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetReleaseCrossClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetReleaseCrossClusterResponseMultiError) AllErrors() []error { return m }

// SetReleaseCrossClusterResponseValidationError is the validation error
// returned by SetReleaseCrossClusterResponse.Validate if the designated
// constraints aren't met.
type SetReleaseCrossClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetReleaseCrossClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetReleaseCrossClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetReleaseCrossClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetReleaseCrossClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetReleaseCrossClusterResponseValidationError) ErrorName() string {
	return "SetReleaseCrossClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetReleaseCrossClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetReleaseCrossClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetReleaseCrossClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetReleaseCrossClusterResponseValidationError{}

// Validate checks the field values on GenVerifyCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenVerifyCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenVerifyCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenVerifyCodeRequestMultiError, or nil if none found.
func (m *GenVerifyCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenVerifyCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenVerifyCodeRequestMultiError(errors)
	}

	return nil
}

// GenVerifyCodeRequestMultiError is an error wrapping multiple validation
// errors returned by GenVerifyCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type GenVerifyCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenVerifyCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenVerifyCodeRequestMultiError) AllErrors() []error { return m }

// GenVerifyCodeRequestValidationError is the validation error returned by
// GenVerifyCodeRequest.Validate if the designated constraints aren't met.
type GenVerifyCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenVerifyCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenVerifyCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenVerifyCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenVerifyCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenVerifyCodeRequestValidationError) ErrorName() string {
	return "GenVerifyCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenVerifyCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenVerifyCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenVerifyCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenVerifyCodeRequestValidationError{}

// Validate checks the field values on GenVerifyCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenVerifyCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenVerifyCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenVerifyCodeResponseMultiError, or nil if none found.
func (m *GenVerifyCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenVerifyCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GenVerifyCodeResponseMultiError(errors)
	}

	return nil
}

// GenVerifyCodeResponseMultiError is an error wrapping multiple validation
// errors returned by GenVerifyCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type GenVerifyCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenVerifyCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenVerifyCodeResponseMultiError) AllErrors() []error { return m }

// GenVerifyCodeResponseValidationError is the validation error returned by
// GenVerifyCodeResponse.Validate if the designated constraints aren't met.
type GenVerifyCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenVerifyCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenVerifyCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenVerifyCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenVerifyCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenVerifyCodeResponseValidationError) ErrorName() string {
	return "GenVerifyCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenVerifyCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenVerifyCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenVerifyCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenVerifyCodeResponseValidationError{}

// Validate checks the field values on SetNotifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetNotifyConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetNotifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetNotifyConfigRequestMultiError, or nil if none found.
func (m *SetNotifyConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetNotifyConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetNotifyConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetNotifyConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetNotifyConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	if len(errors) > 0 {
		return SetNotifyConfigRequestMultiError(errors)
	}

	return nil
}

// SetNotifyConfigRequestMultiError is an error wrapping multiple validation
// errors returned by SetNotifyConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type SetNotifyConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetNotifyConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetNotifyConfigRequestMultiError) AllErrors() []error { return m }

// SetNotifyConfigRequestValidationError is the validation error returned by
// SetNotifyConfigRequest.Validate if the designated constraints aren't met.
type SetNotifyConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetNotifyConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetNotifyConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetNotifyConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetNotifyConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetNotifyConfigRequestValidationError) ErrorName() string {
	return "SetNotifyConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetNotifyConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetNotifyConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetNotifyConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetNotifyConfigRequestValidationError{}

// Validate checks the field values on SetNotifyConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetNotifyConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetNotifyConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetNotifyConfigResponseMultiError, or nil if none found.
func (m *SetNotifyConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetNotifyConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return SetNotifyConfigResponseMultiError(errors)
	}

	return nil
}

// SetNotifyConfigResponseMultiError is an error wrapping multiple validation
// errors returned by SetNotifyConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type SetNotifyConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetNotifyConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetNotifyConfigResponseMultiError) AllErrors() []error { return m }

// SetNotifyConfigResponseValidationError is the validation error returned by
// SetNotifyConfigResponse.Validate if the designated constraints aren't met.
type SetNotifyConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetNotifyConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetNotifyConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetNotifyConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetNotifyConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetNotifyConfigResponseValidationError) ErrorName() string {
	return "SetNotifyConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetNotifyConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetNotifyConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetNotifyConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetNotifyConfigResponseValidationError{}

// Validate checks the field values on GetNotifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyConfigRequestMultiError, or nil if none found.
func (m *GetNotifyConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return GetNotifyConfigRequestMultiError(errors)
	}

	return nil
}

// GetNotifyConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyConfigRequestMultiError) AllErrors() []error { return m }

// GetNotifyConfigRequestValidationError is the validation error returned by
// GetNotifyConfigRequest.Validate if the designated constraints aren't met.
type GetNotifyConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyConfigRequestValidationError) ErrorName() string {
	return "GetNotifyConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyConfigRequestValidationError{}

// Validate checks the field values on GetNotifyConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyConfigResponseMultiError, or nil if none found.
func (m *GetNotifyConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyConfigResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyConfigResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyConfigResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyConfigResponseMultiError(errors)
	}

	return nil
}

// GetNotifyConfigResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyConfigResponseMultiError) AllErrors() []error { return m }

// GetNotifyConfigResponseValidationError is the validation error returned by
// GetNotifyConfigResponse.Validate if the designated constraints aren't met.
type GetNotifyConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyConfigResponseValidationError) ErrorName() string {
	return "GetNotifyConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyConfigResponseValidationError{}

// Validate checks the field values on NotifyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyConfigMultiError, or
// nil if none found.
func (m *NotifyConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyConfigValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyConfigValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyConfigValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyConfigMultiError(errors)
	}

	return nil
}

// NotifyConfigMultiError is an error wrapping multiple validation errors
// returned by NotifyConfig.ValidateAll() if the designated constraints aren't met.
type NotifyConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigMultiError) AllErrors() []error { return m }

// NotifyConfigValidationError is the validation error returned by
// NotifyConfig.Validate if the designated constraints aren't met.
type NotifyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigValidationError) ErrorName() string { return "NotifyConfigValidationError" }

// Error satisfies the builtin error interface
func (e NotifyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigValidationError{}

// Validate checks the field values on GetOrgClusterRelationsByOrgRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrgClusterRelationsByOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgClusterRelationsByOrgRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrgClusterRelationsByOrgRequestMultiError, or nil if none found.
func (m *GetOrgClusterRelationsByOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgClusterRelationsByOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return GetOrgClusterRelationsByOrgRequestMultiError(errors)
	}

	return nil
}

// GetOrgClusterRelationsByOrgRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrgClusterRelationsByOrgRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgClusterRelationsByOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgClusterRelationsByOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgClusterRelationsByOrgRequestMultiError) AllErrors() []error { return m }

// GetOrgClusterRelationsByOrgRequestValidationError is the validation error
// returned by GetOrgClusterRelationsByOrgRequest.Validate if the designated
// constraints aren't met.
type GetOrgClusterRelationsByOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgClusterRelationsByOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgClusterRelationsByOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgClusterRelationsByOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgClusterRelationsByOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgClusterRelationsByOrgRequestValidationError) ErrorName() string {
	return "GetOrgClusterRelationsByOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgClusterRelationsByOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgClusterRelationsByOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgClusterRelationsByOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgClusterRelationsByOrgRequestValidationError{}

// Validate checks the field values on GetOrgClusterRelationsByOrgResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrgClusterRelationsByOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgClusterRelationsByOrgResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrgClusterRelationsByOrgResponseMultiError, or nil if none found.
func (m *GetOrgClusterRelationsByOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgClusterRelationsByOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrgClusterRelationsByOrgResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrgClusterRelationsByOrgResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrgClusterRelationsByOrgResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrgClusterRelationsByOrgResponseMultiError(errors)
	}

	return nil
}

// GetOrgClusterRelationsByOrgResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrgClusterRelationsByOrgResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrgClusterRelationsByOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgClusterRelationsByOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgClusterRelationsByOrgResponseMultiError) AllErrors() []error { return m }

// GetOrgClusterRelationsByOrgResponseValidationError is the validation error
// returned by GetOrgClusterRelationsByOrgResponse.Validate if the designated
// constraints aren't met.
type GetOrgClusterRelationsByOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgClusterRelationsByOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgClusterRelationsByOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgClusterRelationsByOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgClusterRelationsByOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgClusterRelationsByOrgResponseValidationError) ErrorName() string {
	return "GetOrgClusterRelationsByOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgClusterRelationsByOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgClusterRelationsByOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgClusterRelationsByOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgClusterRelationsByOrgResponseValidationError{}

// Validate checks the field values on OrgConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgConfigMultiError, or nil
// if none found.
func (m *OrgConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnablePersonalMessageEmail

	// no validation rules for EnableMS

	// no validation rules for SmtpHost

	// no validation rules for SmtpUser

	// no validation rules for SmtpPassword

	// no validation rules for SmtpPort

	// no validation rules for SmtpIsSSL

	// no validation rules for SmsKeyID

	// no validation rules for SmsKeySecret

	// no validation rules for SmsSignName

	// no validation rules for SmsMonitorTemplateCode

	// no validation rules for VmsKeyID

	// no validation rules for VmsKeySecret

	// no validation rules for VmsMonitorTtsCode

	// no validation rules for VmsMonitorCalledShowNumber

	// no validation rules for AuditInterval

	if len(errors) > 0 {
		return OrgConfigMultiError(errors)
	}

	return nil
}

// OrgConfigMultiError is an error wrapping multiple validation errors returned
// by OrgConfig.ValidateAll() if the designated constraints aren't met.
type OrgConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgConfigMultiError) AllErrors() []error { return m }

// OrgConfigValidationError is the validation error returned by
// OrgConfig.Validate if the designated constraints aren't met.
type OrgConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgConfigValidationError) ErrorName() string { return "OrgConfigValidationError" }

// Error satisfies the builtin error interface
func (e OrgConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgConfigValidationError{}

// Validate checks the field values on DereferenceClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DereferenceClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DereferenceClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DereferenceClusterRequestMultiError, or nil if none found.
func (m *DereferenceClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DereferenceClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return DereferenceClusterRequestMultiError(errors)
	}

	return nil
}

// DereferenceClusterRequestMultiError is an error wrapping multiple validation
// errors returned by DereferenceClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type DereferenceClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DereferenceClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DereferenceClusterRequestMultiError) AllErrors() []error { return m }

// DereferenceClusterRequestValidationError is the validation error returned by
// DereferenceClusterRequest.Validate if the designated constraints aren't met.
type DereferenceClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DereferenceClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DereferenceClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DereferenceClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DereferenceClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DereferenceClusterRequestValidationError) ErrorName() string {
	return "DereferenceClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DereferenceClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDereferenceClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DereferenceClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DereferenceClusterRequestValidationError{}

// Validate checks the field values on DereferenceClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DereferenceClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DereferenceClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DereferenceClusterResponseMultiError, or nil if none found.
func (m *DereferenceClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DereferenceClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DereferenceClusterResponseMultiError(errors)
	}

	return nil
}

// DereferenceClusterResponseMultiError is an error wrapping multiple
// validation errors returned by DereferenceClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type DereferenceClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DereferenceClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DereferenceClusterResponseMultiError) AllErrors() []error { return m }

// DereferenceClusterResponseValidationError is the validation error returned
// by DereferenceClusterResponse.Validate if the designated constraints aren't met.
type DereferenceClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DereferenceClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DereferenceClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DereferenceClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DereferenceClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DereferenceClusterResponseValidationError) ErrorName() string {
	return "DereferenceClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DereferenceClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDereferenceClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DereferenceClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DereferenceClusterResponseValidationError{}

// Validate checks the field values on AuditMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditMessageMultiError, or
// nil if none found.
func (m *AuditMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageZH

	// no validation rules for MessageEN

	if len(errors) > 0 {
		return AuditMessageMultiError(errors)
	}

	return nil
}

// AuditMessageMultiError is an error wrapping multiple validation errors
// returned by AuditMessage.ValidateAll() if the designated constraints aren't met.
type AuditMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMessageMultiError) AllErrors() []error { return m }

// AuditMessageValidationError is the validation error returned by
// AuditMessage.Validate if the designated constraints aren't met.
type AuditMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditMessageValidationError) ErrorName() string { return "AuditMessageValidationError" }

// Error satisfies the builtin error interface
func (e AuditMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditMessageValidationError{}

// Validate checks the field values on BlockoutConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockoutConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockoutConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockoutConfigMultiError,
// or nil if none found.
func (m *BlockoutConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockoutConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockDev

	// no validation rules for BlockTest

	// no validation rules for BlockStage

	// no validation rules for BlockProd

	if len(errors) > 0 {
		return BlockoutConfigMultiError(errors)
	}

	return nil
}

// BlockoutConfigMultiError is an error wrapping multiple validation errors
// returned by BlockoutConfig.ValidateAll() if the designated constraints
// aren't met.
type BlockoutConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockoutConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockoutConfigMultiError) AllErrors() []error { return m }

// BlockoutConfigValidationError is the validation error returned by
// BlockoutConfig.Validate if the designated constraints aren't met.
type BlockoutConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockoutConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockoutConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockoutConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockoutConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockoutConfigValidationError) ErrorName() string { return "BlockoutConfigValidationError" }

// Error satisfies the builtin error interface
func (e BlockoutConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockoutConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockoutConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockoutConfigValidationError{}

// Validate checks the field values on Org with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Org) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Org with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrgMultiError, or nil if none found.
func (m *Org) ValidateAll() error {
	return m.validate(true)
}

func (m *Org) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Creator

	// no validation rules for Desc

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Locale

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsPublic

	if all {
		switch v := interface{}(m.GetBlockoutConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "BlockoutConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockoutConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgValidationError{
				field:  "BlockoutConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableReleaseCrossCluster

	// no validation rules for Selected

	// no validation rules for Operation

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for PublisherID

	// no validation rules for Domain

	// no validation rules for OpenFdp

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuditMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "AuditMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgValidationError{
					field:  "AuditMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuditMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgValidationError{
				field:  "AuditMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgMultiError(errors)
	}

	return nil
}

// OrgMultiError is an error wrapping multiple validation errors returned by
// Org.ValidateAll() if the designated constraints aren't met.
type OrgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMultiError) AllErrors() []error { return m }

// OrgValidationError is the validation error returned by Org.Validate if the
// designated constraints aren't met.
type OrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgValidationError) ErrorName() string { return "OrgValidationError" }

// Error satisfies the builtin error interface
func (e OrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgValidationError{}
