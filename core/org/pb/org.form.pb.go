// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: org.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgByDomainRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgByDomainResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeCurrentOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeCurrentOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterRelationCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterRelationCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgClusterRelationRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgClusterRelationResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterRelation)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SetReleaseCrossClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SetReleaseCrossClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GenVerifyCodeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GenVerifyCodeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SetNotifyConfigRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SetNotifyConfigResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyConfigRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyConfigResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgClusterRelationsByOrgRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgClusterRelationsByOrgResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DereferenceClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DereferenceClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AuditMessage)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BlockoutConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Org)(nil)

// CreateOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "logo":
				m.Logo = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "locale":
				m.Locale = vals[0]
			case "admins":
				m.Admins = vals
			case "publisherName":
				m.PublisherName = vals[0]
			case "isPublic":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsPublic = val
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// CreateOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Org{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.creator":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Creator = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Logo = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.DisplayName = vals[0]
			case "data.locale":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Locale = vals[0]
			case "data.config":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			case "data.isPublic":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsPublic = val
			case "data.blockoutConfig":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
			case "data.blockoutConfig.blockDev":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockDev = val
			case "data.blockoutConfig.blockTest":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockTest = val
			case "data.blockoutConfig.blockStage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockStage = val
			case "data.blockoutConfig.blockProd":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockProd = val
			case "data.enableReleaseCrossCluster":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.EnableReleaseCrossCluster = val
			case "data.selected":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Selected = val
			case "data.operation":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Operation = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Status = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Type = vals[0]
			case "data.publisherID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PublisherID = val
			case "data.domain":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Domain = vals[0]
			case "data.openFdp":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.OpenFdp = val
			case "data.version":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Version = val
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.auditMessage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
			case "data.auditMessage.messageZH":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageZH = vals[0]
			case "data.auditMessage.messageEN":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// UpdateOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "logo":
				m.Logo = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "locale":
				m.Locale = vals[0]
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "publisherName":
				m.PublisherName = vals[0]
			case "config":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
			case "config.enablePersonalMessageEmail":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnablePersonalMessageEmail = val
			case "config.enableMS":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnableMS = val
			case "config.smtpHost":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpHost = vals[0]
			case "config.smtpUser":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpUser = vals[0]
			case "config.smtpPassword":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpPassword = vals[0]
			case "config.smtpPort":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.SmtpPort = val
			case "config.smtpIsSSL":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.SmtpIsSSL = val
			case "config.smsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeyID = vals[0]
			case "config.smsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeySecret = vals[0]
			case "config.smsSignName":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsSignName = vals[0]
			case "config.smsMonitorTemplateCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsMonitorTemplateCode = vals[0]
			case "config.vmsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeyID = vals[0]
			case "config.vmsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeySecret = vals[0]
			case "config.vmsMonitorTtsCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorTtsCode = vals[0]
			case "config.vmsMonitorCalledShowNumber":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorCalledShowNumber = vals[0]
			case "config.auditInterval":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.AuditInterval = val
			case "blockoutConfig":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
			case "blockoutConfig.blockDev":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockDev = val
			case "blockoutConfig.blockTest":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockTest = val
			case "blockoutConfig.blockStage":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockStage = val
			case "blockoutConfig.blockProd":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockProd = val
			case "isPublic":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsPublic = val
			case "orgID":
				m.OrgID = vals[0]
			}
		}
	}
	return nil
}

// UpdateOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Org{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.creator":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Creator = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Logo = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.DisplayName = vals[0]
			case "data.locale":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Locale = vals[0]
			case "data.config":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			case "data.isPublic":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsPublic = val
			case "data.blockoutConfig":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
			case "data.blockoutConfig.blockDev":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockDev = val
			case "data.blockoutConfig.blockTest":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockTest = val
			case "data.blockoutConfig.blockStage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockStage = val
			case "data.blockoutConfig.blockProd":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockProd = val
			case "data.enableReleaseCrossCluster":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.EnableReleaseCrossCluster = val
			case "data.selected":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Selected = val
			case "data.operation":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Operation = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Status = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Type = vals[0]
			case "data.publisherID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PublisherID = val
			case "data.domain":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Domain = vals[0]
			case "data.openFdp":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.OpenFdp = val
			case "data.version":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Version = val
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.auditMessage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
			case "data.auditMessage.messageZH":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageZH = vals[0]
			case "data.auditMessage.messageEN":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// GetOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "idOrName":
				m.IdOrName = vals[0]
			}
		}
	}
	return nil
}

// GetOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Org{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.creator":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Creator = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Logo = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.DisplayName = vals[0]
			case "data.locale":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Locale = vals[0]
			case "data.config":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			case "data.isPublic":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsPublic = val
			case "data.blockoutConfig":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
			case "data.blockoutConfig.blockDev":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockDev = val
			case "data.blockoutConfig.blockTest":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockTest = val
			case "data.blockoutConfig.blockStage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockStage = val
			case "data.blockoutConfig.blockProd":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockProd = val
			case "data.enableReleaseCrossCluster":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.EnableReleaseCrossCluster = val
			case "data.selected":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Selected = val
			case "data.operation":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Operation = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Status = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Type = vals[0]
			case "data.publisherID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PublisherID = val
			case "data.domain":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Domain = vals[0]
			case "data.openFdp":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.OpenFdp = val
			case "data.version":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Version = val
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.auditMessage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
			case "data.auditMessage.messageZH":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageZH = vals[0]
			case "data.auditMessage.messageEN":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// DeleteOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "idOrName":
				m.IdOrName = vals[0]
			}
		}
	}
	return nil
}

// DeleteOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Org{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.creator":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Creator = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Logo = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.DisplayName = vals[0]
			case "data.locale":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Locale = vals[0]
			case "data.config":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			case "data.isPublic":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsPublic = val
			case "data.blockoutConfig":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
			case "data.blockoutConfig.blockDev":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockDev = val
			case "data.blockoutConfig.blockTest":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockTest = val
			case "data.blockoutConfig.blockStage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockStage = val
			case "data.blockoutConfig.blockProd":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockProd = val
			case "data.enableReleaseCrossCluster":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.EnableReleaseCrossCluster = val
			case "data.selected":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Selected = val
			case "data.operation":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Operation = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Status = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Type = vals[0]
			case "data.publisherID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PublisherID = val
			case "data.domain":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Domain = vals[0]
			case "data.openFdp":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.OpenFdp = val
			case "data.version":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Version = val
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.auditMessage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
			case "data.auditMessage.messageZH":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageZH = vals[0]
			case "data.auditMessage.messageEN":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// ListOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "q":
				m.Q = vals[0]
			case "key":
				m.Key = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "joined":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Joined = val
			}
		}
	}
	return nil
}

// ListOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// GetOrgByDomainRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgByDomainRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "domain":
				m.Domain = vals[0]
			case "orgName":
				m.OrgName = vals[0]
			}
		}
	}
	return nil
}

// GetOrgByDomainResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgByDomainResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Org{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.creator":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Creator = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Logo = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.DisplayName = vals[0]
			case "data.locale":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Locale = vals[0]
			case "data.config":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			case "data.isPublic":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsPublic = val
			case "data.blockoutConfig":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
			case "data.blockoutConfig.blockDev":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockDev = val
			case "data.blockoutConfig.blockTest":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockTest = val
			case "data.blockoutConfig.blockStage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockStage = val
			case "data.blockoutConfig.blockProd":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.BlockoutConfig == nil {
					m.Data.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.BlockoutConfig.BlockProd = val
			case "data.enableReleaseCrossCluster":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.EnableReleaseCrossCluster = val
			case "data.selected":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Selected = val
			case "data.operation":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Operation = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Status = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Type = vals[0]
			case "data.publisherID":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PublisherID = val
			case "data.domain":
				if m.Data == nil {
					m.Data = &Org{}
				}
				m.Data.Domain = vals[0]
			case "data.openFdp":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.OpenFdp = val
			case "data.version":
				if m.Data == nil {
					m.Data = &Org{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Version = val
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.auditMessage":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
			case "data.auditMessage.messageZH":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageZH = vals[0]
			case "data.auditMessage.messageEN":
				if m.Data == nil {
					m.Data = &Org{}
				}
				if m.Data.AuditMessage == nil {
					m.Data.AuditMessage = &AuditMessage{}
				}
				m.Data.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// ChangeCurrentOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *ChangeCurrentOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// ChangeCurrentOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *ChangeCurrentOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "Data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// OrgClusterRelationCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterRelationCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// OrgClusterRelationCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterRelationCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// ListOrgClusterRelationRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgClusterRelationRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cluster":
				m.Cluster = vals[0]
			}
		}
	}
	return nil
}

// ListOrgClusterRelationResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgClusterRelationResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// OrgClusterRelation implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterRelation) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "clusterID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ClusterID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// SetReleaseCrossClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *SetReleaseCrossClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "orgID":
				m.OrgID = vals[0]
			}
		}
	}
	return nil
}

// SetReleaseCrossClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *SetReleaseCrossClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GenVerifyCodeRequest implement urlenc.URLValuesUnmarshaler.
func (m *GenVerifyCodeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GenVerifyCodeResponse implement urlenc.URLValuesUnmarshaler.
func (m *GenVerifyCodeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// SetNotifyConfigRequest implement urlenc.URLValuesUnmarshaler.
func (m *SetNotifyConfigRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "config":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
			case "config.enablePersonalMessageEmail":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnablePersonalMessageEmail = val
			case "config.enableMS":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnableMS = val
			case "config.smtpHost":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpHost = vals[0]
			case "config.smtpUser":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpUser = vals[0]
			case "config.smtpPassword":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpPassword = vals[0]
			case "config.smtpPort":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.SmtpPort = val
			case "config.smtpIsSSL":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.SmtpIsSSL = val
			case "config.smsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeyID = vals[0]
			case "config.smsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeySecret = vals[0]
			case "config.smsSignName":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsSignName = vals[0]
			case "config.smsMonitorTemplateCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsMonitorTemplateCode = vals[0]
			case "config.vmsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeyID = vals[0]
			case "config.vmsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeySecret = vals[0]
			case "config.vmsMonitorTtsCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorTtsCode = vals[0]
			case "config.vmsMonitorCalledShowNumber":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorCalledShowNumber = vals[0]
			case "config.auditInterval":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.AuditInterval = val
			case "orgID":
				m.OrgID = vals[0]
			}
		}
	}
	return nil
}

// SetNotifyConfigResponse implement urlenc.URLValuesUnmarshaler.
func (m *SetNotifyConfigResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// GetNotifyConfigRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyConfigRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			}
		}
	}
	return nil
}

// GetNotifyConfigResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyConfigResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
			case "data.config":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
			case "data.config.enablePersonalMessageEmail":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnablePersonalMessageEmail = val
			case "data.config.enableMS":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.EnableMS = val
			case "data.config.smtpHost":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpHost = vals[0]
			case "data.config.smtpUser":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpUser = vals[0]
			case "data.config.smtpPassword":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmtpPassword = vals[0]
			case "data.config.smtpPort":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.SmtpPort = val
			case "data.config.smtpIsSSL":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Config.SmtpIsSSL = val
			case "data.config.smsKeyID":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeyID = vals[0]
			case "data.config.smsKeySecret":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsKeySecret = vals[0]
			case "data.config.smsSignName":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsSignName = vals[0]
			case "data.config.smsMonitorTemplateCode":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.SmsMonitorTemplateCode = vals[0]
			case "data.config.vmsKeyID":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeyID = vals[0]
			case "data.config.vmsKeySecret":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsKeySecret = vals[0]
			case "data.config.vmsMonitorTtsCode":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorTtsCode = vals[0]
			case "data.config.vmsMonitorCalledShowNumber":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				m.Data.Config.VmsMonitorCalledShowNumber = vals[0]
			case "data.config.auditInterval":
				if m.Data == nil {
					m.Data = &NotifyConfig{}
				}
				if m.Data.Config == nil {
					m.Data.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Config.AuditInterval = val
			}
		}
	}
	return nil
}

// NotifyConfig implement urlenc.URLValuesUnmarshaler.
func (m *NotifyConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "config":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
			case "config.enablePersonalMessageEmail":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnablePersonalMessageEmail = val
			case "config.enableMS":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnableMS = val
			case "config.smtpHost":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpHost = vals[0]
			case "config.smtpUser":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpUser = vals[0]
			case "config.smtpPassword":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpPassword = vals[0]
			case "config.smtpPort":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.SmtpPort = val
			case "config.smtpIsSSL":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.SmtpIsSSL = val
			case "config.smsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeyID = vals[0]
			case "config.smsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeySecret = vals[0]
			case "config.smsSignName":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsSignName = vals[0]
			case "config.smsMonitorTemplateCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsMonitorTemplateCode = vals[0]
			case "config.vmsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeyID = vals[0]
			case "config.vmsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeySecret = vals[0]
			case "config.vmsMonitorTtsCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorTtsCode = vals[0]
			case "config.vmsMonitorCalledShowNumber":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorCalledShowNumber = vals[0]
			case "config.auditInterval":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.AuditInterval = val
			}
		}
	}
	return nil
}

// GetOrgClusterRelationsByOrgRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgClusterRelationsByOrgRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			}
		}
	}
	return nil
}

// GetOrgClusterRelationsByOrgResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgClusterRelationsByOrgResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// OrgConfig implement urlenc.URLValuesUnmarshaler.
func (m *OrgConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enablePersonalMessageEmail":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnablePersonalMessageEmail = val
			case "enableMS":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableMS = val
			case "smtpHost":
				m.SmtpHost = vals[0]
			case "smtpUser":
				m.SmtpUser = vals[0]
			case "smtpPassword":
				m.SmtpPassword = vals[0]
			case "smtpPort":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SmtpPort = val
			case "smtpIsSSL":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SmtpIsSSL = val
			case "smsKeyID":
				m.SmsKeyID = vals[0]
			case "smsKeySecret":
				m.SmsKeySecret = vals[0]
			case "smsSignName":
				m.SmsSignName = vals[0]
			case "smsMonitorTemplateCode":
				m.SmsMonitorTemplateCode = vals[0]
			case "vmsKeyID":
				m.VmsKeyID = vals[0]
			case "vmsKeySecret":
				m.VmsKeySecret = vals[0]
			case "vmsMonitorTtsCode":
				m.VmsMonitorTtsCode = vals[0]
			case "vmsMonitorCalledShowNumber":
				m.VmsMonitorCalledShowNumber = vals[0]
			case "auditInterval":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AuditInterval = val
			}
		}
	}
	return nil
}

// DereferenceClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *DereferenceClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// DereferenceClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *DereferenceClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// AuditMessage implement urlenc.URLValuesUnmarshaler.
func (m *AuditMessage) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "messageZH":
				m.MessageZH = vals[0]
			case "messageEN":
				m.MessageEN = vals[0]
			}
		}
	}
	return nil
}

// BlockoutConfig implement urlenc.URLValuesUnmarshaler.
func (m *BlockoutConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "blockDev":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockDev = val
			case "blockTest":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockTest = val
			case "blockStage":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockStage = val
			case "blockProd":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockProd = val
			}
		}
	}
	return nil
}

// Org implement urlenc.URLValuesUnmarshaler.
func (m *Org) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "creator":
				m.Creator = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "locale":
				m.Locale = vals[0]
			case "config":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
			case "config.enablePersonalMessageEmail":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnablePersonalMessageEmail = val
			case "config.enableMS":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.EnableMS = val
			case "config.smtpHost":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpHost = vals[0]
			case "config.smtpUser":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpUser = vals[0]
			case "config.smtpPassword":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmtpPassword = vals[0]
			case "config.smtpPort":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.SmtpPort = val
			case "config.smtpIsSSL":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Config.SmtpIsSSL = val
			case "config.smsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeyID = vals[0]
			case "config.smsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsKeySecret = vals[0]
			case "config.smsSignName":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsSignName = vals[0]
			case "config.smsMonitorTemplateCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.SmsMonitorTemplateCode = vals[0]
			case "config.vmsKeyID":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeyID = vals[0]
			case "config.vmsKeySecret":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsKeySecret = vals[0]
			case "config.vmsMonitorTtsCode":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorTtsCode = vals[0]
			case "config.vmsMonitorCalledShowNumber":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				m.Config.VmsMonitorCalledShowNumber = vals[0]
			case "config.auditInterval":
				if m.Config == nil {
					m.Config = &OrgConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Config.AuditInterval = val
			case "isPublic":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsPublic = val
			case "blockoutConfig":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
			case "blockoutConfig.blockDev":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockDev = val
			case "blockoutConfig.blockTest":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockTest = val
			case "blockoutConfig.blockStage":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockStage = val
			case "blockoutConfig.blockProd":
				if m.BlockoutConfig == nil {
					m.BlockoutConfig = &BlockoutConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.BlockoutConfig.BlockProd = val
			case "enableReleaseCrossCluster":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableReleaseCrossCluster = val
			case "selected":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Selected = val
			case "operation":
				m.Operation = vals[0]
			case "status":
				m.Status = vals[0]
			case "type":
				m.Type = vals[0]
			case "publisherID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PublisherID = val
			case "domain":
				m.Domain = vals[0]
			case "openFdp":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OpenFdp = val
			case "version":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Version = val
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "auditMessage":
				if m.AuditMessage == nil {
					m.AuditMessage = &AuditMessage{}
				}
			case "auditMessage.messageZH":
				if m.AuditMessage == nil {
					m.AuditMessage = &AuditMessage{}
				}
				m.AuditMessage.MessageZH = vals[0]
			case "auditMessage.messageEN":
				if m.AuditMessage == nil {
					m.AuditMessage = &AuditMessage{}
				}
				m.AuditMessage.MessageEN = vals[0]
			}
		}
	}
	return nil
}
