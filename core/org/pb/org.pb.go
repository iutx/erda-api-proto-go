// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: org.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo          string   `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName   string   `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc          string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Locale        string   `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	Admins        []string `protobuf:"bytes,6,rep,name=admins,proto3" json:"admins,omitempty"`
	PublisherName string   `protobuf:"bytes,7,opt,name=publisherName,proto3" json:"publisherName,omitempty"`
	IsPublic      bool     `protobuf:"varint,8,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Type          string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreateOrgRequest) Reset() {
	*x = CreateOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgRequest) ProtoMessage() {}

func (x *CreateOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrgRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreateOrgRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrgRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateOrgRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateOrgRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *CreateOrgRequest) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *CreateOrgRequest) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

func (x *CreateOrgRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CreateOrgRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Org `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateOrgResponse) Reset() {
	*x = CreateOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgResponse) ProtoMessage() {}

func (x *CreateOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgResponse.ProtoReflect.Descriptor instead.
func (*CreateOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrgResponse) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo           string          `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName    string          `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc           string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Locale         string          `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	ID             uint64          `protobuf:"varint,6,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PublisherName  string          `protobuf:"bytes,7,opt,name=publisherName,proto3" json:"publisherName,omitempty"`
	Config         *OrgConfig      `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	BlockoutConfig *BlockoutConfig `protobuf:"bytes,9,opt,name=blockoutConfig,proto3" json:"blockoutConfig,omitempty"`
	IsPublic       bool            `protobuf:"varint,10,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	OrgID          string          `protobuf:"bytes,11,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *UpdateOrgRequest) Reset() {
	*x = UpdateOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgRequest) ProtoMessage() {}

func (x *UpdateOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateOrgRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateOrgRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrgRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateOrgRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateOrgRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *UpdateOrgRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateOrgRequest) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

func (x *UpdateOrgRequest) GetConfig() *OrgConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateOrgRequest) GetBlockoutConfig() *BlockoutConfig {
	if x != nil {
		return x.BlockoutConfig
	}
	return nil
}

func (x *UpdateOrgRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UpdateOrgRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type UpdateOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Org `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateOrgResponse) Reset() {
	*x = UpdateOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgResponse) ProtoMessage() {}

func (x *UpdateOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOrgResponse) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdOrName string `protobuf:"bytes,1,opt,name=idOrName,proto3" json:"idOrName,omitempty"`
}

func (x *GetOrgRequest) Reset() {
	*x = GetOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgRequest) ProtoMessage() {}

func (x *GetOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgRequest.ProtoReflect.Descriptor instead.
func (*GetOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{4}
}

func (x *GetOrgRequest) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

type GetOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Org `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgResponse) Reset() {
	*x = GetOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgResponse) ProtoMessage() {}

func (x *GetOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgResponse.ProtoReflect.Descriptor instead.
func (*GetOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrgResponse) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdOrName string `protobuf:"bytes,1,opt,name=idOrName,proto3" json:"idOrName,omitempty"`
}

func (x *DeleteOrgRequest) Reset() {
	*x = DeleteOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgRequest) ProtoMessage() {}

func (x *DeleteOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteOrgRequest) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

type DeleteOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Org `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteOrgResponse) Reset() {
	*x = DeleteOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgResponse) ProtoMessage() {}

func (x *DeleteOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteOrgResponse) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q        string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	PageNo   int64  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// joined orgs or all orgs
	Joined bool `protobuf:"varint,5,opt,name=joined,proto3" json:"joined,omitempty"`
}

func (x *ListOrgRequest) Reset() {
	*x = ListOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgRequest) ProtoMessage() {}

func (x *ListOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgRequest.ProtoReflect.Descriptor instead.
func (*ListOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{8}
}

func (x *ListOrgRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ListOrgRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListOrgRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListOrgRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrgRequest) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

type ListOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*Org `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListOrgResponse) Reset() {
	*x = ListOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgResponse) ProtoMessage() {}

func (x *ListOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgResponse.ProtoReflect.Descriptor instead.
func (*ListOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{9}
}

func (x *ListOrgResponse) GetList() []*Org {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListOrgResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOrgByDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	OrgName string `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *GetOrgByDomainRequest) Reset() {
	*x = GetOrgByDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByDomainRequest) ProtoMessage() {}

func (x *GetOrgByDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByDomainRequest.ProtoReflect.Descriptor instead.
func (*GetOrgByDomainRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrgByDomainRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetOrgByDomainRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type GetOrgByDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Org `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgByDomainResponse) Reset() {
	*x = GetOrgByDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByDomainResponse) ProtoMessage() {}

func (x *GetOrgByDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByDomainResponse.ProtoReflect.Descriptor instead.
func (*GetOrgByDomainResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrgByDomainResponse) GetData() *Org {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChangeCurrentOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID  uint64 `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,json=orgId,proto3" json:"userID,omitempty"`
}

func (x *ChangeCurrentOrgRequest) Reset() {
	*x = ChangeCurrentOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCurrentOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCurrentOrgRequest) ProtoMessage() {}

func (x *ChangeCurrentOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCurrentOrgRequest.ProtoReflect.Descriptor instead.
func (*ChangeCurrentOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeCurrentOrgRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ChangeCurrentOrgRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ChangeCurrentOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data bool `protobuf:"varint,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ChangeCurrentOrgResponse) Reset() {
	*x = ChangeCurrentOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCurrentOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCurrentOrgResponse) ProtoMessage() {}

func (x *ChangeCurrentOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCurrentOrgResponse.ProtoReflect.Descriptor instead.
func (*ChangeCurrentOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeCurrentOrgResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type OrgClusterRelationCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName     string `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *OrgClusterRelationCreateRequest) Reset() {
	*x = OrgClusterRelationCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterRelationCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterRelationCreateRequest) ProtoMessage() {}

func (x *OrgClusterRelationCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterRelationCreateRequest.ProtoReflect.Descriptor instead.
func (*OrgClusterRelationCreateRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{14}
}

func (x *OrgClusterRelationCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgClusterRelationCreateRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *OrgClusterRelationCreateRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type OrgClusterRelationCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OrgClusterRelationCreateResponse) Reset() {
	*x = OrgClusterRelationCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterRelationCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterRelationCreateResponse) ProtoMessage() {}

func (x *OrgClusterRelationCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterRelationCreateResponse.ProtoReflect.Descriptor instead.
func (*OrgClusterRelationCreateResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{15}
}

func (x *OrgClusterRelationCreateResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ListOrgClusterRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ListOrgClusterRelationRequest) Reset() {
	*x = ListOrgClusterRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgClusterRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgClusterRelationRequest) ProtoMessage() {}

func (x *ListOrgClusterRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgClusterRelationRequest.ProtoReflect.Descriptor instead.
func (*ListOrgClusterRelationRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{16}
}

func (x *ListOrgClusterRelationRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type ListOrgClusterRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*OrgClusterRelation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListOrgClusterRelationResponse) Reset() {
	*x = ListOrgClusterRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgClusterRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgClusterRelationResponse) ProtoMessage() {}

func (x *ListOrgClusterRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgClusterRelationResponse.ProtoReflect.Descriptor instead.
func (*ListOrgClusterRelationResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{17}
}

func (x *ListOrgClusterRelationResponse) GetData() []*OrgClusterRelation {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgClusterRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	OrgID       uint64                 `protobuf:"varint,2,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	OrgName     string                 `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ClusterID   uint64                 `protobuf:"varint,4,opt,name=clusterID,json=clusterId,proto3" json:"clusterID,omitempty"`
	ClusterName string                 `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Creator     string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *OrgClusterRelation) Reset() {
	*x = OrgClusterRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterRelation) ProtoMessage() {}

func (x *OrgClusterRelation) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterRelation.ProtoReflect.Descriptor instead.
func (*OrgClusterRelation) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{18}
}

func (x *OrgClusterRelation) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OrgClusterRelation) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgClusterRelation) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *OrgClusterRelation) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *OrgClusterRelation) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OrgClusterRelation) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *OrgClusterRelation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrgClusterRelation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SetReleaseCrossClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	OrgID  string `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *SetReleaseCrossClusterRequest) Reset() {
	*x = SetReleaseCrossClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReleaseCrossClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReleaseCrossClusterRequest) ProtoMessage() {}

func (x *SetReleaseCrossClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReleaseCrossClusterRequest.ProtoReflect.Descriptor instead.
func (*SetReleaseCrossClusterRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{19}
}

func (x *SetReleaseCrossClusterRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SetReleaseCrossClusterRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type SetReleaseCrossClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReleaseCrossClusterResponse) Reset() {
	*x = SetReleaseCrossClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReleaseCrossClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReleaseCrossClusterResponse) ProtoMessage() {}

func (x *SetReleaseCrossClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReleaseCrossClusterResponse.ProtoReflect.Descriptor instead.
func (*SetReleaseCrossClusterResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{20}
}

type GenVerifyCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenVerifyCodeRequest) Reset() {
	*x = GenVerifyCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenVerifyCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenVerifyCodeRequest) ProtoMessage() {}

func (x *GenVerifyCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenVerifyCodeRequest.ProtoReflect.Descriptor instead.
func (*GenVerifyCodeRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{21}
}

type GenVerifyCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GenVerifyCodeResponse) Reset() {
	*x = GenVerifyCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenVerifyCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenVerifyCodeResponse) ProtoMessage() {}

func (x *GenVerifyCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenVerifyCodeResponse.ProtoReflect.Descriptor instead.
func (*GenVerifyCodeResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{22}
}

func (x *GenVerifyCodeResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetNotifyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OrgConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	OrgID  string     `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *SetNotifyConfigRequest) Reset() {
	*x = SetNotifyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNotifyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNotifyConfigRequest) ProtoMessage() {}

func (x *SetNotifyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNotifyConfigRequest.ProtoReflect.Descriptor instead.
func (*SetNotifyConfigRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{23}
}

func (x *SetNotifyConfigRequest) GetConfig() *OrgConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SetNotifyConfigRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type SetNotifyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetNotifyConfigResponse) Reset() {
	*x = SetNotifyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNotifyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNotifyConfigResponse) ProtoMessage() {}

func (x *SetNotifyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNotifyConfigResponse.ProtoReflect.Descriptor instead.
func (*SetNotifyConfigResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{24}
}

func (x *SetNotifyConfigResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetNotifyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *GetNotifyConfigRequest) Reset() {
	*x = GetNotifyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifyConfigRequest) ProtoMessage() {}

func (x *GetNotifyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifyConfigRequest.ProtoReflect.Descriptor instead.
func (*GetNotifyConfigRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{25}
}

func (x *GetNotifyConfigRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type GetNotifyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NotifyConfig `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNotifyConfigResponse) Reset() {
	*x = GetNotifyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifyConfigResponse) ProtoMessage() {}

func (x *GetNotifyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifyConfigResponse.ProtoReflect.Descriptor instead.
func (*GetNotifyConfigResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{26}
}

func (x *GetNotifyConfigResponse) GetData() *NotifyConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type NotifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OrgConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *NotifyConfig) Reset() {
	*x = NotifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyConfig) ProtoMessage() {}

func (x *NotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyConfig.ProtoReflect.Descriptor instead.
func (*NotifyConfig) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{27}
}

func (x *NotifyConfig) GetConfig() *OrgConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetOrgClusterRelationsByOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *GetOrgClusterRelationsByOrgRequest) Reset() {
	*x = GetOrgClusterRelationsByOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgClusterRelationsByOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgClusterRelationsByOrgRequest) ProtoMessage() {}

func (x *GetOrgClusterRelationsByOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgClusterRelationsByOrgRequest.ProtoReflect.Descriptor instead.
func (*GetOrgClusterRelationsByOrgRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{28}
}

func (x *GetOrgClusterRelationsByOrgRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type GetOrgClusterRelationsByOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*OrgClusterRelation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgClusterRelationsByOrgResponse) Reset() {
	*x = GetOrgClusterRelationsByOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgClusterRelationsByOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgClusterRelationsByOrgResponse) ProtoMessage() {}

func (x *GetOrgClusterRelationsByOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgClusterRelationsByOrgResponse.ProtoReflect.Descriptor instead.
func (*GetOrgClusterRelationsByOrgResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrgClusterRelationsByOrgResponse) GetData() []*OrgClusterRelation {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnablePersonalMessageEmail bool   `protobuf:"varint,1,opt,name=enablePersonalMessageEmail,proto3" json:"enablePersonalMessageEmail,omitempty"`
	EnableMS                   bool   `protobuf:"varint,2,opt,name=enableMS,proto3" json:"enableMS,omitempty"`
	SmtpHost                   string `protobuf:"bytes,3,opt,name=smtpHost,proto3" json:"smtpHost,omitempty"`
	SmtpUser                   string `protobuf:"bytes,4,opt,name=smtpUser,proto3" json:"smtpUser,omitempty"`
	SmtpPassword               string `protobuf:"bytes,5,opt,name=smtpPassword,proto3" json:"smtpPassword,omitempty"`
	SmtpPort                   int64  `protobuf:"varint,6,opt,name=smtpPort,proto3" json:"smtpPort,omitempty"`
	SmtpIsSSL                  bool   `protobuf:"varint,7,opt,name=smtpIsSSL,proto3" json:"smtpIsSSL,omitempty"`
	SmsKeyID                   string `protobuf:"bytes,8,opt,name=smsKeyID,proto3" json:"smsKeyID,omitempty"`
	SmsKeySecret               string `protobuf:"bytes,9,opt,name=smsKeySecret,proto3" json:"smsKeySecret,omitempty"`
	SmsSignName                string `protobuf:"bytes,10,opt,name=smsSignName,proto3" json:"smsSignName,omitempty"`
	SmsMonitorTemplateCode     string `protobuf:"bytes,11,opt,name=smsMonitorTemplateCode,proto3" json:"smsMonitorTemplateCode,omitempty"`
	VmsKeyID                   string `protobuf:"bytes,12,opt,name=vmsKeyID,proto3" json:"vmsKeyID,omitempty"`
	VmsKeySecret               string `protobuf:"bytes,13,opt,name=vmsKeySecret,proto3" json:"vmsKeySecret,omitempty"`
	VmsMonitorTtsCode          string `protobuf:"bytes,14,opt,name=vmsMonitorTtsCode,proto3" json:"vmsMonitorTtsCode,omitempty"`
	VmsMonitorCalledShowNumber string `protobuf:"bytes,15,opt,name=vmsMonitorCalledShowNumber,proto3" json:"vmsMonitorCalledShowNumber,omitempty"`
	AuditInterval              uint64 `protobuf:"varint,16,opt,name=auditInterval,proto3" json:"auditInterval,omitempty"`
}

func (x *OrgConfig) Reset() {
	*x = OrgConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgConfig) ProtoMessage() {}

func (x *OrgConfig) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgConfig.ProtoReflect.Descriptor instead.
func (*OrgConfig) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{30}
}

func (x *OrgConfig) GetEnablePersonalMessageEmail() bool {
	if x != nil {
		return x.EnablePersonalMessageEmail
	}
	return false
}

func (x *OrgConfig) GetEnableMS() bool {
	if x != nil {
		return x.EnableMS
	}
	return false
}

func (x *OrgConfig) GetSmtpHost() string {
	if x != nil {
		return x.SmtpHost
	}
	return ""
}

func (x *OrgConfig) GetSmtpUser() string {
	if x != nil {
		return x.SmtpUser
	}
	return ""
}

func (x *OrgConfig) GetSmtpPassword() string {
	if x != nil {
		return x.SmtpPassword
	}
	return ""
}

func (x *OrgConfig) GetSmtpPort() int64 {
	if x != nil {
		return x.SmtpPort
	}
	return 0
}

func (x *OrgConfig) GetSmtpIsSSL() bool {
	if x != nil {
		return x.SmtpIsSSL
	}
	return false
}

func (x *OrgConfig) GetSmsKeyID() string {
	if x != nil {
		return x.SmsKeyID
	}
	return ""
}

func (x *OrgConfig) GetSmsKeySecret() string {
	if x != nil {
		return x.SmsKeySecret
	}
	return ""
}

func (x *OrgConfig) GetSmsSignName() string {
	if x != nil {
		return x.SmsSignName
	}
	return ""
}

func (x *OrgConfig) GetSmsMonitorTemplateCode() string {
	if x != nil {
		return x.SmsMonitorTemplateCode
	}
	return ""
}

func (x *OrgConfig) GetVmsKeyID() string {
	if x != nil {
		return x.VmsKeyID
	}
	return ""
}

func (x *OrgConfig) GetVmsKeySecret() string {
	if x != nil {
		return x.VmsKeySecret
	}
	return ""
}

func (x *OrgConfig) GetVmsMonitorTtsCode() string {
	if x != nil {
		return x.VmsMonitorTtsCode
	}
	return ""
}

func (x *OrgConfig) GetVmsMonitorCalledShowNumber() string {
	if x != nil {
		return x.VmsMonitorCalledShowNumber
	}
	return ""
}

func (x *OrgConfig) GetAuditInterval() uint64 {
	if x != nil {
		return x.AuditInterval
	}
	return 0
}

type DereferenceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *DereferenceClusterRequest) Reset() {
	*x = DereferenceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DereferenceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceClusterRequest) ProtoMessage() {}

func (x *DereferenceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceClusterRequest.ProtoReflect.Descriptor instead.
func (*DereferenceClusterRequest) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{31}
}

func (x *DereferenceClusterRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *DereferenceClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type DereferenceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DereferenceClusterResponse) Reset() {
	*x = DereferenceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DereferenceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceClusterResponse) ProtoMessage() {}

func (x *DereferenceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceClusterResponse.ProtoReflect.Descriptor instead.
func (*DereferenceClusterResponse) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{32}
}

func (x *DereferenceClusterResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AuditMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageZH string `protobuf:"bytes,1,opt,name=messageZH,proto3" json:"messageZH,omitempty"`
	MessageEN string `protobuf:"bytes,2,opt,name=messageEN,proto3" json:"messageEN,omitempty"`
}

func (x *AuditMessage) Reset() {
	*x = AuditMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditMessage) ProtoMessage() {}

func (x *AuditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditMessage.ProtoReflect.Descriptor instead.
func (*AuditMessage) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{33}
}

func (x *AuditMessage) GetMessageZH() string {
	if x != nil {
		return x.MessageZH
	}
	return ""
}

func (x *AuditMessage) GetMessageEN() string {
	if x != nil {
		return x.MessageEN
	}
	return ""
}

type BlockoutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDev   bool `protobuf:"varint,1,opt,name=blockDev,proto3" json:"blockDev,omitempty"`
	BlockTest  bool `protobuf:"varint,2,opt,name=blockTest,proto3" json:"blockTest,omitempty"`
	BlockStage bool `protobuf:"varint,3,opt,name=blockStage,proto3" json:"blockStage,omitempty"`
	BlockProd  bool `protobuf:"varint,4,opt,name=blockProd,proto3" json:"blockProd,omitempty"`
}

func (x *BlockoutConfig) Reset() {
	*x = BlockoutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockoutConfig) ProtoMessage() {}

func (x *BlockoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockoutConfig.ProtoReflect.Descriptor instead.
func (*BlockoutConfig) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{34}
}

func (x *BlockoutConfig) GetBlockDev() bool {
	if x != nil {
		return x.BlockDev
	}
	return false
}

func (x *BlockoutConfig) GetBlockTest() bool {
	if x != nil {
		return x.BlockTest
	}
	return false
}

func (x *BlockoutConfig) GetBlockStage() bool {
	if x != nil {
		return x.BlockStage
	}
	return false
}

func (x *BlockoutConfig) GetBlockProd() bool {
	if x != nil {
		return x.BlockProd
	}
	return false
}

type Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Creator                   string                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Desc                      string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo                      string                 `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Name                      string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName               string                 `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Locale                    string                 `protobuf:"bytes,7,opt,name=locale,proto3" json:"locale,omitempty"`
	Config                    *OrgConfig             `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	IsPublic                  bool                   `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	BlockoutConfig            *BlockoutConfig        `protobuf:"bytes,10,opt,name=blockoutConfig,proto3" json:"blockoutConfig,omitempty"`
	EnableReleaseCrossCluster bool                   `protobuf:"varint,11,opt,name=enableReleaseCrossCluster,proto3" json:"enableReleaseCrossCluster,omitempty"`
	Selected                  bool                   `protobuf:"varint,12,opt,name=selected,proto3" json:"selected,omitempty"`
	Operation                 string                 `protobuf:"bytes,13,opt,name=operation,proto3" json:"operation,omitempty"`
	Status                    string                 `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Type                      string                 `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	PublisherID               int64                  `protobuf:"varint,16,opt,name=publisherID,json=publisherId,proto3" json:"publisherID,omitempty"`
	Domain                    string                 `protobuf:"bytes,17,opt,name=domain,proto3" json:"domain,omitempty"`
	OpenFdp                   bool                   `protobuf:"varint,18,opt,name=openFdp,proto3" json:"openFdp,omitempty"`
	Version                   int64                  `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt                 *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                 *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AuditMessage              *AuditMessage          `protobuf:"bytes,22,opt,name=auditMessage,proto3" json:"auditMessage,omitempty"`
}

func (x *Org) Reset() {
	*x = Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_org_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_org_proto_rawDescGZIP(), []int{35}
}

func (x *Org) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Org) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Org) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Org) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Org) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Org) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Org) GetConfig() *OrgConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Org) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Org) GetBlockoutConfig() *BlockoutConfig {
	if x != nil {
		return x.BlockoutConfig
	}
	return nil
}

func (x *Org) GetEnableReleaseCrossCluster() bool {
	if x != nil {
		return x.EnableReleaseCrossCluster
	}
	return false
}

func (x *Org) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

func (x *Org) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Org) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Org) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Org) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

func (x *Org) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Org) GetOpenFdp() bool {
	if x != nil {
		return x.OpenFdp
	}
	return false
}

func (x *Org) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Org) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Org) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Org) GetAuditMessage() *AuditMessage {
	if x != nil {
		return x.AuditMessage
	}
	return nil
}

var File_org_proto protoreflect.FileDescriptor

var file_org_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf6, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x22, 0x3b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7c, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x22, 0x4f, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x20, 0x4f,
	0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x57,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f,
	0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4d, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x1e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x47, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65,
	0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x2d,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x4a, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3a, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x53, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x53, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6d, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6d, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6d, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6d, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x74, 0x70, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6d, 0x74, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6d, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x6d, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6d, 0x74, 0x70, 0x49,
	0x73, 0x53, 0x53, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6d, 0x74, 0x70,
	0x49, 0x73, 0x53, 0x53, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6d, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6d, 0x73, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x6d, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x76, 0x6d, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x74, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6d, 0x73, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x76, 0x6d, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x76, 0x6d, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x48, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x48, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x4e, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x64, 0x22, 0x81, 0x06, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c,
	0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x46, 0x64, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xd5, 0x14, 0x0a, 0x0a, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x12, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x12, 0x6e, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x12, 0x68, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x12, 0x1c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x4f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x71, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x12, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x60, 0x0a, 0x07, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x12, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x12, 0x7a, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4f, 0x72, 0x67, 0x12, 0x1d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79, 0x2d, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x1a, 0x0a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0xd1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f,
	0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f,
	0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xfa, 0x81,
	0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x38, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0xb2, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x47, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x6e,
	0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0xfa, 0x81, 0xf9, 0x1b,
	0x23, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22,
	0x30, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xe2, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f,
	0x72, 0x67, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x26, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44,
	0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x1a, 0x18, 0xc2, 0xc4, 0xcb, 0x1c, 0x13, 0x22, 0x0b, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6f, 0x72, 0x67, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_org_proto_rawDescOnce sync.Once
	file_org_proto_rawDescData = file_org_proto_rawDesc
)

func file_org_proto_rawDescGZIP() []byte {
	file_org_proto_rawDescOnce.Do(func() {
		file_org_proto_rawDescData = protoimpl.X.CompressGZIP(file_org_proto_rawDescData)
	})
	return file_org_proto_rawDescData
}

var file_org_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_org_proto_goTypes = []interface{}{
	(*CreateOrgRequest)(nil),                    // 0: erda.core.org.CreateOrgRequest
	(*CreateOrgResponse)(nil),                   // 1: erda.core.org.CreateOrgResponse
	(*UpdateOrgRequest)(nil),                    // 2: erda.core.org.UpdateOrgRequest
	(*UpdateOrgResponse)(nil),                   // 3: erda.core.org.UpdateOrgResponse
	(*GetOrgRequest)(nil),                       // 4: erda.core.org.GetOrgRequest
	(*GetOrgResponse)(nil),                      // 5: erda.core.org.GetOrgResponse
	(*DeleteOrgRequest)(nil),                    // 6: erda.core.org.DeleteOrgRequest
	(*DeleteOrgResponse)(nil),                   // 7: erda.core.org.DeleteOrgResponse
	(*ListOrgRequest)(nil),                      // 8: erda.core.org.ListOrgRequest
	(*ListOrgResponse)(nil),                     // 9: erda.core.org.ListOrgResponse
	(*GetOrgByDomainRequest)(nil),               // 10: erda.core.org.GetOrgByDomainRequest
	(*GetOrgByDomainResponse)(nil),              // 11: erda.core.org.GetOrgByDomainResponse
	(*ChangeCurrentOrgRequest)(nil),             // 12: erda.core.org.ChangeCurrentOrgRequest
	(*ChangeCurrentOrgResponse)(nil),            // 13: erda.core.org.ChangeCurrentOrgResponse
	(*OrgClusterRelationCreateRequest)(nil),     // 14: erda.core.org.OrgClusterRelationCreateRequest
	(*OrgClusterRelationCreateResponse)(nil),    // 15: erda.core.org.OrgClusterRelationCreateResponse
	(*ListOrgClusterRelationRequest)(nil),       // 16: erda.core.org.ListOrgClusterRelationRequest
	(*ListOrgClusterRelationResponse)(nil),      // 17: erda.core.org.ListOrgClusterRelationResponse
	(*OrgClusterRelation)(nil),                  // 18: erda.core.org.OrgClusterRelation
	(*SetReleaseCrossClusterRequest)(nil),       // 19: erda.core.org.SetReleaseCrossClusterRequest
	(*SetReleaseCrossClusterResponse)(nil),      // 20: erda.core.org.SetReleaseCrossClusterResponse
	(*GenVerifyCodeRequest)(nil),                // 21: erda.core.org.GenVerifyCodeRequest
	(*GenVerifyCodeResponse)(nil),               // 22: erda.core.org.GenVerifyCodeResponse
	(*SetNotifyConfigRequest)(nil),              // 23: erda.core.org.SetNotifyConfigRequest
	(*SetNotifyConfigResponse)(nil),             // 24: erda.core.org.SetNotifyConfigResponse
	(*GetNotifyConfigRequest)(nil),              // 25: erda.core.org.GetNotifyConfigRequest
	(*GetNotifyConfigResponse)(nil),             // 26: erda.core.org.GetNotifyConfigResponse
	(*NotifyConfig)(nil),                        // 27: erda.core.org.NotifyConfig
	(*GetOrgClusterRelationsByOrgRequest)(nil),  // 28: erda.core.org.GetOrgClusterRelationsByOrgRequest
	(*GetOrgClusterRelationsByOrgResponse)(nil), // 29: erda.core.org.GetOrgClusterRelationsByOrgResponse
	(*OrgConfig)(nil),                           // 30: erda.core.org.OrgConfig
	(*DereferenceClusterRequest)(nil),           // 31: erda.core.org.DereferenceClusterRequest
	(*DereferenceClusterResponse)(nil),          // 32: erda.core.org.DereferenceClusterResponse
	(*AuditMessage)(nil),                        // 33: erda.core.org.AuditMessage
	(*BlockoutConfig)(nil),                      // 34: erda.core.org.BlockoutConfig
	(*Org)(nil),                                 // 35: erda.core.org.Org
	nil,                                         // 36: erda.core.org.GenVerifyCodeResponse.DataEntry
	(*timestamppb.Timestamp)(nil),               // 37: google.protobuf.Timestamp
}
var file_org_proto_depIdxs = []int32{
	35, // 0: erda.core.org.CreateOrgResponse.data:type_name -> erda.core.org.Org
	30, // 1: erda.core.org.UpdateOrgRequest.config:type_name -> erda.core.org.OrgConfig
	34, // 2: erda.core.org.UpdateOrgRequest.blockoutConfig:type_name -> erda.core.org.BlockoutConfig
	35, // 3: erda.core.org.UpdateOrgResponse.data:type_name -> erda.core.org.Org
	35, // 4: erda.core.org.GetOrgResponse.data:type_name -> erda.core.org.Org
	35, // 5: erda.core.org.DeleteOrgResponse.data:type_name -> erda.core.org.Org
	35, // 6: erda.core.org.ListOrgResponse.list:type_name -> erda.core.org.Org
	35, // 7: erda.core.org.GetOrgByDomainResponse.data:type_name -> erda.core.org.Org
	18, // 8: erda.core.org.ListOrgClusterRelationResponse.data:type_name -> erda.core.org.OrgClusterRelation
	37, // 9: erda.core.org.OrgClusterRelation.createdAt:type_name -> google.protobuf.Timestamp
	37, // 10: erda.core.org.OrgClusterRelation.updatedAt:type_name -> google.protobuf.Timestamp
	36, // 11: erda.core.org.GenVerifyCodeResponse.data:type_name -> erda.core.org.GenVerifyCodeResponse.DataEntry
	30, // 12: erda.core.org.SetNotifyConfigRequest.config:type_name -> erda.core.org.OrgConfig
	27, // 13: erda.core.org.GetNotifyConfigResponse.data:type_name -> erda.core.org.NotifyConfig
	30, // 14: erda.core.org.NotifyConfig.config:type_name -> erda.core.org.OrgConfig
	18, // 15: erda.core.org.GetOrgClusterRelationsByOrgResponse.data:type_name -> erda.core.org.OrgClusterRelation
	30, // 16: erda.core.org.Org.config:type_name -> erda.core.org.OrgConfig
	34, // 17: erda.core.org.Org.blockoutConfig:type_name -> erda.core.org.BlockoutConfig
	37, // 18: erda.core.org.Org.createdAt:type_name -> google.protobuf.Timestamp
	37, // 19: erda.core.org.Org.updatedAt:type_name -> google.protobuf.Timestamp
	33, // 20: erda.core.org.Org.auditMessage:type_name -> erda.core.org.AuditMessage
	0,  // 21: erda.core.org.OrgService.CreateOrg:input_type -> erda.core.org.CreateOrgRequest
	2,  // 22: erda.core.org.OrgService.UpdateOrg:input_type -> erda.core.org.UpdateOrgRequest
	4,  // 23: erda.core.org.OrgService.GetOrg:input_type -> erda.core.org.GetOrgRequest
	6,  // 24: erda.core.org.OrgService.DeleteOrg:input_type -> erda.core.org.DeleteOrgRequest
	8,  // 25: erda.core.org.OrgService.ListOrg:input_type -> erda.core.org.ListOrgRequest
	8,  // 26: erda.core.org.OrgService.ListPublicOrg:input_type -> erda.core.org.ListOrgRequest
	10, // 27: erda.core.org.OrgService.GetOrgByDomain:input_type -> erda.core.org.GetOrgByDomainRequest
	12, // 28: erda.core.org.OrgService.ChangeCurrentOrg:input_type -> erda.core.org.ChangeCurrentOrgRequest
	14, // 29: erda.core.org.OrgService.CreateOrgClusterRelation:input_type -> erda.core.org.OrgClusterRelationCreateRequest
	16, // 30: erda.core.org.OrgService.ListOrgClusterRelation:input_type -> erda.core.org.ListOrgClusterRelationRequest
	19, // 31: erda.core.org.OrgService.SetReleaseCrossCluster:input_type -> erda.core.org.SetReleaseCrossClusterRequest
	21, // 32: erda.core.org.OrgService.GenVerifyCode:input_type -> erda.core.org.GenVerifyCodeRequest
	23, // 33: erda.core.org.OrgService.SetNotifyConfig:input_type -> erda.core.org.SetNotifyConfigRequest
	25, // 34: erda.core.org.OrgService.GetNotifyConfig:input_type -> erda.core.org.GetNotifyConfigRequest
	28, // 35: erda.core.org.OrgService.GetOrgClusterRelationsByOrg:input_type -> erda.core.org.GetOrgClusterRelationsByOrgRequest
	31, // 36: erda.core.org.OrgService.DereferenceCluster:input_type -> erda.core.org.DereferenceClusterRequest
	1,  // 37: erda.core.org.OrgService.CreateOrg:output_type -> erda.core.org.CreateOrgResponse
	3,  // 38: erda.core.org.OrgService.UpdateOrg:output_type -> erda.core.org.UpdateOrgResponse
	5,  // 39: erda.core.org.OrgService.GetOrg:output_type -> erda.core.org.GetOrgResponse
	7,  // 40: erda.core.org.OrgService.DeleteOrg:output_type -> erda.core.org.DeleteOrgResponse
	9,  // 41: erda.core.org.OrgService.ListOrg:output_type -> erda.core.org.ListOrgResponse
	9,  // 42: erda.core.org.OrgService.ListPublicOrg:output_type -> erda.core.org.ListOrgResponse
	11, // 43: erda.core.org.OrgService.GetOrgByDomain:output_type -> erda.core.org.GetOrgByDomainResponse
	13, // 44: erda.core.org.OrgService.ChangeCurrentOrg:output_type -> erda.core.org.ChangeCurrentOrgResponse
	15, // 45: erda.core.org.OrgService.CreateOrgClusterRelation:output_type -> erda.core.org.OrgClusterRelationCreateResponse
	17, // 46: erda.core.org.OrgService.ListOrgClusterRelation:output_type -> erda.core.org.ListOrgClusterRelationResponse
	20, // 47: erda.core.org.OrgService.SetReleaseCrossCluster:output_type -> erda.core.org.SetReleaseCrossClusterResponse
	22, // 48: erda.core.org.OrgService.GenVerifyCode:output_type -> erda.core.org.GenVerifyCodeResponse
	24, // 49: erda.core.org.OrgService.SetNotifyConfig:output_type -> erda.core.org.SetNotifyConfigResponse
	26, // 50: erda.core.org.OrgService.GetNotifyConfig:output_type -> erda.core.org.GetNotifyConfigResponse
	29, // 51: erda.core.org.OrgService.GetOrgClusterRelationsByOrg:output_type -> erda.core.org.GetOrgClusterRelationsByOrgResponse
	32, // 52: erda.core.org.OrgService.DereferenceCluster:output_type -> erda.core.org.DereferenceClusterResponse
	37, // [37:53] is the sub-list for method output_type
	21, // [21:37] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_org_proto_init() }
func file_org_proto_init() {
	if File_org_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_org_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCurrentOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCurrentOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterRelationCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterRelationCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgClusterRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgClusterRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReleaseCrossClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReleaseCrossClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenVerifyCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenVerifyCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNotifyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNotifyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgClusterRelationsByOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgClusterRelationsByOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DereferenceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DereferenceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockoutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_org_proto_goTypes,
		DependencyIndexes: file_org_proto_depIdxs,
		MessageInfos:      file_org_proto_msgTypes,
	}.Build()
	File_org_proto = out.File
	file_org_proto_rawDesc = nil
	file_org_proto_goTypes = nil
	file_org_proto_depIdxs = nil
}
