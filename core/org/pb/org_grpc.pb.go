// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: org.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OrgServiceClient is the client API for OrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgServiceClient interface {
	CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error)
	UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error)
	GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error)
	DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error)
	ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error)
	ListPublicOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error)
	GetOrgByDomain(ctx context.Context, in *GetOrgByDomainRequest, opts ...grpc.CallOption) (*GetOrgByDomainResponse, error)
	ChangeCurrentOrg(ctx context.Context, in *ChangeCurrentOrgRequest, opts ...grpc.CallOption) (*ChangeCurrentOrgResponse, error)
	CreateOrgClusterRelation(ctx context.Context, in *OrgClusterRelationCreateRequest, opts ...grpc.CallOption) (*OrgClusterRelationCreateResponse, error)
	ListOrgClusterRelation(ctx context.Context, in *ListOrgClusterRelationRequest, opts ...grpc.CallOption) (*ListOrgClusterRelationResponse, error)
	SetReleaseCrossCluster(ctx context.Context, in *SetReleaseCrossClusterRequest, opts ...grpc.CallOption) (*SetReleaseCrossClusterResponse, error)
	GenVerifyCode(ctx context.Context, in *GenVerifyCodeRequest, opts ...grpc.CallOption) (*GenVerifyCodeResponse, error)
	SetNotifyConfig(ctx context.Context, in *SetNotifyConfigRequest, opts ...grpc.CallOption) (*SetNotifyConfigResponse, error)
	GetNotifyConfig(ctx context.Context, in *GetNotifyConfigRequest, opts ...grpc.CallOption) (*GetNotifyConfigResponse, error)
	GetOrgClusterRelationsByOrg(ctx context.Context, in *GetOrgClusterRelationsByOrgRequest, opts ...grpc.CallOption) (*GetOrgClusterRelationsByOrgResponse, error)
	DereferenceCluster(ctx context.Context, in *DereferenceClusterRequest, opts ...grpc.CallOption) (*DereferenceClusterResponse, error)
}

type orgServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewOrgServiceClient(cc grpc1.ClientConnInterface) OrgServiceClient {
	return &orgServiceClient{cc}
}

func (c *orgServiceClient) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error) {
	out := new(CreateOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error) {
	out := new(UpdateOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error) {
	out := new(GetOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error) {
	out := new(DeleteOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/ListOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) ListPublicOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/ListPublicOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgByDomain(ctx context.Context, in *GetOrgByDomainRequest, opts ...grpc.CallOption) (*GetOrgByDomainResponse, error) {
	out := new(GetOrgByDomainResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/GetOrgByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) ChangeCurrentOrg(ctx context.Context, in *ChangeCurrentOrgRequest, opts ...grpc.CallOption) (*ChangeCurrentOrgResponse, error) {
	out := new(ChangeCurrentOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/ChangeCurrentOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) CreateOrgClusterRelation(ctx context.Context, in *OrgClusterRelationCreateRequest, opts ...grpc.CallOption) (*OrgClusterRelationCreateResponse, error) {
	out := new(OrgClusterRelationCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/CreateOrgClusterRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) ListOrgClusterRelation(ctx context.Context, in *ListOrgClusterRelationRequest, opts ...grpc.CallOption) (*ListOrgClusterRelationResponse, error) {
	out := new(ListOrgClusterRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/ListOrgClusterRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) SetReleaseCrossCluster(ctx context.Context, in *SetReleaseCrossClusterRequest, opts ...grpc.CallOption) (*SetReleaseCrossClusterResponse, error) {
	out := new(SetReleaseCrossClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/SetReleaseCrossCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GenVerifyCode(ctx context.Context, in *GenVerifyCodeRequest, opts ...grpc.CallOption) (*GenVerifyCodeResponse, error) {
	out := new(GenVerifyCodeResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/GenVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) SetNotifyConfig(ctx context.Context, in *SetNotifyConfigRequest, opts ...grpc.CallOption) (*SetNotifyConfigResponse, error) {
	out := new(SetNotifyConfigResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/SetNotifyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetNotifyConfig(ctx context.Context, in *GetNotifyConfigRequest, opts ...grpc.CallOption) (*GetNotifyConfigResponse, error) {
	out := new(GetNotifyConfigResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/GetNotifyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgClusterRelationsByOrg(ctx context.Context, in *GetOrgClusterRelationsByOrgRequest, opts ...grpc.CallOption) (*GetOrgClusterRelationsByOrgResponse, error) {
	out := new(GetOrgClusterRelationsByOrgResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/GetOrgClusterRelationsByOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) DereferenceCluster(ctx context.Context, in *DereferenceClusterRequest, opts ...grpc.CallOption) (*DereferenceClusterResponse, error) {
	out := new(DereferenceClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.core.org.OrgService/DereferenceCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServiceServer is the server API for OrgService service.
// All implementations should embed UnimplementedOrgServiceServer
// for forward compatibility
type OrgServiceServer interface {
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)
	UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error)
	GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error)
	DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error)
	ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error)
	ListPublicOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error)
	GetOrgByDomain(context.Context, *GetOrgByDomainRequest) (*GetOrgByDomainResponse, error)
	ChangeCurrentOrg(context.Context, *ChangeCurrentOrgRequest) (*ChangeCurrentOrgResponse, error)
	CreateOrgClusterRelation(context.Context, *OrgClusterRelationCreateRequest) (*OrgClusterRelationCreateResponse, error)
	ListOrgClusterRelation(context.Context, *ListOrgClusterRelationRequest) (*ListOrgClusterRelationResponse, error)
	SetReleaseCrossCluster(context.Context, *SetReleaseCrossClusterRequest) (*SetReleaseCrossClusterResponse, error)
	GenVerifyCode(context.Context, *GenVerifyCodeRequest) (*GenVerifyCodeResponse, error)
	SetNotifyConfig(context.Context, *SetNotifyConfigRequest) (*SetNotifyConfigResponse, error)
	GetNotifyConfig(context.Context, *GetNotifyConfigRequest) (*GetNotifyConfigResponse, error)
	GetOrgClusterRelationsByOrg(context.Context, *GetOrgClusterRelationsByOrgRequest) (*GetOrgClusterRelationsByOrgResponse, error)
	DereferenceCluster(context.Context, *DereferenceClusterRequest) (*DereferenceClusterResponse, error)
}

// UnimplementedOrgServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrgServiceServer struct {
}

func (*UnimplementedOrgServiceServer) CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedOrgServiceServer) UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedOrgServiceServer) DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (*UnimplementedOrgServiceServer) ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrg not implemented")
}
func (*UnimplementedOrgServiceServer) ListPublicOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicOrg not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgByDomain(context.Context, *GetOrgByDomainRequest) (*GetOrgByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDomain not implemented")
}
func (*UnimplementedOrgServiceServer) ChangeCurrentOrg(context.Context, *ChangeCurrentOrgRequest) (*ChangeCurrentOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCurrentOrg not implemented")
}
func (*UnimplementedOrgServiceServer) CreateOrgClusterRelation(context.Context, *OrgClusterRelationCreateRequest) (*OrgClusterRelationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgClusterRelation not implemented")
}
func (*UnimplementedOrgServiceServer) ListOrgClusterRelation(context.Context, *ListOrgClusterRelationRequest) (*ListOrgClusterRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgClusterRelation not implemented")
}
func (*UnimplementedOrgServiceServer) SetReleaseCrossCluster(context.Context, *SetReleaseCrossClusterRequest) (*SetReleaseCrossClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReleaseCrossCluster not implemented")
}
func (*UnimplementedOrgServiceServer) GenVerifyCode(context.Context, *GenVerifyCodeRequest) (*GenVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenVerifyCode not implemented")
}
func (*UnimplementedOrgServiceServer) SetNotifyConfig(context.Context, *SetNotifyConfigRequest) (*SetNotifyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotifyConfig not implemented")
}
func (*UnimplementedOrgServiceServer) GetNotifyConfig(context.Context, *GetNotifyConfigRequest) (*GetNotifyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyConfig not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgClusterRelationsByOrg(context.Context, *GetOrgClusterRelationsByOrgRequest) (*GetOrgClusterRelationsByOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgClusterRelationsByOrg not implemented")
}
func (*UnimplementedOrgServiceServer) DereferenceCluster(context.Context, *DereferenceClusterRequest) (*DereferenceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DereferenceCluster not implemented")
}

func RegisterOrgServiceServer(s grpc1.ServiceRegistrar, srv OrgServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_OrgService_serviceDesc(srv, opts...), srv)
}

var _OrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.org.OrgService",
	HandlerType: (*OrgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "org.proto",
}

func _get_OrgService_serviceDesc(srv OrgServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_OrgService_CreateOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrg(ctx, req.(*CreateOrgRequest))
	}
	var _OrgService_CreateOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_CreateOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "CreateOrg", srv)
		_OrgService_CreateOrg_Handler = h.Interceptor(_OrgService_CreateOrg_Handler)
	}

	_OrgService_UpdateOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrg(ctx, req.(*UpdateOrgRequest))
	}
	var _OrgService_UpdateOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_UpdateOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "UpdateOrg", srv)
		_OrgService_UpdateOrg_Handler = h.Interceptor(_OrgService_UpdateOrg_Handler)
	}

	_OrgService_GetOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrg(ctx, req.(*GetOrgRequest))
	}
	var _OrgService_GetOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_GetOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "GetOrg", srv)
		_OrgService_GetOrg_Handler = h.Interceptor(_OrgService_GetOrg_Handler)
	}

	_OrgService_DeleteOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteOrg(ctx, req.(*DeleteOrgRequest))
	}
	var _OrgService_DeleteOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_DeleteOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "DeleteOrg", srv)
		_OrgService_DeleteOrg_Handler = h.Interceptor(_OrgService_DeleteOrg_Handler)
	}

	_OrgService_ListOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOrg(ctx, req.(*ListOrgRequest))
	}
	var _OrgService_ListOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_ListOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "ListOrg", srv)
		_OrgService_ListOrg_Handler = h.Interceptor(_OrgService_ListOrg_Handler)
	}

	_OrgService_ListPublicOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListPublicOrg(ctx, req.(*ListOrgRequest))
	}
	var _OrgService_ListPublicOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_ListPublicOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "ListPublicOrg", srv)
		_OrgService_ListPublicOrg_Handler = h.Interceptor(_OrgService_ListPublicOrg_Handler)
	}

	_OrgService_GetOrgByDomain_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgByDomain(ctx, req.(*GetOrgByDomainRequest))
	}
	var _OrgService_GetOrgByDomain_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_GetOrgByDomain_info = transport.NewServiceInfo("erda.core.org.OrgService", "GetOrgByDomain", srv)
		_OrgService_GetOrgByDomain_Handler = h.Interceptor(_OrgService_GetOrgByDomain_Handler)
	}

	_OrgService_ChangeCurrentOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeCurrentOrg(ctx, req.(*ChangeCurrentOrgRequest))
	}
	var _OrgService_ChangeCurrentOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_ChangeCurrentOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "ChangeCurrentOrg", srv)
		_OrgService_ChangeCurrentOrg_Handler = h.Interceptor(_OrgService_ChangeCurrentOrg_Handler)
	}

	_OrgService_CreateOrgClusterRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgClusterRelation(ctx, req.(*OrgClusterRelationCreateRequest))
	}
	var _OrgService_CreateOrgClusterRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_CreateOrgClusterRelation_info = transport.NewServiceInfo("erda.core.org.OrgService", "CreateOrgClusterRelation", srv)
		_OrgService_CreateOrgClusterRelation_Handler = h.Interceptor(_OrgService_CreateOrgClusterRelation_Handler)
	}

	_OrgService_ListOrgClusterRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOrgClusterRelation(ctx, req.(*ListOrgClusterRelationRequest))
	}
	var _OrgService_ListOrgClusterRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_ListOrgClusterRelation_info = transport.NewServiceInfo("erda.core.org.OrgService", "ListOrgClusterRelation", srv)
		_OrgService_ListOrgClusterRelation_Handler = h.Interceptor(_OrgService_ListOrgClusterRelation_Handler)
	}

	_OrgService_SetReleaseCrossCluster_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SetReleaseCrossCluster(ctx, req.(*SetReleaseCrossClusterRequest))
	}
	var _OrgService_SetReleaseCrossCluster_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_SetReleaseCrossCluster_info = transport.NewServiceInfo("erda.core.org.OrgService", "SetReleaseCrossCluster", srv)
		_OrgService_SetReleaseCrossCluster_Handler = h.Interceptor(_OrgService_SetReleaseCrossCluster_Handler)
	}

	_OrgService_GenVerifyCode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GenVerifyCode(ctx, req.(*GenVerifyCodeRequest))
	}
	var _OrgService_GenVerifyCode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_GenVerifyCode_info = transport.NewServiceInfo("erda.core.org.OrgService", "GenVerifyCode", srv)
		_OrgService_GenVerifyCode_Handler = h.Interceptor(_OrgService_GenVerifyCode_Handler)
	}

	_OrgService_SetNotifyConfig_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SetNotifyConfig(ctx, req.(*SetNotifyConfigRequest))
	}
	var _OrgService_SetNotifyConfig_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_SetNotifyConfig_info = transport.NewServiceInfo("erda.core.org.OrgService", "SetNotifyConfig", srv)
		_OrgService_SetNotifyConfig_Handler = h.Interceptor(_OrgService_SetNotifyConfig_Handler)
	}

	_OrgService_GetNotifyConfig_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetNotifyConfig(ctx, req.(*GetNotifyConfigRequest))
	}
	var _OrgService_GetNotifyConfig_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_GetNotifyConfig_info = transport.NewServiceInfo("erda.core.org.OrgService", "GetNotifyConfig", srv)
		_OrgService_GetNotifyConfig_Handler = h.Interceptor(_OrgService_GetNotifyConfig_Handler)
	}

	_OrgService_GetOrgClusterRelationsByOrg_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgClusterRelationsByOrg(ctx, req.(*GetOrgClusterRelationsByOrgRequest))
	}
	var _OrgService_GetOrgClusterRelationsByOrg_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_GetOrgClusterRelationsByOrg_info = transport.NewServiceInfo("erda.core.org.OrgService", "GetOrgClusterRelationsByOrg", srv)
		_OrgService_GetOrgClusterRelationsByOrg_Handler = h.Interceptor(_OrgService_GetOrgClusterRelationsByOrg_Handler)
	}

	_OrgService_DereferenceCluster_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DereferenceCluster(ctx, req.(*DereferenceClusterRequest))
	}
	var _OrgService_DereferenceCluster_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgService_DereferenceCluster_info = transport.NewServiceInfo("erda.core.org.OrgService", "DereferenceCluster", srv)
		_OrgService_DereferenceCluster_Handler = h.Interceptor(_OrgService_DereferenceCluster_Handler)
	}

	var serviceDesc = _OrgService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).CreateOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_CreateOrg_info)
				}
				if interceptor == nil {
					return _OrgService_CreateOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/CreateOrg",
				}
				return interceptor(ctx, in, info, _OrgService_CreateOrg_Handler)
			},
		},
		{
			MethodName: "UpdateOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).UpdateOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_UpdateOrg_info)
				}
				if interceptor == nil {
					return _OrgService_UpdateOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/UpdateOrg",
				}
				return interceptor(ctx, in, info, _OrgService_UpdateOrg_Handler)
			},
		},
		{
			MethodName: "GetOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).GetOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_GetOrg_info)
				}
				if interceptor == nil {
					return _OrgService_GetOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/GetOrg",
				}
				return interceptor(ctx, in, info, _OrgService_GetOrg_Handler)
			},
		},
		{
			MethodName: "DeleteOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).DeleteOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_DeleteOrg_info)
				}
				if interceptor == nil {
					return _OrgService_DeleteOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/DeleteOrg",
				}
				return interceptor(ctx, in, info, _OrgService_DeleteOrg_Handler)
			},
		},
		{
			MethodName: "ListOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).ListOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_ListOrg_info)
				}
				if interceptor == nil {
					return _OrgService_ListOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/ListOrg",
				}
				return interceptor(ctx, in, info, _OrgService_ListOrg_Handler)
			},
		},
		{
			MethodName: "ListPublicOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).ListPublicOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_ListPublicOrg_info)
				}
				if interceptor == nil {
					return _OrgService_ListPublicOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/ListPublicOrg",
				}
				return interceptor(ctx, in, info, _OrgService_ListPublicOrg_Handler)
			},
		},
		{
			MethodName: "GetOrgByDomain",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgByDomainRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).GetOrgByDomain(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_GetOrgByDomain_info)
				}
				if interceptor == nil {
					return _OrgService_GetOrgByDomain_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/GetOrgByDomain",
				}
				return interceptor(ctx, in, info, _OrgService_GetOrgByDomain_Handler)
			},
		},
		{
			MethodName: "ChangeCurrentOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeCurrentOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).ChangeCurrentOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_ChangeCurrentOrg_info)
				}
				if interceptor == nil {
					return _OrgService_ChangeCurrentOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/ChangeCurrentOrg",
				}
				return interceptor(ctx, in, info, _OrgService_ChangeCurrentOrg_Handler)
			},
		},
		{
			MethodName: "CreateOrgClusterRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgClusterRelationCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).CreateOrgClusterRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_CreateOrgClusterRelation_info)
				}
				if interceptor == nil {
					return _OrgService_CreateOrgClusterRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/CreateOrgClusterRelation",
				}
				return interceptor(ctx, in, info, _OrgService_CreateOrgClusterRelation_Handler)
			},
		},
		{
			MethodName: "ListOrgClusterRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOrgClusterRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).ListOrgClusterRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_ListOrgClusterRelation_info)
				}
				if interceptor == nil {
					return _OrgService_ListOrgClusterRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/ListOrgClusterRelation",
				}
				return interceptor(ctx, in, info, _OrgService_ListOrgClusterRelation_Handler)
			},
		},
		{
			MethodName: "SetReleaseCrossCluster",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SetReleaseCrossClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).SetReleaseCrossCluster(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_SetReleaseCrossCluster_info)
				}
				if interceptor == nil {
					return _OrgService_SetReleaseCrossCluster_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/SetReleaseCrossCluster",
				}
				return interceptor(ctx, in, info, _OrgService_SetReleaseCrossCluster_Handler)
			},
		},
		{
			MethodName: "GenVerifyCode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GenVerifyCodeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).GenVerifyCode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_GenVerifyCode_info)
				}
				if interceptor == nil {
					return _OrgService_GenVerifyCode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/GenVerifyCode",
				}
				return interceptor(ctx, in, info, _OrgService_GenVerifyCode_Handler)
			},
		},
		{
			MethodName: "SetNotifyConfig",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SetNotifyConfigRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).SetNotifyConfig(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_SetNotifyConfig_info)
				}
				if interceptor == nil {
					return _OrgService_SetNotifyConfig_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/SetNotifyConfig",
				}
				return interceptor(ctx, in, info, _OrgService_SetNotifyConfig_Handler)
			},
		},
		{
			MethodName: "GetNotifyConfig",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetNotifyConfigRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).GetNotifyConfig(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_GetNotifyConfig_info)
				}
				if interceptor == nil {
					return _OrgService_GetNotifyConfig_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/GetNotifyConfig",
				}
				return interceptor(ctx, in, info, _OrgService_GetNotifyConfig_Handler)
			},
		},
		{
			MethodName: "GetOrgClusterRelationsByOrg",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgClusterRelationsByOrgRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).GetOrgClusterRelationsByOrg(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_GetOrgClusterRelationsByOrg_info)
				}
				if interceptor == nil {
					return _OrgService_GetOrgClusterRelationsByOrg_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/GetOrgClusterRelationsByOrg",
				}
				return interceptor(ctx, in, info, _OrgService_GetOrgClusterRelationsByOrg_Handler)
			},
		},
		{
			MethodName: "DereferenceCluster",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DereferenceClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgServiceServer).DereferenceCluster(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgService_DereferenceCluster_info)
				}
				if interceptor == nil {
					return _OrgService_DereferenceCluster_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.org.OrgService/DereferenceCluster",
				}
				return interceptor(ctx, in, info, _OrgService_DereferenceCluster_Handler)
			},
		},
	}
	return &serviceDesc
}
