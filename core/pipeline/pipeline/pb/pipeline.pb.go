// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: pipeline.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	pb1 "github.com/erda-project/erda-proto-go/common/pb"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/base/pb"
	pb2 "github.com/erda-project/erda-proto-go/core/pipeline/pb"
	pb3 "github.com/erda-project/erda-proto-go/core/pipeline/queue/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PipelineDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
}

func (x *PipelineDeleteRequest) Reset() {
	*x = PipelineDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDeleteRequest) ProtoMessage() {}

func (x *PipelineDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDeleteRequest.ProtoReflect.Descriptor instead.
func (*PipelineDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineDeleteRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

type PipelineDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineDeleteResponse) Reset() {
	*x = PipelineDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDeleteResponse) ProtoMessage() {}

func (x *PipelineDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDeleteResponse.ProtoReflect.Descriptor instead.
func (*PipelineDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{1}
}

type PipelineDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimplePipelineBaseResult bool   `protobuf:"varint,1,opt,name=simplePipelineBaseResult,proto3" json:"simplePipelineBaseResult,omitempty"`
	PipelineID               uint64 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
}

func (x *PipelineDetailRequest) Reset() {
	*x = PipelineDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailRequest) ProtoMessage() {}

func (x *PipelineDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailRequest.ProtoReflect.Descriptor instead.
func (*PipelineDetailRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineDetailRequest) GetSimplePipelineBaseResult() bool {
	if x != nil {
		return x.SimplePipelineBaseResult
	}
	return false
}

func (x *PipelineDetailRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

type PipelineDetailDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO embed
	// base
	ID          uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Source      string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	YmlName     string            `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName string            `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Type        string            `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string            `protobuf:"bytes,8,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	CronID      *uint64           `protobuf:"varint,9,opt,name=cronID,proto3,oneof" json:"cronID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YmlSource   string            `protobuf:"bytes,11,opt,name=ymlSource,proto3" json:"ymlSource,omitempty"`
	YmlContent  string            `protobuf:"bytes,12,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	Extra       *pb.PipelineExtra `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	// app related info
	OrgID           uint64            `protobuf:"varint,14,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName         string            `protobuf:"bytes,15,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID       uint64            `protobuf:"varint,16,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName     string            `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   uint64            `protobuf:"varint,18,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ApplicationName string            `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch          string            `protobuf:"bytes,20,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit          string            `protobuf:"bytes,21,opt,name=commit,proto3" json:"commit,omitempty"`
	CommitDetail    *pb1.CommitDetail `protobuf:"bytes,22,opt,name=commitDetail,proto3" json:"commitDetail,omitempty"`
	// runtime info
	Progress    float64                `protobuf:"fixed64,23,opt,name=progress,proto3" json:"progress,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,24,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	// additional fields
	PipelineStages            []*pb.PipelineStageDetailDTO            `protobuf:"bytes,29,rep,name=pipelineStages,proto3" json:"pipelineStages,omitempty"`
	PipelineSnippetStages     []*pb.PipelineStageDetailDTO            `protobuf:"bytes,30,rep,name=pipelineSnippetStages,proto3" json:"pipelineSnippetStages,omitempty"`
	PipelineCron              *pb2.Cron                               `protobuf:"bytes,31,opt,name=pipelineCron,proto3" json:"pipelineCron,omitempty"`
	PipelineButton            *pb.PipelineButton                      `protobuf:"bytes,32,opt,name=pipelineButton,proto3" json:"pipelineButton,omitempty"`
	PipelineTaskActionDetails map[string]*pb.PipelineTaskActionDetail `protobuf:"bytes,33,rep,name=pipelineTaskActionDetails,proto3" json:"pipelineTaskActionDetails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RunParams                 []*pb.PipelineParamWithValue            `protobuf:"bytes,34,rep,name=runParams,proto3" json:"runParams,omitempty"`
	Events                    []*pb.PipelineEvent                     `protobuf:"bytes,35,rep,name=events,proto3" json:"events,omitempty"`
	NeedApproval              bool                                    `protobuf:"varint,36,opt,name=needApproval,proto3" json:"needApproval,omitempty"`
}

func (x *PipelineDetailDTO) Reset() {
	*x = PipelineDetailDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailDTO) ProtoMessage() {}

func (x *PipelineDetailDTO) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailDTO.ProtoReflect.Descriptor instead.
func (*PipelineDetailDTO) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *PipelineDetailDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineDetailDTO) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineDetailDTO) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineDetailDTO) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineDetailDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineDetailDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineDetailDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineDetailDTO) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineDetailDTO) GetCronID() uint64 {
	if x != nil && x.CronID != nil {
		return *x.CronID
	}
	return 0
}

func (x *PipelineDetailDTO) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineDetailDTO) GetYmlSource() string {
	if x != nil {
		return x.YmlSource
	}
	return ""
}

func (x *PipelineDetailDTO) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineDetailDTO) GetExtra() *pb.PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineDetailDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PipelineDetailDTO) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *PipelineDetailDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PipelineDetailDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PipelineDetailDTO) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *PipelineDetailDTO) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PipelineDetailDTO) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineDetailDTO) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PipelineDetailDTO) GetCommitDetail() *pb1.CommitDetail {
	if x != nil {
		return x.CommitDetail
	}
	return nil
}

func (x *PipelineDetailDTO) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PipelineDetailDTO) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineDetailDTO) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineDetailDTO) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineDetailDTO) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineDetailDTO) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineDetailDTO) GetPipelineStages() []*pb.PipelineStageDetailDTO {
	if x != nil {
		return x.PipelineStages
	}
	return nil
}

func (x *PipelineDetailDTO) GetPipelineSnippetStages() []*pb.PipelineStageDetailDTO {
	if x != nil {
		return x.PipelineSnippetStages
	}
	return nil
}

func (x *PipelineDetailDTO) GetPipelineCron() *pb2.Cron {
	if x != nil {
		return x.PipelineCron
	}
	return nil
}

func (x *PipelineDetailDTO) GetPipelineButton() *pb.PipelineButton {
	if x != nil {
		return x.PipelineButton
	}
	return nil
}

func (x *PipelineDetailDTO) GetPipelineTaskActionDetails() map[string]*pb.PipelineTaskActionDetail {
	if x != nil {
		return x.PipelineTaskActionDetails
	}
	return nil
}

func (x *PipelineDetailDTO) GetRunParams() []*pb.PipelineParamWithValue {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *PipelineDetailDTO) GetEvents() []*pb.PipelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PipelineDetailDTO) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

type PipelineDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineDetailDTO `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineDetailResponse) Reset() {
	*x = PipelineDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailResponse) ProtoMessage() {}

func (x *PipelineDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailResponse.ProtoReflect.Descriptor instead.
func (*PipelineDetailResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineDetailResponse) GetData() *PipelineDetailDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

// //////////// request & response
type PipelineCreateRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PipelineYml is pipeline yaml content.
	// +required
	PipelineYml string `protobuf:"bytes,1,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	// ClusterName represents the cluster the pipeline will be executed.
	// +required
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// Namespace upper layer could customize pipeline running in which namespace
	// +optional
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// PipelineYmlName
	// Equal to `Name`.
	// Default is `pipeline.yml`.
	// +optional
	PipelineYmlName string `protobuf:"bytes,4,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	// PipelineSource represents the source where pipeline created from.
	// Equal to `Namespace`.
	// +required
	PipelineSource string `protobuf:"bytes,5,opt,name=pipelineSource,proto3" json:"pipelineSource,omitempty"`
	// Labels is Map of string keys and values, can be used to filter pipeline.
	// If label key or value is too long, it will be moved to NormalLabels automatically and overwrite value if key already exists in NormalLabels.
	// +optional
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// NormalLabels is Map of string keys and values, cannot be used to filter pipeline.
	// +optional
	NormalLabels map[string]string `protobuf:"bytes,7,rep,name=normalLabels,proto3" json:"normalLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Envs is Map of string keys and values.
	// +optional
	Envs map[string]string `protobuf:"bytes,8,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ConfigManageNamespaces pipeline fetch configs from cms by namespaces in order.
	// Pipeline won't generate default ns.
	// +optional
	ConfigManageNamespaces []string `protobuf:"bytes,9,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	// AutoRun represents whether auto run the created pipeline.
	// Default is false.
	// +optional
	// Deprecated, please use `AutoRunAtOnce` or `AutoStartCron`.
	// Alias for AutoRunAtOnce.
	AutoRun bool `protobuf:"varint,10,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	// ForceRun represents stop other running pipelines to run.
	// Default is false.
	// +optional
	ForceRun bool `protobuf:"varint,11,opt,name=forceRun,proto3" json:"forceRun,omitempty"`
	// AutoRunAtOnce alias for `AutoRun`.
	// AutoRunAtOnce represents whether auto run the created pipeline.
	// Default is false.
	// +optional
	AutoRunAtOnce bool `protobuf:"varint,12,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	// AutoStartCron represents whether auto start cron.
	// If a pipeline doesn't have `cron` field, ignore.
	// Default is false.
	// +optional
	AutoStartCron bool `protobuf:"varint,13,opt,name=autoStartCron,proto3" json:"autoStartCron,omitempty"`
	// CronStartFrom specify time when to start
	// +optional
	CronStartFrom *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=cronStartFrom,proto3" json:"cronStartFrom,omitempty"`
	// GC represents pipeline gc configs.
	// If config is empty, will use default config.
	// +optional
	GC *pb.PipelineGC `protobuf:"bytes,15,opt,name=GC,json=gc,proto3" json:"GC,omitempty"`
	// RunPipelineParams represents pipeline params runtime input
	// if pipeline have params runPipelineParams can not be empty
	// +optional
	RunParams []*pb.PipelineRunParam `protobuf:"bytes,16,rep,name=runParams,proto3" json:"runParams,omitempty"`
	// BindQueue represents the queue pipeline binds, internal use only, parsed from Labels: LabelBindPipelineQueueID
	BindQueue *pb3.Queue `protobuf:"bytes,17,opt,name=bindQueue,proto3" json:"bindQueue,omitempty"`
	// DefinitionID pipeline definition id
	// +optional
	DefinitionID string `protobuf:"bytes,18,opt,name=definitionID,proto3" json:"definitionID,omitempty"`
	// passed from the invoker, different from config cms
	// eg: gittar.repo
	// +optional
	Secrets map[string]string `protobuf:"bytes,19,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ownerUser pipeline user information
	OwnerUser      *pb.PipelineUser `protobuf:"bytes,20,opt,name=ownerUser,proto3" json:"ownerUser,omitempty"`
	UserID         string           `protobuf:"bytes,21,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient string           `protobuf:"bytes,22,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *PipelineCreateRequestV2) Reset() {
	*x = PipelineCreateRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateRequestV2) ProtoMessage() {}

func (x *PipelineCreateRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateRequestV2.ProtoReflect.Descriptor instead.
func (*PipelineCreateRequestV2) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineCreateRequestV2) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetNormalLabels() map[string]string {
	if x != nil {
		return x.NormalLabels
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *PipelineCreateRequestV2) GetForceRun() bool {
	if x != nil {
		return x.ForceRun
	}
	return false
}

func (x *PipelineCreateRequestV2) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineCreateRequestV2) GetAutoStartCron() bool {
	if x != nil {
		return x.AutoStartCron
	}
	return false
}

func (x *PipelineCreateRequestV2) GetCronStartFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartFrom
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetGC() *pb.PipelineGC {
	if x != nil {
		return x.GC
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetRunParams() []*pb.PipelineRunParam {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetBindQueue() *pb3.Queue {
	if x != nil {
		return x.BindQueue
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetDefinitionID() string {
	if x != nil {
		return x.DefinitionID
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetOwnerUser() *pb.PipelineUser {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

func (x *PipelineCreateRequestV2) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineCreateRequestV2) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type PipelineCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID              uint64   `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch             string   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Source             string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	PipelineYmlSource  string   `protobuf:"bytes,4,opt,name=pipelineYmlSource,proto3" json:"pipelineYmlSource,omitempty"`
	PipelineYmlName    string   `protobuf:"bytes,5,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	PipelineYmlContent string   `protobuf:"bytes,6,opt,name=pipelineYmlContent,proto3" json:"pipelineYmlContent,omitempty"`
	AutoRun            bool     `protobuf:"varint,7,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	CallbackURLs       []string `protobuf:"bytes,8,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
	UserID             string   `protobuf:"bytes,9,opt,name=userID,proto3" json:"userID,omitempty"`
	IsCronTriggered    bool     `protobuf:"varint,10,opt,name=isCronTriggered,proto3" json:"isCronTriggered,omitempty"`
}

func (x *PipelineCreateRequest) Reset() {
	*x = PipelineCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateRequest) ProtoMessage() {}

func (x *PipelineCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateRequest.ProtoReflect.Descriptor instead.
func (*PipelineCreateRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *PipelineCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelineCreateRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlSource() string {
	if x != nil {
		return x.PipelineYmlSource
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlContent() string {
	if x != nil {
		return x.PipelineYmlContent
	}
	return ""
}

func (x *PipelineCreateRequest) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *PipelineCreateRequest) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

func (x *PipelineCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineCreateRequest) GetIsCronTriggered() bool {
	if x != nil {
		return x.IsCronTriggered
	}
	return false
}

type PipelineCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.PipelineDTO `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineCreateResponse) Reset() {
	*x = PipelineCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateResponse) ProtoMessage() {}

func (x *PipelineCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateResponse.ProtoReflect.Descriptor instead.
func (*PipelineCreateResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *PipelineCreateResponse) GetData() *pb.PipelineDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineBatchCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID                 uint64   `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch                string   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Source                string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	BatchPipelineYmlPaths []string `protobuf:"bytes,4,rep,name=batchPipelineYmlPaths,proto3" json:"batchPipelineYmlPaths,omitempty"`
	AutoRun               bool     `protobuf:"varint,5,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	CallbackURLs          []string `protobuf:"bytes,6,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
	UserID                string   `protobuf:"bytes,7,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *PipelineBatchCreateRequest) Reset() {
	*x = PipelineBatchCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineBatchCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineBatchCreateRequest) ProtoMessage() {}

func (x *PipelineBatchCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineBatchCreateRequest.ProtoReflect.Descriptor instead.
func (*PipelineBatchCreateRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *PipelineBatchCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelineBatchCreateRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineBatchCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineBatchCreateRequest) GetBatchPipelineYmlPaths() []string {
	if x != nil {
		return x.BatchPipelineYmlPaths
	}
	return nil
}

func (x *PipelineBatchCreateRequest) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *PipelineBatchCreateRequest) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

func (x *PipelineBatchCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type PipelineBatchCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*pb.PipelineDTO `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineBatchCreateResponse) Reset() {
	*x = PipelineBatchCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineBatchCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineBatchCreateResponse) ProtoMessage() {}

func (x *PipelineBatchCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineBatchCreateResponse.ProtoReflect.Descriptor instead.
func (*PipelineBatchCreateResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *PipelineBatchCreateResponse) GetData() map[string]*pb.PipelineDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelinePagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// todo json name
	Branches                  string                     `protobuf:"bytes,1,opt,name=branches,proto3" json:"branches,omitempty"`
	Sources                   string                     `protobuf:"bytes,2,opt,name=sources,proto3" json:"sources,omitempty"`
	YmlNames                  string                     `protobuf:"bytes,3,opt,name=ymlNames,proto3" json:"ymlNames,omitempty"`
	Statuses                  string                     `protobuf:"bytes,4,opt,name=statuses,proto3" json:"statuses,omitempty"`
	AppID                     uint64                     `protobuf:"varint,5,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch                    []string                   `protobuf:"bytes,6,rep,name=branch,proto3" json:"branch,omitempty"`
	Source                    []string                   `protobuf:"bytes,7,rep,name=source,proto3" json:"source,omitempty"`
	AllSources                bool                       `protobuf:"varint,8,opt,name=allSources,proto3" json:"allSources,omitempty"`
	YmlName                   []string                   `protobuf:"bytes,9,rep,name=ymlName,proto3" json:"ymlName,omitempty"`
	Status                    []string                   `protobuf:"bytes,10,rep,name=status,proto3" json:"status,omitempty"`
	NotStatus                 []string                   `protobuf:"bytes,11,rep,name=notStatus,proto3" json:"notStatus,omitempty"`
	TriggerMode               []string                   `protobuf:"bytes,12,rep,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	ClusterName               []string                   `protobuf:"bytes,13,rep,name=clusterName,proto3" json:"clusterName,omitempty"`
	IncludeSnippet            bool                       `protobuf:"varint,14,opt,name=includeSnippet,proto3" json:"includeSnippet,omitempty"`
	StartTimeBegin            *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=startTimeBegin,proto3" json:"startTimeBegin,omitempty"`
	StartTimeBeginTimestamp   int64                      `protobuf:"varint,16,opt,name=startTimeBeginTimestamp,proto3" json:"startTimeBeginTimestamp,omitempty"`
	StartedAt                 string                     `protobuf:"bytes,17,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	EndTimeBegin              *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=endTimeBegin,proto3" json:"endTimeBegin,omitempty"`
	EndTimeBeginTimestamp     int64                      `protobuf:"varint,19,opt,name=endTimeBeginTimestamp,proto3" json:"endTimeBeginTimestamp,omitempty"`
	EndedAt                   string                     `protobuf:"bytes,20,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	StartTimeCreated          *timestamppb.Timestamp     `protobuf:"bytes,21,opt,name=startTimeCreated,proto3" json:"startTimeCreated,omitempty"`
	StartTimeCreatedTimestamp int64                      `protobuf:"varint,22,opt,name=startTimeCreatedTimestamp,proto3" json:"startTimeCreatedTimestamp,omitempty"`
	EndTimeCreated            *timestamppb.Timestamp     `protobuf:"bytes,23,opt,name=endTimeCreated,proto3" json:"endTimeCreated,omitempty"`
	EndTimeCreatedTimestamp   int64                      `protobuf:"varint,24,opt,name=endTimeCreatedTimestamp,proto3" json:"endTimeCreatedTimestamp,omitempty"`
	MustMatchLabels           string                     `protobuf:"bytes,25,opt,name=mustMatchLabels,proto3" json:"mustMatchLabels,omitempty"`
	MustMatchLabel            []string                   `protobuf:"bytes,26,rep,name=mustMatchLabel,proto3" json:"mustMatchLabel,omitempty"`
	MustMatchLabelsJSON       map[string]*structpb.Value `protobuf:"bytes,27,rep,name=mustMatchLabelsJSON,proto3" json:"mustMatchLabelsJSON,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AnyMatchLabels            string                     `protobuf:"bytes,28,opt,name=anyMatchLabels,proto3" json:"anyMatchLabels,omitempty"`
	AnyMatchLabel             []string                   `protobuf:"bytes,29,rep,name=anyMatchLabel,proto3" json:"anyMatchLabel,omitempty"`
	AnyMatchLabelsJSON        map[string]*structpb.Value `protobuf:"bytes,30,rep,name=anyMatchLabelsJSON,proto3" json:"anyMatchLabelsJSON,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageNum                   int64                      `protobuf:"varint,31,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageNo                    int64                      `protobuf:"varint,32,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize                  int64                      `protobuf:"varint,33,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	LargePageSize             bool                       `protobuf:"varint,34,opt,name=largePageSize,proto3" json:"largePageSize,omitempty"`
	CountOnly                 bool                       `protobuf:"varint,35,opt,name=countOnly,proto3" json:"countOnly,omitempty"`
	SelectCols                []string                   `protobuf:"bytes,36,rep,name=selectCols,proto3" json:"selectCols,omitempty"`
	AscCols                   []string                   `protobuf:"bytes,37,rep,name=ascCols,proto3" json:"ascCols,omitempty"`
	DescCols                  []string                   `protobuf:"bytes,38,rep,name=descCols,proto3" json:"descCols,omitempty"`
	StartIDGt                 uint64                     `protobuf:"varint,39,opt,name=startIDGt,proto3" json:"startIDGt,omitempty"`
	EndIDLt                   uint64                     `protobuf:"varint,40,opt,name=endIDLt,proto3" json:"endIDLt,omitempty"`
	PipelineDefinitionRequest *PipelineDefinitionRequest `protobuf:"bytes,41,opt,name=pipelineDefinitionRequest,proto3" json:"pipelineDefinitionRequest,omitempty"`
	PipelineDefinition        string                     `protobuf:"bytes,42,opt,name=pipelineDefinition,proto3" json:"pipelineDefinition,omitempty"`
}

func (x *PipelinePagingRequest) Reset() {
	*x = PipelinePagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePagingRequest) ProtoMessage() {}

func (x *PipelinePagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePagingRequest.ProtoReflect.Descriptor instead.
func (*PipelinePagingRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *PipelinePagingRequest) GetBranches() string {
	if x != nil {
		return x.Branches
	}
	return ""
}

func (x *PipelinePagingRequest) GetSources() string {
	if x != nil {
		return x.Sources
	}
	return ""
}

func (x *PipelinePagingRequest) GetYmlNames() string {
	if x != nil {
		return x.YmlNames
	}
	return ""
}

func (x *PipelinePagingRequest) GetStatuses() string {
	if x != nil {
		return x.Statuses
	}
	return ""
}

func (x *PipelinePagingRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelinePagingRequest) GetBranch() []string {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *PipelinePagingRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PipelinePagingRequest) GetAllSources() bool {
	if x != nil {
		return x.AllSources
	}
	return false
}

func (x *PipelinePagingRequest) GetYmlName() []string {
	if x != nil {
		return x.YmlName
	}
	return nil
}

func (x *PipelinePagingRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PipelinePagingRequest) GetNotStatus() []string {
	if x != nil {
		return x.NotStatus
	}
	return nil
}

func (x *PipelinePagingRequest) GetTriggerMode() []string {
	if x != nil {
		return x.TriggerMode
	}
	return nil
}

func (x *PipelinePagingRequest) GetClusterName() []string {
	if x != nil {
		return x.ClusterName
	}
	return nil
}

func (x *PipelinePagingRequest) GetIncludeSnippet() bool {
	if x != nil {
		return x.IncludeSnippet
	}
	return false
}

func (x *PipelinePagingRequest) GetStartTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeBegin
	}
	return nil
}

func (x *PipelinePagingRequest) GetStartTimeBeginTimestamp() int64 {
	if x != nil {
		return x.StartTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *PipelinePagingRequest) GetEndTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeBegin
	}
	return nil
}

func (x *PipelinePagingRequest) GetEndTimeBeginTimestamp() int64 {
	if x != nil {
		return x.EndTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetEndedAt() string {
	if x != nil {
		return x.EndedAt
	}
	return ""
}

func (x *PipelinePagingRequest) GetStartTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeCreated
	}
	return nil
}

func (x *PipelinePagingRequest) GetStartTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.StartTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetEndTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeCreated
	}
	return nil
}

func (x *PipelinePagingRequest) GetEndTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.EndTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetMustMatchLabels() string {
	if x != nil {
		return x.MustMatchLabels
	}
	return ""
}

func (x *PipelinePagingRequest) GetMustMatchLabel() []string {
	if x != nil {
		return x.MustMatchLabel
	}
	return nil
}

func (x *PipelinePagingRequest) GetMustMatchLabelsJSON() map[string]*structpb.Value {
	if x != nil {
		return x.MustMatchLabelsJSON
	}
	return nil
}

func (x *PipelinePagingRequest) GetAnyMatchLabels() string {
	if x != nil {
		return x.AnyMatchLabels
	}
	return ""
}

func (x *PipelinePagingRequest) GetAnyMatchLabel() []string {
	if x != nil {
		return x.AnyMatchLabel
	}
	return nil
}

func (x *PipelinePagingRequest) GetAnyMatchLabelsJSON() map[string]*structpb.Value {
	if x != nil {
		return x.AnyMatchLabelsJSON
	}
	return nil
}

func (x *PipelinePagingRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PipelinePagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PipelinePagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PipelinePagingRequest) GetLargePageSize() bool {
	if x != nil {
		return x.LargePageSize
	}
	return false
}

func (x *PipelinePagingRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *PipelinePagingRequest) GetSelectCols() []string {
	if x != nil {
		return x.SelectCols
	}
	return nil
}

func (x *PipelinePagingRequest) GetAscCols() []string {
	if x != nil {
		return x.AscCols
	}
	return nil
}

func (x *PipelinePagingRequest) GetDescCols() []string {
	if x != nil {
		return x.DescCols
	}
	return nil
}

func (x *PipelinePagingRequest) GetStartIDGt() uint64 {
	if x != nil {
		return x.StartIDGt
	}
	return 0
}

func (x *PipelinePagingRequest) GetEndIDLt() uint64 {
	if x != nil {
		return x.EndIDLt
	}
	return 0
}

func (x *PipelinePagingRequest) GetPipelineDefinitionRequest() *PipelineDefinitionRequest {
	if x != nil {
		return x.PipelineDefinitionRequest
	}
	return nil
}

func (x *PipelinePagingRequest) GetPipelineDefinition() string {
	if x != nil {
		return x.PipelineDefinition
	}
	return ""
}

type PipelinePagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineListResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelinePagingResponse) Reset() {
	*x = PipelinePagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePagingResponse) ProtoMessage() {}

func (x *PipelinePagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePagingResponse.ProtoReflect.Descriptor instead.
func (*PipelinePagingResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *PipelinePagingResponse) GetData() *PipelineListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines       []*PagePipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	Total           int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPageSize int64           `protobuf:"varint,3,opt,name=currentPageSize,proto3" json:"currentPageSize,omitempty"`
}

func (x *PipelineListResponseData) Reset() {
	*x = PipelineListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineListResponseData) ProtoMessage() {}

func (x *PipelineListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineListResponseData.ProtoReflect.Descriptor instead.
func (*PipelineListResponseData) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *PipelineListResponseData) GetPipelines() []*PagePipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *PipelineListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineListResponseData) GetCurrentPageSize() int64 {
	if x != nil {
		return x.CurrentPageSize
	}
	return 0
}

type PagePipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	CronID       uint64            `protobuf:"varint,2,opt,name=cronID,proto3" json:"cronID,omitempty"`
	Commit       string            `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Source       string            `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	YmlName      string            `protobuf:"bytes,5,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Extra        *pb.PipelineExtra `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	FilterLabels map[string]string `protobuf:"bytes,7,rep,name=filterLabels,proto3" json:"filterLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NormalLabels map[string]string `protobuf:"bytes,8,rep,name=normalLabels,proto3" json:"normalLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// runtime
	Type        string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string  `protobuf:"bytes,10,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	ClusterName string  `protobuf:"bytes,11,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string  `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Progress    float64 `protobuf:"fixed64,13,opt,name=progress,proto3" json:"progress,omitempty"` // eg: 0.8 = 80%
	// snippet
	IsSnippet        bool   `protobuf:"varint,14,opt,name=isSnippet,proto3" json:"isSnippet,omitempty"`
	ParentPipelineID uint64 `protobuf:"varint,15,opt,name=parentPipelineID,proto3" json:"parentPipelineID,omitempty"`
	ParentTaskID     uint64 `protobuf:"varint,16,opt,name=parentTaskID,proto3" json:"parentTaskID,omitempty"`
	// time
	CostTimeSec        int64                  `protobuf:"varint,17,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated        *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated        *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	DefinitionPageInfo *pb.DefinitionPageInfo `protobuf:"bytes,22,opt,name=definitionPageInfo,proto3" json:"definitionPageInfo,omitempty"`
}

func (x *PagePipeline) Reset() {
	*x = PagePipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagePipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagePipeline) ProtoMessage() {}

func (x *PagePipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagePipeline.ProtoReflect.Descriptor instead.
func (*PagePipeline) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *PagePipeline) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PagePipeline) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *PagePipeline) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PagePipeline) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PagePipeline) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PagePipeline) GetExtra() *pb.PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PagePipeline) GetFilterLabels() map[string]string {
	if x != nil {
		return x.FilterLabels
	}
	return nil
}

func (x *PagePipeline) GetNormalLabels() map[string]string {
	if x != nil {
		return x.NormalLabels
	}
	return nil
}

func (x *PagePipeline) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PagePipeline) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PagePipeline) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PagePipeline) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PagePipeline) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PagePipeline) GetIsSnippet() bool {
	if x != nil {
		return x.IsSnippet
	}
	return false
}

func (x *PagePipeline) GetParentPipelineID() uint64 {
	if x != nil {
		return x.ParentPipelineID
	}
	return 0
}

func (x *PagePipeline) GetParentTaskID() uint64 {
	if x != nil {
		return x.ParentTaskID
	}
	return 0
}

func (x *PagePipeline) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PagePipeline) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PagePipeline) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PagePipeline) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PagePipeline) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PagePipeline) GetDefinitionPageInfo() *pb.DefinitionPageInfo {
	if x != nil {
		return x.DefinitionPageInfo
	}
	return nil
}

type PipelineDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creators      []string `protobuf:"bytes,2,rep,name=creators,proto3" json:"creators,omitempty"`
	SourceRemotes []string `protobuf:"bytes,3,rep,name=sourceRemotes,proto3" json:"sourceRemotes,omitempty"`
	Location      string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	DefinitionID  string   `protobuf:"bytes,5,opt,name=definitionID,proto3" json:"definitionID,omitempty"`
}

func (x *PipelineDefinitionRequest) Reset() {
	*x = PipelineDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDefinitionRequest) ProtoMessage() {}

func (x *PipelineDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDefinitionRequest.ProtoReflect.Descriptor instead.
func (*PipelineDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *PipelineDefinitionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineDefinitionRequest) GetCreators() []string {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *PipelineDefinitionRequest) GetSourceRemotes() []string {
	if x != nil {
		return x.SourceRemotes
	}
	return nil
}

func (x *PipelineDefinitionRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *PipelineDefinitionRequest) GetDefinitionID() string {
	if x != nil {
		return x.DefinitionID
	}
	return ""
}

type PipelineTaskOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskAlias string `protobuf:"bytes,2,opt,name=taskAlias,proto3" json:"taskAlias,omitempty"`
	Disable   *bool  `protobuf:"varint,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
	Pause     *bool  `protobuf:"varint,4,opt,name=pause,proto3,oneof" json:"pause,omitempty"`
}

func (x *PipelineTaskOperateRequest) Reset() {
	*x = PipelineTaskOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskOperateRequest) ProtoMessage() {}

func (x *PipelineTaskOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskOperateRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *PipelineTaskOperateRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PipelineTaskOperateRequest) GetTaskAlias() string {
	if x != nil {
		return x.TaskAlias
	}
	return ""
}

func (x *PipelineTaskOperateRequest) GetDisable() bool {
	if x != nil && x.Disable != nil {
		return *x.Disable
	}
	return false
}

func (x *PipelineTaskOperateRequest) GetPause() bool {
	if x != nil && x.Pause != nil {
		return *x.Pause
	}
	return false
}

type PipelineOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID   uint64                        `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	TaskOperates []*PipelineTaskOperateRequest `protobuf:"bytes,2,rep,name=taskOperates,proto3" json:"taskOperates,omitempty"`
}

func (x *PipelineOperateRequest) Reset() {
	*x = PipelineOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateRequest) ProtoMessage() {}

func (x *PipelineOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineOperateRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *PipelineOperateRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineOperateRequest) GetTaskOperates() []*PipelineTaskOperateRequest {
	if x != nil {
		return x.TaskOperates
	}
	return nil
}

type PipelineOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineOperateResponse) Reset() {
	*x = PipelineOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateResponse) ProtoMessage() {}

func (x *PipelineOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateResponse.ProtoReflect.Descriptor instead.
func (*PipelineOperateResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{17}
}

type PipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID             uint64                 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // get from path variable
	ForceRun               bool                   `protobuf:"varint,2,opt,name=forceRun,proto3" json:"forceRun,omitempty"`
	PipelineRunParams      []*pb.PipelineRunParam `protobuf:"bytes,3,rep,name=pipelineRunParams,proto3" json:"pipelineRunParams,omitempty"`
	ConfigManageNamespaces []string               `protobuf:"bytes,4,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	Secrets                map[string]string      `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserID                 string                 `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient         string                 `protobuf:"bytes,7,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *PipelineRunRequest) Reset() {
	*x = PipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunRequest) ProtoMessage() {}

func (x *PipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunRequest.ProtoReflect.Descriptor instead.
func (*PipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *PipelineRunRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRunRequest) GetForceRun() bool {
	if x != nil {
		return x.ForceRun
	}
	return false
}

func (x *PipelineRunRequest) GetPipelineRunParams() []*pb.PipelineRunParam {
	if x != nil {
		return x.PipelineRunParams
	}
	return nil
}

func (x *PipelineRunRequest) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineRunRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PipelineRunRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineRunRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type PipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineRunResponse) Reset() {
	*x = PipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunResponse) ProtoMessage() {}

func (x *PipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{19}
}

type PipelineCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID     uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient string `protobuf:"bytes,3,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *PipelineCancelRequest) Reset() {
	*x = PipelineCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCancelRequest) ProtoMessage() {}

func (x *PipelineCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCancelRequest.ProtoReflect.Descriptor instead.
func (*PipelineCancelRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *PipelineCancelRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineCancelRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineCancelRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type PipelineCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineCancelResponse) Reset() {
	*x = PipelineCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCancelResponse) ProtoMessage() {}

func (x *PipelineCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCancelResponse.ProtoReflect.Descriptor instead.
func (*PipelineCancelResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{21}
}

type PipelineRerunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID     uint64            `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	AutoRunAtOnce  bool              `protobuf:"varint,2,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	Secrets        map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserID         string            `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient string            `protobuf:"bytes,5,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *PipelineRerunRequest) Reset() {
	*x = PipelineRerunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunRequest) ProtoMessage() {}

func (x *PipelineRerunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunRequest.ProtoReflect.Descriptor instead.
func (*PipelineRerunRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *PipelineRerunRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRerunRequest) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineRerunRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PipelineRerunRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineRerunRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type PipelineRerunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.PipelineDTO `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineRerunResponse) Reset() {
	*x = PipelineRerunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunResponse) ProtoMessage() {}

func (x *PipelineRerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *PipelineRerunResponse) GetData() *pb.PipelineDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineRerunFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID     uint64            `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	AutoRunAtOnce  bool              `protobuf:"varint,2,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	Secrets        map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserID         string            `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient string            `protobuf:"bytes,5,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *PipelineRerunFailedRequest) Reset() {
	*x = PipelineRerunFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunFailedRequest) ProtoMessage() {}

func (x *PipelineRerunFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunFailedRequest.ProtoReflect.Descriptor instead.
func (*PipelineRerunFailedRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *PipelineRerunFailedRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRerunFailedRequest) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineRerunFailedRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PipelineRerunFailedRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PipelineRerunFailedRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type PipelineRerunFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.PipelineDTO `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineRerunFailedResponse) Reset() {
	*x = PipelineRerunFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunFailedResponse) ProtoMessage() {}

func (x *PipelineRerunFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunFailedResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunFailedResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *PipelineRerunFailedResponse) GetData() *pb.PipelineDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *PipelineStatisticRequest) Reset() {
	*x = PipelineStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStatisticRequest) ProtoMessage() {}

func (x *PipelineStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStatisticRequest.ProtoReflect.Descriptor instead.
func (*PipelineStatisticRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *PipelineStatisticRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineStatisticRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type PipelineStatisticResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    uint64 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Processing uint64 `protobuf:"varint,2,opt,name=processing,proto3" json:"processing,omitempty"`
	Failed     uint64 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	Completed  uint64 `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *PipelineStatisticResponseData) Reset() {
	*x = PipelineStatisticResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStatisticResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStatisticResponseData) ProtoMessage() {}

func (x *PipelineStatisticResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStatisticResponseData.ProtoReflect.Descriptor instead.
func (*PipelineStatisticResponseData) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *PipelineStatisticResponseData) GetSuccess() uint64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *PipelineStatisticResponseData) GetProcessing() uint64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *PipelineStatisticResponseData) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *PipelineStatisticResponseData) GetCompleted() uint64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

type PipelineStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineStatisticResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineStatisticResponse) Reset() {
	*x = PipelineStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStatisticResponse) ProtoMessage() {}

func (x *PipelineStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStatisticResponse.ProtoReflect.Descriptor instead.
func (*PipelineStatisticResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *PipelineStatisticResponse) GetData() *PipelineStatisticResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineSnippetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnippetConfigs []*SnippetDetailQuery `protobuf:"bytes,1,rep,name=snippetConfigs,proto3" json:"snippetConfigs,omitempty"`
}

func (x *PipelineSnippetQueryRequest) Reset() {
	*x = PipelineSnippetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSnippetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSnippetQueryRequest) ProtoMessage() {}

func (x *PipelineSnippetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSnippetQueryRequest.ProtoReflect.Descriptor instead.
func (*PipelineSnippetQueryRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *PipelineSnippetQueryRequest) GetSnippetConfigs() []*SnippetDetailQuery {
	if x != nil {
		return x.SnippetConfigs
	}
	return nil
}

type PipelineSnippetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*SnippetQueryDetail `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineSnippetQueryResponse) Reset() {
	*x = PipelineSnippetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSnippetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSnippetQueryResponse) ProtoMessage() {}

func (x *PipelineSnippetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSnippetQueryResponse.ProtoReflect.Descriptor instead.
func (*PipelineSnippetQueryResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *PipelineSnippetQueryResponse) GetData() map[string]*SnippetQueryDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type SnippetDetailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Alias  string            `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SnippetDetailQuery) Reset() {
	*x = SnippetDetailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetDetailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetDetailQuery) ProtoMessage() {}

func (x *SnippetDetailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetDetailQuery.ProtoReflect.Descriptor instead.
func (*SnippetDetailQuery) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *SnippetDetailQuery) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SnippetDetailQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetDetailQuery) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SnippetDetailQuery) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type SnippetQueryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  []*pb.PipelineParam `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Outputs []string            `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *SnippetQueryDetail) Reset() {
	*x = SnippetQueryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetQueryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetQueryDetail) ProtoMessage() {}

func (x *SnippetQueryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetQueryDetail.ProtoReflect.Descriptor instead.
func (*SnippetQueryDetail) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *SnippetQueryDetail) GetParams() []*pb.PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SnippetQueryDetail) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type PipelineCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineCallbackRequest) Reset() {
	*x = PipelineCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCallbackRequest) ProtoMessage() {}

func (x *PipelineCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCallbackRequest.ProtoReflect.Descriptor instead.
func (*PipelineCallbackRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *PipelineCallbackRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineCallbackRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineCallbackResponse) Reset() {
	*x = PipelineCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCallbackResponse) ProtoMessage() {}

func (x *PipelineCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCallbackResponse.ProtoReflect.Descriptor instead.
func (*PipelineCallbackResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{34}
}

type PipelineTaskViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	YmlNames   string `protobuf:"bytes,2,opt,name=ymlNames,proto3" json:"ymlNames,omitempty"`
	Sources    string `protobuf:"bytes,3,opt,name=sources,proto3" json:"sources,omitempty"`
}

func (x *PipelineTaskViewRequest) Reset() {
	*x = PipelineTaskViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskViewRequest) ProtoMessage() {}

func (x *PipelineTaskViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskViewRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskViewRequest) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *PipelineTaskViewRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineTaskViewRequest) GetYmlNames() string {
	if x != nil {
		return x.YmlNames
	}
	return ""
}

func (x *PipelineTaskViewRequest) GetSources() string {
	if x != nil {
		return x.Sources
	}
	return ""
}

type PipelineTaskViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineDetailDTO `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineTaskViewResponse) Reset() {
	*x = PipelineTaskViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskViewResponse) ProtoMessage() {}

func (x *PipelineTaskViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskViewResponse.ProtoReflect.Descriptor instead.
func (*PipelineTaskViewResponse) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{36}
}

func (x *PipelineTaskViewResponse) GetData() *PipelineDetailDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pipeline_proto protoreflect.FileDescriptor

var file_pipeline_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a,
	0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x80, 0x0f, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x15, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x52, 0x15, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x8b, 0x01, 0x0a, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7f, 0x0a, 0x1e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x0b, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x32, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x29, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x52, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x65, 0x6e, 0x76, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x75, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x75, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x33, 0x0a, 0x02, 0x47, 0x43, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x43, 0x52, 0x02, 0x67, 0x63, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d,
	0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x5b, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x59, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x16,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xee, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5d, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x0f, 0x0a, 0x15, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34,
	0x0a, 0x15, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x75, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x7d, 0x0a, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x7a, 0x0a, 0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x63, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x63, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x44,
	0x47, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x44, 0x47, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x4c, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x4c, 0x74, 0x12, 0x74, 0x0a,
	0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x18, 0x4d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x17, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x63, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe7, 0x08,
	0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x5f,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x5f, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x1a,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x0c, 0x74,
	0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb5, 0x03, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a,
	0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x77, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74,
	0x4f, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x3a,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x15, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x02,
	0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e,
	0x63, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57,
	0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x54,
	0x4f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x1d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x6b, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x1b,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x68,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6e, 0x0a, 0x12, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x22, 0x41, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6f, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x5e, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x89, 0x1b, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x20, 0x76, 0x32, 0x12, 0xc0, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x18,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xff, 0x01, 0x0a, 0x13, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0xfa, 0x81, 0xf9, 0x1b, 0x45, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x0e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x30, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88,
	0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x1f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x20, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xda, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x37, 0x0a, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x37, 0x0a, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x27, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0xf8, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x96, 0xe6,
	0xb6, 0x88, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x0d,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x45, 0x0a, 0x29, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x9a, 0x02, 0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e,
	0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a, 0x30, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x1e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xad,
	0x01, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x9e,
	0x02, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x20, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x20, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12,
	0xe8, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x20, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2d, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x15, 0xc2, 0xc4, 0xcb, 0x1c, 0x10, 0x22, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x41, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipeline_proto_rawDescOnce sync.Once
	file_pipeline_proto_rawDescData = file_pipeline_proto_rawDesc
)

func file_pipeline_proto_rawDescGZIP() []byte {
	file_pipeline_proto_rawDescOnce.Do(func() {
		file_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipeline_proto_rawDescData)
	})
	return file_pipeline_proto_rawDescData
}

var file_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_pipeline_proto_goTypes = []interface{}{
	(*PipelineDeleteRequest)(nil),         // 0: erda.core.pipeline.pipeline.PipelineDeleteRequest
	(*PipelineDeleteResponse)(nil),        // 1: erda.core.pipeline.pipeline.PipelineDeleteResponse
	(*PipelineDetailRequest)(nil),         // 2: erda.core.pipeline.pipeline.PipelineDetailRequest
	(*PipelineDetailDTO)(nil),             // 3: erda.core.pipeline.pipeline.PipelineDetailDTO
	(*PipelineDetailResponse)(nil),        // 4: erda.core.pipeline.pipeline.PipelineDetailResponse
	(*PipelineCreateRequestV2)(nil),       // 5: erda.core.pipeline.pipeline.PipelineCreateRequestV2
	(*PipelineCreateRequest)(nil),         // 6: erda.core.pipeline.pipeline.PipelineCreateRequest
	(*PipelineCreateResponse)(nil),        // 7: erda.core.pipeline.pipeline.PipelineCreateResponse
	(*PipelineBatchCreateRequest)(nil),    // 8: erda.core.pipeline.pipeline.PipelineBatchCreateRequest
	(*PipelineBatchCreateResponse)(nil),   // 9: erda.core.pipeline.pipeline.PipelineBatchCreateResponse
	(*PipelinePagingRequest)(nil),         // 10: erda.core.pipeline.pipeline.PipelinePagingRequest
	(*PipelinePagingResponse)(nil),        // 11: erda.core.pipeline.pipeline.PipelinePagingResponse
	(*PipelineListResponseData)(nil),      // 12: erda.core.pipeline.pipeline.PipelineListResponseData
	(*PagePipeline)(nil),                  // 13: erda.core.pipeline.pipeline.PagePipeline
	(*PipelineDefinitionRequest)(nil),     // 14: erda.core.pipeline.pipeline.PipelineDefinitionRequest
	(*PipelineTaskOperateRequest)(nil),    // 15: erda.core.pipeline.pipeline.PipelineTaskOperateRequest
	(*PipelineOperateRequest)(nil),        // 16: erda.core.pipeline.pipeline.PipelineOperateRequest
	(*PipelineOperateResponse)(nil),       // 17: erda.core.pipeline.pipeline.PipelineOperateResponse
	(*PipelineRunRequest)(nil),            // 18: erda.core.pipeline.pipeline.PipelineRunRequest
	(*PipelineRunResponse)(nil),           // 19: erda.core.pipeline.pipeline.PipelineRunResponse
	(*PipelineCancelRequest)(nil),         // 20: erda.core.pipeline.pipeline.PipelineCancelRequest
	(*PipelineCancelResponse)(nil),        // 21: erda.core.pipeline.pipeline.PipelineCancelResponse
	(*PipelineRerunRequest)(nil),          // 22: erda.core.pipeline.pipeline.PipelineRerunRequest
	(*PipelineRerunResponse)(nil),         // 23: erda.core.pipeline.pipeline.PipelineRerunResponse
	(*PipelineRerunFailedRequest)(nil),    // 24: erda.core.pipeline.pipeline.PipelineRerunFailedRequest
	(*PipelineRerunFailedResponse)(nil),   // 25: erda.core.pipeline.pipeline.PipelineRerunFailedResponse
	(*PipelineStatisticRequest)(nil),      // 26: erda.core.pipeline.pipeline.PipelineStatisticRequest
	(*PipelineStatisticResponseData)(nil), // 27: erda.core.pipeline.pipeline.PipelineStatisticResponseData
	(*PipelineStatisticResponse)(nil),     // 28: erda.core.pipeline.pipeline.PipelineStatisticResponse
	(*PipelineSnippetQueryRequest)(nil),   // 29: erda.core.pipeline.pipeline.PipelineSnippetQueryRequest
	(*PipelineSnippetQueryResponse)(nil),  // 30: erda.core.pipeline.pipeline.PipelineSnippetQueryResponse
	(*SnippetDetailQuery)(nil),            // 31: erda.core.pipeline.pipeline.SnippetDetailQuery
	(*SnippetQueryDetail)(nil),            // 32: erda.core.pipeline.pipeline.SnippetQueryDetail
	(*PipelineCallbackRequest)(nil),       // 33: erda.core.pipeline.pipeline.PipelineCallbackRequest
	(*PipelineCallbackResponse)(nil),      // 34: erda.core.pipeline.pipeline.PipelineCallbackResponse
	(*PipelineTaskViewRequest)(nil),       // 35: erda.core.pipeline.pipeline.PipelineTaskViewRequest
	(*PipelineTaskViewResponse)(nil),      // 36: erda.core.pipeline.pipeline.PipelineTaskViewResponse
	nil,                                   // 37: erda.core.pipeline.pipeline.PipelineDetailDTO.LabelsEntry
	nil,                                   // 38: erda.core.pipeline.pipeline.PipelineDetailDTO.PipelineTaskActionDetailsEntry
	nil,                                   // 39: erda.core.pipeline.pipeline.PipelineCreateRequestV2.LabelsEntry
	nil,                                   // 40: erda.core.pipeline.pipeline.PipelineCreateRequestV2.NormalLabelsEntry
	nil,                                   // 41: erda.core.pipeline.pipeline.PipelineCreateRequestV2.EnvsEntry
	nil,                                   // 42: erda.core.pipeline.pipeline.PipelineCreateRequestV2.SecretsEntry
	nil,                                   // 43: erda.core.pipeline.pipeline.PipelineBatchCreateResponse.DataEntry
	nil,                                   // 44: erda.core.pipeline.pipeline.PipelinePagingRequest.MustMatchLabelsJSONEntry
	nil,                                   // 45: erda.core.pipeline.pipeline.PipelinePagingRequest.AnyMatchLabelsJSONEntry
	nil,                                   // 46: erda.core.pipeline.pipeline.PagePipeline.FilterLabelsEntry
	nil,                                   // 47: erda.core.pipeline.pipeline.PagePipeline.NormalLabelsEntry
	nil,                                   // 48: erda.core.pipeline.pipeline.PipelineRunRequest.SecretsEntry
	nil,                                   // 49: erda.core.pipeline.pipeline.PipelineRerunRequest.SecretsEntry
	nil,                                   // 50: erda.core.pipeline.pipeline.PipelineRerunFailedRequest.SecretsEntry
	nil,                                   // 51: erda.core.pipeline.pipeline.PipelineSnippetQueryResponse.DataEntry
	nil,                                   // 52: erda.core.pipeline.pipeline.SnippetDetailQuery.LabelsEntry
	(*pb.PipelineExtra)(nil),              // 53: erda.core.pipeline.base.PipelineExtra
	(*pb1.CommitDetail)(nil),              // 54: erda.common.CommitDetail
	(*timestamppb.Timestamp)(nil),         // 55: google.protobuf.Timestamp
	(*pb.PipelineStageDetailDTO)(nil),     // 56: erda.core.pipeline.base.PipelineStageDetailDTO
	(*pb2.Cron)(nil),                      // 57: erda.core.pipeline.Cron
	(*pb.PipelineButton)(nil),             // 58: erda.core.pipeline.base.PipelineButton
	(*pb.PipelineParamWithValue)(nil),     // 59: erda.core.pipeline.base.PipelineParamWithValue
	(*pb.PipelineEvent)(nil),              // 60: erda.core.pipeline.base.PipelineEvent
	(*pb.PipelineGC)(nil),                 // 61: erda.core.pipeline.base.PipelineGC
	(*pb.PipelineRunParam)(nil),           // 62: erda.core.pipeline.base.PipelineRunParam
	(*pb3.Queue)(nil),                     // 63: erda.core.pipeline.queue.Queue
	(*pb.PipelineUser)(nil),               // 64: erda.core.pipeline.base.PipelineUser
	(*pb.PipelineDTO)(nil),                // 65: erda.core.pipeline.base.PipelineDTO
	(*pb.DefinitionPageInfo)(nil),         // 66: erda.core.pipeline.base.DefinitionPageInfo
	(*pb.PipelineParam)(nil),              // 67: erda.core.pipeline.base.PipelineParam
	(*pb.PipelineTaskActionDetail)(nil),   // 68: erda.core.pipeline.base.PipelineTaskActionDetail
	(*structpb.Value)(nil),                // 69: google.protobuf.Value
}
var file_pipeline_proto_depIdxs = []int32{
	37, // 0: erda.core.pipeline.pipeline.PipelineDetailDTO.labels:type_name -> erda.core.pipeline.pipeline.PipelineDetailDTO.LabelsEntry
	53, // 1: erda.core.pipeline.pipeline.PipelineDetailDTO.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	54, // 2: erda.core.pipeline.pipeline.PipelineDetailDTO.commitDetail:type_name -> erda.common.CommitDetail
	55, // 3: erda.core.pipeline.pipeline.PipelineDetailDTO.timeBegin:type_name -> google.protobuf.Timestamp
	55, // 4: erda.core.pipeline.pipeline.PipelineDetailDTO.timeEnd:type_name -> google.protobuf.Timestamp
	55, // 5: erda.core.pipeline.pipeline.PipelineDetailDTO.timeCreated:type_name -> google.protobuf.Timestamp
	55, // 6: erda.core.pipeline.pipeline.PipelineDetailDTO.timeUpdated:type_name -> google.protobuf.Timestamp
	56, // 7: erda.core.pipeline.pipeline.PipelineDetailDTO.pipelineStages:type_name -> erda.core.pipeline.base.PipelineStageDetailDTO
	56, // 8: erda.core.pipeline.pipeline.PipelineDetailDTO.pipelineSnippetStages:type_name -> erda.core.pipeline.base.PipelineStageDetailDTO
	57, // 9: erda.core.pipeline.pipeline.PipelineDetailDTO.pipelineCron:type_name -> erda.core.pipeline.Cron
	58, // 10: erda.core.pipeline.pipeline.PipelineDetailDTO.pipelineButton:type_name -> erda.core.pipeline.base.PipelineButton
	38, // 11: erda.core.pipeline.pipeline.PipelineDetailDTO.pipelineTaskActionDetails:type_name -> erda.core.pipeline.pipeline.PipelineDetailDTO.PipelineTaskActionDetailsEntry
	59, // 12: erda.core.pipeline.pipeline.PipelineDetailDTO.runParams:type_name -> erda.core.pipeline.base.PipelineParamWithValue
	60, // 13: erda.core.pipeline.pipeline.PipelineDetailDTO.events:type_name -> erda.core.pipeline.base.PipelineEvent
	3,  // 14: erda.core.pipeline.pipeline.PipelineDetailResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineDetailDTO
	39, // 15: erda.core.pipeline.pipeline.PipelineCreateRequestV2.labels:type_name -> erda.core.pipeline.pipeline.PipelineCreateRequestV2.LabelsEntry
	40, // 16: erda.core.pipeline.pipeline.PipelineCreateRequestV2.normalLabels:type_name -> erda.core.pipeline.pipeline.PipelineCreateRequestV2.NormalLabelsEntry
	41, // 17: erda.core.pipeline.pipeline.PipelineCreateRequestV2.envs:type_name -> erda.core.pipeline.pipeline.PipelineCreateRequestV2.EnvsEntry
	55, // 18: erda.core.pipeline.pipeline.PipelineCreateRequestV2.cronStartFrom:type_name -> google.protobuf.Timestamp
	61, // 19: erda.core.pipeline.pipeline.PipelineCreateRequestV2.GC:type_name -> erda.core.pipeline.base.PipelineGC
	62, // 20: erda.core.pipeline.pipeline.PipelineCreateRequestV2.runParams:type_name -> erda.core.pipeline.base.PipelineRunParam
	63, // 21: erda.core.pipeline.pipeline.PipelineCreateRequestV2.bindQueue:type_name -> erda.core.pipeline.queue.Queue
	42, // 22: erda.core.pipeline.pipeline.PipelineCreateRequestV2.Secrets:type_name -> erda.core.pipeline.pipeline.PipelineCreateRequestV2.SecretsEntry
	64, // 23: erda.core.pipeline.pipeline.PipelineCreateRequestV2.ownerUser:type_name -> erda.core.pipeline.base.PipelineUser
	65, // 24: erda.core.pipeline.pipeline.PipelineCreateResponse.data:type_name -> erda.core.pipeline.base.PipelineDTO
	43, // 25: erda.core.pipeline.pipeline.PipelineBatchCreateResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineBatchCreateResponse.DataEntry
	55, // 26: erda.core.pipeline.pipeline.PipelinePagingRequest.startTimeBegin:type_name -> google.protobuf.Timestamp
	55, // 27: erda.core.pipeline.pipeline.PipelinePagingRequest.endTimeBegin:type_name -> google.protobuf.Timestamp
	55, // 28: erda.core.pipeline.pipeline.PipelinePagingRequest.startTimeCreated:type_name -> google.protobuf.Timestamp
	55, // 29: erda.core.pipeline.pipeline.PipelinePagingRequest.endTimeCreated:type_name -> google.protobuf.Timestamp
	44, // 30: erda.core.pipeline.pipeline.PipelinePagingRequest.mustMatchLabelsJSON:type_name -> erda.core.pipeline.pipeline.PipelinePagingRequest.MustMatchLabelsJSONEntry
	45, // 31: erda.core.pipeline.pipeline.PipelinePagingRequest.anyMatchLabelsJSON:type_name -> erda.core.pipeline.pipeline.PipelinePagingRequest.AnyMatchLabelsJSONEntry
	14, // 32: erda.core.pipeline.pipeline.PipelinePagingRequest.pipelineDefinitionRequest:type_name -> erda.core.pipeline.pipeline.PipelineDefinitionRequest
	12, // 33: erda.core.pipeline.pipeline.PipelinePagingResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineListResponseData
	13, // 34: erda.core.pipeline.pipeline.PipelineListResponseData.pipelines:type_name -> erda.core.pipeline.pipeline.PagePipeline
	53, // 35: erda.core.pipeline.pipeline.PagePipeline.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	46, // 36: erda.core.pipeline.pipeline.PagePipeline.filterLabels:type_name -> erda.core.pipeline.pipeline.PagePipeline.FilterLabelsEntry
	47, // 37: erda.core.pipeline.pipeline.PagePipeline.normalLabels:type_name -> erda.core.pipeline.pipeline.PagePipeline.NormalLabelsEntry
	55, // 38: erda.core.pipeline.pipeline.PagePipeline.timeBegin:type_name -> google.protobuf.Timestamp
	55, // 39: erda.core.pipeline.pipeline.PagePipeline.timeEnd:type_name -> google.protobuf.Timestamp
	55, // 40: erda.core.pipeline.pipeline.PagePipeline.timeCreated:type_name -> google.protobuf.Timestamp
	55, // 41: erda.core.pipeline.pipeline.PagePipeline.timeUpdated:type_name -> google.protobuf.Timestamp
	66, // 42: erda.core.pipeline.pipeline.PagePipeline.definitionPageInfo:type_name -> erda.core.pipeline.base.DefinitionPageInfo
	15, // 43: erda.core.pipeline.pipeline.PipelineOperateRequest.taskOperates:type_name -> erda.core.pipeline.pipeline.PipelineTaskOperateRequest
	62, // 44: erda.core.pipeline.pipeline.PipelineRunRequest.pipelineRunParams:type_name -> erda.core.pipeline.base.PipelineRunParam
	48, // 45: erda.core.pipeline.pipeline.PipelineRunRequest.secrets:type_name -> erda.core.pipeline.pipeline.PipelineRunRequest.SecretsEntry
	49, // 46: erda.core.pipeline.pipeline.PipelineRerunRequest.secrets:type_name -> erda.core.pipeline.pipeline.PipelineRerunRequest.SecretsEntry
	65, // 47: erda.core.pipeline.pipeline.PipelineRerunResponse.data:type_name -> erda.core.pipeline.base.PipelineDTO
	50, // 48: erda.core.pipeline.pipeline.PipelineRerunFailedRequest.secrets:type_name -> erda.core.pipeline.pipeline.PipelineRerunFailedRequest.SecretsEntry
	65, // 49: erda.core.pipeline.pipeline.PipelineRerunFailedResponse.data:type_name -> erda.core.pipeline.base.PipelineDTO
	27, // 50: erda.core.pipeline.pipeline.PipelineStatisticResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineStatisticResponseData
	31, // 51: erda.core.pipeline.pipeline.PipelineSnippetQueryRequest.snippetConfigs:type_name -> erda.core.pipeline.pipeline.SnippetDetailQuery
	51, // 52: erda.core.pipeline.pipeline.PipelineSnippetQueryResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineSnippetQueryResponse.DataEntry
	52, // 53: erda.core.pipeline.pipeline.SnippetDetailQuery.labels:type_name -> erda.core.pipeline.pipeline.SnippetDetailQuery.LabelsEntry
	67, // 54: erda.core.pipeline.pipeline.SnippetQueryDetail.params:type_name -> erda.core.pipeline.base.PipelineParam
	3,  // 55: erda.core.pipeline.pipeline.PipelineTaskViewResponse.data:type_name -> erda.core.pipeline.pipeline.PipelineDetailDTO
	68, // 56: erda.core.pipeline.pipeline.PipelineDetailDTO.PipelineTaskActionDetailsEntry.value:type_name -> erda.core.pipeline.base.PipelineTaskActionDetail
	65, // 57: erda.core.pipeline.pipeline.PipelineBatchCreateResponse.DataEntry.value:type_name -> erda.core.pipeline.base.PipelineDTO
	69, // 58: erda.core.pipeline.pipeline.PipelinePagingRequest.MustMatchLabelsJSONEntry.value:type_name -> google.protobuf.Value
	69, // 59: erda.core.pipeline.pipeline.PipelinePagingRequest.AnyMatchLabelsJSONEntry.value:type_name -> google.protobuf.Value
	32, // 60: erda.core.pipeline.pipeline.PipelineSnippetQueryResponse.DataEntry.value:type_name -> erda.core.pipeline.pipeline.SnippetQueryDetail
	5,  // 61: erda.core.pipeline.pipeline.PipelineService.PipelineCreateV2:input_type -> erda.core.pipeline.pipeline.PipelineCreateRequestV2
	6,  // 62: erda.core.pipeline.pipeline.PipelineService.PipelineCreate:input_type -> erda.core.pipeline.pipeline.PipelineCreateRequest
	8,  // 63: erda.core.pipeline.pipeline.PipelineService.PipelineBatchCreate:input_type -> erda.core.pipeline.pipeline.PipelineBatchCreateRequest
	10, // 64: erda.core.pipeline.pipeline.PipelineService.PipelinePaging:input_type -> erda.core.pipeline.pipeline.PipelinePagingRequest
	2,  // 65: erda.core.pipeline.pipeline.PipelineService.PipelineDetail:input_type -> erda.core.pipeline.pipeline.PipelineDetailRequest
	0,  // 66: erda.core.pipeline.pipeline.PipelineService.PipelineDelete:input_type -> erda.core.pipeline.pipeline.PipelineDeleteRequest
	16, // 67: erda.core.pipeline.pipeline.PipelineService.PipelineOperate:input_type -> erda.core.pipeline.pipeline.PipelineOperateRequest
	18, // 68: erda.core.pipeline.pipeline.PipelineService.PipelineRun:input_type -> erda.core.pipeline.pipeline.PipelineRunRequest
	20, // 69: erda.core.pipeline.pipeline.PipelineService.PipelineCancel:input_type -> erda.core.pipeline.pipeline.PipelineCancelRequest
	22, // 70: erda.core.pipeline.pipeline.PipelineService.PipelineRerun:input_type -> erda.core.pipeline.pipeline.PipelineRerunRequest
	24, // 71: erda.core.pipeline.pipeline.PipelineService.PipelineRerunFailed:input_type -> erda.core.pipeline.pipeline.PipelineRerunFailedRequest
	26, // 72: erda.core.pipeline.pipeline.PipelineService.PipelineStatistic:input_type -> erda.core.pipeline.pipeline.PipelineStatisticRequest
	29, // 73: erda.core.pipeline.pipeline.PipelineService.QueryPipelineSnippet:input_type -> erda.core.pipeline.pipeline.PipelineSnippetQueryRequest
	33, // 74: erda.core.pipeline.pipeline.PipelineService.PipelineCallback:input_type -> erda.core.pipeline.pipeline.PipelineCallbackRequest
	35, // 75: erda.core.pipeline.pipeline.PipelineService.PipelineTaskView:input_type -> erda.core.pipeline.pipeline.PipelineTaskViewRequest
	7,  // 76: erda.core.pipeline.pipeline.PipelineService.PipelineCreateV2:output_type -> erda.core.pipeline.pipeline.PipelineCreateResponse
	7,  // 77: erda.core.pipeline.pipeline.PipelineService.PipelineCreate:output_type -> erda.core.pipeline.pipeline.PipelineCreateResponse
	9,  // 78: erda.core.pipeline.pipeline.PipelineService.PipelineBatchCreate:output_type -> erda.core.pipeline.pipeline.PipelineBatchCreateResponse
	11, // 79: erda.core.pipeline.pipeline.PipelineService.PipelinePaging:output_type -> erda.core.pipeline.pipeline.PipelinePagingResponse
	4,  // 80: erda.core.pipeline.pipeline.PipelineService.PipelineDetail:output_type -> erda.core.pipeline.pipeline.PipelineDetailResponse
	1,  // 81: erda.core.pipeline.pipeline.PipelineService.PipelineDelete:output_type -> erda.core.pipeline.pipeline.PipelineDeleteResponse
	17, // 82: erda.core.pipeline.pipeline.PipelineService.PipelineOperate:output_type -> erda.core.pipeline.pipeline.PipelineOperateResponse
	19, // 83: erda.core.pipeline.pipeline.PipelineService.PipelineRun:output_type -> erda.core.pipeline.pipeline.PipelineRunResponse
	21, // 84: erda.core.pipeline.pipeline.PipelineService.PipelineCancel:output_type -> erda.core.pipeline.pipeline.PipelineCancelResponse
	23, // 85: erda.core.pipeline.pipeline.PipelineService.PipelineRerun:output_type -> erda.core.pipeline.pipeline.PipelineRerunResponse
	25, // 86: erda.core.pipeline.pipeline.PipelineService.PipelineRerunFailed:output_type -> erda.core.pipeline.pipeline.PipelineRerunFailedResponse
	28, // 87: erda.core.pipeline.pipeline.PipelineService.PipelineStatistic:output_type -> erda.core.pipeline.pipeline.PipelineStatisticResponse
	30, // 88: erda.core.pipeline.pipeline.PipelineService.QueryPipelineSnippet:output_type -> erda.core.pipeline.pipeline.PipelineSnippetQueryResponse
	34, // 89: erda.core.pipeline.pipeline.PipelineService.PipelineCallback:output_type -> erda.core.pipeline.pipeline.PipelineCallbackResponse
	36, // 90: erda.core.pipeline.pipeline.PipelineService.PipelineTaskView:output_type -> erda.core.pipeline.pipeline.PipelineTaskViewResponse
	76, // [76:91] is the sub-list for method output_type
	61, // [61:76] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_pipeline_proto_init() }
func file_pipeline_proto_init() {
	if File_pipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineBatchCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineBatchCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagePipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStatisticResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSnippetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSnippetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetDetailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetQueryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pipeline_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pipeline_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipeline_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pipeline_proto_goTypes,
		DependencyIndexes: file_pipeline_proto_depIdxs,
		MessageInfos:      file_pipeline_proto_msgTypes,
	}.Build()
	File_pipeline_proto = out.File
	file_pipeline_proto_rawDesc = nil
	file_pipeline_proto_goTypes = nil
	file_pipeline_proto_depIdxs = nil
}
