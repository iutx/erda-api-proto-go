// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: pipeline.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineServiceClient interface {
	////////// pipelines
	PipelineCreateV2(ctx context.Context, in *PipelineCreateRequestV2, opts ...grpc.CallOption) (*PipelineCreateResponse, error)
	PipelineCreate(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error)
	PipelineBatchCreate(ctx context.Context, in *PipelineBatchCreateRequest, opts ...grpc.CallOption) (*PipelineBatchCreateResponse, error)
	PipelinePaging(ctx context.Context, in *PipelinePagingRequest, opts ...grpc.CallOption) (*PipelinePagingResponse, error)
	PipelineDetail(ctx context.Context, in *PipelineDetailRequest, opts ...grpc.CallOption) (*PipelineDetailResponse, error)
	PipelineDelete(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineDeleteResponse, error)
	PipelineOperate(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error)
	PipelineRun(ctx context.Context, in *PipelineRunRequest, opts ...grpc.CallOption) (*PipelineRunResponse, error)
	PipelineCancel(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error)
	PipelineRerun(ctx context.Context, in *PipelineRerunRequest, opts ...grpc.CallOption) (*PipelineRerunResponse, error)
	PipelineRerunFailed(ctx context.Context, in *PipelineRerunFailedRequest, opts ...grpc.CallOption) (*PipelineRerunFailedResponse, error)
	PipelineStatistic(ctx context.Context, in *PipelineStatisticRequest, opts ...grpc.CallOption) (*PipelineStatisticResponse, error)
	QueryPipelineSnippet(ctx context.Context, in *PipelineSnippetQueryRequest, opts ...grpc.CallOption) (*PipelineSnippetQueryResponse, error)
	PipelineCallback(ctx context.Context, in *PipelineCallbackRequest, opts ...grpc.CallOption) (*PipelineCallbackResponse, error)
	PipelineTaskView(ctx context.Context, in *PipelineTaskViewRequest, opts ...grpc.CallOption) (*PipelineTaskViewResponse, error)
}

type pipelineServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc1.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) PipelineCreateV2(ctx context.Context, in *PipelineCreateRequestV2, opts ...grpc.CallOption) (*PipelineCreateResponse, error) {
	out := new(PipelineCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineCreateV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineCreate(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error) {
	out := new(PipelineCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineBatchCreate(ctx context.Context, in *PipelineBatchCreateRequest, opts ...grpc.CallOption) (*PipelineBatchCreateResponse, error) {
	out := new(PipelineBatchCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineBatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelinePaging(ctx context.Context, in *PipelinePagingRequest, opts ...grpc.CallOption) (*PipelinePagingResponse, error) {
	out := new(PipelinePagingResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelinePaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineDetail(ctx context.Context, in *PipelineDetailRequest, opts ...grpc.CallOption) (*PipelineDetailResponse, error) {
	out := new(PipelineDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineDelete(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineDeleteResponse, error) {
	out := new(PipelineDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineOperate(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error) {
	out := new(PipelineOperateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineOperate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineRun(ctx context.Context, in *PipelineRunRequest, opts ...grpc.CallOption) (*PipelineRunResponse, error) {
	out := new(PipelineRunResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineCancel(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error) {
	out := new(PipelineCancelResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineRerun(ctx context.Context, in *PipelineRerunRequest, opts ...grpc.CallOption) (*PipelineRerunResponse, error) {
	out := new(PipelineRerunResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineRerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineRerunFailed(ctx context.Context, in *PipelineRerunFailedRequest, opts ...grpc.CallOption) (*PipelineRerunFailedResponse, error) {
	out := new(PipelineRerunFailedResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineRerunFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineStatistic(ctx context.Context, in *PipelineStatisticRequest, opts ...grpc.CallOption) (*PipelineStatisticResponse, error) {
	out := new(PipelineStatisticResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) QueryPipelineSnippet(ctx context.Context, in *PipelineSnippetQueryRequest, opts ...grpc.CallOption) (*PipelineSnippetQueryResponse, error) {
	out := new(PipelineSnippetQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/QueryPipelineSnippet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineCallback(ctx context.Context, in *PipelineCallbackRequest, opts ...grpc.CallOption) (*PipelineCallbackResponse, error) {
	out := new(PipelineCallbackResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PipelineTaskView(ctx context.Context, in *PipelineTaskViewRequest, opts ...grpc.CallOption) (*PipelineTaskViewResponse, error) {
	out := new(PipelineTaskViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.pipeline.PipelineService/PipelineTaskView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
// All implementations should embed UnimplementedPipelineServiceServer
// for forward compatibility
type PipelineServiceServer interface {
	////////// pipelines
	PipelineCreateV2(context.Context, *PipelineCreateRequestV2) (*PipelineCreateResponse, error)
	PipelineCreate(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error)
	PipelineBatchCreate(context.Context, *PipelineBatchCreateRequest) (*PipelineBatchCreateResponse, error)
	PipelinePaging(context.Context, *PipelinePagingRequest) (*PipelinePagingResponse, error)
	PipelineDetail(context.Context, *PipelineDetailRequest) (*PipelineDetailResponse, error)
	PipelineDelete(context.Context, *PipelineDeleteRequest) (*PipelineDeleteResponse, error)
	PipelineOperate(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error)
	PipelineRun(context.Context, *PipelineRunRequest) (*PipelineRunResponse, error)
	PipelineCancel(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error)
	PipelineRerun(context.Context, *PipelineRerunRequest) (*PipelineRerunResponse, error)
	PipelineRerunFailed(context.Context, *PipelineRerunFailedRequest) (*PipelineRerunFailedResponse, error)
	PipelineStatistic(context.Context, *PipelineStatisticRequest) (*PipelineStatisticResponse, error)
	QueryPipelineSnippet(context.Context, *PipelineSnippetQueryRequest) (*PipelineSnippetQueryResponse, error)
	PipelineCallback(context.Context, *PipelineCallbackRequest) (*PipelineCallbackResponse, error)
	PipelineTaskView(context.Context, *PipelineTaskViewRequest) (*PipelineTaskViewResponse, error)
}

// UnimplementedPipelineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (*UnimplementedPipelineServiceServer) PipelineCreateV2(context.Context, *PipelineCreateRequestV2) (*PipelineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCreateV2 not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineCreate(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCreate not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineBatchCreate(context.Context, *PipelineBatchCreateRequest) (*PipelineBatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineBatchCreate not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelinePaging(context.Context, *PipelinePagingRequest) (*PipelinePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelinePaging not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineDetail(context.Context, *PipelineDetailRequest) (*PipelineDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineDetail not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineDelete(context.Context, *PipelineDeleteRequest) (*PipelineDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineDelete not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineOperate(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineOperate not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineRun(context.Context, *PipelineRunRequest) (*PipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRun not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineCancel(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCancel not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineRerun(context.Context, *PipelineRerunRequest) (*PipelineRerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRerun not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineRerunFailed(context.Context, *PipelineRerunFailedRequest) (*PipelineRerunFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRerunFailed not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineStatistic(context.Context, *PipelineStatisticRequest) (*PipelineStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineStatistic not implemented")
}
func (*UnimplementedPipelineServiceServer) QueryPipelineSnippet(context.Context, *PipelineSnippetQueryRequest) (*PipelineSnippetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPipelineSnippet not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineCallback(context.Context, *PipelineCallbackRequest) (*PipelineCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCallback not implemented")
}
func (*UnimplementedPipelineServiceServer) PipelineTaskView(context.Context, *PipelineTaskViewRequest) (*PipelineTaskViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineTaskView not implemented")
}

func RegisterPipelineServiceServer(s grpc1.ServiceRegistrar, srv PipelineServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_PipelineService_serviceDesc(srv, opts...), srv)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.pipeline.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "pipeline.proto",
}

func _get_PipelineService_serviceDesc(srv PipelineServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_PipelineService_PipelineCreateV2_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCreateV2(ctx, req.(*PipelineCreateRequestV2))
	}
	var _PipelineService_PipelineCreateV2_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineCreateV2_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineCreateV2", srv)
		_PipelineService_PipelineCreateV2_Handler = h.Interceptor(_PipelineService_PipelineCreateV2_Handler)
	}

	_PipelineService_PipelineCreate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCreate(ctx, req.(*PipelineCreateRequest))
	}
	var _PipelineService_PipelineCreate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineCreate_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineCreate", srv)
		_PipelineService_PipelineCreate_Handler = h.Interceptor(_PipelineService_PipelineCreate_Handler)
	}

	_PipelineService_PipelineBatchCreate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineBatchCreate(ctx, req.(*PipelineBatchCreateRequest))
	}
	var _PipelineService_PipelineBatchCreate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineBatchCreate_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineBatchCreate", srv)
		_PipelineService_PipelineBatchCreate_Handler = h.Interceptor(_PipelineService_PipelineBatchCreate_Handler)
	}

	_PipelineService_PipelinePaging_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelinePaging(ctx, req.(*PipelinePagingRequest))
	}
	var _PipelineService_PipelinePaging_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelinePaging_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelinePaging", srv)
		_PipelineService_PipelinePaging_Handler = h.Interceptor(_PipelineService_PipelinePaging_Handler)
	}

	_PipelineService_PipelineDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineDetail(ctx, req.(*PipelineDetailRequest))
	}
	var _PipelineService_PipelineDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineDetail_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineDetail", srv)
		_PipelineService_PipelineDetail_Handler = h.Interceptor(_PipelineService_PipelineDetail_Handler)
	}

	_PipelineService_PipelineDelete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineDelete(ctx, req.(*PipelineDeleteRequest))
	}
	var _PipelineService_PipelineDelete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineDelete_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineDelete", srv)
		_PipelineService_PipelineDelete_Handler = h.Interceptor(_PipelineService_PipelineDelete_Handler)
	}

	_PipelineService_PipelineOperate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineOperate(ctx, req.(*PipelineOperateRequest))
	}
	var _PipelineService_PipelineOperate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineOperate_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineOperate", srv)
		_PipelineService_PipelineOperate_Handler = h.Interceptor(_PipelineService_PipelineOperate_Handler)
	}

	_PipelineService_PipelineRun_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRun(ctx, req.(*PipelineRunRequest))
	}
	var _PipelineService_PipelineRun_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineRun_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineRun", srv)
		_PipelineService_PipelineRun_Handler = h.Interceptor(_PipelineService_PipelineRun_Handler)
	}

	_PipelineService_PipelineCancel_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCancel(ctx, req.(*PipelineCancelRequest))
	}
	var _PipelineService_PipelineCancel_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineCancel_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineCancel", srv)
		_PipelineService_PipelineCancel_Handler = h.Interceptor(_PipelineService_PipelineCancel_Handler)
	}

	_PipelineService_PipelineRerun_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRerun(ctx, req.(*PipelineRerunRequest))
	}
	var _PipelineService_PipelineRerun_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineRerun_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineRerun", srv)
		_PipelineService_PipelineRerun_Handler = h.Interceptor(_PipelineService_PipelineRerun_Handler)
	}

	_PipelineService_PipelineRerunFailed_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRerunFailed(ctx, req.(*PipelineRerunFailedRequest))
	}
	var _PipelineService_PipelineRerunFailed_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineRerunFailed_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineRerunFailed", srv)
		_PipelineService_PipelineRerunFailed_Handler = h.Interceptor(_PipelineService_PipelineRerunFailed_Handler)
	}

	_PipelineService_PipelineStatistic_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineStatistic(ctx, req.(*PipelineStatisticRequest))
	}
	var _PipelineService_PipelineStatistic_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineStatistic_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineStatistic", srv)
		_PipelineService_PipelineStatistic_Handler = h.Interceptor(_PipelineService_PipelineStatistic_Handler)
	}

	_PipelineService_QueryPipelineSnippet_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryPipelineSnippet(ctx, req.(*PipelineSnippetQueryRequest))
	}
	var _PipelineService_QueryPipelineSnippet_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_QueryPipelineSnippet_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "QueryPipelineSnippet", srv)
		_PipelineService_QueryPipelineSnippet_Handler = h.Interceptor(_PipelineService_QueryPipelineSnippet_Handler)
	}

	_PipelineService_PipelineCallback_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCallback(ctx, req.(*PipelineCallbackRequest))
	}
	var _PipelineService_PipelineCallback_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineCallback_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineCallback", srv)
		_PipelineService_PipelineCallback_Handler = h.Interceptor(_PipelineService_PipelineCallback_Handler)
	}

	_PipelineService_PipelineTaskView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineTaskView(ctx, req.(*PipelineTaskViewRequest))
	}
	var _PipelineService_PipelineTaskView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PipelineService_PipelineTaskView_info = transport.NewServiceInfo("erda.core.pipeline.pipeline.PipelineService", "PipelineTaskView", srv)
		_PipelineService_PipelineTaskView_Handler = h.Interceptor(_PipelineService_PipelineTaskView_Handler)
	}

	var serviceDesc = _PipelineService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "PipelineCreateV2",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCreateRequestV2)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineCreateV2(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineCreateV2_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineCreateV2_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineCreateV2",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineCreateV2_Handler)
			},
		},
		{
			MethodName: "PipelineCreate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineCreate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineCreate_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineCreate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineCreate",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineCreate_Handler)
			},
		},
		{
			MethodName: "PipelineBatchCreate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineBatchCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineBatchCreate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineBatchCreate_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineBatchCreate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineBatchCreate",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineBatchCreate_Handler)
			},
		},
		{
			MethodName: "PipelinePaging",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelinePagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelinePaging(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelinePaging_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelinePaging_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelinePaging",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelinePaging_Handler)
			},
		},
		{
			MethodName: "PipelineDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineDetail_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineDetail",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineDetail_Handler)
			},
		},
		{
			MethodName: "PipelineDelete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineDelete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineDelete_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineDelete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineDelete",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineDelete_Handler)
			},
		},
		{
			MethodName: "PipelineOperate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineOperateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineOperate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineOperate_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineOperate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineOperate",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineOperate_Handler)
			},
		},
		{
			MethodName: "PipelineRun",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRunRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineRun(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineRun_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineRun_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineRun",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineRun_Handler)
			},
		},
		{
			MethodName: "PipelineCancel",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCancelRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineCancel(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineCancel_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineCancel_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineCancel",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineCancel_Handler)
			},
		},
		{
			MethodName: "PipelineRerun",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRerunRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineRerun(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineRerun_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineRerun_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineRerun",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineRerun_Handler)
			},
		},
		{
			MethodName: "PipelineRerunFailed",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRerunFailedRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineRerunFailed(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineRerunFailed_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineRerunFailed_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineRerunFailed",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineRerunFailed_Handler)
			},
		},
		{
			MethodName: "PipelineStatistic",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineStatisticRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineStatistic(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineStatistic_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineStatistic_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineStatistic",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineStatistic_Handler)
			},
		},
		{
			MethodName: "QueryPipelineSnippet",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSnippetQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).QueryPipelineSnippet(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_QueryPipelineSnippet_info)
				}
				if interceptor == nil {
					return _PipelineService_QueryPipelineSnippet_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/QueryPipelineSnippet",
				}
				return interceptor(ctx, in, info, _PipelineService_QueryPipelineSnippet_Handler)
			},
		},
		{
			MethodName: "PipelineCallback",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCallbackRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineCallback(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineCallback_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineCallback_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineCallback",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineCallback_Handler)
			},
		},
		{
			MethodName: "PipelineTaskView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineTaskViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PipelineServiceServer).PipelineTaskView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PipelineService_PipelineTaskView_info)
				}
				if interceptor == nil {
					return _PipelineService_PipelineTaskView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.pipeline.PipelineService/PipelineTaskView",
				}
				return interceptor(ctx, in, info, _PipelineService_PipelineTaskView_Handler)
			},
		},
	}
	return &serviceDesc
}
