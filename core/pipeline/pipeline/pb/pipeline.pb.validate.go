// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pipeline.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDeleteRequestMultiError, or nil if none found.
func (m *PipelineDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return PipelineDeleteRequestMultiError(errors)
	}

	return nil
}

// PipelineDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDeleteRequestMultiError) AllErrors() []error { return m }

// PipelineDeleteRequestValidationError is the validation error returned by
// PipelineDeleteRequest.Validate if the designated constraints aren't met.
type PipelineDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDeleteRequestValidationError) ErrorName() string {
	return "PipelineDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDeleteRequestValidationError{}

// Validate checks the field values on PipelineDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDeleteResponseMultiError, or nil if none found.
func (m *PipelineDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineDeleteResponseMultiError(errors)
	}

	return nil
}

// PipelineDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDeleteResponseMultiError) AllErrors() []error { return m }

// PipelineDeleteResponseValidationError is the validation error returned by
// PipelineDeleteResponse.Validate if the designated constraints aren't met.
type PipelineDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDeleteResponseValidationError) ErrorName() string {
	return "PipelineDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDeleteResponseValidationError{}

// Validate checks the field values on PipelineDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDetailRequestMultiError, or nil if none found.
func (m *PipelineDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SimplePipelineBaseResult

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return PipelineDetailRequestMultiError(errors)
	}

	return nil
}

// PipelineDetailRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDetailRequestMultiError) AllErrors() []error { return m }

// PipelineDetailRequestValidationError is the validation error returned by
// PipelineDetailRequest.Validate if the designated constraints aren't met.
type PipelineDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDetailRequestValidationError) ErrorName() string {
	return "PipelineDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDetailRequestValidationError{}

// Validate checks the field values on PipelineDetailDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineDetailDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDetailDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDetailDTOMultiError, or nil if none found.
func (m *PipelineDetailDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDetailDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Source

	// no validation rules for YmlName

	// no validation rules for Namespace

	// no validation rules for ClusterName

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for TriggerMode

	// no validation rules for Labels

	// no validation rules for YmlSource

	// no validation rules for YmlContent

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for Branch

	// no validation rules for Commit

	if all {
		switch v := interface{}(m.GetCommitDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "CommitDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "CommitDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "CommitDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Progress

	// no validation rules for CostTimeSec

	if all {
		switch v := interface{}(m.GetTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "TimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPipelineStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("PipelineStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("PipelineStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDetailDTOValidationError{
					field:  fmt.Sprintf("PipelineStages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPipelineSnippetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("PipelineSnippetStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("PipelineSnippetStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDetailDTOValidationError{
					field:  fmt.Sprintf("PipelineSnippetStages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPipelineCron()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "PipelineCron",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "PipelineCron",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineCron()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "PipelineCron",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipelineButton()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "PipelineButton",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailDTOValidationError{
					field:  "PipelineButton",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineButton()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailDTOValidationError{
				field:  "PipelineButton",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetPipelineTaskActionDetails()))
		i := 0
		for key := range m.GetPipelineTaskActionDetails() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPipelineTaskActionDetails()[key]
			_ = val

			// no validation rules for PipelineTaskActionDetails[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineDetailDTOValidationError{
							field:  fmt.Sprintf("PipelineTaskActionDetails[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineDetailDTOValidationError{
							field:  fmt.Sprintf("PipelineTaskActionDetails[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("PipelineTaskActionDetails[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRunParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDetailDTOValidationError{
					field:  fmt.Sprintf("RunParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDetailDTOValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDetailDTOValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NeedApproval

	if m.CronID != nil {
		// no validation rules for CronID
	}

	if len(errors) > 0 {
		return PipelineDetailDTOMultiError(errors)
	}

	return nil
}

// PipelineDetailDTOMultiError is an error wrapping multiple validation errors
// returned by PipelineDetailDTO.ValidateAll() if the designated constraints
// aren't met.
type PipelineDetailDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDetailDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDetailDTOMultiError) AllErrors() []error { return m }

// PipelineDetailDTOValidationError is the validation error returned by
// PipelineDetailDTO.Validate if the designated constraints aren't met.
type PipelineDetailDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDetailDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDetailDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDetailDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDetailDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDetailDTOValidationError) ErrorName() string {
	return "PipelineDetailDTOValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDetailDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDetailDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDetailDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDetailDTOValidationError{}

// Validate checks the field values on PipelineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDetailResponseMultiError, or nil if none found.
func (m *PipelineDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineDetailResponseMultiError(errors)
	}

	return nil
}

// PipelineDetailResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDetailResponseMultiError) AllErrors() []error { return m }

// PipelineDetailResponseValidationError is the validation error returned by
// PipelineDetailResponse.Validate if the designated constraints aren't met.
type PipelineDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDetailResponseValidationError) ErrorName() string {
	return "PipelineDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDetailResponseValidationError{}

// Validate checks the field values on PipelineCreateRequestV2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCreateRequestV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCreateRequestV2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCreateRequestV2MultiError, or nil if none found.
func (m *PipelineCreateRequestV2) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCreateRequestV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipelineYml()) < 1 {
		err := PipelineCreateRequestV2ValidationError{
			field:  "PipelineYml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := PipelineCreateRequestV2ValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if utf8.RuneCountInString(m.GetPipelineYmlName()) < 1 {
		err := PipelineCreateRequestV2ValidationError{
			field:  "PipelineYmlName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := PipelineCreateRequestV2ValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for NormalLabels

	// no validation rules for Envs

	// no validation rules for AutoRun

	// no validation rules for ForceRun

	// no validation rules for AutoRunAtOnce

	// no validation rules for AutoStartCron

	if all {
		switch v := interface{}(m.GetCronStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCreateRequestV2ValidationError{
				field:  "CronStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGC()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "GC",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "GC",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGC()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCreateRequestV2ValidationError{
				field:  "GC",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRunParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineCreateRequestV2ValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineCreateRequestV2ValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineCreateRequestV2ValidationError{
					field:  fmt.Sprintf("RunParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBindQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "BindQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "BindQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBindQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCreateRequestV2ValidationError{
				field:  "BindQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DefinitionID

	// no validation rules for Secrets

	if all {
		switch v := interface{}(m.GetOwnerUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "OwnerUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCreateRequestV2ValidationError{
					field:  "OwnerUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCreateRequestV2ValidationError{
				field:  "OwnerUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return PipelineCreateRequestV2MultiError(errors)
	}

	return nil
}

// PipelineCreateRequestV2MultiError is an error wrapping multiple validation
// errors returned by PipelineCreateRequestV2.ValidateAll() if the designated
// constraints aren't met.
type PipelineCreateRequestV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCreateRequestV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCreateRequestV2MultiError) AllErrors() []error { return m }

// PipelineCreateRequestV2ValidationError is the validation error returned by
// PipelineCreateRequestV2.Validate if the designated constraints aren't met.
type PipelineCreateRequestV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCreateRequestV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCreateRequestV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCreateRequestV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCreateRequestV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCreateRequestV2ValidationError) ErrorName() string {
	return "PipelineCreateRequestV2ValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCreateRequestV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCreateRequestV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCreateRequestV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCreateRequestV2ValidationError{}

// Validate checks the field values on PipelineCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCreateRequestMultiError, or nil if none found.
func (m *PipelineCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	// no validation rules for Source

	// no validation rules for PipelineYmlSource

	// no validation rules for PipelineYmlName

	// no validation rules for PipelineYmlContent

	// no validation rules for AutoRun

	// no validation rules for UserID

	// no validation rules for IsCronTriggered

	if len(errors) > 0 {
		return PipelineCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCreateRequestMultiError) AllErrors() []error { return m }

// PipelineCreateRequestValidationError is the validation error returned by
// PipelineCreateRequest.Validate if the designated constraints aren't met.
type PipelineCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCreateRequestValidationError) ErrorName() string {
	return "PipelineCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCreateRequestValidationError{}

// Validate checks the field values on PipelineCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCreateResponseMultiError, or nil if none found.
func (m *PipelineCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineCreateResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCreateResponseMultiError) AllErrors() []error { return m }

// PipelineCreateResponseValidationError is the validation error returned by
// PipelineCreateResponse.Validate if the designated constraints aren't met.
type PipelineCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCreateResponseValidationError) ErrorName() string {
	return "PipelineCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCreateResponseValidationError{}

// Validate checks the field values on PipelineBatchCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineBatchCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineBatchCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineBatchCreateRequestMultiError, or nil if none found.
func (m *PipelineBatchCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineBatchCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	// no validation rules for Source

	// no validation rules for AutoRun

	// no validation rules for UserID

	if len(errors) > 0 {
		return PipelineBatchCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineBatchCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineBatchCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineBatchCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineBatchCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineBatchCreateRequestMultiError) AllErrors() []error { return m }

// PipelineBatchCreateRequestValidationError is the validation error returned
// by PipelineBatchCreateRequest.Validate if the designated constraints aren't met.
type PipelineBatchCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineBatchCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineBatchCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineBatchCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineBatchCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineBatchCreateRequestValidationError) ErrorName() string {
	return "PipelineBatchCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineBatchCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineBatchCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineBatchCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineBatchCreateRequestValidationError{}

// Validate checks the field values on PipelineBatchCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineBatchCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineBatchCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineBatchCreateResponseMultiError, or nil if none found.
func (m *PipelineBatchCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineBatchCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineBatchCreateResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineBatchCreateResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineBatchCreateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PipelineBatchCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineBatchCreateResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineBatchCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineBatchCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineBatchCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineBatchCreateResponseMultiError) AllErrors() []error { return m }

// PipelineBatchCreateResponseValidationError is the validation error returned
// by PipelineBatchCreateResponse.Validate if the designated constraints
// aren't met.
type PipelineBatchCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineBatchCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineBatchCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineBatchCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineBatchCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineBatchCreateResponseValidationError) ErrorName() string {
	return "PipelineBatchCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineBatchCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineBatchCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineBatchCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineBatchCreateResponseValidationError{}

// Validate checks the field values on PipelinePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelinePagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelinePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelinePagingRequestMultiError, or nil if none found.
func (m *PipelinePagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelinePagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branches

	// no validation rules for Sources

	// no validation rules for YmlNames

	// no validation rules for Statuses

	// no validation rules for AppID

	// no validation rules for AllSources

	// no validation rules for IncludeSnippet

	if all {
		switch v := interface{}(m.GetStartTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingRequestValidationError{
				field:  "StartTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTimeBeginTimestamp

	// no validation rules for StartedAt

	if all {
		switch v := interface{}(m.GetEndTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "EndTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "EndTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingRequestValidationError{
				field:  "EndTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EndTimeBeginTimestamp

	// no validation rules for EndedAt

	if all {
		switch v := interface{}(m.GetStartTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "StartTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "StartTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingRequestValidationError{
				field:  "StartTimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTimeCreatedTimestamp

	if all {
		switch v := interface{}(m.GetEndTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "EndTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "EndTimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingRequestValidationError{
				field:  "EndTimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EndTimeCreatedTimestamp

	// no validation rules for MustMatchLabels

	{
		sorted_keys := make([]string, len(m.GetMustMatchLabelsJSON()))
		i := 0
		for key := range m.GetMustMatchLabelsJSON() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMustMatchLabelsJSON()[key]
			_ = val

			// no validation rules for MustMatchLabelsJSON[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelinePagingRequestValidationError{
							field:  fmt.Sprintf("MustMatchLabelsJSON[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelinePagingRequestValidationError{
							field:  fmt.Sprintf("MustMatchLabelsJSON[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelinePagingRequestValidationError{
						field:  fmt.Sprintf("MustMatchLabelsJSON[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for AnyMatchLabels

	{
		sorted_keys := make([]string, len(m.GetAnyMatchLabelsJSON()))
		i := 0
		for key := range m.GetAnyMatchLabelsJSON() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnyMatchLabelsJSON()[key]
			_ = val

			// no validation rules for AnyMatchLabelsJSON[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelinePagingRequestValidationError{
							field:  fmt.Sprintf("AnyMatchLabelsJSON[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelinePagingRequestValidationError{
							field:  fmt.Sprintf("AnyMatchLabelsJSON[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelinePagingRequestValidationError{
						field:  fmt.Sprintf("AnyMatchLabelsJSON[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for PageNum

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for LargePageSize

	// no validation rules for CountOnly

	// no validation rules for StartIDGt

	// no validation rules for EndIDLt

	if all {
		switch v := interface{}(m.GetPipelineDefinitionRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "PipelineDefinitionRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingRequestValidationError{
					field:  "PipelineDefinitionRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineDefinitionRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingRequestValidationError{
				field:  "PipelineDefinitionRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineDefinition

	if len(errors) > 0 {
		return PipelinePagingRequestMultiError(errors)
	}

	return nil
}

// PipelinePagingRequestMultiError is an error wrapping multiple validation
// errors returned by PipelinePagingRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelinePagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelinePagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelinePagingRequestMultiError) AllErrors() []error { return m }

// PipelinePagingRequestValidationError is the validation error returned by
// PipelinePagingRequest.Validate if the designated constraints aren't met.
type PipelinePagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelinePagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelinePagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelinePagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelinePagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelinePagingRequestValidationError) ErrorName() string {
	return "PipelinePagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelinePagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelinePagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelinePagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelinePagingRequestValidationError{}

// Validate checks the field values on PipelinePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelinePagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelinePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelinePagingResponseMultiError, or nil if none found.
func (m *PipelinePagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelinePagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelinePagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelinePagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelinePagingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelinePagingResponseMultiError(errors)
	}

	return nil
}

// PipelinePagingResponseMultiError is an error wrapping multiple validation
// errors returned by PipelinePagingResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelinePagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelinePagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelinePagingResponseMultiError) AllErrors() []error { return m }

// PipelinePagingResponseValidationError is the validation error returned by
// PipelinePagingResponse.Validate if the designated constraints aren't met.
type PipelinePagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelinePagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelinePagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelinePagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelinePagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelinePagingResponseValidationError) ErrorName() string {
	return "PipelinePagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelinePagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelinePagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelinePagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelinePagingResponseValidationError{}

// Validate checks the field values on PipelineListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineListResponseDataMultiError, or nil if none found.
func (m *PipelineListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineListResponseDataValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineListResponseDataValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineListResponseDataValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPageSize

	if len(errors) > 0 {
		return PipelineListResponseDataMultiError(errors)
	}

	return nil
}

// PipelineListResponseDataMultiError is an error wrapping multiple validation
// errors returned by PipelineListResponseData.ValidateAll() if the designated
// constraints aren't met.
type PipelineListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineListResponseDataMultiError) AllErrors() []error { return m }

// PipelineListResponseDataValidationError is the validation error returned by
// PipelineListResponseData.Validate if the designated constraints aren't met.
type PipelineListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineListResponseDataValidationError) ErrorName() string {
	return "PipelineListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineListResponseDataValidationError{}

// Validate checks the field values on PagePipeline with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagePipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagePipeline with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagePipelineMultiError, or
// nil if none found.
func (m *PagePipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *PagePipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for CronID

	// no validation rules for Commit

	// no validation rules for Source

	// no validation rules for YmlName

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterLabels

	// no validation rules for NormalLabels

	// no validation rules for Type

	// no validation rules for TriggerMode

	// no validation rules for ClusterName

	// no validation rules for Status

	// no validation rules for Progress

	// no validation rules for IsSnippet

	// no validation rules for ParentPipelineID

	// no validation rules for ParentTaskID

	// no validation rules for CostTimeSec

	if all {
		switch v := interface{}(m.GetTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "TimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefinitionPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "DefinitionPageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagePipelineValidationError{
					field:  "DefinitionPageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitionPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagePipelineValidationError{
				field:  "DefinitionPageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PagePipelineMultiError(errors)
	}

	return nil
}

// PagePipelineMultiError is an error wrapping multiple validation errors
// returned by PagePipeline.ValidateAll() if the designated constraints aren't met.
type PagePipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagePipelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagePipelineMultiError) AllErrors() []error { return m }

// PagePipelineValidationError is the validation error returned by
// PagePipeline.Validate if the designated constraints aren't met.
type PagePipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagePipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagePipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagePipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagePipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagePipelineValidationError) ErrorName() string { return "PagePipelineValidationError" }

// Error satisfies the builtin error interface
func (e PagePipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagePipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagePipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagePipelineValidationError{}

// Validate checks the field values on PipelineDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDefinitionRequestMultiError, or nil if none found.
func (m *PipelineDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Location

	// no validation rules for DefinitionID

	if len(errors) > 0 {
		return PipelineDefinitionRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineDefinitionRequest.ValidateAll() if the
// designated constraints aren't met.
type PipelineDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionRequestValidationError is the validation error returned by
// PipelineDefinitionRequest.Validate if the designated constraints aren't met.
type PipelineDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionRequestValidationError) ErrorName() string {
	return "PipelineDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionRequestValidationError{}

// Validate checks the field values on PipelineTaskOperateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskOperateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskOperateRequestMultiError, or nil if none found.
func (m *PipelineTaskOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for TaskAlias

	if m.Disable != nil {
		// no validation rules for Disable
	}

	if m.Pause != nil {
		// no validation rules for Pause
	}

	if len(errors) > 0 {
		return PipelineTaskOperateRequestMultiError(errors)
	}

	return nil
}

// PipelineTaskOperateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTaskOperateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineTaskOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskOperateRequestMultiError) AllErrors() []error { return m }

// PipelineTaskOperateRequestValidationError is the validation error returned
// by PipelineTaskOperateRequest.Validate if the designated constraints aren't met.
type PipelineTaskOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskOperateRequestValidationError) ErrorName() string {
	return "PipelineTaskOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskOperateRequestValidationError{}

// Validate checks the field values on PipelineOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineOperateRequestMultiError, or nil if none found.
func (m *PipelineOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	for idx, item := range m.GetTaskOperates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineOperateRequestValidationError{
						field:  fmt.Sprintf("TaskOperates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineOperateRequestValidationError{
						field:  fmt.Sprintf("TaskOperates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineOperateRequestValidationError{
					field:  fmt.Sprintf("TaskOperates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineOperateRequestMultiError(errors)
	}

	return nil
}

// PipelineOperateRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineOperateRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineOperateRequestMultiError) AllErrors() []error { return m }

// PipelineOperateRequestValidationError is the validation error returned by
// PipelineOperateRequest.Validate if the designated constraints aren't met.
type PipelineOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineOperateRequestValidationError) ErrorName() string {
	return "PipelineOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineOperateRequestValidationError{}

// Validate checks the field values on PipelineOperateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineOperateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineOperateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineOperateResponseMultiError, or nil if none found.
func (m *PipelineOperateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineOperateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineOperateResponseMultiError(errors)
	}

	return nil
}

// PipelineOperateResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineOperateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineOperateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineOperateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineOperateResponseMultiError) AllErrors() []error { return m }

// PipelineOperateResponseValidationError is the validation error returned by
// PipelineOperateResponse.Validate if the designated constraints aren't met.
type PipelineOperateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineOperateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineOperateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineOperateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineOperateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineOperateResponseValidationError) ErrorName() string {
	return "PipelineOperateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineOperateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineOperateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineOperateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineOperateResponseValidationError{}

// Validate checks the field values on PipelineRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunRequestMultiError, or nil if none found.
func (m *PipelineRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for ForceRun

	for idx, item := range m.GetPipelineRunParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunRequestValidationError{
						field:  fmt.Sprintf("PipelineRunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunRequestValidationError{
						field:  fmt.Sprintf("PipelineRunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunRequestValidationError{
					field:  fmt.Sprintf("PipelineRunParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Secrets

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return PipelineRunRequestMultiError(errors)
	}

	return nil
}

// PipelineRunRequestMultiError is an error wrapping multiple validation errors
// returned by PipelineRunRequest.ValidateAll() if the designated constraints
// aren't met.
type PipelineRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunRequestMultiError) AllErrors() []error { return m }

// PipelineRunRequestValidationError is the validation error returned by
// PipelineRunRequest.Validate if the designated constraints aren't met.
type PipelineRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunRequestValidationError) ErrorName() string {
	return "PipelineRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunRequestValidationError{}

// Validate checks the field values on PipelineRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunResponseMultiError, or nil if none found.
func (m *PipelineRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineRunResponseMultiError(errors)
	}

	return nil
}

// PipelineRunResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineRunResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunResponseMultiError) AllErrors() []error { return m }

// PipelineRunResponseValidationError is the validation error returned by
// PipelineRunResponse.Validate if the designated constraints aren't met.
type PipelineRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunResponseValidationError) ErrorName() string {
	return "PipelineRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunResponseValidationError{}

// Validate checks the field values on PipelineCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCancelRequestMultiError, or nil if none found.
func (m *PipelineCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return PipelineCancelRequestMultiError(errors)
	}

	return nil
}

// PipelineCancelRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineCancelRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCancelRequestMultiError) AllErrors() []error { return m }

// PipelineCancelRequestValidationError is the validation error returned by
// PipelineCancelRequest.Validate if the designated constraints aren't met.
type PipelineCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCancelRequestValidationError) ErrorName() string {
	return "PipelineCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCancelRequestValidationError{}

// Validate checks the field values on PipelineCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCancelResponseMultiError, or nil if none found.
func (m *PipelineCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineCancelResponseMultiError(errors)
	}

	return nil
}

// PipelineCancelResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCancelResponseMultiError) AllErrors() []error { return m }

// PipelineCancelResponseValidationError is the validation error returned by
// PipelineCancelResponse.Validate if the designated constraints aren't met.
type PipelineCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCancelResponseValidationError) ErrorName() string {
	return "PipelineCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCancelResponseValidationError{}

// Validate checks the field values on PipelineRerunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunRequestMultiError, or nil if none found.
func (m *PipelineRerunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for AutoRunAtOnce

	// no validation rules for Secrets

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return PipelineRerunRequestMultiError(errors)
	}

	return nil
}

// PipelineRerunRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineRerunRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineRerunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunRequestMultiError) AllErrors() []error { return m }

// PipelineRerunRequestValidationError is the validation error returned by
// PipelineRerunRequest.Validate if the designated constraints aren't met.
type PipelineRerunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunRequestValidationError) ErrorName() string {
	return "PipelineRerunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunRequestValidationError{}

// Validate checks the field values on PipelineRerunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunResponseMultiError, or nil if none found.
func (m *PipelineRerunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRerunResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRerunResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRerunResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineRerunResponseMultiError(errors)
	}

	return nil
}

// PipelineRerunResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineRerunResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineRerunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunResponseMultiError) AllErrors() []error { return m }

// PipelineRerunResponseValidationError is the validation error returned by
// PipelineRerunResponse.Validate if the designated constraints aren't met.
type PipelineRerunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunResponseValidationError) ErrorName() string {
	return "PipelineRerunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunResponseValidationError{}

// Validate checks the field values on PipelineRerunFailedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunFailedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunFailedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunFailedRequestMultiError, or nil if none found.
func (m *PipelineRerunFailedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunFailedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for AutoRunAtOnce

	// no validation rules for Secrets

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return PipelineRerunFailedRequestMultiError(errors)
	}

	return nil
}

// PipelineRerunFailedRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineRerunFailedRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineRerunFailedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunFailedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunFailedRequestMultiError) AllErrors() []error { return m }

// PipelineRerunFailedRequestValidationError is the validation error returned
// by PipelineRerunFailedRequest.Validate if the designated constraints aren't met.
type PipelineRerunFailedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunFailedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunFailedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunFailedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunFailedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunFailedRequestValidationError) ErrorName() string {
	return "PipelineRerunFailedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunFailedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunFailedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunFailedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunFailedRequestValidationError{}

// Validate checks the field values on PipelineRerunFailedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineRerunFailedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRerunFailedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRerunFailedResponseMultiError, or nil if none found.
func (m *PipelineRerunFailedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRerunFailedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRerunFailedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRerunFailedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRerunFailedResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineRerunFailedResponseMultiError(errors)
	}

	return nil
}

// PipelineRerunFailedResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineRerunFailedResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineRerunFailedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRerunFailedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRerunFailedResponseMultiError) AllErrors() []error { return m }

// PipelineRerunFailedResponseValidationError is the validation error returned
// by PipelineRerunFailedResponse.Validate if the designated constraints
// aren't met.
type PipelineRerunFailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRerunFailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRerunFailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRerunFailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRerunFailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRerunFailedResponseValidationError) ErrorName() string {
	return "PipelineRerunFailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineRerunFailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRerunFailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRerunFailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRerunFailedResponseValidationError{}

// Validate checks the field values on PipelineStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineStatisticRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineStatisticRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineStatisticRequestMultiError, or nil if none found.
func (m *PipelineStatisticRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineStatisticRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return PipelineStatisticRequestMultiError(errors)
	}

	return nil
}

// PipelineStatisticRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineStatisticRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineStatisticRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineStatisticRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineStatisticRequestMultiError) AllErrors() []error { return m }

// PipelineStatisticRequestValidationError is the validation error returned by
// PipelineStatisticRequest.Validate if the designated constraints aren't met.
type PipelineStatisticRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineStatisticRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineStatisticRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineStatisticRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineStatisticRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineStatisticRequestValidationError) ErrorName() string {
	return "PipelineStatisticRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineStatisticRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineStatisticRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineStatisticRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineStatisticRequestValidationError{}

// Validate checks the field values on PipelineStatisticResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineStatisticResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineStatisticResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineStatisticResponseDataMultiError, or nil if none found.
func (m *PipelineStatisticResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineStatisticResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Processing

	// no validation rules for Failed

	// no validation rules for Completed

	if len(errors) > 0 {
		return PipelineStatisticResponseDataMultiError(errors)
	}

	return nil
}

// PipelineStatisticResponseDataMultiError is an error wrapping multiple
// validation errors returned by PipelineStatisticResponseData.ValidateAll()
// if the designated constraints aren't met.
type PipelineStatisticResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineStatisticResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineStatisticResponseDataMultiError) AllErrors() []error { return m }

// PipelineStatisticResponseDataValidationError is the validation error
// returned by PipelineStatisticResponseData.Validate if the designated
// constraints aren't met.
type PipelineStatisticResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineStatisticResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineStatisticResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineStatisticResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineStatisticResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineStatisticResponseDataValidationError) ErrorName() string {
	return "PipelineStatisticResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineStatisticResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineStatisticResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineStatisticResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineStatisticResponseDataValidationError{}

// Validate checks the field values on PipelineStatisticResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineStatisticResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineStatisticResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineStatisticResponseMultiError, or nil if none found.
func (m *PipelineStatisticResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineStatisticResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineStatisticResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineStatisticResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineStatisticResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineStatisticResponseMultiError(errors)
	}

	return nil
}

// PipelineStatisticResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineStatisticResponse.ValidateAll() if the
// designated constraints aren't met.
type PipelineStatisticResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineStatisticResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineStatisticResponseMultiError) AllErrors() []error { return m }

// PipelineStatisticResponseValidationError is the validation error returned by
// PipelineStatisticResponse.Validate if the designated constraints aren't met.
type PipelineStatisticResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineStatisticResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineStatisticResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineStatisticResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineStatisticResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineStatisticResponseValidationError) ErrorName() string {
	return "PipelineStatisticResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineStatisticResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineStatisticResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineStatisticResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineStatisticResponseValidationError{}

// Validate checks the field values on PipelineSnippetQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSnippetQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSnippetQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSnippetQueryRequestMultiError, or nil if none found.
func (m *PipelineSnippetQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSnippetQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSnippetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineSnippetQueryRequestValidationError{
						field:  fmt.Sprintf("SnippetConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineSnippetQueryRequestValidationError{
						field:  fmt.Sprintf("SnippetConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineSnippetQueryRequestValidationError{
					field:  fmt.Sprintf("SnippetConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineSnippetQueryRequestMultiError(errors)
	}

	return nil
}

// PipelineSnippetQueryRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineSnippetQueryRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineSnippetQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSnippetQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSnippetQueryRequestMultiError) AllErrors() []error { return m }

// PipelineSnippetQueryRequestValidationError is the validation error returned
// by PipelineSnippetQueryRequest.Validate if the designated constraints
// aren't met.
type PipelineSnippetQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSnippetQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSnippetQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSnippetQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSnippetQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSnippetQueryRequestValidationError) ErrorName() string {
	return "PipelineSnippetQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSnippetQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSnippetQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSnippetQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSnippetQueryRequestValidationError{}

// Validate checks the field values on PipelineSnippetQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSnippetQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSnippetQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSnippetQueryResponseMultiError, or nil if none found.
func (m *PipelineSnippetQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSnippetQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineSnippetQueryResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineSnippetQueryResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineSnippetQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PipelineSnippetQueryResponseMultiError(errors)
	}

	return nil
}

// PipelineSnippetQueryResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineSnippetQueryResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineSnippetQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSnippetQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSnippetQueryResponseMultiError) AllErrors() []error { return m }

// PipelineSnippetQueryResponseValidationError is the validation error returned
// by PipelineSnippetQueryResponse.Validate if the designated constraints
// aren't met.
type PipelineSnippetQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSnippetQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSnippetQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSnippetQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSnippetQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSnippetQueryResponseValidationError) ErrorName() string {
	return "PipelineSnippetQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSnippetQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSnippetQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSnippetQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSnippetQueryResponseValidationError{}

// Validate checks the field values on SnippetDetailQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnippetDetailQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnippetDetailQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnippetDetailQueryMultiError, or nil if none found.
func (m *SnippetDetailQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *SnippetDetailQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Alias

	if len(errors) > 0 {
		return SnippetDetailQueryMultiError(errors)
	}

	return nil
}

// SnippetDetailQueryMultiError is an error wrapping multiple validation errors
// returned by SnippetDetailQuery.ValidateAll() if the designated constraints
// aren't met.
type SnippetDetailQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnippetDetailQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnippetDetailQueryMultiError) AllErrors() []error { return m }

// SnippetDetailQueryValidationError is the validation error returned by
// SnippetDetailQuery.Validate if the designated constraints aren't met.
type SnippetDetailQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnippetDetailQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnippetDetailQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnippetDetailQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnippetDetailQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnippetDetailQueryValidationError) ErrorName() string {
	return "SnippetDetailQueryValidationError"
}

// Error satisfies the builtin error interface
func (e SnippetDetailQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnippetDetailQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnippetDetailQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnippetDetailQueryValidationError{}

// Validate checks the field values on SnippetQueryDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnippetQueryDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnippetQueryDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnippetQueryDetailMultiError, or nil if none found.
func (m *SnippetQueryDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SnippetQueryDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SnippetQueryDetailValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SnippetQueryDetailValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SnippetQueryDetailValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SnippetQueryDetailMultiError(errors)
	}

	return nil
}

// SnippetQueryDetailMultiError is an error wrapping multiple validation errors
// returned by SnippetQueryDetail.ValidateAll() if the designated constraints
// aren't met.
type SnippetQueryDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnippetQueryDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnippetQueryDetailMultiError) AllErrors() []error { return m }

// SnippetQueryDetailValidationError is the validation error returned by
// SnippetQueryDetail.Validate if the designated constraints aren't met.
type SnippetQueryDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnippetQueryDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnippetQueryDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnippetQueryDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnippetQueryDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnippetQueryDetailValidationError) ErrorName() string {
	return "SnippetQueryDetailValidationError"
}

// Error satisfies the builtin error interface
func (e SnippetQueryDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnippetQueryDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnippetQueryDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnippetQueryDetailValidationError{}

// Validate checks the field values on PipelineCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCallbackRequestMultiError, or nil if none found.
func (m *PipelineCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Data

	if len(errors) > 0 {
		return PipelineCallbackRequestMultiError(errors)
	}

	return nil
}

// PipelineCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCallbackRequestMultiError) AllErrors() []error { return m }

// PipelineCallbackRequestValidationError is the validation error returned by
// PipelineCallbackRequest.Validate if the designated constraints aren't met.
type PipelineCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCallbackRequestValidationError) ErrorName() string {
	return "PipelineCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCallbackRequestValidationError{}

// Validate checks the field values on PipelineCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCallbackResponseMultiError, or nil if none found.
func (m *PipelineCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineCallbackResponseMultiError(errors)
	}

	return nil
}

// PipelineCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCallbackResponseMultiError) AllErrors() []error { return m }

// PipelineCallbackResponseValidationError is the validation error returned by
// PipelineCallbackResponse.Validate if the designated constraints aren't met.
type PipelineCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCallbackResponseValidationError) ErrorName() string {
	return "PipelineCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCallbackResponseValidationError{}

// Validate checks the field values on PipelineTaskViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskViewRequestMultiError, or nil if none found.
func (m *PipelineTaskViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for YmlNames

	// no validation rules for Sources

	if len(errors) > 0 {
		return PipelineTaskViewRequestMultiError(errors)
	}

	return nil
}

// PipelineTaskViewRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineTaskViewRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineTaskViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskViewRequestMultiError) AllErrors() []error { return m }

// PipelineTaskViewRequestValidationError is the validation error returned by
// PipelineTaskViewRequest.Validate if the designated constraints aren't met.
type PipelineTaskViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskViewRequestValidationError) ErrorName() string {
	return "PipelineTaskViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskViewRequestValidationError{}

// Validate checks the field values on PipelineTaskViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskViewResponseMultiError, or nil if none found.
func (m *PipelineTaskViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTaskViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTaskViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTaskViewResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTaskViewResponseMultiError(errors)
	}

	return nil
}

// PipelineTaskViewResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineTaskViewResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineTaskViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskViewResponseMultiError) AllErrors() []error { return m }

// PipelineTaskViewResponseValidationError is the validation error returned by
// PipelineTaskViewResponse.Validate if the designated constraints aren't met.
type PipelineTaskViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskViewResponseValidationError) ErrorName() string {
	return "PipelineTaskViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskViewResponseValidationError{}
