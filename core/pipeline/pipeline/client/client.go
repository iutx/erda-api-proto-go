// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: pipeline.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/pipeline/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// PipelineService pipeline.proto
	PipelineService() pb.PipelineServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		pipelineService: pb.NewPipelineServiceClient(cc),
	}
}

type serviceClients struct {
	pipelineService pb.PipelineServiceClient
}

func (c *serviceClients) PipelineService() pb.PipelineServiceClient {
	return c.pipelineService
}

type pipelineServiceWrapper struct {
	client pb.PipelineServiceClient
	opts   []grpc1.CallOption
}

func (s *pipelineServiceWrapper) PipelineCreateV2(ctx context.Context, req *pb.PipelineCreateRequestV2) (*pb.PipelineCreateResponse, error) {
	return s.client.PipelineCreateV2(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineCreate(ctx context.Context, req *pb.PipelineCreateRequest) (*pb.PipelineCreateResponse, error) {
	return s.client.PipelineCreate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineBatchCreate(ctx context.Context, req *pb.PipelineBatchCreateRequest) (*pb.PipelineBatchCreateResponse, error) {
	return s.client.PipelineBatchCreate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelinePaging(ctx context.Context, req *pb.PipelinePagingRequest) (*pb.PipelinePagingResponse, error) {
	return s.client.PipelinePaging(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineDetail(ctx context.Context, req *pb.PipelineDetailRequest) (*pb.PipelineDetailResponse, error) {
	return s.client.PipelineDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineDelete(ctx context.Context, req *pb.PipelineDeleteRequest) (*pb.PipelineDeleteResponse, error) {
	return s.client.PipelineDelete(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineOperate(ctx context.Context, req *pb.PipelineOperateRequest) (*pb.PipelineOperateResponse, error) {
	return s.client.PipelineOperate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineRun(ctx context.Context, req *pb.PipelineRunRequest) (*pb.PipelineRunResponse, error) {
	return s.client.PipelineRun(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineCancel(ctx context.Context, req *pb.PipelineCancelRequest) (*pb.PipelineCancelResponse, error) {
	return s.client.PipelineCancel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineRerun(ctx context.Context, req *pb.PipelineRerunRequest) (*pb.PipelineRerunResponse, error) {
	return s.client.PipelineRerun(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineRerunFailed(ctx context.Context, req *pb.PipelineRerunFailedRequest) (*pb.PipelineRerunFailedResponse, error) {
	return s.client.PipelineRerunFailed(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineStatistic(ctx context.Context, req *pb.PipelineStatisticRequest) (*pb.PipelineStatisticResponse, error) {
	return s.client.PipelineStatistic(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) QueryPipelineSnippet(ctx context.Context, req *pb.PipelineSnippetQueryRequest) (*pb.PipelineSnippetQueryResponse, error) {
	return s.client.QueryPipelineSnippet(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineCallback(ctx context.Context, req *pb.PipelineCallbackRequest) (*pb.PipelineCallbackResponse, error) {
	return s.client.PipelineCallback(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *pipelineServiceWrapper) PipelineTaskView(ctx context.Context, req *pb.PipelineTaskViewRequest) (*pb.PipelineTaskViewResponse, error) {
	return s.client.PipelineTaskView(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
