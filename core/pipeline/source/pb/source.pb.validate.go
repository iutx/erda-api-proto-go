// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: source.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineSourceMultiError,
// or nil if none found.
func (m *PipelineSource) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for SourceType

	// no validation rules for Remote

	// no validation rules for Ref

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for PipelineYml

	// no validation rules for VersionLock

	// no validation rules for SoftDeletedAt

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSourceValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSourceValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSourceValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSourceValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSourceValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSourceValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineSourceMultiError(errors)
	}

	return nil
}

// PipelineSourceMultiError is an error wrapping multiple validation errors
// returned by PipelineSource.ValidateAll() if the designated constraints
// aren't met.
type PipelineSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceMultiError) AllErrors() []error { return m }

// PipelineSourceValidationError is the validation error returned by
// PipelineSource.Validate if the designated constraints aren't met.
type PipelineSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceValidationError) ErrorName() string { return "PipelineSourceValidationError" }

// Error satisfies the builtin error interface
func (e PipelineSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceValidationError{}

// Validate checks the field values on PipelineSourceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceCreateRequestMultiError, or nil if none found.
func (m *PipelineSourceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for SourceType

	// no validation rules for Remote

	// no validation rules for Ref

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for PipelineYml

	// no validation rules for VersionLock

	if len(errors) > 0 {
		return PipelineSourceCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceCreateRequestMultiError) AllErrors() []error { return m }

// PipelineSourceCreateRequestValidationError is the validation error returned
// by PipelineSourceCreateRequest.Validate if the designated constraints
// aren't met.
type PipelineSourceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceCreateRequestValidationError) ErrorName() string {
	return "PipelineSourceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceCreateRequestValidationError{}

// Validate checks the field values on PipelineSourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceCreateResponseMultiError, or nil if none found.
func (m *PipelineSourceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSourceCreateResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSourceCreateResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSourceCreateResponseValidationError{
				field:  "PipelineSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineSourceCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineSourceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceCreateResponseMultiError) AllErrors() []error { return m }

// PipelineSourceCreateResponseValidationError is the validation error returned
// by PipelineSourceCreateResponse.Validate if the designated constraints
// aren't met.
type PipelineSourceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceCreateResponseValidationError) ErrorName() string {
	return "PipelineSourceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceCreateResponseValidationError{}

// Validate checks the field values on PipelineSourceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceUpdateRequestMultiError, or nil if none found.
func (m *PipelineSourceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineYml

	// no validation rules for PipelineSourceID

	// no validation rules for VersionLock

	if len(errors) > 0 {
		return PipelineSourceUpdateRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceUpdateRequestMultiError) AllErrors() []error { return m }

// PipelineSourceUpdateRequestValidationError is the validation error returned
// by PipelineSourceUpdateRequest.Validate if the designated constraints
// aren't met.
type PipelineSourceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceUpdateRequestValidationError) ErrorName() string {
	return "PipelineSourceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceUpdateRequestValidationError{}

// Validate checks the field values on PipelineSourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceUpdateResponseMultiError, or nil if none found.
func (m *PipelineSourceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSourceUpdateResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSourceUpdateResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSourceUpdateResponseValidationError{
				field:  "PipelineSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineSourceUpdateResponseMultiError(errors)
	}

	return nil
}

// PipelineSourceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceUpdateResponseMultiError) AllErrors() []error { return m }

// PipelineSourceUpdateResponseValidationError is the validation error returned
// by PipelineSourceUpdateResponse.Validate if the designated constraints
// aren't met.
type PipelineSourceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceUpdateResponseValidationError) ErrorName() string {
	return "PipelineSourceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceUpdateResponseValidationError{}

// Validate checks the field values on PipelineSourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceDeleteRequestMultiError, or nil if none found.
func (m *PipelineSourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineSourceID

	if len(errors) > 0 {
		return PipelineSourceDeleteRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceDeleteRequestMultiError) AllErrors() []error { return m }

// PipelineSourceDeleteRequestValidationError is the validation error returned
// by PipelineSourceDeleteRequest.Validate if the designated constraints
// aren't met.
type PipelineSourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceDeleteRequestValidationError) ErrorName() string {
	return "PipelineSourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceDeleteRequestValidationError{}

// Validate checks the field values on PipelineSourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceDeleteResponseMultiError, or nil if none found.
func (m *PipelineSourceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineSourceDeleteResponseMultiError(errors)
	}

	return nil
}

// PipelineSourceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceDeleteResponseMultiError) AllErrors() []error { return m }

// PipelineSourceDeleteResponseValidationError is the validation error returned
// by PipelineSourceDeleteResponse.Validate if the designated constraints
// aren't met.
type PipelineSourceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceDeleteResponseValidationError) ErrorName() string {
	return "PipelineSourceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceDeleteResponseValidationError{}

// Validate checks the field values on PipelineSourceDeleteByRemoteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineSourceDeleteByRemoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceDeleteByRemoteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineSourceDeleteByRemoteRequestMultiError, or nil if none found.
func (m *PipelineSourceDeleteByRemoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceDeleteByRemoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remote

	if len(errors) > 0 {
		return PipelineSourceDeleteByRemoteRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceDeleteByRemoteRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineSourceDeleteByRemoteRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineSourceDeleteByRemoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceDeleteByRemoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceDeleteByRemoteRequestMultiError) AllErrors() []error { return m }

// PipelineSourceDeleteByRemoteRequestValidationError is the validation error
// returned by PipelineSourceDeleteByRemoteRequest.Validate if the designated
// constraints aren't met.
type PipelineSourceDeleteByRemoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceDeleteByRemoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceDeleteByRemoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceDeleteByRemoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceDeleteByRemoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceDeleteByRemoteRequestValidationError) ErrorName() string {
	return "PipelineSourceDeleteByRemoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceDeleteByRemoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceDeleteByRemoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceDeleteByRemoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceDeleteByRemoteRequestValidationError{}

// Validate checks the field values on PipelineSourceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceGetRequestMultiError, or nil if none found.
func (m *PipelineSourceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineSourceID

	if len(errors) > 0 {
		return PipelineSourceGetRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceGetRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineSourceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineSourceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceGetRequestMultiError) AllErrors() []error { return m }

// PipelineSourceGetRequestValidationError is the validation error returned by
// PipelineSourceGetRequest.Validate if the designated constraints aren't met.
type PipelineSourceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceGetRequestValidationError) ErrorName() string {
	return "PipelineSourceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceGetRequestValidationError{}

// Validate checks the field values on PipelineSourceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceGetResponseMultiError, or nil if none found.
func (m *PipelineSourceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSourceGetResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSourceGetResponseValidationError{
					field:  "PipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSourceGetResponseValidationError{
				field:  "PipelineSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineSourceGetResponseMultiError(errors)
	}

	return nil
}

// PipelineSourceGetResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineSourceGetResponse.ValidateAll() if the
// designated constraints aren't met.
type PipelineSourceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceGetResponseMultiError) AllErrors() []error { return m }

// PipelineSourceGetResponseValidationError is the validation error returned by
// PipelineSourceGetResponse.Validate if the designated constraints aren't met.
type PipelineSourceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceGetResponseValidationError) ErrorName() string {
	return "PipelineSourceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceGetResponseValidationError{}

// Validate checks the field values on PipelineSourceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceListRequestMultiError, or nil if none found.
func (m *PipelineSourceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remote

	// no validation rules for Ref

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for SourceType

	if len(errors) > 0 {
		return PipelineSourceListRequestMultiError(errors)
	}

	return nil
}

// PipelineSourceListRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineSourceListRequest.ValidateAll() if the
// designated constraints aren't met.
type PipelineSourceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceListRequestMultiError) AllErrors() []error { return m }

// PipelineSourceListRequestValidationError is the validation error returned by
// PipelineSourceListRequest.Validate if the designated constraints aren't met.
type PipelineSourceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceListRequestValidationError) ErrorName() string {
	return "PipelineSourceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceListRequestValidationError{}

// Validate checks the field values on PipelineSourceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSourceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSourceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSourceListResponseMultiError, or nil if none found.
func (m *PipelineSourceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSourceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineSourceListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineSourceListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineSourceListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineSourceListResponseMultiError(errors)
	}

	return nil
}

// PipelineSourceListResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineSourceListResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineSourceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSourceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSourceListResponseMultiError) AllErrors() []error { return m }

// PipelineSourceListResponseValidationError is the validation error returned
// by PipelineSourceListResponse.Validate if the designated constraints aren't met.
type PipelineSourceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSourceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSourceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSourceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSourceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSourceListResponseValidationError) ErrorName() string {
	return "PipelineSourceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSourceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSourceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSourceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSourceListResponseValidationError{}
