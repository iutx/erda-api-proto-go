// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: label.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineLabel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineLabelMultiError, or
// nil if none found.
func (m *PipelineLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Type

	// no validation rules for TargetID

	// no validation rules for PipelineSource

	// no validation rules for PipelineYmlName

	// no validation rules for Key

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineLabelValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineLabelValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineLabelValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineLabelValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineLabelValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineLabelValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineLabelMultiError(errors)
	}

	return nil
}

// PipelineLabelMultiError is an error wrapping multiple validation errors
// returned by PipelineLabel.ValidateAll() if the designated constraints
// aren't met.
type PipelineLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelMultiError) AllErrors() []error { return m }

// PipelineLabelValidationError is the validation error returned by
// PipelineLabel.Validate if the designated constraints aren't met.
type PipelineLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelValidationError) ErrorName() string { return "PipelineLabelValidationError" }

// Error satisfies the builtin error interface
func (e PipelineLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelValidationError{}

// Validate checks the field values on PipelineLabelBatchInsertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineLabelBatchInsertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabelBatchInsertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineLabelBatchInsertRequestMultiError, or nil if none found.
func (m *PipelineLabelBatchInsertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabelBatchInsertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineLabelBatchInsertRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineLabelBatchInsertRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineLabelBatchInsertRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineLabelBatchInsertRequestMultiError(errors)
	}

	return nil
}

// PipelineLabelBatchInsertRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineLabelBatchInsertRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineLabelBatchInsertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelBatchInsertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelBatchInsertRequestMultiError) AllErrors() []error { return m }

// PipelineLabelBatchInsertRequestValidationError is the validation error
// returned by PipelineLabelBatchInsertRequest.Validate if the designated
// constraints aren't met.
type PipelineLabelBatchInsertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelBatchInsertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelBatchInsertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelBatchInsertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelBatchInsertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelBatchInsertRequestValidationError) ErrorName() string {
	return "PipelineLabelBatchInsertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineLabelBatchInsertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabelBatchInsertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelBatchInsertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelBatchInsertRequestValidationError{}

// Validate checks the field values on PipelineLabelBatchInsertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineLabelBatchInsertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabelBatchInsertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineLabelBatchInsertResponseMultiError, or nil if none found.
func (m *PipelineLabelBatchInsertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabelBatchInsertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineLabelBatchInsertResponseMultiError(errors)
	}

	return nil
}

// PipelineLabelBatchInsertResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineLabelBatchInsertResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineLabelBatchInsertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelBatchInsertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelBatchInsertResponseMultiError) AllErrors() []error { return m }

// PipelineLabelBatchInsertResponseValidationError is the validation error
// returned by PipelineLabelBatchInsertResponse.Validate if the designated
// constraints aren't met.
type PipelineLabelBatchInsertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelBatchInsertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelBatchInsertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelBatchInsertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelBatchInsertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelBatchInsertResponseValidationError) ErrorName() string {
	return "PipelineLabelBatchInsertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineLabelBatchInsertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabelBatchInsertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelBatchInsertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelBatchInsertResponseValidationError{}

// Validate checks the field values on PipelineLabelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineLabelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabelListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineLabelListRequestMultiError, or nil if none found.
func (m *PipelineLabelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineSource

	// no validation rules for PipelineYmlName

	if len(errors) > 0 {
		return PipelineLabelListRequestMultiError(errors)
	}

	return nil
}

// PipelineLabelListRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineLabelListRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineLabelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelListRequestMultiError) AllErrors() []error { return m }

// PipelineLabelListRequestValidationError is the validation error returned by
// PipelineLabelListRequest.Validate if the designated constraints aren't met.
type PipelineLabelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelListRequestValidationError) ErrorName() string {
	return "PipelineLabelListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineLabelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelListRequestValidationError{}

// Validate checks the field values on PipelineLabelPageListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineLabelPageListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabelPageListData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineLabelPageListDataMultiError, or nil if none found.
func (m *PipelineLabelPageListData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabelPageListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineLabelPageListDataValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineLabelPageListDataValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineLabelPageListDataValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PipelineLabelPageListDataMultiError(errors)
	}

	return nil
}

// PipelineLabelPageListDataMultiError is an error wrapping multiple validation
// errors returned by PipelineLabelPageListData.ValidateAll() if the
// designated constraints aren't met.
type PipelineLabelPageListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelPageListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelPageListDataMultiError) AllErrors() []error { return m }

// PipelineLabelPageListDataValidationError is the validation error returned by
// PipelineLabelPageListData.Validate if the designated constraints aren't met.
type PipelineLabelPageListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelPageListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelPageListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelPageListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelPageListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelPageListDataValidationError) ErrorName() string {
	return "PipelineLabelPageListDataValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineLabelPageListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabelPageListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelPageListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelPageListDataValidationError{}

// Validate checks the field values on PipelineLabelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineLabelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLabelListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineLabelListResponseMultiError, or nil if none found.
func (m *PipelineLabelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLabelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineLabelListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineLabelListResponseMultiError(errors)
	}

	return nil
}

// PipelineLabelListResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineLabelListResponse.ValidateAll() if the
// designated constraints aren't met.
type PipelineLabelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLabelListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLabelListResponseMultiError) AllErrors() []error { return m }

// PipelineLabelListResponseValidationError is the validation error returned by
// PipelineLabelListResponse.Validate if the designated constraints aren't met.
type PipelineLabelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLabelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLabelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLabelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLabelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLabelListResponseValidationError) ErrorName() string {
	return "PipelineLabelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineLabelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLabelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLabelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLabelListResponseValidationError{}
