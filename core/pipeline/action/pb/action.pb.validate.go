// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: action.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineActionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineActionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineActionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineActionListRequestMultiError, or nil if none found.
func (m *PipelineActionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineActionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	// no validation rules for Labels

	if len(errors) > 0 {
		return PipelineActionListRequestMultiError(errors)
	}

	return nil
}

// PipelineActionListRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineActionListRequest.ValidateAll() if the
// designated constraints aren't met.
type PipelineActionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineActionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineActionListRequestMultiError) AllErrors() []error { return m }

// PipelineActionListRequestValidationError is the validation error returned by
// PipelineActionListRequest.Validate if the designated constraints aren't met.
type PipelineActionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineActionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineActionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineActionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineActionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineActionListRequestValidationError) ErrorName() string {
	return "PipelineActionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineActionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineActionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineActionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineActionListRequestValidationError{}

// Validate checks the field values on PipelineActionSaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineActionSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineActionSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineActionSaveRequestMultiError, or nil if none found.
func (m *PipelineActionSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineActionSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Readme

	// no validation rules for Dice

	// no validation rules for Spec

	if len(errors) > 0 {
		return PipelineActionSaveRequestMultiError(errors)
	}

	return nil
}

// PipelineActionSaveRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineActionSaveRequest.ValidateAll() if the
// designated constraints aren't met.
type PipelineActionSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineActionSaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineActionSaveRequestMultiError) AllErrors() []error { return m }

// PipelineActionSaveRequestValidationError is the validation error returned by
// PipelineActionSaveRequest.Validate if the designated constraints aren't met.
type PipelineActionSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineActionSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineActionSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineActionSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineActionSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineActionSaveRequestValidationError) ErrorName() string {
	return "PipelineActionSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineActionSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineActionSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineActionSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineActionSaveRequestValidationError{}

// Validate checks the field values on PipelineActionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineActionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineActionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineActionDeleteRequestMultiError, or nil if none found.
func (m *PipelineActionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineActionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Location

	if len(errors) > 0 {
		return PipelineActionDeleteRequestMultiError(errors)
	}

	return nil
}

// PipelineActionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineActionDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineActionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineActionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineActionDeleteRequestMultiError) AllErrors() []error { return m }

// PipelineActionDeleteRequestValidationError is the validation error returned
// by PipelineActionDeleteRequest.Validate if the designated constraints
// aren't met.
type PipelineActionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineActionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineActionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineActionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineActionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineActionDeleteRequestValidationError) ErrorName() string {
	return "PipelineActionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineActionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineActionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineActionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineActionDeleteRequestValidationError{}

// Validate checks the field values on PipelineActionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineActionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineActionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineActionDeleteResponseMultiError, or nil if none found.
func (m *PipelineActionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineActionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineActionDeleteResponseMultiError(errors)
	}

	return nil
}

// PipelineActionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineActionDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineActionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineActionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineActionDeleteResponseMultiError) AllErrors() []error { return m }

// PipelineActionDeleteResponseValidationError is the validation error returned
// by PipelineActionDeleteResponse.Validate if the designated constraints
// aren't met.
type PipelineActionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineActionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineActionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineActionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineActionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineActionDeleteResponseValidationError) ErrorName() string {
	return "PipelineActionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineActionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineActionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineActionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineActionDeleteResponseValidationError{}
