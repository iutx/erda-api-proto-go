// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: base.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*PipelineDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineExtra)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineGC)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineResourceGC)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineDatabaseGC)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineDBGCItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineRunParam)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineRunParamWithValue)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineUser)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ShowMessage)(nil)
var _ urlenc.URLValuesUnmarshaler = (*StorageConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineButton)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineExecuteRecord)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Breakpoint)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BreakpointOn)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineEvent)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineEventSource)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErrorResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineOutput)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineOutputWithValue)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineParam)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineParamWithValue)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineYml)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTrigger)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TriggerConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PushTrigger)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MergeTrigger)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NetworkHookInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineYmlAction)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Resources)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCompensator)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ActionCache)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TaskLoop)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TaskLoopStrategy)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SnippetStages)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineStage)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineStageDetailDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TaskContainer)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TaskParamDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskExtra)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErrorContext)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskResult)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskSnippetDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachineStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachineHostStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachinePodStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachineLoadStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachineMemStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskMachineSwapStat)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskActionDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SnippetConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DefinitionPageInfo)(nil)

// PipelineDTO implement urlenc.URLValuesUnmarshaler.
func (m *PipelineDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "source":
				m.Source = vals[0]
			case "ymlName":
				m.YmlName = vals[0]
			case "namespace":
				m.Namespace = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "status":
				m.Status = vals[0]
			case "type":
				m.Type = vals[0]
			case "triggerMode":
				m.TriggerMode = vals[0]
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = &val
			case "ymlSource":
				m.YmlSource = vals[0]
			case "ymlContent":
				m.YmlContent = vals[0]
			case "extra":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
			case "extra.diceWorkspace":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				m.Extra.DiceWorkspace = vals[0]
			case "extra.submitUser":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
			case "extra.submitUser.ID":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.ID.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.SubmitUser.ID = val
					} else {
						m.Extra.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.submitUser.name":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				m.Extra.SubmitUser.Name = vals[0]
			case "extra.submitUser.avatar":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.SubmitUser == nil {
					m.Extra.SubmitUser = &PipelineUser{}
				}
				m.Extra.SubmitUser.Avatar = vals[0]
			case "extra.runUser":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
			case "extra.runUser.ID":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.ID.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.RunUser.ID = val
					} else {
						m.Extra.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.runUser.name":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				m.Extra.RunUser.Name = vals[0]
			case "extra.runUser.avatar":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.RunUser == nil {
					m.Extra.RunUser = &PipelineUser{}
				}
				m.Extra.RunUser.Avatar = vals[0]
			case "extra.cancelUser":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
			case "extra.cancelUser.ID":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.ID.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.CancelUser.ID = val
					} else {
						m.Extra.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.cancelUser.name":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				m.Extra.CancelUser.Name = vals[0]
			case "extra.cancelUser.avatar":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CancelUser == nil {
					m.Extra.CancelUser = &PipelineUser{}
				}
				m.Extra.CancelUser.Avatar = vals[0]
			case "extra.cronExpr":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				m.Extra.CronExpr = vals[0]
			case "extra.cronTriggerTime":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CronTriggerTime == nil {
					m.Extra.CronTriggerTime = &timestamppb.Timestamp{}
				}
			case "extra.cronTriggerTime.seconds":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CronTriggerTime == nil {
					m.Extra.CronTriggerTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Extra.CronTriggerTime.Seconds = val
			case "extra.cronTriggerTime.nanos":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.CronTriggerTime == nil {
					m.Extra.CronTriggerTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Extra.CronTriggerTime.Nanos = int32(val)
			case "extra.show_message":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.ShowMessage == nil {
					m.Extra.ShowMessage = &ShowMessage{}
				}
			case "extra.show_message.msg":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.ShowMessage == nil {
					m.Extra.ShowMessage = &ShowMessage{}
				}
				m.Extra.ShowMessage.Msg = vals[0]
			case "extra.show_message.stacks":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.ShowMessage == nil {
					m.Extra.ShowMessage = &ShowMessage{}
				}
				m.Extra.ShowMessage.Stacks = vals
			case "extra.show_message.abortRun":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.ShowMessage == nil {
					m.Extra.ShowMessage = &ShowMessage{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Extra.ShowMessage.AbortRun = val
			case "extra.configManageNamespaces":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				m.Extra.ConfigManageNamespaces = vals
			case "extra.isAutoRun":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Extra.IsAutoRun = val
			case "extra.callbackURLs":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				m.Extra.CallbackURLs = vals
			case "extra.ownerUser":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
			case "extra.ownerUser.ID":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.ID.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.OwnerUser.ID = val
					} else {
						m.Extra.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.ownerUser.name":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				m.Extra.OwnerUser.Name = vals[0]
			case "extra.ownerUser.avatar":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.OwnerUser == nil {
					m.Extra.OwnerUser = &PipelineUser{}
				}
				m.Extra.OwnerUser.Avatar = vals[0]
			case "extra.pipelineYmlNameV1":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				m.Extra.PipelineYmlNameV1 = vals[0]
			case "extra.breakpoint":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
			case "extra.breakpoint.on":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if m.Extra.Breakpoint.On == nil {
					m.Extra.Breakpoint.On = &BreakpointOn{}
				}
			case "extra.breakpoint.on.failure":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if m.Extra.Breakpoint.On == nil {
					m.Extra.Breakpoint.On = &BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Extra.Breakpoint.On.Failure = val
			case "extra.breakpoint.timeout":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "branch":
				m.Branch = vals[0]
			case "commit":
				m.Commit = vals[0]
			case "commitDetail":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
			case "commitDetail.commitID":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.CommitID = vals[0]
			case "commitDetail.repo":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.Repo = vals[0]
			case "commitDetail.repoAbbr":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.RepoAbbr = vals[0]
			case "commitDetail.author":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.Author = vals[0]
			case "commitDetail.email":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.Email = vals[0]
			case "commitDetail.time":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				if m.CommitDetail.Time == nil {
					m.CommitDetail.Time = &timestamppb.Timestamp{}
				}
			case "commitDetail.time.seconds":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				if m.CommitDetail.Time == nil {
					m.CommitDetail.Time = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CommitDetail.Time.Seconds = val
			case "commitDetail.time.nanos":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				if m.CommitDetail.Time == nil {
					m.CommitDetail.Time = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CommitDetail.Time.Nanos = int32(val)
			case "commitDetail.comment":
				if m.CommitDetail == nil {
					m.CommitDetail = &pb.CommitDetail{}
				}
				m.CommitDetail.Comment = vals[0]
			case "progress":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Progress = val
			case "costTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CostTimeSec = val
			case "timeBegin":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
			case "timeBegin.seconds":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeBegin.Seconds = val
			case "timeBegin.nanos":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeBegin.Nanos = int32(val)
			case "timeEnd":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
			case "timeEnd.seconds":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeEnd.Seconds = val
			case "timeEnd.nanos":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeEnd.Nanos = int32(val)
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "ymlNameV1":
				m.YmlNameV1 = vals[0]
			}
		}
	}
	return nil
}

// PipelineExtra implement urlenc.URLValuesUnmarshaler.
func (m *PipelineExtra) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "diceWorkspace":
				m.DiceWorkspace = vals[0]
			case "submitUser":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
			case "submitUser.ID":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.null_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.number_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.string_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.bool_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.struct_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.ID.list_value":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SubmitUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SubmitUser.ID = val
					} else {
						m.SubmitUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "submitUser.name":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				m.SubmitUser.Name = vals[0]
			case "submitUser.avatar":
				if m.SubmitUser == nil {
					m.SubmitUser = &PipelineUser{}
				}
				m.SubmitUser.Avatar = vals[0]
			case "runUser":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
			case "runUser.ID":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.null_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.number_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.string_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.bool_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.struct_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.ID.list_value":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RunUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RunUser.ID = val
					} else {
						m.RunUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "runUser.name":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				m.RunUser.Name = vals[0]
			case "runUser.avatar":
				if m.RunUser == nil {
					m.RunUser = &PipelineUser{}
				}
				m.RunUser.Avatar = vals[0]
			case "cancelUser":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
			case "cancelUser.ID":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.null_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.number_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.string_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.bool_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.struct_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.ID.list_value":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CancelUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CancelUser.ID = val
					} else {
						m.CancelUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "cancelUser.name":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				m.CancelUser.Name = vals[0]
			case "cancelUser.avatar":
				if m.CancelUser == nil {
					m.CancelUser = &PipelineUser{}
				}
				m.CancelUser.Avatar = vals[0]
			case "cronExpr":
				m.CronExpr = vals[0]
			case "cronTriggerTime":
				if m.CronTriggerTime == nil {
					m.CronTriggerTime = &timestamppb.Timestamp{}
				}
			case "cronTriggerTime.seconds":
				if m.CronTriggerTime == nil {
					m.CronTriggerTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronTriggerTime.Seconds = val
			case "cronTriggerTime.nanos":
				if m.CronTriggerTime == nil {
					m.CronTriggerTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CronTriggerTime.Nanos = int32(val)
			case "show_message":
				if m.ShowMessage == nil {
					m.ShowMessage = &ShowMessage{}
				}
			case "show_message.msg":
				if m.ShowMessage == nil {
					m.ShowMessage = &ShowMessage{}
				}
				m.ShowMessage.Msg = vals[0]
			case "show_message.stacks":
				if m.ShowMessage == nil {
					m.ShowMessage = &ShowMessage{}
				}
				m.ShowMessage.Stacks = vals
			case "show_message.abortRun":
				if m.ShowMessage == nil {
					m.ShowMessage = &ShowMessage{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ShowMessage.AbortRun = val
			case "configManageNamespaces":
				m.ConfigManageNamespaces = vals
			case "isAutoRun":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsAutoRun = val
			case "callbackURLs":
				m.CallbackURLs = vals
			case "ownerUser":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
			case "ownerUser.ID":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.null_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.number_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.string_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.bool_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.struct_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.ID.list_value":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OwnerUser.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OwnerUser.ID = val
					} else {
						m.OwnerUser.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "ownerUser.name":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				m.OwnerUser.Name = vals[0]
			case "ownerUser.avatar":
				if m.OwnerUser == nil {
					m.OwnerUser = &PipelineUser{}
				}
				m.OwnerUser.Avatar = vals[0]
			case "pipelineYmlNameV1":
				m.PipelineYmlNameV1 = vals[0]
			case "breakpoint":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
			case "breakpoint.on":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if m.Breakpoint.On == nil {
					m.Breakpoint.On = &BreakpointOn{}
				}
			case "breakpoint.on.failure":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if m.Breakpoint.On == nil {
					m.Breakpoint.On = &BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Breakpoint.On.Failure = val
			case "breakpoint.timeout":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.null_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.number_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.string_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.bool_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.struct_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.list_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PipelineGC implement urlenc.URLValuesUnmarshaler.
func (m *PipelineGC) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "resourceGC":
				if m.ResourceGC == nil {
					m.ResourceGC = &PipelineResourceGC{}
				}
			case "resourceGC.successTTLSecond":
				if m.ResourceGC == nil {
					m.ResourceGC = &PipelineResourceGC{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ResourceGC.SuccessTTLSecond = &val
			case "resourceGC.failedTTLSecond":
				if m.ResourceGC == nil {
					m.ResourceGC = &PipelineResourceGC{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ResourceGC.FailedTTLSecond = &val
			case "databaseGC":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
			case "databaseGC.analyzed":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Analyzed == nil {
					m.DatabaseGC.Analyzed = &PipelineDBGCItem{}
				}
			case "databaseGC.analyzed.needArchive":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Analyzed == nil {
					m.DatabaseGC.Analyzed = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.DatabaseGC.Analyzed.NeedArchive = &val
			case "databaseGC.analyzed.TTLSecond":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Analyzed == nil {
					m.DatabaseGC.Analyzed = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DatabaseGC.Analyzed.TTLSecond = &val
			case "databaseGC.finished":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Finished == nil {
					m.DatabaseGC.Finished = &PipelineDBGCItem{}
				}
			case "databaseGC.finished.needArchive":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Finished == nil {
					m.DatabaseGC.Finished = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.DatabaseGC.Finished.NeedArchive = &val
			case "databaseGC.finished.TTLSecond":
				if m.DatabaseGC == nil {
					m.DatabaseGC = &PipelineDatabaseGC{}
				}
				if m.DatabaseGC.Finished == nil {
					m.DatabaseGC.Finished = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DatabaseGC.Finished.TTLSecond = &val
			}
		}
	}
	return nil
}

// PipelineResourceGC implement urlenc.URLValuesUnmarshaler.
func (m *PipelineResourceGC) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "successTTLSecond":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SuccessTTLSecond = &val
			case "failedTTLSecond":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.FailedTTLSecond = &val
			}
		}
	}
	return nil
}

// PipelineDatabaseGC implement urlenc.URLValuesUnmarshaler.
func (m *PipelineDatabaseGC) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "analyzed":
				if m.Analyzed == nil {
					m.Analyzed = &PipelineDBGCItem{}
				}
			case "analyzed.needArchive":
				if m.Analyzed == nil {
					m.Analyzed = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Analyzed.NeedArchive = &val
			case "analyzed.TTLSecond":
				if m.Analyzed == nil {
					m.Analyzed = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Analyzed.TTLSecond = &val
			case "finished":
				if m.Finished == nil {
					m.Finished = &PipelineDBGCItem{}
				}
			case "finished.needArchive":
				if m.Finished == nil {
					m.Finished = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Finished.NeedArchive = &val
			case "finished.TTLSecond":
				if m.Finished == nil {
					m.Finished = &PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Finished.TTLSecond = &val
			}
		}
	}
	return nil
}

// PipelineDBGCItem implement urlenc.URLValuesUnmarshaler.
func (m *PipelineDBGCItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "needArchive":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NeedArchive = &val
			case "TTLSecond":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TTLSecond = &val
			}
		}
	}
	return nil
}

// PipelineRunParam implement urlenc.URLValuesUnmarshaler.
func (m *PipelineRunParam) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "value":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Value = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Value = val
					} else {
						m.Value = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PipelineRunParamWithValue implement urlenc.URLValuesUnmarshaler.
func (m *PipelineRunParamWithValue) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "value":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Value = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Value = val
					} else {
						m.Value = structpb.NewStringValue(vals[0])
					}
				}
			case "trueValue":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.TrueValue = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.TrueValue = val
					} else {
						m.TrueValue = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PipelineUser implement urlenc.URLValuesUnmarshaler.
func (m *PipelineUser) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.ID = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.ID = val
					} else {
						m.ID = structpb.NewStringValue(vals[0])
					}
				}
			case "name":
				m.Name = vals[0]
			case "avatar":
				m.Avatar = vals[0]
			}
		}
	}
	return nil
}

// ShowMessage implement urlenc.URLValuesUnmarshaler.
func (m *ShowMessage) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "msg":
				m.Msg = vals[0]
			case "stacks":
				m.Stacks = vals
			case "abortRun":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AbortRun = val
			}
		}
	}
	return nil
}

// StorageConfig implement urlenc.URLValuesUnmarshaler.
func (m *StorageConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enableNFS":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableNFS = val
			case "enableLocal":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableLocal = val
			}
		}
	}
	return nil
}

// PipelineButton implement urlenc.URLValuesUnmarshaler.
func (m *PipelineButton) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "canManualRun":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanManualRun = val
			case "canCancel":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanCancel = val
			case "canForceCancel":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanForceCancel = val
			case "canRerun":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanRerun = val
			case "canRerunFailed":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanRerunFailed = val
			case "canStartCron":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanStartCron = val
			case "canStopCron":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanStopCron = val
			case "canPause":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanPause = val
			case "canUnpause":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanUnpause = val
			case "canDelete":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanDelete = val
			}
		}
	}
	return nil
}

// PipelineExecuteRecord implement urlenc.URLValuesUnmarshaler.
func (m *PipelineExecuteRecord) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "PipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "status":
				m.Status = vals[0]
			case "triggerMode":
				m.TriggerMode = vals[0]
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeBegin":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
			case "timeBegin.seconds":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeBegin.Seconds = val
			case "timeBegin.nanos":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeBegin.Nanos = int32(val)
			case "timeEnd":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
			case "timeEnd.seconds":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeEnd.Seconds = val
			case "timeEnd.nanos":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeEnd.Nanos = int32(val)
			}
		}
	}
	return nil
}

// Breakpoint implement urlenc.URLValuesUnmarshaler.
func (m *Breakpoint) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "on":
				if m.On == nil {
					m.On = &BreakpointOn{}
				}
			case "on.failure":
				if m.On == nil {
					m.On = &BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.On.Failure = val
			case "timeout":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Timeout = val
					} else {
						m.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// BreakpointOn implement urlenc.URLValuesUnmarshaler.
func (m *BreakpointOn) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "failure":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Failure = val
			}
		}
	}
	return nil
}

// PipelineEvent implement urlenc.URLValuesUnmarshaler.
func (m *PipelineEvent) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "reason":
				m.Reason = vals[0]
			case "message":
				m.Message = vals[0]
			case "source":
				if m.Source == nil {
					m.Source = &PipelineEventSource{}
				}
			case "source.component":
				if m.Source == nil {
					m.Source = &PipelineEventSource{}
				}
				m.Source.Component = vals[0]
			case "source.host":
				if m.Source == nil {
					m.Source = &PipelineEventSource{}
				}
				m.Source.Host = vals[0]
			case "firstTimestamp":
				if m.FirstTimestamp == nil {
					m.FirstTimestamp = &timestamppb.Timestamp{}
				}
			case "firstTimestamp.seconds":
				if m.FirstTimestamp == nil {
					m.FirstTimestamp = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.FirstTimestamp.Seconds = val
			case "firstTimestamp.nanos":
				if m.FirstTimestamp == nil {
					m.FirstTimestamp = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.FirstTimestamp.Nanos = int32(val)
			case "lastTimestamp":
				if m.LastTimestamp == nil {
					m.LastTimestamp = &timestamppb.Timestamp{}
				}
			case "lastTimestamp.seconds":
				if m.LastTimestamp == nil {
					m.LastTimestamp = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.LastTimestamp.Seconds = val
			case "lastTimestamp.nanos":
				if m.LastTimestamp == nil {
					m.LastTimestamp = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.LastTimestamp.Nanos = int32(val)
			case "count":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Count = int32(val)
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// PipelineEventSource implement urlenc.URLValuesUnmarshaler.
func (m *PipelineEventSource) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "component":
				m.Component = vals[0]
			case "host":
				m.Host = vals[0]
			}
		}
	}
	return nil
}

// ErrorResponse implement urlenc.URLValuesUnmarshaler.
func (m *ErrorResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			case "ctx":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
			case "ctx.startTime":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.StartTime == nil {
					m.Ctx.StartTime = &timestamppb.Timestamp{}
				}
			case "ctx.startTime.seconds":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.StartTime == nil {
					m.Ctx.StartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Ctx.StartTime.Seconds = val
			case "ctx.startTime.nanos":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.StartTime == nil {
					m.Ctx.StartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Ctx.StartTime.Nanos = int32(val)
			case "ctx.endTime":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.EndTime == nil {
					m.Ctx.EndTime = &timestamppb.Timestamp{}
				}
			case "ctx.endTime.seconds":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.EndTime == nil {
					m.Ctx.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Ctx.EndTime.Seconds = val
			case "ctx.endTime.nanos":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				if m.Ctx.EndTime == nil {
					m.Ctx.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Ctx.EndTime.Nanos = int32(val)
			case "ctx.count":
				if m.Ctx == nil {
					m.Ctx = &ErrorContext{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Ctx.Count = val
			}
		}
	}
	return nil
}

// PipelineOutput implement urlenc.URLValuesUnmarshaler.
func (m *PipelineOutput) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "ref":
				m.Ref = vals[0]
			}
		}
	}
	return nil
}

// PipelineOutputWithValue implement urlenc.URLValuesUnmarshaler.
func (m *PipelineOutputWithValue) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "value":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Value = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Value = val
					} else {
						m.Value = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PipelineParam implement urlenc.URLValuesUnmarshaler.
func (m *PipelineParam) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "required":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Required = val
			case "default":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Default = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Default = val
					} else {
						m.Default = structpb.NewStringValue(vals[0])
					}
				}
			case "desc":
				m.Desc = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// PipelineParamWithValue implement urlenc.URLValuesUnmarshaler.
func (m *PipelineParamWithValue) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "required":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Required = val
			case "default":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Default = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Default = val
					} else {
						m.Default = structpb.NewStringValue(vals[0])
					}
				}
			case "desc":
				m.Desc = vals[0]
			case "type":
				m.Type = vals[0]
			case "value":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Value = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Value = val
					} else {
						m.Value = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PipelineYml implement urlenc.URLValuesUnmarshaler.
func (m *PipelineYml) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "version":
				m.Version = vals[0]
			case "cron":
				m.Cron = vals[0]
			case "cronCompensator":
				if m.CronCompensator == nil {
					m.CronCompensator = &CronCompensator{}
				}
			case "cronCompensator.enable":
				if m.CronCompensator == nil {
					m.CronCompensator = &CronCompensator{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CronCompensator.Enable = val
			case "cronCompensator.latestFirst":
				if m.CronCompensator == nil {
					m.CronCompensator = &CronCompensator{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CronCompensator.LatestFirst = val
			case "cronCompensator.stopIfLatterExecuted":
				if m.CronCompensator == nil {
					m.CronCompensator = &CronCompensator{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CronCompensator.StopIfLatterExecuted = val
			case "stages":
				if m.Stages == nil {
					m.Stages = &structpb.ListValue{}
				}
			case "needUpgrade":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NeedUpgrade = val
			case "ymlContent":
				m.YmlContent = vals[0]
			case "on":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
			case "on.push":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
				if m.On.Push == nil {
					m.On.Push = &PushTrigger{}
				}
			case "on.push.branches":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
				if m.On.Push == nil {
					m.On.Push = &PushTrigger{}
				}
				m.On.Push.Branches = vals
			case "on.push.tags":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
				if m.On.Push == nil {
					m.On.Push = &PushTrigger{}
				}
				m.On.Push.Tags = vals
			case "on.merge":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
				if m.On.Merge == nil {
					m.On.Merge = &MergeTrigger{}
				}
			case "on.merge.branches":
				if m.On == nil {
					m.On = &TriggerConfig{}
				}
				if m.On.Merge == nil {
					m.On.Merge = &MergeTrigger{}
				}
				m.On.Merge.Branches = vals
			}
		}
	}
	return nil
}

// PipelineTrigger implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTrigger) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "on":
				m.On = vals[0]
			}
		}
	}
	return nil
}

// TriggerConfig implement urlenc.URLValuesUnmarshaler.
func (m *TriggerConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "push":
				if m.Push == nil {
					m.Push = &PushTrigger{}
				}
			case "push.branches":
				if m.Push == nil {
					m.Push = &PushTrigger{}
				}
				m.Push.Branches = vals
			case "push.tags":
				if m.Push == nil {
					m.Push = &PushTrigger{}
				}
				m.Push.Tags = vals
			case "merge":
				if m.Merge == nil {
					m.Merge = &MergeTrigger{}
				}
			case "merge.branches":
				if m.Merge == nil {
					m.Merge = &MergeTrigger{}
				}
				m.Merge.Branches = vals
			}
		}
	}
	return nil
}

// PushTrigger implement urlenc.URLValuesUnmarshaler.
func (m *PushTrigger) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "branches":
				m.Branches = vals
			case "tags":
				m.Tags = vals
			}
		}
	}
	return nil
}

// MergeTrigger implement urlenc.URLValuesUnmarshaler.
func (m *MergeTrigger) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "branches":
				m.Branches = vals
			}
		}
	}
	return nil
}

// NetworkHookInfo implement urlenc.URLValuesUnmarshaler.
func (m *NetworkHookInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "hook":
				m.Hook = vals[0]
			case "client":
				m.Client = vals[0]
			}
		}
	}
	return nil
}

// PipelineYmlAction implement urlenc.URLValuesUnmarshaler.
func (m *PipelineYmlAction) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "alias":
				m.Alias = vals[0]
			case "type":
				m.Type = vals[0]
			case "description":
				m.Description = vals[0]
			case "version":
				m.Version = vals[0]
			case "image":
				m.Image = vals[0]
			case "commands":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Commands = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Commands = val
					} else {
						m.Commands = structpb.NewStringValue(vals[0])
					}
				}
			case "timeout":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Timeout = val
			case "namespaces":
				m.Namespaces = vals
			case "resources":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
			case "resources.cpu":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Cpu = val
			case "resources.mem":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Mem = val
			case "resources.disk":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Disk = val
			case "displayName":
				m.DisplayName = vals[0]
			case "logoUrl":
				m.LogoUrl = vals[0]
			case "snippetConfig":
				if m.SnippetConfig == nil {
					m.SnippetConfig = &SnippetConfig{}
				}
			case "snippetConfig.source":
				if m.SnippetConfig == nil {
					m.SnippetConfig = &SnippetConfig{}
				}
				m.SnippetConfig.Source = vals[0]
			case "snippetConfig.name":
				if m.SnippetConfig == nil {
					m.SnippetConfig = &SnippetConfig{}
				}
				m.SnippetConfig.Name = vals[0]
			case "if":
				m.If = vals[0]
			case "loop":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
			case "loop.break":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				m.Loop.Break = vals[0]
			case "loop.strategy":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				if m.Loop.Strategy == nil {
					m.Loop.Strategy = &TaskLoopStrategy{}
				}
			case "loop.strategy.maxTimes":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				if m.Loop.Strategy == nil {
					m.Loop.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Loop.Strategy.MaxTimes = val
			case "loop.strategy.declineRatio":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				if m.Loop.Strategy == nil {
					m.Loop.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Loop.Strategy.DeclineRatio = val
			case "loop.strategy.declineLimitSec":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				if m.Loop.Strategy == nil {
					m.Loop.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Loop.Strategy.DeclineLimitSec = val
			case "loop.strategy.intervalSec":
				if m.Loop == nil {
					m.Loop = &TaskLoop{}
				}
				if m.Loop.Strategy == nil {
					m.Loop.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Loop.Strategy.IntervalSec = val
			case "snippetStages":
				if m.SnippetStages == nil {
					m.SnippetStages = &SnippetStages{}
				}
			case "snippetStages.stages":
				if m.SnippetStages == nil {
					m.SnippetStages = &SnippetStages{}
				}
				if m.SnippetStages.Stages == nil {
					m.SnippetStages.Stages = &structpb.ListValue{}
				}
			case "shell":
				m.Shell = vals[0]
			case "disable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Disable = val
			}
		}
	}
	return nil
}

// Resources implement urlenc.URLValuesUnmarshaler.
func (m *Resources) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cpu":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Cpu = val
			case "mem":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "disk":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Disk = val
			}
		}
	}
	return nil
}

// CronCompensator implement urlenc.URLValuesUnmarshaler.
func (m *CronCompensator) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "latestFirst":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.LatestFirst = val
			case "stopIfLatterExecuted":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.StopIfLatterExecuted = val
			}
		}
	}
	return nil
}

// ActionCache implement urlenc.URLValuesUnmarshaler.
func (m *ActionCache) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "key":
				m.Key = vals[0]
			case "path":
				m.Path = vals[0]
			}
		}
	}
	return nil
}

// TaskLoop implement urlenc.URLValuesUnmarshaler.
func (m *TaskLoop) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "break":
				m.Break = vals[0]
			case "strategy":
				if m.Strategy == nil {
					m.Strategy = &TaskLoopStrategy{}
				}
			case "strategy.maxTimes":
				if m.Strategy == nil {
					m.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Strategy.MaxTimes = val
			case "strategy.declineRatio":
				if m.Strategy == nil {
					m.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Strategy.DeclineRatio = val
			case "strategy.declineLimitSec":
				if m.Strategy == nil {
					m.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Strategy.DeclineLimitSec = val
			case "strategy.intervalSec":
				if m.Strategy == nil {
					m.Strategy = &TaskLoopStrategy{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Strategy.IntervalSec = val
			}
		}
	}
	return nil
}

// TaskLoopStrategy implement urlenc.URLValuesUnmarshaler.
func (m *TaskLoopStrategy) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "maxTimes":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MaxTimes = val
			case "declineRatio":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.DeclineRatio = val
			case "declineLimitSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DeclineLimitSec = val
			case "intervalSec":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.IntervalSec = val
			}
		}
	}
	return nil
}

// SnippetStages implement urlenc.URLValuesUnmarshaler.
func (m *SnippetStages) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "stages":
				if m.Stages == nil {
					m.Stages = &structpb.ListValue{}
				}
			}
		}
	}
	return nil
}

// PipelineStage implement urlenc.URLValuesUnmarshaler.
func (m *PipelineStage) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "name":
				m.Name = vals[0]
			case "status":
				m.Status = vals[0]
			case "costTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CostTimeSec = val
			case "timeBegin":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
			case "timeBegin.seconds":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeBegin.Seconds = val
			case "timeBegin.nanos":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeBegin.Nanos = int32(val)
			case "timeEnd":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
			case "timeEnd.seconds":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeEnd.Seconds = val
			case "timeEnd.nanos":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeEnd.Nanos = int32(val)
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineStageDetailDTO implement urlenc.URLValuesUnmarshaler.
func (m *PipelineStageDetailDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "name":
				m.Name = vals[0]
			case "status":
				m.Status = vals[0]
			case "costTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CostTimeSec = val
			case "timeBegin":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
			case "timeBegin.seconds":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeBegin.Seconds = val
			case "timeBegin.nanos":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeBegin.Nanos = int32(val)
			case "timeEnd":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
			case "timeEnd.seconds":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeEnd.Seconds = val
			case "timeEnd.nanos":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeEnd.Nanos = int32(val)
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineTaskDTO implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "stageID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StageID = val
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "status":
				m.Status = vals[0]
			case "extra":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
			case "extra.UUID":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				m.Extra.UUID = vals[0]
			case "extra.allowFailure":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Extra.AllowFailure = val
			case "extra.action":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
			case "extra.action.logoUrl":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.LogoUrl = vals[0]
			case "extra.action.displayName":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.DisplayName = vals[0]
			case "extra.action.description":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.Description = vals[0]
			case "extra.action.name":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.Name = vals[0]
			case "extra.action.version":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.Version = vals[0]
			case "extra.action.type":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Action == nil {
					m.Extra.Action = &PipelineTaskActionDetail{}
				}
				m.Extra.Action.Type = vals[0]
			case "extra.breakpoint":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
			case "extra.breakpoint.on":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if m.Extra.Breakpoint.On == nil {
					m.Extra.Breakpoint.On = &BreakpointOn{}
				}
			case "extra.breakpoint.on.failure":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if m.Extra.Breakpoint.On == nil {
					m.Extra.Breakpoint.On = &BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Extra.Breakpoint.On.Failure = val
			case "extra.breakpoint.timeout":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.null_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.number_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.string_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.bool_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.struct_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "extra.breakpoint.timeout.list_value":
				if m.Extra == nil {
					m.Extra = &PipelineTaskExtra{}
				}
				if m.Extra.Breakpoint == nil {
					m.Extra.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Extra.Breakpoint.Timeout = val
					} else {
						m.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "result":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
			case "result.machineStat":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
			case "result.machineStat.host":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
			case "result.machineStat.host.hostIP":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.HostIP = vals[0]
			case "result.machineStat.host.hostname":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.Hostname = vals[0]
			case "result.machineStat.host.uptimeSec":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Host.UptimeSec = val
			case "result.machineStat.host.bootTimeSec":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Host.BootTimeSec = val
			case "result.machineStat.host.os":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.Os = vals[0]
			case "result.machineStat.host.platform":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.Platform = vals[0]
			case "result.machineStat.host.platformVersion":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.PlatformVersion = vals[0]
			case "result.machineStat.host.kernelVersion":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.KernelVersion = vals[0]
			case "result.machineStat.host.kernelArch":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Host == nil {
					m.Result.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.Result.MachineStat.Host.KernelArch = vals[0]
			case "result.machineStat.pod":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Pod == nil {
					m.Result.MachineStat.Pod = &PipelineTaskMachinePodStat{}
				}
			case "result.machineStat.pod.podIP":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Pod == nil {
					m.Result.MachineStat.Pod = &PipelineTaskMachinePodStat{}
				}
				m.Result.MachineStat.Pod.PodIP = vals[0]
			case "result.machineStat.load":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Load == nil {
					m.Result.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
			case "result.machineStat.load.load1":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Load == nil {
					m.Result.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Load.Load1 = val
			case "result.machineStat.load.load5":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Load == nil {
					m.Result.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Load.Load5 = val
			case "result.machineStat.load.load15":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Load == nil {
					m.Result.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Load.Load15 = val
			case "result.machineStat.mem":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
			case "result.machineStat.mem.total":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Total = val
			case "result.machineStat.mem.available":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Available = val
			case "result.machineStat.mem.used":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Used = val
			case "result.machineStat.mem.free":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Free = val
			case "result.machineStat.mem.usedPercent":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.UsedPercent = val
			case "result.machineStat.mem.buffers":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Buffers = val
			case "result.machineStat.mem.cached":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Mem == nil {
					m.Result.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Mem.Cached = val
			case "result.machineStat.swap":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Swap == nil {
					m.Result.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
			case "result.machineStat.swap.total":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Swap == nil {
					m.Result.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Swap.Total = val
			case "result.machineStat.swap.used":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Swap == nil {
					m.Result.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Swap.Used = val
			case "result.machineStat.swap.free":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Swap == nil {
					m.Result.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Swap.Free = val
			case "result.machineStat.swap.usedPercent":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				if m.Result.MachineStat == nil {
					m.Result.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.Result.MachineStat.Swap == nil {
					m.Result.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Result.MachineStat.Swap.UsedPercent = val
			case "result.inspect":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				m.Result.Inspect = vals[0]
			case "result.events":
				if m.Result == nil {
					m.Result = &PipelineTaskResult{}
				}
				m.Result.Events = vals[0]
			case "isSnippet":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsSnippet = val
			case "snippetPipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SnippetPipelineID = &val
			case "snippetPipelineDetail":
				if m.SnippetPipelineDetail == nil {
					m.SnippetPipelineDetail = &PipelineTaskSnippetDetail{}
				}
			case "snippetPipelineDetail.directSnippetTasksNum":
				if m.SnippetPipelineDetail == nil {
					m.SnippetPipelineDetail = &PipelineTaskSnippetDetail{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SnippetPipelineDetail.DirectSnippetTasksNum = val
			case "snippetPipelineDetail.recursiveSnippetTasksNum":
				if m.SnippetPipelineDetail == nil {
					m.SnippetPipelineDetail = &PipelineTaskSnippetDetail{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SnippetPipelineDetail.RecursiveSnippetTasksNum = val
			case "costTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CostTimeSec = val
			case "queueTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.QueueTimeSec = val
			case "timeBegin":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
			case "timeBegin.seconds":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeBegin.Seconds = val
			case "timeBegin.nanos":
				if m.TimeBegin == nil {
					m.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeBegin.Nanos = int32(val)
			case "timeEnd":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
			case "timeEnd.seconds":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeEnd.Seconds = val
			case "timeEnd.nanos":
				if m.TimeEnd == nil {
					m.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeEnd.Nanos = int32(val)
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "opType":
				m.OpType = vals[0]
			}
		}
	}
	return nil
}

// TaskContainer implement urlenc.URLValuesUnmarshaler.
func (m *TaskContainer) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "taskName":
				m.TaskName = vals[0]
			case "containerID":
				m.ContainerID = vals[0]
			}
		}
	}
	return nil
}

// TaskParamDetail implement urlenc.URLValuesUnmarshaler.
func (m *TaskParamDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// PipelineTaskExtra implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskExtra) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "UUID":
				m.UUID = vals[0]
			case "allowFailure":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AllowFailure = val
			case "action":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
			case "action.logoUrl":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.LogoUrl = vals[0]
			case "action.displayName":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.DisplayName = vals[0]
			case "action.description":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.Description = vals[0]
			case "action.name":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.Name = vals[0]
			case "action.version":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.Version = vals[0]
			case "action.type":
				if m.Action == nil {
					m.Action = &PipelineTaskActionDetail{}
				}
				m.Action.Type = vals[0]
			case "breakpoint":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
			case "breakpoint.on":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if m.Breakpoint.On == nil {
					m.Breakpoint.On = &BreakpointOn{}
				}
			case "breakpoint.on.failure":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if m.Breakpoint.On == nil {
					m.Breakpoint.On = &BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Breakpoint.On.Failure = val
			case "breakpoint.timeout":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.null_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.number_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.string_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.bool_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.struct_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "breakpoint.timeout.list_value":
				if m.Breakpoint == nil {
					m.Breakpoint = &Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Breakpoint.Timeout = val
					} else {
						m.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ErrorContext implement urlenc.URLValuesUnmarshaler.
func (m *ErrorContext) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "startTime":
				if m.StartTime == nil {
					m.StartTime = &timestamppb.Timestamp{}
				}
			case "startTime.seconds":
				if m.StartTime == nil {
					m.StartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime.Seconds = val
			case "startTime.nanos":
				if m.StartTime == nil {
					m.StartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.StartTime.Nanos = int32(val)
			case "endTime":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
			case "endTime.seconds":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime.Seconds = val
			case "endTime.nanos":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.EndTime.Nanos = int32(val)
			case "count":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Count = val
			}
		}
	}
	return nil
}

// PipelineTaskResult implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskResult) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "machineStat":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
			case "machineStat.host":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
			case "machineStat.host.hostIP":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.HostIP = vals[0]
			case "machineStat.host.hostname":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.Hostname = vals[0]
			case "machineStat.host.uptimeSec":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Host.UptimeSec = val
			case "machineStat.host.bootTimeSec":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Host.BootTimeSec = val
			case "machineStat.host.os":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.Os = vals[0]
			case "machineStat.host.platform":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.Platform = vals[0]
			case "machineStat.host.platformVersion":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.PlatformVersion = vals[0]
			case "machineStat.host.kernelVersion":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.KernelVersion = vals[0]
			case "machineStat.host.kernelArch":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Host == nil {
					m.MachineStat.Host = &PipelineTaskMachineHostStat{}
				}
				m.MachineStat.Host.KernelArch = vals[0]
			case "machineStat.pod":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Pod == nil {
					m.MachineStat.Pod = &PipelineTaskMachinePodStat{}
				}
			case "machineStat.pod.podIP":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Pod == nil {
					m.MachineStat.Pod = &PipelineTaskMachinePodStat{}
				}
				m.MachineStat.Pod.PodIP = vals[0]
			case "machineStat.load":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Load == nil {
					m.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
			case "machineStat.load.load1":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Load == nil {
					m.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MachineStat.Load.Load1 = val
			case "machineStat.load.load5":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Load == nil {
					m.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MachineStat.Load.Load5 = val
			case "machineStat.load.load15":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Load == nil {
					m.MachineStat.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MachineStat.Load.Load15 = val
			case "machineStat.mem":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
			case "machineStat.mem.total":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Total = val
			case "machineStat.mem.available":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Available = val
			case "machineStat.mem.used":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Used = val
			case "machineStat.mem.free":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Free = val
			case "machineStat.mem.usedPercent":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.UsedPercent = val
			case "machineStat.mem.buffers":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Buffers = val
			case "machineStat.mem.cached":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Mem == nil {
					m.MachineStat.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Mem.Cached = val
			case "machineStat.swap":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Swap == nil {
					m.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
			case "machineStat.swap.total":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Swap == nil {
					m.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Swap.Total = val
			case "machineStat.swap.used":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Swap == nil {
					m.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Swap.Used = val
			case "machineStat.swap.free":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Swap == nil {
					m.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MachineStat.Swap.Free = val
			case "machineStat.swap.usedPercent":
				if m.MachineStat == nil {
					m.MachineStat = &PipelineTaskMachineStat{}
				}
				if m.MachineStat.Swap == nil {
					m.MachineStat.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MachineStat.Swap.UsedPercent = val
			case "inspect":
				m.Inspect = vals[0]
			case "events":
				m.Events = vals[0]
			}
		}
	}
	return nil
}

// PipelineTaskSnippetDetail implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskSnippetDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "directSnippetTasksNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DirectSnippetTasksNum = val
			case "recursiveSnippetTasksNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecursiveSnippetTasksNum = val
			}
		}
	}
	return nil
}

// PipelineTaskMachineStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachineStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "host":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
			case "host.hostIP":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.HostIP = vals[0]
			case "host.hostname":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.Hostname = vals[0]
			case "host.uptimeSec":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Host.UptimeSec = val
			case "host.bootTimeSec":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Host.BootTimeSec = val
			case "host.os":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.Os = vals[0]
			case "host.platform":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.Platform = vals[0]
			case "host.platformVersion":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.PlatformVersion = vals[0]
			case "host.kernelVersion":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.KernelVersion = vals[0]
			case "host.kernelArch":
				if m.Host == nil {
					m.Host = &PipelineTaskMachineHostStat{}
				}
				m.Host.KernelArch = vals[0]
			case "pod":
				if m.Pod == nil {
					m.Pod = &PipelineTaskMachinePodStat{}
				}
			case "pod.podIP":
				if m.Pod == nil {
					m.Pod = &PipelineTaskMachinePodStat{}
				}
				m.Pod.PodIP = vals[0]
			case "load":
				if m.Load == nil {
					m.Load = &PipelineTaskMachineLoadStat{}
				}
			case "load.load1":
				if m.Load == nil {
					m.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load.Load1 = val
			case "load.load5":
				if m.Load == nil {
					m.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load.Load5 = val
			case "load.load15":
				if m.Load == nil {
					m.Load = &PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load.Load15 = val
			case "mem":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
			case "mem.total":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Total = val
			case "mem.available":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Available = val
			case "mem.used":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Used = val
			case "mem.free":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Free = val
			case "mem.usedPercent":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Mem.UsedPercent = val
			case "mem.buffers":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Buffers = val
			case "mem.cached":
				if m.Mem == nil {
					m.Mem = &PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem.Cached = val
			case "swap":
				if m.Swap == nil {
					m.Swap = &PipelineTaskMachineSwapStat{}
				}
			case "swap.total":
				if m.Swap == nil {
					m.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Swap.Total = val
			case "swap.used":
				if m.Swap == nil {
					m.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Swap.Used = val
			case "swap.free":
				if m.Swap == nil {
					m.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Swap.Free = val
			case "swap.usedPercent":
				if m.Swap == nil {
					m.Swap = &PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Swap.UsedPercent = val
			}
		}
	}
	return nil
}

// PipelineTaskMachineHostStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachineHostStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "hostIP":
				m.HostIP = vals[0]
			case "hostname":
				m.Hostname = vals[0]
			case "uptimeSec":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UptimeSec = val
			case "bootTimeSec":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.BootTimeSec = val
			case "os":
				m.Os = vals[0]
			case "platform":
				m.Platform = vals[0]
			case "platformVersion":
				m.PlatformVersion = vals[0]
			case "kernelVersion":
				m.KernelVersion = vals[0]
			case "kernelArch":
				m.KernelArch = vals[0]
			}
		}
	}
	return nil
}

// PipelineTaskMachinePodStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachinePodStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "podIP":
				m.PodIP = vals[0]
			}
		}
	}
	return nil
}

// PipelineTaskMachineLoadStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachineLoadStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "load1":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load1 = val
			case "load5":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load5 = val
			case "load15":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Load15 = val
			}
		}
	}
	return nil
}

// PipelineTaskMachineMemStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachineMemStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "available":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Available = val
			case "used":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Used = val
			case "free":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Free = val
			case "usedPercent":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.UsedPercent = val
			case "buffers":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Buffers = val
			case "cached":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Cached = val
			}
		}
	}
	return nil
}

// PipelineTaskMachineSwapStat implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskMachineSwapStat) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "used":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Used = val
			case "free":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Free = val
			case "usedPercent":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.UsedPercent = val
			}
		}
	}
	return nil
}

// PipelineTaskActionDetail implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskActionDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "logoUrl":
				m.LogoUrl = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "description":
				m.Description = vals[0]
			case "name":
				m.Name = vals[0]
			case "version":
				m.Version = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// SnippetConfig implement urlenc.URLValuesUnmarshaler.
func (m *SnippetConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// DefinitionPageInfo implement urlenc.URLValuesUnmarshaler.
func (m *DefinitionPageInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "executor":
				m.Executor = vals[0]
			case "sourceRemote":
				m.SourceRemote = vals[0]
			case "sourceRef":
				m.SourceRef = vals[0]
			}
		}
	}
	return nil
}
