// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: base.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/erda-project/erda-proto-go/core/pipeline/pb"
	_ "github.com/erda-project/erda-proto-go/core/pipeline/queue/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PipelineDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base
	ID          uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Source      string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	YmlName     string            `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName string            `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Type        string            `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string            `protobuf:"bytes,8,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	CronID      *uint64           `protobuf:"varint,9,opt,name=cronID,proto3,oneof" json:"cronID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YmlSource   string            `protobuf:"bytes,11,opt,name=ymlSource,proto3" json:"ymlSource,omitempty"`
	YmlContent  string            `protobuf:"bytes,12,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	Extra       *PipelineExtra    `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	// app related info
	OrgID           uint64           `protobuf:"varint,14,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName         string           `protobuf:"bytes,15,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID       uint64           `protobuf:"varint,16,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName     string           `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   uint64           `protobuf:"varint,18,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ApplicationName string           `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch          string           `protobuf:"bytes,20,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit          string           `protobuf:"bytes,21,opt,name=commit,proto3" json:"commit,omitempty"`
	CommitDetail    *pb.CommitDetail `protobuf:"bytes,22,opt,name=commitDetail,proto3" json:"commitDetail,omitempty"`
	// runtime info
	Progress    float64                `protobuf:"fixed64,23,opt,name=progress,proto3" json:"progress,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,24,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	YmlNameV1   string                 `protobuf:"bytes,29,opt,name=ymlNameV1,proto3" json:"ymlNameV1,omitempty"`
}

func (x *PipelineDTO) Reset() {
	*x = PipelineDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDTO) ProtoMessage() {}

func (x *PipelineDTO) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDTO.ProtoReflect.Descriptor instead.
func (*PipelineDTO) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineDTO) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineDTO) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineDTO) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineDTO) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineDTO) GetCronID() uint64 {
	if x != nil && x.CronID != nil {
		return *x.CronID
	}
	return 0
}

func (x *PipelineDTO) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineDTO) GetYmlSource() string {
	if x != nil {
		return x.YmlSource
	}
	return ""
}

func (x *PipelineDTO) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineDTO) GetExtra() *PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PipelineDTO) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *PipelineDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PipelineDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PipelineDTO) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *PipelineDTO) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PipelineDTO) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineDTO) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PipelineDTO) GetCommitDetail() *pb.CommitDetail {
	if x != nil {
		return x.CommitDetail
	}
	return nil
}

func (x *PipelineDTO) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PipelineDTO) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineDTO) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineDTO) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineDTO) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineDTO) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineDTO) GetYmlNameV1() string {
	if x != nil {
		return x.YmlNameV1
	}
	return ""
}

type PipelineExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceWorkspace          string                 `protobuf:"bytes,1,opt,name=diceWorkspace,proto3" json:"diceWorkspace,omitempty"`
	SubmitUser             *PipelineUser          `protobuf:"bytes,2,opt,name=submitUser,proto3" json:"submitUser,omitempty"`
	RunUser                *PipelineUser          `protobuf:"bytes,3,opt,name=runUser,proto3" json:"runUser,omitempty"`
	CancelUser             *PipelineUser          `protobuf:"bytes,4,opt,name=cancelUser,proto3" json:"cancelUser,omitempty"`
	CronExpr               string                 `protobuf:"bytes,5,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	CronTriggerTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cronTriggerTime,proto3" json:"cronTriggerTime,omitempty"`
	ShowMessage            *ShowMessage           `protobuf:"bytes,7,opt,name=show_message,json=showMessage,proto3" json:"show_message,omitempty"`
	ConfigManageNamespaces []string               `protobuf:"bytes,8,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	IsAutoRun              bool                   `protobuf:"varint,9,opt,name=isAutoRun,proto3" json:"isAutoRun,omitempty"`
	CallbackURLs           []string               `protobuf:"bytes,10,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
	OwnerUser              *PipelineUser          `protobuf:"bytes,11,opt,name=ownerUser,proto3" json:"ownerUser,omitempty"`
	PipelineYmlNameV1      string                 `protobuf:"bytes,12,opt,name=pipelineYmlNameV1,proto3" json:"pipelineYmlNameV1,omitempty"`
	Breakpoint             *Breakpoint            `protobuf:"bytes,13,opt,name=breakpoint,proto3" json:"breakpoint,omitempty"`
}

func (x *PipelineExtra) Reset() {
	*x = PipelineExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineExtra) ProtoMessage() {}

func (x *PipelineExtra) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineExtra.ProtoReflect.Descriptor instead.
func (*PipelineExtra) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineExtra) GetDiceWorkspace() string {
	if x != nil {
		return x.DiceWorkspace
	}
	return ""
}

func (x *PipelineExtra) GetSubmitUser() *PipelineUser {
	if x != nil {
		return x.SubmitUser
	}
	return nil
}

func (x *PipelineExtra) GetRunUser() *PipelineUser {
	if x != nil {
		return x.RunUser
	}
	return nil
}

func (x *PipelineExtra) GetCancelUser() *PipelineUser {
	if x != nil {
		return x.CancelUser
	}
	return nil
}

func (x *PipelineExtra) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *PipelineExtra) GetCronTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CronTriggerTime
	}
	return nil
}

func (x *PipelineExtra) GetShowMessage() *ShowMessage {
	if x != nil {
		return x.ShowMessage
	}
	return nil
}

func (x *PipelineExtra) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineExtra) GetIsAutoRun() bool {
	if x != nil {
		return x.IsAutoRun
	}
	return false
}

func (x *PipelineExtra) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

func (x *PipelineExtra) GetOwnerUser() *PipelineUser {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

func (x *PipelineExtra) GetPipelineYmlNameV1() string {
	if x != nil {
		return x.PipelineYmlNameV1
	}
	return ""
}

func (x *PipelineExtra) GetBreakpoint() *Breakpoint {
	if x != nil {
		return x.Breakpoint
	}
	return nil
}

type PipelineGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGC *PipelineResourceGC `protobuf:"bytes,1,opt,name=resourceGC,proto3" json:"resourceGC,omitempty"`
	DatabaseGC *PipelineDatabaseGC `protobuf:"bytes,2,opt,name=databaseGC,proto3" json:"databaseGC,omitempty"`
}

func (x *PipelineGC) Reset() {
	*x = PipelineGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineGC) ProtoMessage() {}

func (x *PipelineGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineGC.ProtoReflect.Descriptor instead.
func (*PipelineGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineGC) GetResourceGC() *PipelineResourceGC {
	if x != nil {
		return x.ResourceGC
	}
	return nil
}

func (x *PipelineGC) GetDatabaseGC() *PipelineDatabaseGC {
	if x != nil {
		return x.DatabaseGC
	}
	return nil
}

// PipelineResourceGC releases occupied resource by pipeline, such as:
// - k8s pv (netdata volume)
// - k8s pod
// - k8s namespace
type PipelineResourceGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SuccessTTLSecond means when to release resource if pipeline status is Success.
	// Normally success ttl should be small even to zero, because everything is ok and don't need to rerun.
	// Default is 1800s(30min)
	SuccessTTLSecond *uint64 `protobuf:"varint,1,opt,name=successTTLSecond,proto3,oneof" json:"successTTLSecond,omitempty"`
	// FailedTTLSecond means when to release resource if pipeline status is Failed.
	// Normally failed ttl should larger than SuccessTTLSecond, because you may want to rerun this failed pipeline,
	// which need these resource.
	// Default is 1800s.
	FailedTTLSecond *uint64 `protobuf:"varint,2,opt,name=failedTTLSecond,proto3,oneof" json:"failedTTLSecond,omitempty"`
}

func (x *PipelineResourceGC) Reset() {
	*x = PipelineResourceGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineResourceGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineResourceGC) ProtoMessage() {}

func (x *PipelineResourceGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineResourceGC.ProtoReflect.Descriptor instead.
func (*PipelineResourceGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

func (x *PipelineResourceGC) GetSuccessTTLSecond() uint64 {
	if x != nil && x.SuccessTTLSecond != nil {
		return *x.SuccessTTLSecond
	}
	return 0
}

func (x *PipelineResourceGC) GetFailedTTLSecond() uint64 {
	if x != nil && x.FailedTTLSecond != nil {
		return *x.FailedTTLSecond
	}
	return 0
}

// PipelineDatabaseGC represents database record gc strategy.
type PipelineDatabaseGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzed *PipelineDBGCItem `protobuf:"bytes,1,opt,name=analyzed,proto3" json:"analyzed,omitempty"`
	Finished *PipelineDBGCItem `protobuf:"bytes,2,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *PipelineDatabaseGC) Reset() {
	*x = PipelineDatabaseGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDatabaseGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDatabaseGC) ProtoMessage() {}

func (x *PipelineDatabaseGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDatabaseGC.ProtoReflect.Descriptor instead.
func (*PipelineDatabaseGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineDatabaseGC) GetAnalyzed() *PipelineDBGCItem {
	if x != nil {
		return x.Analyzed
	}
	return nil
}

func (x *PipelineDatabaseGC) GetFinished() *PipelineDBGCItem {
	if x != nil {
		return x.Finished
	}
	return nil
}

type PipelineDBGCItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NeedArchive means whether this record need be archived:
	// If true, archive record to specific archive table;
	// If false, delete record and cannot be found anymore.
	NeedArchive *bool `protobuf:"varint,1,opt,name=needArchive,proto3,oneof" json:"needArchive,omitempty"`
	// TTLSecond means when to do archive or delete operation.
	TTLSecond *uint64 `protobuf:"varint,2,opt,name=TTLSecond,json=ttlSecond,proto3,oneof" json:"TTLSecond,omitempty"`
}

func (x *PipelineDBGCItem) Reset() {
	*x = PipelineDBGCItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDBGCItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDBGCItem) ProtoMessage() {}

func (x *PipelineDBGCItem) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDBGCItem.ProtoReflect.Descriptor instead.
func (*PipelineDBGCItem) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineDBGCItem) GetNeedArchive() bool {
	if x != nil && x.NeedArchive != nil {
		return *x.NeedArchive
	}
	return false
}

func (x *PipelineDBGCItem) GetTTLSecond() uint64 {
	if x != nil && x.TTLSecond != nil {
		return *x.TTLSecond
	}
	return 0
}

type PipelineRunParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineRunParam) Reset() {
	*x = PipelineRunParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunParam) ProtoMessage() {}

func (x *PipelineRunParam) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunParam.ProtoReflect.Descriptor instead.
func (*PipelineRunParam) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

func (x *PipelineRunParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRunParam) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineRunParamWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value     *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`         // parsed from pipeline.yml
	TrueValue *structpb.Value `protobuf:"bytes,3,opt,name=trueValue,proto3" json:"trueValue,omitempty"` // true value: placeholders will be replaced
}

func (x *PipelineRunParamWithValue) Reset() {
	*x = PipelineRunParamWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunParamWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunParamWithValue) ProtoMessage() {}

func (x *PipelineRunParamWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunParamWithValue.ProtoReflect.Descriptor instead.
func (*PipelineRunParamWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{7}
}

func (x *PipelineRunParamWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRunParamWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PipelineRunParamWithValue) GetTrueValue() *structpb.Value {
	if x != nil {
		return x.TrueValue
	}
	return nil
}

type PipelineUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     *structpb.Value `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string          `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *PipelineUser) Reset() {
	*x = PipelineUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUser) ProtoMessage() {}

func (x *PipelineUser) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUser.ProtoReflect.Descriptor instead.
func (*PipelineUser) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{8}
}

func (x *PipelineUser) GetID() *structpb.Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PipelineUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type ShowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg      string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Stacks   []string `protobuf:"bytes,2,rep,name=stacks,proto3" json:"stacks,omitempty"`
	AbortRun bool     `protobuf:"varint,3,opt,name=abortRun,proto3" json:"abortRun,omitempty"` // if false, canManualRun should be false
}

func (x *ShowMessage) Reset() {
	*x = ShowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMessage) ProtoMessage() {}

func (x *ShowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMessage.ProtoReflect.Descriptor instead.
func (*ShowMessage) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{9}
}

func (x *ShowMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ShowMessage) GetStacks() []string {
	if x != nil {
		return x.Stacks
	}
	return nil
}

func (x *ShowMessage) GetAbortRun() bool {
	if x != nil {
		return x.AbortRun
	}
	return false
}

type StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableNFS   bool `protobuf:"varint,1,opt,name=enableNFS,proto3" json:"enableNFS,omitempty"`
	EnableLocal bool `protobuf:"varint,2,opt,name=enableLocal,proto3" json:"enableLocal,omitempty"`
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{10}
}

func (x *StorageConfig) GetEnableNFS() bool {
	if x != nil {
		return x.EnableNFS
	}
	return false
}

func (x *StorageConfig) GetEnableLocal() bool {
	if x != nil {
		return x.EnableLocal
	}
	return false
}

type PipelineButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanManualRun   bool `protobuf:"varint,1,opt,name=canManualRun,proto3" json:"canManualRun,omitempty"`
	CanCancel      bool `protobuf:"varint,2,opt,name=canCancel,proto3" json:"canCancel,omitempty"`
	CanForceCancel bool `protobuf:"varint,3,opt,name=canForceCancel,proto3" json:"canForceCancel,omitempty"`
	CanRerun       bool `protobuf:"varint,4,opt,name=canRerun,proto3" json:"canRerun,omitempty"`
	CanRerunFailed bool `protobuf:"varint,5,opt,name=canRerunFailed,proto3" json:"canRerunFailed,omitempty"`
	CanStartCron   bool `protobuf:"varint,6,opt,name=canStartCron,proto3" json:"canStartCron,omitempty"`
	CanStopCron    bool `protobuf:"varint,7,opt,name=canStopCron,proto3" json:"canStopCron,omitempty"`
	CanPause       bool `protobuf:"varint,8,opt,name=canPause,proto3" json:"canPause,omitempty"`
	CanUnpause     bool `protobuf:"varint,9,opt,name=canUnpause,proto3" json:"canUnpause,omitempty"`
	CanDelete      bool `protobuf:"varint,10,opt,name=canDelete,proto3" json:"canDelete,omitempty"`
}

func (x *PipelineButton) Reset() {
	*x = PipelineButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineButton) ProtoMessage() {}

func (x *PipelineButton) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineButton.ProtoReflect.Descriptor instead.
func (*PipelineButton) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{11}
}

func (x *PipelineButton) GetCanManualRun() bool {
	if x != nil {
		return x.CanManualRun
	}
	return false
}

func (x *PipelineButton) GetCanCancel() bool {
	if x != nil {
		return x.CanCancel
	}
	return false
}

func (x *PipelineButton) GetCanForceCancel() bool {
	if x != nil {
		return x.CanForceCancel
	}
	return false
}

func (x *PipelineButton) GetCanRerun() bool {
	if x != nil {
		return x.CanRerun
	}
	return false
}

func (x *PipelineButton) GetCanRerunFailed() bool {
	if x != nil {
		return x.CanRerunFailed
	}
	return false
}

func (x *PipelineButton) GetCanStartCron() bool {
	if x != nil {
		return x.CanStartCron
	}
	return false
}

func (x *PipelineButton) GetCanStopCron() bool {
	if x != nil {
		return x.CanStopCron
	}
	return false
}

func (x *PipelineButton) GetCanPause() bool {
	if x != nil {
		return x.CanPause
	}
	return false
}

func (x *PipelineButton) GetCanUnpause() bool {
	if x != nil {
		return x.CanUnpause
	}
	return false
}

func (x *PipelineButton) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

type PipelineExecuteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID  uint64                 `protobuf:"varint,1,opt,name=PipelineID,proto3" json:"PipelineID,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TriggerMode string                 `protobuf:"bytes,3,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
}

func (x *PipelineExecuteRecord) Reset() {
	*x = PipelineExecuteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineExecuteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineExecuteRecord) ProtoMessage() {}

func (x *PipelineExecuteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineExecuteRecord.ProtoReflect.Descriptor instead.
func (*PipelineExecuteRecord) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12}
}

func (x *PipelineExecuteRecord) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineExecuteRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineExecuteRecord) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineExecuteRecord) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineExecuteRecord) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineExecuteRecord) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

type Breakpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On      *BreakpointOn   `protobuf:"bytes,1,opt,name=on,proto3" json:"on,omitempty"`
	Timeout *structpb.Value `protobuf:"bytes,2,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *Breakpoint) Reset() {
	*x = Breakpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Breakpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breakpoint) ProtoMessage() {}

func (x *Breakpoint) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breakpoint.ProtoReflect.Descriptor instead.
func (*Breakpoint) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{13}
}

func (x *Breakpoint) GetOn() *BreakpointOn {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *Breakpoint) GetTimeout() *structpb.Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type BreakpointOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure bool `protobuf:"varint,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *BreakpointOn) Reset() {
	*x = BreakpointOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakpointOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakpointOn) ProtoMessage() {}

func (x *BreakpointOn) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakpointOn.ProtoReflect.Descriptor instead.
func (*BreakpointOn) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{14}
}

func (x *BreakpointOn) GetFailure() bool {
	if x != nil {
		return x.Failure
	}
	return false
}

// /////////// event
// PipelineEvent is k8s-event-like stream event.
type PipelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional; this should be a short, machine understandable string that gives the reason
	// for this event being generated. For example, if the event is reporting that a container
	// can't start, the Reason might be "ImageNotFound".
	// +optional
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Optional. A human-readable description of the status of this operation.
	// +optional
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Optional. The component reporting this event. Should be a short machine understandable string.
	// +optional
	Source *PipelineEventSource `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	// +optional
	FirstTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=firstTimestamp,proto3" json:"firstTimestamp,omitempty"`
	// The time at which the most recent occurrence of this event was recorded.
	// +optional
	LastTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastTimestamp,proto3" json:"lastTimestamp,omitempty"`
	// The number of times this event has occurred.
	// +optional
	Count int32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// Type of this event (Normal, Warning), new types could be added in the future.
	// +optional
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineEvent) Reset() {
	*x = PipelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEvent) ProtoMessage() {}

func (x *PipelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEvent.ProtoReflect.Descriptor instead.
func (*PipelineEvent) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{15}
}

func (x *PipelineEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PipelineEvent) GetSource() *PipelineEventSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PipelineEvent) GetFirstTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTimestamp
	}
	return nil
}

func (x *PipelineEvent) GetLastTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *PipelineEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PipelineEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// PipelineEventSource represents the source from which an event is generated
type PipelineEventSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component from which the event is generated.
	// +optional
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Node name on which the event is generated.
	// +optional
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *PipelineEventSource) Reset() {
	*x = PipelineEventSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEventSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEventSource) ProtoMessage() {}

func (x *PipelineEventSource) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEventSource.ProtoReflect.Descriptor instead.
func (*PipelineEventSource) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{16}
}

func (x *PipelineEventSource) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PipelineEventSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// //////////// metadata
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string        `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Ctx  *ErrorContext `protobuf:"bytes,3,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{17}
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorResponse) GetCtx() *ErrorContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

// /////////// pipelineyaml
type PipelineOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Ref  string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *PipelineOutput) Reset() {
	*x = PipelineOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOutput) ProtoMessage() {}

func (x *PipelineOutput) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOutput.ProtoReflect.Descriptor instead.
func (*PipelineOutput) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{18}
}

func (x *PipelineOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineOutput) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineOutput) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type PipelineOutputWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc  string          `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Ref   string          `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Value *structpb.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineOutputWithValue) Reset() {
	*x = PipelineOutputWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOutputWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOutputWithValue) ProtoMessage() {}

func (x *PipelineOutputWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOutputWithValue.ProtoReflect.Descriptor instead.
func (*PipelineOutputWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{19}
}

func (x *PipelineOutputWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineOutputWithValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineOutputWithValue) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PipelineOutputWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool            `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Default  *structpb.Value `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Desc     string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineParam) Reset() {
	*x = PipelineParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineParam) ProtoMessage() {}

func (x *PipelineParam) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineParam.ProtoReflect.Descriptor instead.
func (*PipelineParam) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{20}
}

func (x *PipelineParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *PipelineParam) GetDefault() *structpb.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PipelineParam) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PipelineParamWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool            `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Default  *structpb.Value `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Desc     string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Value    *structpb.Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineParamWithValue) Reset() {
	*x = PipelineParamWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineParamWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineParamWithValue) ProtoMessage() {}

func (x *PipelineParamWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineParamWithValue.ProtoReflect.Descriptor instead.
func (*PipelineParamWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{21}
}

func (x *PipelineParamWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineParamWithValue) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *PipelineParamWithValue) GetDefault() *structpb.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PipelineParamWithValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineParamWithValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineParamWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineYml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used to generated pipeline yaml
	Version         string               `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Envs            map[string]string    `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cron            string               `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	CronCompensator *CronCompensator     `protobuf:"bytes,4,opt,name=cronCompensator,proto3" json:"cronCompensator,omitempty"`
	Stages          *structpb.ListValue  `protobuf:"bytes,5,opt,name=stages,proto3" json:"stages,omitempty"` // [][]*PipelineYmlAction
	FlatActions     []*PipelineYmlAction `protobuf:"bytes,6,rep,name=flatActions,proto3" json:"flatActions,omitempty"`
	Params          []*PipelineParam     `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty"`
	Outputs         []*PipelineOutput    `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// 1.0 升级相关
	NeedUpgrade bool `protobuf:"varint,9,opt,name=needUpgrade,proto3" json:"needUpgrade,omitempty"` // pipeline yml 是否需要升级
	// YmlContent:
	// 1) 当 needUpgrade 为 true  时，ymlContent 返回升级后的 yml
	// 2) 当 needUpgrade 为 false 时：
	//    1) 用户传入的为 YAML(apistructs.PipelineYml) 时，ymlContent 返回 YAML(spec.PipelineYml)
	//    2) 用户传入的为 YAML(spec.PipelineYml) 时，返回优化后的 YAML(spec.PipelineYml)
	YmlContent string         `protobuf:"bytes,10,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	On         *TriggerConfig `protobuf:"bytes,11,opt,name=on,proto3" json:"on,omitempty"`
	// describe the use of network hooks in the pipeline
	Lifecycle []*NetworkHookInfo `protobuf:"bytes,12,rep,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	Triggers  []*PipelineTrigger `protobuf:"bytes,13,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *PipelineYml) Reset() {
	*x = PipelineYml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYml) ProtoMessage() {}

func (x *PipelineYml) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYml.ProtoReflect.Descriptor instead.
func (*PipelineYml) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{22}
}

func (x *PipelineYml) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PipelineYml) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PipelineYml) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *PipelineYml) GetCronCompensator() *CronCompensator {
	if x != nil {
		return x.CronCompensator
	}
	return nil
}

func (x *PipelineYml) GetStages() *structpb.ListValue {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *PipelineYml) GetFlatActions() []*PipelineYmlAction {
	if x != nil {
		return x.FlatActions
	}
	return nil
}

func (x *PipelineYml) GetParams() []*PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PipelineYml) GetOutputs() []*PipelineOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *PipelineYml) GetNeedUpgrade() bool {
	if x != nil {
		return x.NeedUpgrade
	}
	return false
}

func (x *PipelineYml) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineYml) GetOn() *TriggerConfig {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PipelineYml) GetLifecycle() []*NetworkHookInfo {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *PipelineYml) GetTriggers() []*PipelineTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type PipelineTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On     string            `protobuf:"bytes,1,opt,name=on,proto3" json:"on,omitempty"`
	Filter map[string]string `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineTrigger) Reset() {
	*x = PipelineTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTrigger) ProtoMessage() {}

func (x *PipelineTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTrigger.ProtoReflect.Descriptor instead.
func (*PipelineTrigger) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{23}
}

func (x *PipelineTrigger) GetOn() string {
	if x != nil {
		return x.On
	}
	return ""
}

func (x *PipelineTrigger) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

type TriggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push  *PushTrigger  `protobuf:"bytes,1,opt,name=push,proto3" json:"push,omitempty"`
	Merge *MergeTrigger `protobuf:"bytes,2,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (x *TriggerConfig) Reset() {
	*x = TriggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerConfig) ProtoMessage() {}

func (x *TriggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerConfig.ProtoReflect.Descriptor instead.
func (*TriggerConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{24}
}

func (x *TriggerConfig) GetPush() *PushTrigger {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *TriggerConfig) GetMerge() *MergeTrigger {
	if x != nil {
		return x.Merge
	}
	return nil
}

type PushTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PushTrigger) Reset() {
	*x = PushTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTrigger) ProtoMessage() {}

func (x *PushTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTrigger.ProtoReflect.Descriptor instead.
func (*PushTrigger) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{25}
}

func (x *PushTrigger) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *PushTrigger) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MergeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *MergeTrigger) Reset() {
	*x = MergeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTrigger) ProtoMessage() {}

func (x *MergeTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTrigger.ProtoReflect.Descriptor instead.
func (*MergeTrigger) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{26}
}

func (x *MergeTrigger) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

type NetworkHookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hook   string                     `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`                                                                                             // hook type
	Client string                     `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`                                                                                         // use network client
	Labels map[string]*structpb.Value `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // additional information
}

func (x *NetworkHookInfo) Reset() {
	*x = NetworkHookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHookInfo) ProtoMessage() {}

func (x *NetworkHookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHookInfo.ProtoReflect.Descriptor instead.
func (*NetworkHookInfo) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{27}
}

func (x *NetworkHookInfo) GetHook() string {
	if x != nil {
		return x.Hook
	}
	return ""
}

func (x *NetworkHookInfo) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *NetworkHookInfo) GetLabels() map[string]*structpb.Value {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PipelineYmlAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias         string                     `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Type          string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description   string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version       string                     `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Params        map[string]*structpb.Value `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image         string                     `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Commands      *structpb.Value            `protobuf:"bytes,7,opt,name=commands,proto3" json:"commands,omitempty"`
	Timeout       int64                      `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Namespaces    []string                   `protobuf:"bytes,9,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Resources     *Resources                 `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`
	DisplayName   string                     `protobuf:"bytes,11,opt,name=displayName,proto3" json:"displayName,omitempty"`
	LogoUrl       string                     `protobuf:"bytes,12,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	Caches        []*ActionCache             `protobuf:"bytes,13,rep,name=caches,proto3" json:"caches,omitempty"`
	SnippetConfig *SnippetConfig             `protobuf:"bytes,14,opt,name=snippetConfig,proto3" json:"snippetConfig,omitempty"`
	If            string                     `protobuf:"bytes,15,opt,name=if,proto3" json:"if,omitempty"`
	Loop          *TaskLoop                  `protobuf:"bytes,16,opt,name=loop,proto3" json:"loop,omitempty"`
	SnippetStages *SnippetStages             `protobuf:"bytes,17,opt,name=snippetStages,proto3" json:"snippetStages,omitempty"`
	Shell         string                     `protobuf:"bytes,18,opt,name=shell,proto3" json:"shell,omitempty"`
	Disable       bool                       `protobuf:"varint,19,opt,name=disable,proto3" json:"disable,omitempty"`
}

func (x *PipelineYmlAction) Reset() {
	*x = PipelineYmlAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYmlAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYmlAction) ProtoMessage() {}

func (x *PipelineYmlAction) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYmlAction.ProtoReflect.Descriptor instead.
func (*PipelineYmlAction) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{28}
}

func (x *PipelineYmlAction) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PipelineYmlAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineYmlAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineYmlAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PipelineYmlAction) GetParams() map[string]*structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PipelineYmlAction) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PipelineYmlAction) GetCommands() *structpb.Value {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *PipelineYmlAction) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PipelineYmlAction) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *PipelineYmlAction) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PipelineYmlAction) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineYmlAction) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PipelineYmlAction) GetCaches() []*ActionCache {
	if x != nil {
		return x.Caches
	}
	return nil
}

func (x *PipelineYmlAction) GetSnippetConfig() *SnippetConfig {
	if x != nil {
		return x.SnippetConfig
	}
	return nil
}

func (x *PipelineYmlAction) GetIf() string {
	if x != nil {
		return x.If
	}
	return ""
}

func (x *PipelineYmlAction) GetLoop() *TaskLoop {
	if x != nil {
		return x.Loop
	}
	return nil
}

func (x *PipelineYmlAction) GetSnippetStages() *SnippetStages {
	if x != nil {
		return x.SnippetStages
	}
	return nil
}

func (x *PipelineYmlAction) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

func (x *PipelineYmlAction) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu  float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem  float64 `protobuf:"fixed64,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk float64 `protobuf:"fixed64,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{29}
}

func (x *Resources) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Resources) GetMem() float64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Resources) GetDisk() float64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

type CronCompensator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	LatestFirst          bool `protobuf:"varint,2,opt,name=latestFirst,proto3" json:"latestFirst,omitempty"`
	StopIfLatterExecuted bool `protobuf:"varint,3,opt,name=stopIfLatterExecuted,proto3" json:"stopIfLatterExecuted,omitempty"`
}

func (x *CronCompensator) Reset() {
	*x = CronCompensator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCompensator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCompensator) ProtoMessage() {}

func (x *CronCompensator) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCompensator.ProtoReflect.Descriptor instead.
func (*CronCompensator) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{30}
}

func (x *CronCompensator) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CronCompensator) GetLatestFirst() bool {
	if x != nil {
		return x.LatestFirst
	}
	return false
}

func (x *CronCompensator) GetStopIfLatterExecuted() bool {
	if x != nil {
		return x.StopIfLatterExecuted
	}
	return false
}

type ActionCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 缓存生成的 key 或者是用户指定的 key
	// 用户指定的话 需要 {{basePath}}/路径/{{endPath}} 来自定义 key
	// 用户没有指定 key 有一定的生成规则, 具体生成规则看 prepare.go 的 setActionCacheStorageAndBinds 方法
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // 指定那个目录被缓存, 只能是由 / 开始的绝对路径
}

func (x *ActionCache) Reset() {
	*x = ActionCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCache) ProtoMessage() {}

func (x *ActionCache) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCache.ProtoReflect.Descriptor instead.
func (*ActionCache) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{31}
}

func (x *ActionCache) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ActionCache) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TaskLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Break    string            `protobuf:"bytes,1,opt,name=break,proto3" json:"break,omitempty"`
	Strategy *TaskLoopStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *TaskLoop) Reset() {
	*x = TaskLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLoop) ProtoMessage() {}

func (x *TaskLoop) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLoop.ProtoReflect.Descriptor instead.
func (*TaskLoop) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{32}
}

func (x *TaskLoop) GetBreak() string {
	if x != nil {
		return x.Break
	}
	return ""
}

func (x *TaskLoop) GetStrategy() *TaskLoopStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type TaskLoopStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTimes        int64   `protobuf:"varint,1,opt,name=maxTimes,proto3" json:"maxTimes,omitempty"`               // 最大重试次数，-1 表示不限制
	DeclineRatio    float64 `protobuf:"fixed64,2,opt,name=declineRatio,proto3" json:"declineRatio,omitempty"`      // 重试衰退速率  2s - 4s - 8s - 16s
	DeclineLimitSec int64   `protobuf:"varint,3,opt,name=declineLimitSec,proto3" json:"declineLimitSec,omitempty"` // 重试衰退最大值  2s - 4s - 8s - 8s - 8s
	IntervalSec     uint64  `protobuf:"varint,4,opt,name=intervalSec,proto3" json:"intervalSec,omitempty"`         // 重试间隔时间 2s - 2s - 2s - 2s
}

func (x *TaskLoopStrategy) Reset() {
	*x = TaskLoopStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLoopStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLoopStrategy) ProtoMessage() {}

func (x *TaskLoopStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLoopStrategy.ProtoReflect.Descriptor instead.
func (*TaskLoopStrategy) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{33}
}

func (x *TaskLoopStrategy) GetMaxTimes() int64 {
	if x != nil {
		return x.MaxTimes
	}
	return 0
}

func (x *TaskLoopStrategy) GetDeclineRatio() float64 {
	if x != nil {
		return x.DeclineRatio
	}
	return 0
}

func (x *TaskLoopStrategy) GetDeclineLimitSec() int64 {
	if x != nil {
		return x.DeclineLimitSec
	}
	return 0
}

func (x *TaskLoopStrategy) GetIntervalSec() uint64 {
	if x != nil {
		return x.IntervalSec
	}
	return 0
}

type SnippetStages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  []*PipelineParam    `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Outputs []*PipelineOutput   `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Stages  *structpb.ListValue `protobuf:"bytes,3,opt,name=stages,proto3" json:"stages,omitempty"` // [][]*PipelineYmlAction
}

func (x *SnippetStages) Reset() {
	*x = SnippetStages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetStages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetStages) ProtoMessage() {}

func (x *SnippetStages) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetStages.ProtoReflect.Descriptor instead.
func (*SnippetStages) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{34}
}

func (x *SnippetStages) GetParams() []*PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SnippetStages) GetOutputs() []*PipelineOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *SnippetStages) GetStages() *structpb.ListValue {
	if x != nil {
		return x.Stages
	}
	return nil
}

// /////////// stage
type PipelineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID  uint64                 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,5,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
}

func (x *PipelineStage) Reset() {
	*x = PipelineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStage) ProtoMessage() {}

func (x *PipelineStage) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStage.ProtoReflect.Descriptor instead.
func (*PipelineStage) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{35}
}

func (x *PipelineStage) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineStage) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStage) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineStage) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineStage) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineStage) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineStage) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

type PipelineStageDetailDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID    uint64                 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CostTimeSec   int64                  `protobuf:"varint,5,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	PipelineTasks []*PipelineTaskDTO     `protobuf:"bytes,10,rep,name=pipelineTasks,proto3" json:"pipelineTasks,omitempty"`
}

func (x *PipelineStageDetailDTO) Reset() {
	*x = PipelineStageDetailDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStageDetailDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStageDetailDTO) ProtoMessage() {}

func (x *PipelineStageDetailDTO) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStageDetailDTO.ProtoReflect.Descriptor instead.
func (*PipelineStageDetailDTO) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{36}
}

func (x *PipelineStageDetailDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineStageDetailDTO) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStageDetailDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStageDetailDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStageDetailDTO) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineStageDetailDTO) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineStageDetailDTO) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineStageDetailDTO) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineStageDetailDTO) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineStageDetailDTO) GetPipelineTasks() []*PipelineTaskDTO {
	if x != nil {
		return x.PipelineTasks
	}
	return nil
}

// ///////////
type PipelineTaskDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint64                     `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID            uint64                     `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	StageID               uint64                     `protobuf:"varint,3,opt,name=stageID,proto3" json:"stageID,omitempty"`
	Name                  string                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                  string                     `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Status                string                     `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Extra                 *PipelineTaskExtra         `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	Labels                map[string]string          `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Result                *PipelineTaskResult        `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	IsSnippet             bool                       `protobuf:"varint,10,opt,name=isSnippet,proto3" json:"isSnippet,omitempty"`
	SnippetPipelineID     *uint64                    `protobuf:"varint,11,opt,name=snippetPipelineID,proto3,oneof" json:"snippetPipelineID,omitempty"`
	SnippetPipelineDetail *PipelineTaskSnippetDetail `protobuf:"bytes,12,opt,name=snippetPipelineDetail,proto3" json:"snippetPipelineDetail,omitempty"` // detail of snippet pipeline
	CostTimeSec           int64                      `protobuf:"varint,13,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`                    // -1 means no cost info, 0 means cost 0s exactly
	QueueTimeSec          int64                      `protobuf:"varint,14,opt,name=queueTimeSec,proto3" json:"queueTimeSec,omitempty"`
	TimeBegin             *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd               *timestamppb.Timestamp     `protobuf:"bytes,16,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated           *timestamppb.Timestamp     `protobuf:"bytes,17,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated           *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	OpType                string                     `protobuf:"bytes,19,opt,name=opType,proto3" json:"opType,omitempty"`
}

func (x *PipelineTaskDTO) Reset() {
	*x = PipelineTaskDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDTO) ProtoMessage() {}

func (x *PipelineTaskDTO) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDTO.ProtoReflect.Descriptor instead.
func (*PipelineTaskDTO) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{37}
}

func (x *PipelineTaskDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineTaskDTO) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineTaskDTO) GetStageID() uint64 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *PipelineTaskDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineTaskDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineTaskDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineTaskDTO) GetExtra() *PipelineTaskExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineTaskDTO) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineTaskDTO) GetResult() *PipelineTaskResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PipelineTaskDTO) GetIsSnippet() bool {
	if x != nil {
		return x.IsSnippet
	}
	return false
}

func (x *PipelineTaskDTO) GetSnippetPipelineID() uint64 {
	if x != nil && x.SnippetPipelineID != nil {
		return *x.SnippetPipelineID
	}
	return 0
}

func (x *PipelineTaskDTO) GetSnippetPipelineDetail() *PipelineTaskSnippetDetail {
	if x != nil {
		return x.SnippetPipelineDetail
	}
	return nil
}

func (x *PipelineTaskDTO) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineTaskDTO) GetQueueTimeSec() int64 {
	if x != nil {
		return x.QueueTimeSec
	}
	return 0
}

func (x *PipelineTaskDTO) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineTaskDTO) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineTaskDTO) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineTaskDTO) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineTaskDTO) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

type TaskContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName    string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
}

func (x *TaskContainer) Reset() {
	*x = TaskContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskContainer) ProtoMessage() {}

func (x *TaskContainer) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskContainer.ProtoReflect.Descriptor instead.
func (*TaskContainer) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{38}
}

func (x *TaskContainer) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskContainer) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type TaskParamDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values map[string]string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskParamDetail) Reset() {
	*x = TaskParamDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskParamDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParamDetail) ProtoMessage() {}

func (x *TaskParamDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParamDetail.ProtoReflect.Descriptor instead.
func (*TaskParamDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{39}
}

func (x *TaskParamDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskParamDetail) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type PipelineTaskExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID           string                    `protobuf:"bytes,1,opt,name=UUID,json=uuid,proto3" json:"UUID,omitempty"`
	AllowFailure   bool                      `protobuf:"varint,2,opt,name=allowFailure,proto3" json:"allowFailure,omitempty"`
	TaskContainers []*TaskContainer          `protobuf:"bytes,3,rep,name=taskContainers,proto3" json:"taskContainers,omitempty"`
	Params         []*TaskParamDetail        `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	Action         *PipelineTaskActionDetail `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Breakpoint     *Breakpoint               `protobuf:"bytes,6,opt,name=breakpoint,proto3" json:"breakpoint,omitempty"`
}

func (x *PipelineTaskExtra) Reset() {
	*x = PipelineTaskExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskExtra) ProtoMessage() {}

func (x *PipelineTaskExtra) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskExtra.ProtoReflect.Descriptor instead.
func (*PipelineTaskExtra) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{40}
}

func (x *PipelineTaskExtra) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *PipelineTaskExtra) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

func (x *PipelineTaskExtra) GetTaskContainers() []*TaskContainer {
	if x != nil {
		return x.TaskContainers
	}
	return nil
}

func (x *PipelineTaskExtra) GetParams() []*TaskParamDetail {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PipelineTaskExtra) GetAction() *PipelineTaskActionDetail {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *PipelineTaskExtra) GetBreakpoint() *Breakpoint {
	if x != nil {
		return x.Breakpoint
	}
	return nil
}

type ErrorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Count     uint64                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ErrorContext) Reset() {
	*x = ErrorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorContext) ProtoMessage() {}

func (x *ErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorContext.ProtoReflect.Descriptor instead.
func (*ErrorContext) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{41}
}

func (x *ErrorContext) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ErrorContext) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ErrorContext) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PipelineTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    []*pb.MetadataField      `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Errors      []*ErrorResponse         `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	MachineStat *PipelineTaskMachineStat `protobuf:"bytes,3,opt,name=machineStat,proto3" json:"machineStat,omitempty"`
	Inspect     string                   `protobuf:"bytes,4,opt,name=inspect,proto3" json:"inspect,omitempty"`
	Events      string                   `protobuf:"bytes,5,opt,name=events,proto3" json:"events,omitempty"`
}

func (x *PipelineTaskResult) Reset() {
	*x = PipelineTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskResult) ProtoMessage() {}

func (x *PipelineTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskResult.ProtoReflect.Descriptor instead.
func (*PipelineTaskResult) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{42}
}

func (x *PipelineTaskResult) GetMetadata() []*pb.MetadataField {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PipelineTaskResult) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PipelineTaskResult) GetMachineStat() *PipelineTaskMachineStat {
	if x != nil {
		return x.MachineStat
	}
	return nil
}

func (x *PipelineTaskResult) GetInspect() string {
	if x != nil {
		return x.Inspect
	}
	return ""
}

func (x *PipelineTaskResult) GetEvents() string {
	if x != nil {
		return x.Events
	}
	return ""
}

type PipelineTaskSnippetDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*PipelineOutputWithValue `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// direct snippet task number, won't query recursively.
	// -1 means UNKNOWN, concrete value assigned when reconcile.
	DirectSnippetTasksNum int64 `protobuf:"varint,2,opt,name=directSnippetTasksNum,proto3" json:"directSnippetTasksNum,omitempty"`
	// recursive snippet task number, i.e. the whole expanded tasks number.
	// -1 means UNKNOWN, concrete value will be reported by AOP.
	RecursiveSnippetTasksNum int64 `protobuf:"varint,3,opt,name=recursiveSnippetTasksNum,proto3" json:"recursiveSnippetTasksNum,omitempty"`
}

func (x *PipelineTaskSnippetDetail) Reset() {
	*x = PipelineTaskSnippetDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskSnippetDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskSnippetDetail) ProtoMessage() {}

func (x *PipelineTaskSnippetDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskSnippetDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskSnippetDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{43}
}

func (x *PipelineTaskSnippetDetail) GetOutputs() []*PipelineOutputWithValue {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *PipelineTaskSnippetDetail) GetDirectSnippetTasksNum() int64 {
	if x != nil {
		return x.DirectSnippetTasksNum
	}
	return 0
}

func (x *PipelineTaskSnippetDetail) GetRecursiveSnippetTasksNum() int64 {
	if x != nil {
		return x.RecursiveSnippetTasksNum
	}
	return 0
}

type PipelineTaskMachineStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *PipelineTaskMachineHostStat `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Pod  *PipelineTaskMachinePodStat  `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
	Load *PipelineTaskMachineLoadStat `protobuf:"bytes,3,opt,name=load,proto3" json:"load,omitempty"`
	Mem  *PipelineTaskMachineMemStat  `protobuf:"bytes,4,opt,name=mem,proto3" json:"mem,omitempty"`
	Swap *PipelineTaskMachineSwapStat `protobuf:"bytes,5,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (x *PipelineTaskMachineStat) Reset() {
	*x = PipelineTaskMachineStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineStat) ProtoMessage() {}

func (x *PipelineTaskMachineStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{44}
}

func (x *PipelineTaskMachineStat) GetHost() *PipelineTaskMachineHostStat {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetPod() *PipelineTaskMachinePodStat {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetLoad() *PipelineTaskMachineLoadStat {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetMem() *PipelineTaskMachineMemStat {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetSwap() *PipelineTaskMachineSwapStat {
	if x != nil {
		return x.Swap
	}
	return nil
}

type PipelineTaskMachineHostStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIP          string `protobuf:"bytes,1,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	Hostname        string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	UptimeSec       uint64 `protobuf:"varint,3,opt,name=uptimeSec,proto3" json:"uptimeSec,omitempty"`
	BootTimeSec     uint64 `protobuf:"varint,4,opt,name=bootTimeSec,proto3" json:"bootTimeSec,omitempty"`
	Os              string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Platform        string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,7,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`
	KernelVersion   string `protobuf:"bytes,8,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	KernelArch      string `protobuf:"bytes,9,opt,name=kernelArch,proto3" json:"kernelArch,omitempty"`
}

func (x *PipelineTaskMachineHostStat) Reset() {
	*x = PipelineTaskMachineHostStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineHostStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineHostStat) ProtoMessage() {}

func (x *PipelineTaskMachineHostStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineHostStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineHostStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{45}
}

func (x *PipelineTaskMachineHostStat) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetUptimeSec() uint64 {
	if x != nil {
		return x.UptimeSec
	}
	return 0
}

func (x *PipelineTaskMachineHostStat) GetBootTimeSec() uint64 {
	if x != nil {
		return x.BootTimeSec
	}
	return 0
}

func (x *PipelineTaskMachineHostStat) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

type PipelineTaskMachinePodStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIP string `protobuf:"bytes,1,opt,name=podIP,proto3" json:"podIP,omitempty"`
}

func (x *PipelineTaskMachinePodStat) Reset() {
	*x = PipelineTaskMachinePodStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachinePodStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachinePodStat) ProtoMessage() {}

func (x *PipelineTaskMachinePodStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachinePodStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachinePodStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{46}
}

func (x *PipelineTaskMachinePodStat) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

type PipelineTaskMachineLoadStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load1  float64 `protobuf:"fixed64,1,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5  float64 `protobuf:"fixed64,2,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15 float64 `protobuf:"fixed64,3,opt,name=load15,proto3" json:"load15,omitempty"`
}

func (x *PipelineTaskMachineLoadStat) Reset() {
	*x = PipelineTaskMachineLoadStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineLoadStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineLoadStat) ProtoMessage() {}

func (x *PipelineTaskMachineLoadStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineLoadStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineLoadStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{47}
}

func (x *PipelineTaskMachineLoadStat) GetLoad1() float64 {
	if x != nil {
		return x.Load1
	}
	return 0
}

func (x *PipelineTaskMachineLoadStat) GetLoad5() float64 {
	if x != nil {
		return x.Load5
	}
	return 0
}

func (x *PipelineTaskMachineLoadStat) GetLoad15() float64 {
	if x != nil {
		return x.Load15
	}
	return 0
}

type PipelineTaskMachineMemStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       uint64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available   uint64  `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	Free        uint64  `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,5,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	Buffers     uint64  `protobuf:"varint,6,opt,name=buffers,proto3" json:"buffers,omitempty"`
	Cached      uint64  `protobuf:"varint,7,opt,name=cached,proto3" json:"cached,omitempty"`
}

func (x *PipelineTaskMachineMemStat) Reset() {
	*x = PipelineTaskMachineMemStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineMemStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineMemStat) ProtoMessage() {}

func (x *PipelineTaskMachineMemStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineMemStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineMemStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{48}
}

func (x *PipelineTaskMachineMemStat) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetBuffers() uint64 {
	if x != nil {
		return x.Buffers
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetCached() uint64 {
	if x != nil {
		return x.Cached
	}
	return 0
}

type PipelineTaskMachineSwapStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       uint64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Used        uint64  `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	Free        uint64  `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
}

func (x *PipelineTaskMachineSwapStat) Reset() {
	*x = PipelineTaskMachineSwapStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineSwapStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineSwapStat) ProtoMessage() {}

func (x *PipelineTaskMachineSwapStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineSwapStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineSwapStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{49}
}

func (x *PipelineTaskMachineSwapStat) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type PipelineTaskActionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl     string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Type        string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineTaskActionDetail) Reset() {
	*x = PipelineTaskActionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskActionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskActionDetail) ProtoMessage() {}

func (x *PipelineTaskActionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskActionDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskActionDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{50}
}

func (x *PipelineTaskActionDetail) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SnippetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SnippetConfig) Reset() {
	*x = SnippetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetConfig) ProtoMessage() {}

func (x *SnippetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetConfig.ProtoReflect.Descriptor instead.
func (*SnippetConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{51}
}

func (x *SnippetConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SnippetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DefinitionPageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator      string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Executor     string `protobuf:"bytes,3,opt,name=executor,proto3" json:"executor,omitempty"`
	SourceRemote string `protobuf:"bytes,4,opt,name=sourceRemote,proto3" json:"sourceRemote,omitempty"`
	SourceRef    string `protobuf:"bytes,5,opt,name=sourceRef,proto3" json:"sourceRef,omitempty"`
}

func (x *DefinitionPageInfo) Reset() {
	*x = DefinitionPageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionPageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionPageInfo) ProtoMessage() {}

func (x *DefinitionPageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionPageInfo.ProtoReflect.Descriptor instead.
func (*DefinitionPageInfo) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{52}
}

func (x *DefinitionPageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DefinitionPageInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *DefinitionPageInfo) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *DefinitionPageInfo) GetSourceRemote() string {
	if x != nil {
		return x.SourceRemote
	}
	return ""
}

func (x *DefinitionPageInfo) GetSourceRef() string {
	if x != nil {
		return x.SourceRef
	}
	return ""
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfd, 0x08, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x54,
	0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x54, 0x4f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x6d, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x6d, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x6d, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x31, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0xe1, 0x05, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x63, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x43, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x31,
	0x12, 0x43, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x43, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x43, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x43, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x47, 0x43, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43, 0x22, 0x9d,
	0x01, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x43, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x47, 0x43, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x47, 0x43, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x42, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x42, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22,
	0x54, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x0c, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22,
	0x53, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6e, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x46, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x46, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x61, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x55,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x6e, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x28, 0x0a, 0x0c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0d,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x6e,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x22, 0x4a,
	0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x06,
	0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x2e, 0x45, 0x6e, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x6d,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x02,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x04, 0x70, 0x75,
	0x73, 0x68, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22,
	0x3d, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x2a,
	0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x06, 0x0a, 0x11,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x66, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x4c, 0x0a, 0x0d,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x51, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a,
	0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x22, 0x7f, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x66, 0x4c, 0x61, 0x74, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73,
	0x74, 0x6f, 0x70, 0x49, 0x66, 0x4c, 0x61, 0x74, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x67, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0d,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xd2, 0x03, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0d,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xc6, 0x07, 0x0a,
	0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x54, 0x4f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x4c, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x54, 0x4f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x31, 0x0a,
	0x11, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x68, 0x0a, 0x15, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x15, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x02, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x02, 0x0a,
	0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x4a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x85, 0x03,
	0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x04, 0x73,
	0x77, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x04, 0x73, 0x77, 0x61, 0x70, 0x22, 0xad, 0x02, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x22, 0x61, 0x0a, 0x1b, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c,
	0x6f, 0x61, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x22, 0xcc, 0x01, 0x0a,
	0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x1b, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72,
	0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_base_proto_goTypes = []interface{}{
	(*PipelineDTO)(nil),                 // 0: erda.core.pipeline.base.PipelineDTO
	(*PipelineExtra)(nil),               // 1: erda.core.pipeline.base.PipelineExtra
	(*PipelineGC)(nil),                  // 2: erda.core.pipeline.base.PipelineGC
	(*PipelineResourceGC)(nil),          // 3: erda.core.pipeline.base.PipelineResourceGC
	(*PipelineDatabaseGC)(nil),          // 4: erda.core.pipeline.base.PipelineDatabaseGC
	(*PipelineDBGCItem)(nil),            // 5: erda.core.pipeline.base.PipelineDBGCItem
	(*PipelineRunParam)(nil),            // 6: erda.core.pipeline.base.PipelineRunParam
	(*PipelineRunParamWithValue)(nil),   // 7: erda.core.pipeline.base.PipelineRunParamWithValue
	(*PipelineUser)(nil),                // 8: erda.core.pipeline.base.PipelineUser
	(*ShowMessage)(nil),                 // 9: erda.core.pipeline.base.ShowMessage
	(*StorageConfig)(nil),               // 10: erda.core.pipeline.base.StorageConfig
	(*PipelineButton)(nil),              // 11: erda.core.pipeline.base.PipelineButton
	(*PipelineExecuteRecord)(nil),       // 12: erda.core.pipeline.base.PipelineExecuteRecord
	(*Breakpoint)(nil),                  // 13: erda.core.pipeline.base.Breakpoint
	(*BreakpointOn)(nil),                // 14: erda.core.pipeline.base.BreakpointOn
	(*PipelineEvent)(nil),               // 15: erda.core.pipeline.base.PipelineEvent
	(*PipelineEventSource)(nil),         // 16: erda.core.pipeline.base.PipelineEventSource
	(*ErrorResponse)(nil),               // 17: erda.core.pipeline.base.ErrorResponse
	(*PipelineOutput)(nil),              // 18: erda.core.pipeline.base.PipelineOutput
	(*PipelineOutputWithValue)(nil),     // 19: erda.core.pipeline.base.PipelineOutputWithValue
	(*PipelineParam)(nil),               // 20: erda.core.pipeline.base.PipelineParam
	(*PipelineParamWithValue)(nil),      // 21: erda.core.pipeline.base.PipelineParamWithValue
	(*PipelineYml)(nil),                 // 22: erda.core.pipeline.base.PipelineYml
	(*PipelineTrigger)(nil),             // 23: erda.core.pipeline.base.PipelineTrigger
	(*TriggerConfig)(nil),               // 24: erda.core.pipeline.base.TriggerConfig
	(*PushTrigger)(nil),                 // 25: erda.core.pipeline.base.PushTrigger
	(*MergeTrigger)(nil),                // 26: erda.core.pipeline.base.MergeTrigger
	(*NetworkHookInfo)(nil),             // 27: erda.core.pipeline.base.NetworkHookInfo
	(*PipelineYmlAction)(nil),           // 28: erda.core.pipeline.base.PipelineYmlAction
	(*Resources)(nil),                   // 29: erda.core.pipeline.base.Resources
	(*CronCompensator)(nil),             // 30: erda.core.pipeline.base.CronCompensator
	(*ActionCache)(nil),                 // 31: erda.core.pipeline.base.ActionCache
	(*TaskLoop)(nil),                    // 32: erda.core.pipeline.base.TaskLoop
	(*TaskLoopStrategy)(nil),            // 33: erda.core.pipeline.base.TaskLoopStrategy
	(*SnippetStages)(nil),               // 34: erda.core.pipeline.base.SnippetStages
	(*PipelineStage)(nil),               // 35: erda.core.pipeline.base.PipelineStage
	(*PipelineStageDetailDTO)(nil),      // 36: erda.core.pipeline.base.PipelineStageDetailDTO
	(*PipelineTaskDTO)(nil),             // 37: erda.core.pipeline.base.PipelineTaskDTO
	(*TaskContainer)(nil),               // 38: erda.core.pipeline.base.TaskContainer
	(*TaskParamDetail)(nil),             // 39: erda.core.pipeline.base.TaskParamDetail
	(*PipelineTaskExtra)(nil),           // 40: erda.core.pipeline.base.PipelineTaskExtra
	(*ErrorContext)(nil),                // 41: erda.core.pipeline.base.ErrorContext
	(*PipelineTaskResult)(nil),          // 42: erda.core.pipeline.base.PipelineTaskResult
	(*PipelineTaskSnippetDetail)(nil),   // 43: erda.core.pipeline.base.PipelineTaskSnippetDetail
	(*PipelineTaskMachineStat)(nil),     // 44: erda.core.pipeline.base.PipelineTaskMachineStat
	(*PipelineTaskMachineHostStat)(nil), // 45: erda.core.pipeline.base.PipelineTaskMachineHostStat
	(*PipelineTaskMachinePodStat)(nil),  // 46: erda.core.pipeline.base.PipelineTaskMachinePodStat
	(*PipelineTaskMachineLoadStat)(nil), // 47: erda.core.pipeline.base.PipelineTaskMachineLoadStat
	(*PipelineTaskMachineMemStat)(nil),  // 48: erda.core.pipeline.base.PipelineTaskMachineMemStat
	(*PipelineTaskMachineSwapStat)(nil), // 49: erda.core.pipeline.base.PipelineTaskMachineSwapStat
	(*PipelineTaskActionDetail)(nil),    // 50: erda.core.pipeline.base.PipelineTaskActionDetail
	(*SnippetConfig)(nil),               // 51: erda.core.pipeline.base.SnippetConfig
	(*DefinitionPageInfo)(nil),          // 52: erda.core.pipeline.base.DefinitionPageInfo
	nil,                                 // 53: erda.core.pipeline.base.PipelineDTO.LabelsEntry
	nil,                                 // 54: erda.core.pipeline.base.PipelineYml.EnvsEntry
	nil,                                 // 55: erda.core.pipeline.base.PipelineTrigger.FilterEntry
	nil,                                 // 56: erda.core.pipeline.base.NetworkHookInfo.LabelsEntry
	nil,                                 // 57: erda.core.pipeline.base.PipelineYmlAction.ParamsEntry
	nil,                                 // 58: erda.core.pipeline.base.PipelineTaskDTO.LabelsEntry
	nil,                                 // 59: erda.core.pipeline.base.TaskParamDetail.ValuesEntry
	nil,                                 // 60: erda.core.pipeline.base.SnippetConfig.LabelsEntry
	(*pb.CommitDetail)(nil),             // 61: erda.common.CommitDetail
	(*timestamppb.Timestamp)(nil),       // 62: google.protobuf.Timestamp
	(*structpb.Value)(nil),              // 63: google.protobuf.Value
	(*structpb.ListValue)(nil),          // 64: google.protobuf.ListValue
	(*pb.MetadataField)(nil),            // 65: erda.common.MetadataField
}
var file_base_proto_depIdxs = []int32{
	53, // 0: erda.core.pipeline.base.PipelineDTO.labels:type_name -> erda.core.pipeline.base.PipelineDTO.LabelsEntry
	1,  // 1: erda.core.pipeline.base.PipelineDTO.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	61, // 2: erda.core.pipeline.base.PipelineDTO.commitDetail:type_name -> erda.common.CommitDetail
	62, // 3: erda.core.pipeline.base.PipelineDTO.timeBegin:type_name -> google.protobuf.Timestamp
	62, // 4: erda.core.pipeline.base.PipelineDTO.timeEnd:type_name -> google.protobuf.Timestamp
	62, // 5: erda.core.pipeline.base.PipelineDTO.timeCreated:type_name -> google.protobuf.Timestamp
	62, // 6: erda.core.pipeline.base.PipelineDTO.timeUpdated:type_name -> google.protobuf.Timestamp
	8,  // 7: erda.core.pipeline.base.PipelineExtra.submitUser:type_name -> erda.core.pipeline.base.PipelineUser
	8,  // 8: erda.core.pipeline.base.PipelineExtra.runUser:type_name -> erda.core.pipeline.base.PipelineUser
	8,  // 9: erda.core.pipeline.base.PipelineExtra.cancelUser:type_name -> erda.core.pipeline.base.PipelineUser
	62, // 10: erda.core.pipeline.base.PipelineExtra.cronTriggerTime:type_name -> google.protobuf.Timestamp
	9,  // 11: erda.core.pipeline.base.PipelineExtra.show_message:type_name -> erda.core.pipeline.base.ShowMessage
	8,  // 12: erda.core.pipeline.base.PipelineExtra.ownerUser:type_name -> erda.core.pipeline.base.PipelineUser
	13, // 13: erda.core.pipeline.base.PipelineExtra.breakpoint:type_name -> erda.core.pipeline.base.Breakpoint
	3,  // 14: erda.core.pipeline.base.PipelineGC.resourceGC:type_name -> erda.core.pipeline.base.PipelineResourceGC
	4,  // 15: erda.core.pipeline.base.PipelineGC.databaseGC:type_name -> erda.core.pipeline.base.PipelineDatabaseGC
	5,  // 16: erda.core.pipeline.base.PipelineDatabaseGC.analyzed:type_name -> erda.core.pipeline.base.PipelineDBGCItem
	5,  // 17: erda.core.pipeline.base.PipelineDatabaseGC.finished:type_name -> erda.core.pipeline.base.PipelineDBGCItem
	63, // 18: erda.core.pipeline.base.PipelineRunParam.value:type_name -> google.protobuf.Value
	63, // 19: erda.core.pipeline.base.PipelineRunParamWithValue.value:type_name -> google.protobuf.Value
	63, // 20: erda.core.pipeline.base.PipelineRunParamWithValue.trueValue:type_name -> google.protobuf.Value
	63, // 21: erda.core.pipeline.base.PipelineUser.ID:type_name -> google.protobuf.Value
	62, // 22: erda.core.pipeline.base.PipelineExecuteRecord.timeCreated:type_name -> google.protobuf.Timestamp
	62, // 23: erda.core.pipeline.base.PipelineExecuteRecord.timeBegin:type_name -> google.protobuf.Timestamp
	62, // 24: erda.core.pipeline.base.PipelineExecuteRecord.timeEnd:type_name -> google.protobuf.Timestamp
	14, // 25: erda.core.pipeline.base.Breakpoint.on:type_name -> erda.core.pipeline.base.BreakpointOn
	63, // 26: erda.core.pipeline.base.Breakpoint.timeout:type_name -> google.protobuf.Value
	16, // 27: erda.core.pipeline.base.PipelineEvent.source:type_name -> erda.core.pipeline.base.PipelineEventSource
	62, // 28: erda.core.pipeline.base.PipelineEvent.firstTimestamp:type_name -> google.protobuf.Timestamp
	62, // 29: erda.core.pipeline.base.PipelineEvent.lastTimestamp:type_name -> google.protobuf.Timestamp
	41, // 30: erda.core.pipeline.base.ErrorResponse.ctx:type_name -> erda.core.pipeline.base.ErrorContext
	63, // 31: erda.core.pipeline.base.PipelineOutputWithValue.value:type_name -> google.protobuf.Value
	63, // 32: erda.core.pipeline.base.PipelineParam.default:type_name -> google.protobuf.Value
	63, // 33: erda.core.pipeline.base.PipelineParamWithValue.default:type_name -> google.protobuf.Value
	63, // 34: erda.core.pipeline.base.PipelineParamWithValue.value:type_name -> google.protobuf.Value
	54, // 35: erda.core.pipeline.base.PipelineYml.envs:type_name -> erda.core.pipeline.base.PipelineYml.EnvsEntry
	30, // 36: erda.core.pipeline.base.PipelineYml.cronCompensator:type_name -> erda.core.pipeline.base.CronCompensator
	64, // 37: erda.core.pipeline.base.PipelineYml.stages:type_name -> google.protobuf.ListValue
	28, // 38: erda.core.pipeline.base.PipelineYml.flatActions:type_name -> erda.core.pipeline.base.PipelineYmlAction
	20, // 39: erda.core.pipeline.base.PipelineYml.params:type_name -> erda.core.pipeline.base.PipelineParam
	18, // 40: erda.core.pipeline.base.PipelineYml.outputs:type_name -> erda.core.pipeline.base.PipelineOutput
	24, // 41: erda.core.pipeline.base.PipelineYml.on:type_name -> erda.core.pipeline.base.TriggerConfig
	27, // 42: erda.core.pipeline.base.PipelineYml.lifecycle:type_name -> erda.core.pipeline.base.NetworkHookInfo
	23, // 43: erda.core.pipeline.base.PipelineYml.triggers:type_name -> erda.core.pipeline.base.PipelineTrigger
	55, // 44: erda.core.pipeline.base.PipelineTrigger.filter:type_name -> erda.core.pipeline.base.PipelineTrigger.FilterEntry
	25, // 45: erda.core.pipeline.base.TriggerConfig.push:type_name -> erda.core.pipeline.base.PushTrigger
	26, // 46: erda.core.pipeline.base.TriggerConfig.merge:type_name -> erda.core.pipeline.base.MergeTrigger
	56, // 47: erda.core.pipeline.base.NetworkHookInfo.labels:type_name -> erda.core.pipeline.base.NetworkHookInfo.LabelsEntry
	57, // 48: erda.core.pipeline.base.PipelineYmlAction.params:type_name -> erda.core.pipeline.base.PipelineYmlAction.ParamsEntry
	63, // 49: erda.core.pipeline.base.PipelineYmlAction.commands:type_name -> google.protobuf.Value
	29, // 50: erda.core.pipeline.base.PipelineYmlAction.resources:type_name -> erda.core.pipeline.base.Resources
	31, // 51: erda.core.pipeline.base.PipelineYmlAction.caches:type_name -> erda.core.pipeline.base.ActionCache
	51, // 52: erda.core.pipeline.base.PipelineYmlAction.snippetConfig:type_name -> erda.core.pipeline.base.SnippetConfig
	32, // 53: erda.core.pipeline.base.PipelineYmlAction.loop:type_name -> erda.core.pipeline.base.TaskLoop
	34, // 54: erda.core.pipeline.base.PipelineYmlAction.snippetStages:type_name -> erda.core.pipeline.base.SnippetStages
	33, // 55: erda.core.pipeline.base.TaskLoop.strategy:type_name -> erda.core.pipeline.base.TaskLoopStrategy
	20, // 56: erda.core.pipeline.base.SnippetStages.params:type_name -> erda.core.pipeline.base.PipelineParam
	18, // 57: erda.core.pipeline.base.SnippetStages.outputs:type_name -> erda.core.pipeline.base.PipelineOutput
	64, // 58: erda.core.pipeline.base.SnippetStages.stages:type_name -> google.protobuf.ListValue
	62, // 59: erda.core.pipeline.base.PipelineStage.timeBegin:type_name -> google.protobuf.Timestamp
	62, // 60: erda.core.pipeline.base.PipelineStage.timeEnd:type_name -> google.protobuf.Timestamp
	62, // 61: erda.core.pipeline.base.PipelineStage.timeCreated:type_name -> google.protobuf.Timestamp
	62, // 62: erda.core.pipeline.base.PipelineStage.timeUpdated:type_name -> google.protobuf.Timestamp
	62, // 63: erda.core.pipeline.base.PipelineStageDetailDTO.timeBegin:type_name -> google.protobuf.Timestamp
	62, // 64: erda.core.pipeline.base.PipelineStageDetailDTO.timeEnd:type_name -> google.protobuf.Timestamp
	62, // 65: erda.core.pipeline.base.PipelineStageDetailDTO.timeCreated:type_name -> google.protobuf.Timestamp
	62, // 66: erda.core.pipeline.base.PipelineStageDetailDTO.timeUpdated:type_name -> google.protobuf.Timestamp
	37, // 67: erda.core.pipeline.base.PipelineStageDetailDTO.pipelineTasks:type_name -> erda.core.pipeline.base.PipelineTaskDTO
	40, // 68: erda.core.pipeline.base.PipelineTaskDTO.extra:type_name -> erda.core.pipeline.base.PipelineTaskExtra
	58, // 69: erda.core.pipeline.base.PipelineTaskDTO.labels:type_name -> erda.core.pipeline.base.PipelineTaskDTO.LabelsEntry
	42, // 70: erda.core.pipeline.base.PipelineTaskDTO.result:type_name -> erda.core.pipeline.base.PipelineTaskResult
	43, // 71: erda.core.pipeline.base.PipelineTaskDTO.snippetPipelineDetail:type_name -> erda.core.pipeline.base.PipelineTaskSnippetDetail
	62, // 72: erda.core.pipeline.base.PipelineTaskDTO.timeBegin:type_name -> google.protobuf.Timestamp
	62, // 73: erda.core.pipeline.base.PipelineTaskDTO.timeEnd:type_name -> google.protobuf.Timestamp
	62, // 74: erda.core.pipeline.base.PipelineTaskDTO.timeCreated:type_name -> google.protobuf.Timestamp
	62, // 75: erda.core.pipeline.base.PipelineTaskDTO.timeUpdated:type_name -> google.protobuf.Timestamp
	59, // 76: erda.core.pipeline.base.TaskParamDetail.values:type_name -> erda.core.pipeline.base.TaskParamDetail.ValuesEntry
	38, // 77: erda.core.pipeline.base.PipelineTaskExtra.taskContainers:type_name -> erda.core.pipeline.base.TaskContainer
	39, // 78: erda.core.pipeline.base.PipelineTaskExtra.params:type_name -> erda.core.pipeline.base.TaskParamDetail
	50, // 79: erda.core.pipeline.base.PipelineTaskExtra.action:type_name -> erda.core.pipeline.base.PipelineTaskActionDetail
	13, // 80: erda.core.pipeline.base.PipelineTaskExtra.breakpoint:type_name -> erda.core.pipeline.base.Breakpoint
	62, // 81: erda.core.pipeline.base.ErrorContext.startTime:type_name -> google.protobuf.Timestamp
	62, // 82: erda.core.pipeline.base.ErrorContext.endTime:type_name -> google.protobuf.Timestamp
	65, // 83: erda.core.pipeline.base.PipelineTaskResult.metadata:type_name -> erda.common.MetadataField
	17, // 84: erda.core.pipeline.base.PipelineTaskResult.errors:type_name -> erda.core.pipeline.base.ErrorResponse
	44, // 85: erda.core.pipeline.base.PipelineTaskResult.machineStat:type_name -> erda.core.pipeline.base.PipelineTaskMachineStat
	19, // 86: erda.core.pipeline.base.PipelineTaskSnippetDetail.outputs:type_name -> erda.core.pipeline.base.PipelineOutputWithValue
	45, // 87: erda.core.pipeline.base.PipelineTaskMachineStat.host:type_name -> erda.core.pipeline.base.PipelineTaskMachineHostStat
	46, // 88: erda.core.pipeline.base.PipelineTaskMachineStat.pod:type_name -> erda.core.pipeline.base.PipelineTaskMachinePodStat
	47, // 89: erda.core.pipeline.base.PipelineTaskMachineStat.load:type_name -> erda.core.pipeline.base.PipelineTaskMachineLoadStat
	48, // 90: erda.core.pipeline.base.PipelineTaskMachineStat.mem:type_name -> erda.core.pipeline.base.PipelineTaskMachineMemStat
	49, // 91: erda.core.pipeline.base.PipelineTaskMachineStat.swap:type_name -> erda.core.pipeline.base.PipelineTaskMachineSwapStat
	60, // 92: erda.core.pipeline.base.SnippetConfig.labels:type_name -> erda.core.pipeline.base.SnippetConfig.LabelsEntry
	63, // 93: erda.core.pipeline.base.NetworkHookInfo.LabelsEntry.value:type_name -> google.protobuf.Value
	63, // 94: erda.core.pipeline.base.PipelineYmlAction.ParamsEntry.value:type_name -> google.protobuf.Value
	95, // [95:95] is the sub-list for method output_type
	95, // [95:95] is the sub-list for method input_type
	95, // [95:95] is the sub-list for extension type_name
	95, // [95:95] is the sub-list for extension extendee
	0,  // [0:95] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineResourceGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDatabaseGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDBGCItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunParamWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineExecuteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Breakpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakpointOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEventSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOutputWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineParamWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYmlAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCompensator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLoopStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetStages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStageDetailDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskParamDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskSnippetDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineHostStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachinePodStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineLoadStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineMemStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineSwapStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskActionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionPageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_base_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_base_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_base_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_base_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_base_proto_msgTypes[37].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
