// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cron.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CronPagingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronPagingRequestMultiError, or nil if none found.
func (m *CronPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllSources

	// no validation rules for PageSize

	// no validation rules for PageNo

	if all {
		switch v := interface{}(m.GetEnable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronPagingRequestValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronPagingRequestValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronPagingRequestValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterName

	// no validation rules for GetAll

	// no validation rules for EmptyDefinitionID

	if len(errors) > 0 {
		return CronPagingRequestMultiError(errors)
	}

	return nil
}

// CronPagingRequestMultiError is an error wrapping multiple validation errors
// returned by CronPagingRequest.ValidateAll() if the designated constraints
// aren't met.
type CronPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronPagingRequestMultiError) AllErrors() []error { return m }

// CronPagingRequestValidationError is the validation error returned by
// CronPagingRequest.Validate if the designated constraints aren't met.
type CronPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronPagingRequestValidationError) ErrorName() string {
	return "CronPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CronPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronPagingRequestValidationError{}

// Validate checks the field values on CronPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CronPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronPagingResponseMultiError, or nil if none found.
func (m *CronPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CronPagingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CronPagingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CronPagingResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CronPagingResponseMultiError(errors)
	}

	return nil
}

// CronPagingResponseMultiError is an error wrapping multiple validation errors
// returned by CronPagingResponse.ValidateAll() if the designated constraints
// aren't met.
type CronPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronPagingResponseMultiError) AllErrors() []error { return m }

// CronPagingResponseValidationError is the validation error returned by
// CronPagingResponse.Validate if the designated constraints aren't met.
type CronPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronPagingResponseValidationError) ErrorName() string {
	return "CronPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CronPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronPagingResponseValidationError{}

// Validate checks the field values on CronStartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronStartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronStartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronStartRequestMultiError, or nil if none found.
func (m *CronStartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronStartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return CronStartRequestMultiError(errors)
	}

	return nil
}

// CronStartRequestMultiError is an error wrapping multiple validation errors
// returned by CronStartRequest.ValidateAll() if the designated constraints
// aren't met.
type CronStartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronStartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronStartRequestMultiError) AllErrors() []error { return m }

// CronStartRequestValidationError is the validation error returned by
// CronStartRequest.Validate if the designated constraints aren't met.
type CronStartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronStartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronStartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronStartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronStartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronStartRequestValidationError) ErrorName() string { return "CronStartRequestValidationError" }

// Error satisfies the builtin error interface
func (e CronStartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronStartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronStartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronStartRequestValidationError{}

// Validate checks the field values on CronStartResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronStartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronStartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronStartResponseMultiError, or nil if none found.
func (m *CronStartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronStartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronStartResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronStartResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronStartResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronStartResponseMultiError(errors)
	}

	return nil
}

// CronStartResponseMultiError is an error wrapping multiple validation errors
// returned by CronStartResponse.ValidateAll() if the designated constraints
// aren't met.
type CronStartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronStartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronStartResponseMultiError) AllErrors() []error { return m }

// CronStartResponseValidationError is the validation error returned by
// CronStartResponse.Validate if the designated constraints aren't met.
type CronStartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronStartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronStartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronStartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronStartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronStartResponseValidationError) ErrorName() string {
	return "CronStartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CronStartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronStartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronStartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronStartResponseValidationError{}

// Validate checks the field values on CronStopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronStopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronStopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronStopRequestMultiError, or nil if none found.
func (m *CronStopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronStopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return CronStopRequestMultiError(errors)
	}

	return nil
}

// CronStopRequestMultiError is an error wrapping multiple validation errors
// returned by CronStopRequest.ValidateAll() if the designated constraints
// aren't met.
type CronStopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronStopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronStopRequestMultiError) AllErrors() []error { return m }

// CronStopRequestValidationError is the validation error returned by
// CronStopRequest.Validate if the designated constraints aren't met.
type CronStopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronStopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronStopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronStopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronStopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronStopRequestValidationError) ErrorName() string { return "CronStopRequestValidationError" }

// Error satisfies the builtin error interface
func (e CronStopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronStopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronStopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronStopRequestValidationError{}

// Validate checks the field values on CronStopResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronStopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronStopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronStopResponseMultiError, or nil if none found.
func (m *CronStopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronStopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronStopResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronStopResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronStopResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronStopResponseMultiError(errors)
	}

	return nil
}

// CronStopResponseMultiError is an error wrapping multiple validation errors
// returned by CronStopResponse.ValidateAll() if the designated constraints
// aren't met.
type CronStopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronStopResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronStopResponseMultiError) AllErrors() []error { return m }

// CronStopResponseValidationError is the validation error returned by
// CronStopResponse.Validate if the designated constraints aren't met.
type CronStopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronStopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronStopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronStopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronStopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronStopResponseValidationError) ErrorName() string { return "CronStopResponseValidationError" }

// Error satisfies the builtin error interface
func (e CronStopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronStopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronStopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronStopResponseValidationError{}

// Validate checks the field values on CronCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronCreateRequestMultiError, or nil if none found.
func (m *CronCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for CronExpr

	// no validation rules for PipelineYmlName

	// no validation rules for PipelineSource

	if all {
		switch v := interface{}(m.GetEnable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCreateRequestValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCreateRequestValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCreateRequestValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineYml

	// no validation rules for ClusterName

	// no validation rules for FilterLabels

	// no validation rules for NormalLabels

	// no validation rules for Envs

	if all {
		switch v := interface{}(m.GetCronStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCreateRequestValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCreateRequestValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCreateRequestValidationError{
				field:  "CronStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncomingSecrets

	// no validation rules for PipelineDefinitionID

	if len(errors) > 0 {
		return CronCreateRequestMultiError(errors)
	}

	return nil
}

// CronCreateRequestMultiError is an error wrapping multiple validation errors
// returned by CronCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CronCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronCreateRequestMultiError) AllErrors() []error { return m }

// CronCreateRequestValidationError is the validation error returned by
// CronCreateRequest.Validate if the designated constraints aren't met.
type CronCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronCreateRequestValidationError) ErrorName() string {
	return "CronCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CronCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronCreateRequestValidationError{}

// Validate checks the field values on CronCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CronCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronCreateResponseMultiError, or nil if none found.
func (m *CronCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronCreateResponseMultiError(errors)
	}

	return nil
}

// CronCreateResponseMultiError is an error wrapping multiple validation errors
// returned by CronCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CronCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronCreateResponseMultiError) AllErrors() []error { return m }

// CronCreateResponseValidationError is the validation error returned by
// CronCreateResponse.Validate if the designated constraints aren't met.
type CronCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronCreateResponseValidationError) ErrorName() string {
	return "CronCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CronCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronCreateResponseValidationError{}

// Validate checks the field values on CronDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronDeleteRequestMultiError, or nil if none found.
func (m *CronDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return CronDeleteRequestMultiError(errors)
	}

	return nil
}

// CronDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by CronDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type CronDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronDeleteRequestMultiError) AllErrors() []error { return m }

// CronDeleteRequestValidationError is the validation error returned by
// CronDeleteRequest.Validate if the designated constraints aren't met.
type CronDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronDeleteRequestValidationError) ErrorName() string {
	return "CronDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CronDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronDeleteRequestValidationError{}

// Validate checks the field values on CronDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CronDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronDeleteResponseMultiError, or nil if none found.
func (m *CronDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CronDeleteResponseMultiError(errors)
	}

	return nil
}

// CronDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by CronDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type CronDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronDeleteResponseMultiError) AllErrors() []error { return m }

// CronDeleteResponseValidationError is the validation error returned by
// CronDeleteResponse.Validate if the designated constraints aren't met.
type CronDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronDeleteResponseValidationError) ErrorName() string {
	return "CronDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CronDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronDeleteResponseValidationError{}

// Validate checks the field values on CronGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CronGetRequestMultiError,
// or nil if none found.
func (m *CronGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	if len(errors) > 0 {
		return CronGetRequestMultiError(errors)
	}

	return nil
}

// CronGetRequestMultiError is an error wrapping multiple validation errors
// returned by CronGetRequest.ValidateAll() if the designated constraints
// aren't met.
type CronGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronGetRequestMultiError) AllErrors() []error { return m }

// CronGetRequestValidationError is the validation error returned by
// CronGetRequest.Validate if the designated constraints aren't met.
type CronGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronGetRequestValidationError) ErrorName() string { return "CronGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e CronGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronGetRequestValidationError{}

// Validate checks the field values on CronGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronGetResponseMultiError, or nil if none found.
func (m *CronGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronGetResponseMultiError(errors)
	}

	return nil
}

// CronGetResponseMultiError is an error wrapping multiple validation errors
// returned by CronGetResponse.ValidateAll() if the designated constraints
// aren't met.
type CronGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronGetResponseMultiError) AllErrors() []error { return m }

// CronGetResponseValidationError is the validation error returned by
// CronGetResponse.Validate if the designated constraints aren't met.
type CronGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronGetResponseValidationError) ErrorName() string { return "CronGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e CronGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronGetResponseValidationError{}

// Validate checks the field values on CronUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronUpdateRequestMultiError, or nil if none found.
func (m *CronUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CronUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronID

	// no validation rules for PipelineYml

	// no validation rules for CronExpr

	// no validation rules for PipelineDefinitionID

	// no validation rules for Secrets

	if len(errors) > 0 {
		return CronUpdateRequestMultiError(errors)
	}

	return nil
}

// CronUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by CronUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type CronUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronUpdateRequestMultiError) AllErrors() []error { return m }

// CronUpdateRequestValidationError is the validation error returned by
// CronUpdateRequest.Validate if the designated constraints aren't met.
type CronUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronUpdateRequestValidationError) ErrorName() string {
	return "CronUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CronUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronUpdateRequestValidationError{}

// Validate checks the field values on CronUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CronUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronUpdateResponseMultiError, or nil if none found.
func (m *CronUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CronUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CronUpdateResponseMultiError(errors)
	}

	return nil
}

// CronUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by CronUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type CronUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronUpdateResponseMultiError) AllErrors() []error { return m }

// CronUpdateResponseValidationError is the validation error returned by
// CronUpdateResponse.Validate if the designated constraints aren't met.
type CronUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronUpdateResponseValidationError) ErrorName() string {
	return "CronUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CronUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronUpdateResponseValidationError{}
