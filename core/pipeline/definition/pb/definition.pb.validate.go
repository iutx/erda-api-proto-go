// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: definition.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineDefinitionExtraUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionExtraUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionExtraUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionExtraUpdateRequestMultiError, or nil if none found.
func (m *PipelineDefinitionExtraUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionExtraUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	// no validation rules for Extra

	if len(errors) > 0 {
		return PipelineDefinitionExtraUpdateRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionExtraUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionExtraUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionExtraUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionExtraUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionExtraUpdateRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionExtraUpdateRequestValidationError is the validation error
// returned by PipelineDefinitionExtraUpdateRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionExtraUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionExtraUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionExtraUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionExtraUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionExtraUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionExtraUpdateRequestValidationError) ErrorName() string {
	return "PipelineDefinitionExtraUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionExtraUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionExtraUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionExtraUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionExtraUpdateRequestValidationError{}

// Validate checks the field values on PipelineDefinitionExtraUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionExtraUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionExtraUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionExtraUpdateResponseMultiError, or nil if none found.
func (m *PipelineDefinitionExtraUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionExtraUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionExtraUpdateResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionExtraUpdateResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionExtraUpdateResponseValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineDefinitionExtraUpdateResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionExtraUpdateResponseMultiError is an error wrapping
// multiple validation errors returned by
// PipelineDefinitionExtraUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionExtraUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionExtraUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionExtraUpdateResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionExtraUpdateResponseValidationError is the validation error
// returned by PipelineDefinitionExtraUpdateResponse.Validate if the
// designated constraints aren't met.
type PipelineDefinitionExtraUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionExtraUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionExtraUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionExtraUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionExtraUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionExtraUpdateResponseValidationError) ErrorName() string {
	return "PipelineDefinitionExtraUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionExtraUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionExtraUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionExtraUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionExtraUpdateResponseValidationError{}

// Validate checks the field values on PipelineDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDefinitionMultiError, or nil if none found.
func (m *PipelineDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Location

	// no validation rules for Name

	// no validation rules for Creator

	// no validation rules for Category

	// no validation rules for CostTime

	// no validation rules for Executor

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionValidationError{
				field:  "EndedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SoftDeletedAt

	// no validation rules for SourceType

	// no validation rules for Remote

	// no validation rules for Ref

	// no validation rules for Path

	// no validation rules for FileName

	// no validation rules for PipelineSourceID

	// no validation rules for Status

	// no validation rules for PipelineID

	// no validation rules for TotalActionNum

	// no validation rules for ExecutedActionNum

	if len(errors) > 0 {
		return PipelineDefinitionMultiError(errors)
	}

	return nil
}

// PipelineDefinitionMultiError is an error wrapping multiple validation errors
// returned by PipelineDefinition.ValidateAll() if the designated constraints
// aren't met.
type PipelineDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionMultiError) AllErrors() []error { return m }

// PipelineDefinitionValidationError is the validation error returned by
// PipelineDefinition.Validate if the designated constraints aren't met.
type PipelineDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionValidationError) ErrorName() string {
	return "PipelineDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionValidationError{}

// Validate checks the field values on PipelineDefinitionExtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionExtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionExtra with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDefinitionExtraMultiError, or nil if none found.
func (m *PipelineDefinitionExtra) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionExtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetExtra()) < 1 {
		err := PipelineDefinitionExtraValidationError{
			field:  "Extra",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionExtraValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionExtraValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionExtraValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionExtraValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionExtraValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionExtraValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineDefinition

	if len(errors) > 0 {
		return PipelineDefinitionExtraMultiError(errors)
	}

	return nil
}

// PipelineDefinitionExtraMultiError is an error wrapping multiple validation
// errors returned by PipelineDefinitionExtra.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionExtraMultiError) AllErrors() []error { return m }

// PipelineDefinitionExtraValidationError is the validation error returned by
// PipelineDefinitionExtra.Validate if the designated constraints aren't met.
type PipelineDefinitionExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionExtraValidationError) ErrorName() string {
	return "PipelineDefinitionExtraValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionExtraValidationError{}

// Validate checks the field values on PipelineDefinitionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionCreateRequestMultiError, or nil if none found.
func (m *PipelineDefinitionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetLocation()) < 1 {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "Location",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 30 {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipelineSourceID()) < 1 {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "PipelineSourceID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCategory()) < 1 {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "Category",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExtra() == nil {
		err := PipelineDefinitionCreateRequestValidationError{
			field:  "Extra",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionCreateRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionCreateRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionCreateRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalActionNum

	// no validation rules for ExecutedActionNum

	// no validation rules for Ref

	if len(errors) > 0 {
		return PipelineDefinitionCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionCreateRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionCreateRequestValidationError is the validation error
// returned by PipelineDefinitionCreateRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionCreateRequestValidationError) ErrorName() string {
	return "PipelineDefinitionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionCreateRequestValidationError{}

// Validate checks the field values on PipelineDefinitionCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineDefinitionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionCreateResponseMultiError, or nil if none found.
func (m *PipelineDefinitionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionCreateResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionCreateResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionCreateResponseValidationError{
				field:  "PipelineDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineDefinitionCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionCreateResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionCreateResponseValidationError is the validation error
// returned by PipelineDefinitionCreateResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionCreateResponseValidationError) ErrorName() string {
	return "PipelineDefinitionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionCreateResponseValidationError{}

// Validate checks the field values on PipelineDefinitionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionUpdateRequestMultiError, or nil if none found.
func (m *PipelineDefinitionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CostTime

	// no validation rules for Executor

	// no validation rules for PipelineSourceID

	// no validation rules for Category

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionUpdateRequestValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateRequestValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateRequestValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionUpdateRequestValidationError{
				field:  "EndedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineDefinitionID

	// no validation rules for Status

	// no validation rules for PipelineID

	// no validation rules for TotalActionNum

	// no validation rules for ExecutedActionNum

	if len(errors) > 0 {
		return PipelineDefinitionUpdateRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionUpdateRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionUpdateRequestValidationError is the validation error
// returned by PipelineDefinitionUpdateRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionUpdateRequestValidationError) ErrorName() string {
	return "PipelineDefinitionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionUpdateRequestValidationError{}

// Validate checks the field values on PipelineDefinitionUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineDefinitionUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionUpdateResponseMultiError, or nil if none found.
func (m *PipelineDefinitionUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionUpdateResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionUpdateResponseValidationError{
				field:  "PipelineDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineDefinitionUpdateResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionUpdateResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionUpdateResponseValidationError is the validation error
// returned by PipelineDefinitionUpdateResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionUpdateResponseValidationError) ErrorName() string {
	return "PipelineDefinitionUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionUpdateResponseValidationError{}

// Validate checks the field values on PipelineDefinitionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionDeleteRequestMultiError, or nil if none found.
func (m *PipelineDefinitionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	if len(errors) > 0 {
		return PipelineDefinitionDeleteRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionDeleteRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionDeleteRequestValidationError is the validation error
// returned by PipelineDefinitionDeleteRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionDeleteRequestValidationError) ErrorName() string {
	return "PipelineDefinitionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionDeleteRequestValidationError{}

// Validate checks the field values on PipelineDefinitionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineDefinitionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionDeleteResponseMultiError, or nil if none found.
func (m *PipelineDefinitionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineDefinitionDeleteResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionDeleteResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionDeleteResponseValidationError is the validation error
// returned by PipelineDefinitionDeleteResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionDeleteResponseValidationError) ErrorName() string {
	return "PipelineDefinitionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionDeleteResponseValidationError{}

// Validate checks the field values on PipelineDefinitionDeleteByRemoteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionDeleteByRemoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PipelineDefinitionDeleteByRemoteRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PipelineDefinitionDeleteByRemoteRequestMultiError, or nil if none found.
func (m *PipelineDefinitionDeleteByRemoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionDeleteByRemoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remote

	if len(errors) > 0 {
		return PipelineDefinitionDeleteByRemoteRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionDeleteByRemoteRequestMultiError is an error wrapping
// multiple validation errors returned by
// PipelineDefinitionDeleteByRemoteRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionDeleteByRemoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionDeleteByRemoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionDeleteByRemoteRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionDeleteByRemoteRequestValidationError is the validation
// error returned by PipelineDefinitionDeleteByRemoteRequest.Validate if the
// designated constraints aren't met.
type PipelineDefinitionDeleteByRemoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) ErrorName() string {
	return "PipelineDefinitionDeleteByRemoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionDeleteByRemoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionDeleteByRemoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionDeleteByRemoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionDeleteByRemoteRequestValidationError{}

// Validate checks the field values on PipelineDefinitionGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDefinitionGetRequestMultiError, or nil if none found.
func (m *PipelineDefinitionGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	if len(errors) > 0 {
		return PipelineDefinitionGetRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionGetRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionGetRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineDefinitionGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionGetRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionGetRequestValidationError is the validation error returned
// by PipelineDefinitionGetRequest.Validate if the designated constraints
// aren't met.
type PipelineDefinitionGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionGetRequestValidationError) ErrorName() string {
	return "PipelineDefinitionGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionGetRequestValidationError{}

// Validate checks the field values on PipelineDefinitionGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionGetResponseMultiError, or nil if none found.
func (m *PipelineDefinitionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipelineDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineDefinitionGetResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineDefinitionGetResponseValidationError{
					field:  "PipelineDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipelineDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineDefinitionGetResponseValidationError{
				field:  "PipelineDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineDefinitionGetResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionGetResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionGetResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionGetResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionGetResponseValidationError is the validation error
// returned by PipelineDefinitionGetResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionGetResponseValidationError) ErrorName() string {
	return "PipelineDefinitionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionGetResponseValidationError{}

// Validate checks the field values on PipelineDefinitionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionListRequestMultiError, or nil if none found.
func (m *PipelineDefinitionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNo

	// no validation rules for Location

	// no validation rules for Name

	// no validation rules for FuzzyName

	// no validation rules for TotalActionNum

	// no validation rules for ExecutedActionNum

	// no validation rules for IsOthers

	if len(errors) > 0 {
		return PipelineDefinitionListRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionListRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionListRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionListRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionListRequestValidationError is the validation error
// returned by PipelineDefinitionListRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionListRequestValidationError) ErrorName() string {
	return "PipelineDefinitionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionListRequestValidationError{}

// Validate checks the field values on PipelineDefinitionStatisticsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineDefinitionStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionStatisticsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionStatisticsRequestMultiError, or nil if none found.
func (m *PipelineDefinitionStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Location

	if len(errors) > 0 {
		return PipelineDefinitionStatisticsRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionStatisticsRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionStatisticsRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionStatisticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionStatisticsRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionStatisticsRequestValidationError is the validation error
// returned by PipelineDefinitionStatisticsRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionStatisticsRequestValidationError) ErrorName() string {
	return "PipelineDefinitionStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionStatisticsRequestValidationError{}

// Validate checks the field values on PipelineDefinitionStatisticsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionStatisticsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionStatisticsResponseMultiError, or nil if none found.
func (m *PipelineDefinitionStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineDefinitionStatistics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDefinitionStatisticsResponseValidationError{
						field:  fmt.Sprintf("PipelineDefinitionStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDefinitionStatisticsResponseValidationError{
						field:  fmt.Sprintf("PipelineDefinitionStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDefinitionStatisticsResponseValidationError{
					field:  fmt.Sprintf("PipelineDefinitionStatistics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineDefinitionStatisticsResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionStatisticsResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionStatisticsResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionStatisticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionStatisticsResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionStatisticsResponseValidationError is the validation error
// returned by PipelineDefinitionStatisticsResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionStatisticsResponseValidationError) ErrorName() string {
	return "PipelineDefinitionStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionStatisticsResponseValidationError{}

// Validate checks the field values on PipelineDefinitionStatistics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionStatistics with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineDefinitionStatisticsMultiError, or nil if none found.
func (m *PipelineDefinitionStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Group

	// no validation rules for FailedNum

	// no validation rules for RunningNum

	// no validation rules for TotalNum

	if len(errors) > 0 {
		return PipelineDefinitionStatisticsMultiError(errors)
	}

	return nil
}

// PipelineDefinitionStatisticsMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionStatistics.ValidateAll() if
// the designated constraints aren't met.
type PipelineDefinitionStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionStatisticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionStatisticsMultiError) AllErrors() []error { return m }

// PipelineDefinitionStatisticsValidationError is the validation error returned
// by PipelineDefinitionStatistics.Validate if the designated constraints
// aren't met.
type PipelineDefinitionStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionStatisticsValidationError) ErrorName() string {
	return "PipelineDefinitionStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionStatisticsValidationError{}

// Validate checks the field values on PipelineDefinitionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineDefinitionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionListResponseMultiError, or nil if none found.
func (m *PipelineDefinitionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineDefinitionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineDefinitionListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineDefinitionListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineDefinitionListResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionListResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineDefinitionListResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineDefinitionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionListResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionListResponseValidationError is the validation error
// returned by PipelineDefinitionListResponse.Validate if the designated
// constraints aren't met.
type PipelineDefinitionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionListResponseValidationError) ErrorName() string {
	return "PipelineDefinitionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionListResponseValidationError{}

// Validate checks the field values on PipelineDefinitionUsedRefListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionUsedRefListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionUsedRefListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionUsedRefListRequestMultiError, or nil if none found.
func (m *PipelineDefinitionUsedRefListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionUsedRefListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLocation()) < 1 {
		err := PipelineDefinitionUsedRefListRequestValidationError{
			field:  "Location",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PipelineDefinitionUsedRefListRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionUsedRefListRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineDefinitionUsedRefListRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionUsedRefListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionUsedRefListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionUsedRefListRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionUsedRefListRequestValidationError is the validation error
// returned by PipelineDefinitionUsedRefListRequest.Validate if the designated
// constraints aren't met.
type PipelineDefinitionUsedRefListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionUsedRefListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionUsedRefListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionUsedRefListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionUsedRefListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionUsedRefListRequestValidationError) ErrorName() string {
	return "PipelineDefinitionUsedRefListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionUsedRefListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionUsedRefListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionUsedRefListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionUsedRefListRequestValidationError{}

// Validate checks the field values on PipelineDefinitionUsedRefListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionUsedRefListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionUsedRefListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionUsedRefListResponseMultiError, or nil if none found.
func (m *PipelineDefinitionUsedRefListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionUsedRefListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PipelineDefinitionUsedRefListResponseMultiError(errors)
	}

	return nil
}

// PipelineDefinitionUsedRefListResponseMultiError is an error wrapping
// multiple validation errors returned by
// PipelineDefinitionUsedRefListResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionUsedRefListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionUsedRefListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionUsedRefListResponseMultiError) AllErrors() []error { return m }

// PipelineDefinitionUsedRefListResponseValidationError is the validation error
// returned by PipelineDefinitionUsedRefListResponse.Validate if the
// designated constraints aren't met.
type PipelineDefinitionUsedRefListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionUsedRefListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionUsedRefListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionUsedRefListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionUsedRefListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionUsedRefListResponseValidationError) ErrorName() string {
	return "PipelineDefinitionUsedRefListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionUsedRefListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionUsedRefListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionUsedRefListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionUsedRefListResponseValidationError{}

// Validate checks the field values on PipelineDefinitionListByRemoteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineDefinitionListByRemoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineDefinitionListByRemoteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineDefinitionListByRemoteRequestMultiError, or nil if none found.
func (m *PipelineDefinitionListByRemoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineDefinitionListByRemoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remote

	if len(errors) > 0 {
		return PipelineDefinitionListByRemoteRequestMultiError(errors)
	}

	return nil
}

// PipelineDefinitionListByRemoteRequestMultiError is an error wrapping
// multiple validation errors returned by
// PipelineDefinitionListByRemoteRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineDefinitionListByRemoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDefinitionListByRemoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDefinitionListByRemoteRequestMultiError) AllErrors() []error { return m }

// PipelineDefinitionListByRemoteRequestValidationError is the validation error
// returned by PipelineDefinitionListByRemoteRequest.Validate if the
// designated constraints aren't met.
type PipelineDefinitionListByRemoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDefinitionListByRemoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDefinitionListByRemoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDefinitionListByRemoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDefinitionListByRemoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDefinitionListByRemoteRequestValidationError) ErrorName() string {
	return "PipelineDefinitionListByRemoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineDefinitionListByRemoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineDefinitionListByRemoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDefinitionListByRemoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDefinitionListByRemoteRequestValidationError{}
