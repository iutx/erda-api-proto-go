// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: queue.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueueDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueDeleteRequestMultiError, or nil if none found.
func (m *QueueDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QueueID

	if len(errors) > 0 {
		return QueueDeleteRequestMultiError(errors)
	}

	return nil
}

// QueueDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by QueueDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type QueueDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueDeleteRequestMultiError) AllErrors() []error { return m }

// QueueDeleteRequestValidationError is the validation error returned by
// QueueDeleteRequest.Validate if the designated constraints aren't met.
type QueueDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueDeleteRequestValidationError) ErrorName() string {
	return "QueueDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueueDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueDeleteRequestValidationError{}

// Validate checks the field values on QueueDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueDeleteResponseMultiError, or nil if none found.
func (m *QueueDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueueDeleteResponseMultiError(errors)
	}

	return nil
}

// QueueDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by QueueDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type QueueDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueDeleteResponseMultiError) AllErrors() []error { return m }

// QueueDeleteResponseValidationError is the validation error returned by
// QueueDeleteResponse.Validate if the designated constraints aren't met.
type QueueDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueDeleteResponseValidationError) ErrorName() string {
	return "QueueDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueueDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueDeleteResponseValidationError{}

// Validate checks the field values on QueueUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueUpdateRequestMultiError, or nil if none found.
func (m *QueueUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QueueID

	// no validation rules for Name

	// no validation rules for PipelineSource

	// no validation rules for ClusterName

	// no validation rules for ScheduleStrategy

	// no validation rules for Mode

	// no validation rules for Priority

	// no validation rules for Concurrency

	// no validation rules for MaxCPU

	// no validation rules for MaxMemoryMB

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetIdentityInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueUpdateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueUpdateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueUpdateRequestValidationError{
				field:  "IdentityInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueUpdateRequestMultiError(errors)
	}

	return nil
}

// QueueUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by QueueUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type QueueUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueUpdateRequestMultiError) AllErrors() []error { return m }

// QueueUpdateRequestValidationError is the validation error returned by
// QueueUpdateRequest.Validate if the designated constraints aren't met.
type QueueUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueUpdateRequestValidationError) ErrorName() string {
	return "QueueUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueueUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueUpdateRequestValidationError{}

// Validate checks the field values on QueueUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueUpdateResponseMultiError, or nil if none found.
func (m *QueueUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueUpdateResponseMultiError(errors)
	}

	return nil
}

// QueueUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by QueueUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type QueueUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueUpdateResponseMultiError) AllErrors() []error { return m }

// QueueUpdateResponseValidationError is the validation error returned by
// QueueUpdateResponse.Validate if the designated constraints aren't met.
type QueueUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueUpdateResponseValidationError) ErrorName() string {
	return "QueueUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueueUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueUpdateResponseValidationError{}

// Validate checks the field values on QueuePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueuePagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueuePagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueuePagingRequestMultiError, or nil if none found.
func (m *QueuePagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueuePagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ClusterName

	// no validation rules for ScheduleStrategy

	// no validation rules for Priority

	// no validation rules for Concurrency

	// no validation rules for AllowNoPipelineSources

	// no validation rules for OrderByTargetIDAsc

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QueuePagingRequestMultiError(errors)
	}

	return nil
}

// QueuePagingRequestMultiError is an error wrapping multiple validation errors
// returned by QueuePagingRequest.ValidateAll() if the designated constraints
// aren't met.
type QueuePagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueuePagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueuePagingRequestMultiError) AllErrors() []error { return m }

// QueuePagingRequestValidationError is the validation error returned by
// QueuePagingRequest.Validate if the designated constraints aren't met.
type QueuePagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueuePagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueuePagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueuePagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueuePagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueuePagingRequestValidationError) ErrorName() string {
	return "QueuePagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueuePagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueuePagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueuePagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueuePagingRequestValidationError{}

// Validate checks the field values on QueuePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueuePagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueuePagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueuePagingResponseMultiError, or nil if none found.
func (m *QueuePagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueuePagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQueues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueuePagingResponseValidationError{
						field:  fmt.Sprintf("Queues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueuePagingResponseValidationError{
						field:  fmt.Sprintf("Queues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueuePagingResponseValidationError{
					field:  fmt.Sprintf("Queues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueuePagingResponseMultiError(errors)
	}

	return nil
}

// QueuePagingResponseMultiError is an error wrapping multiple validation
// errors returned by QueuePagingResponse.ValidateAll() if the designated
// constraints aren't met.
type QueuePagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueuePagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueuePagingResponseMultiError) AllErrors() []error { return m }

// QueuePagingResponseValidationError is the validation error returned by
// QueuePagingResponse.Validate if the designated constraints aren't met.
type QueuePagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueuePagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueuePagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueuePagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueuePagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueuePagingResponseValidationError) ErrorName() string {
	return "QueuePagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueuePagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueuePagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueuePagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueuePagingResponseValidationError{}

// Validate checks the field values on QueueGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueueGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueGetRequestMultiError, or nil if none found.
func (m *QueueGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QueueID

	if len(errors) > 0 {
		return QueueGetRequestMultiError(errors)
	}

	return nil
}

// QueueGetRequestMultiError is an error wrapping multiple validation errors
// returned by QueueGetRequest.ValidateAll() if the designated constraints
// aren't met.
type QueueGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueGetRequestMultiError) AllErrors() []error { return m }

// QueueGetRequestValidationError is the validation error returned by
// QueueGetRequest.Validate if the designated constraints aren't met.
type QueueGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueGetRequestValidationError) ErrorName() string { return "QueueGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueueGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueGetRequestValidationError{}

// Validate checks the field values on QueueGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueueGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueGetResponseMultiError, or nil if none found.
func (m *QueueGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueGetResponseMultiError(errors)
	}

	return nil
}

// QueueGetResponseMultiError is an error wrapping multiple validation errors
// returned by QueueGetResponse.ValidateAll() if the designated constraints
// aren't met.
type QueueGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueGetResponseMultiError) AllErrors() []error { return m }

// QueueGetResponseValidationError is the validation error returned by
// QueueGetResponse.Validate if the designated constraints aren't met.
type QueueGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueGetResponseValidationError) ErrorName() string { return "QueueGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e QueueGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueGetResponseValidationError{}

// Validate checks the field values on QueueCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueCreateRequestMultiError, or nil if none found.
func (m *QueueCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PipelineSource

	// no validation rules for ClusterName

	// no validation rules for ScheduleStrategy

	// no validation rules for Mode

	// no validation rules for Priority

	// no validation rules for Concurrency

	// no validation rules for MaxCPU

	// no validation rules for MaxMemoryMB

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetIdentityInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueCreateRequestValidationError{
				field:  "IdentityInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueCreateRequestMultiError(errors)
	}

	return nil
}

// QueueCreateRequestMultiError is an error wrapping multiple validation errors
// returned by QueueCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type QueueCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueCreateRequestMultiError) AllErrors() []error { return m }

// QueueCreateRequestValidationError is the validation error returned by
// QueueCreateRequest.Validate if the designated constraints aren't met.
type QueueCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueCreateRequestValidationError) ErrorName() string {
	return "QueueCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueueCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueCreateRequestValidationError{}

// Validate checks the field values on QueueCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueueCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueueCreateResponseMultiError, or nil if none found.
func (m *QueueCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueCreateResponseMultiError(errors)
	}

	return nil
}

// QueueCreateResponseMultiError is an error wrapping multiple validation
// errors returned by QueueCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type QueueCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueCreateResponseMultiError) AllErrors() []error { return m }

// QueueCreateResponseValidationError is the validation error returned by
// QueueCreateResponse.Validate if the designated constraints aren't met.
type QueueCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueCreateResponseValidationError) ErrorName() string {
	return "QueueCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueueCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueCreateResponseValidationError{}

// Validate checks the field values on Queue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Queue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Queue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QueueMultiError, or nil if none found.
func (m *Queue) ValidateAll() error {
	return m.validate(true)
}

func (m *Queue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for PipelineSource

	// no validation rules for ClusterName

	// no validation rules for ScheduleStrategy

	// no validation rules for Mode

	// no validation rules for Priority

	// no validation rules for Concurrency

	// no validation rules for MaxCPU

	// no validation rules for MaxMemoryMB

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueValidationError{
				field:  "Usage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueMultiError(errors)
	}

	return nil
}

// QueueMultiError is an error wrapping multiple validation errors returned by
// Queue.ValidateAll() if the designated constraints aren't met.
type QueueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueMultiError) AllErrors() []error { return m }

// QueueValidationError is the validation error returned by Queue.Validate if
// the designated constraints aren't met.
type QueueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueValidationError) ErrorName() string { return "QueueValidationError" }

// Error satisfies the builtin error interface
func (e QueueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueValidationError{}

// Validate checks the field values on QueueUsage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueueUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueueUsageMultiError, or
// nil if none found.
func (m *QueueUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InUseCPU

	// no validation rules for InUseMemoryMB

	// no validation rules for RemainingCPU

	// no validation rules for RemainingMemoryMB

	// no validation rules for ProcessingCount

	// no validation rules for PendingCount

	for idx, item := range m.GetProcessingDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueueUsageValidationError{
						field:  fmt.Sprintf("ProcessingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueueUsageValidationError{
						field:  fmt.Sprintf("ProcessingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueueUsageValidationError{
					field:  fmt.Sprintf("ProcessingDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPendingDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueueUsageValidationError{
						field:  fmt.Sprintf("PendingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueueUsageValidationError{
						field:  fmt.Sprintf("PendingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueueUsageValidationError{
					field:  fmt.Sprintf("PendingDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueueUsageMultiError(errors)
	}

	return nil
}

// QueueUsageMultiError is an error wrapping multiple validation errors
// returned by QueueUsage.ValidateAll() if the designated constraints aren't met.
type QueueUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueUsageMultiError) AllErrors() []error { return m }

// QueueUsageValidationError is the validation error returned by
// QueueUsage.Validate if the designated constraints aren't met.
type QueueUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueUsageValidationError) ErrorName() string { return "QueueUsageValidationError" }

// Error satisfies the builtin error interface
func (e QueueUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueUsageValidationError{}

// Validate checks the field values on QueueUsageItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueueUsageItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueUsageItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueueUsageItemMultiError,
// or nil if none found.
func (m *QueueUsageItem) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueUsageItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for RequestsCPU

	// no validation rules for RequestsMemoryMB

	// no validation rules for Index

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetAddedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueueUsageItemValidationError{
					field:  "AddedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueueUsageItemValidationError{
					field:  "AddedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueueUsageItemValidationError{
				field:  "AddedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueueUsageItemMultiError(errors)
	}

	return nil
}

// QueueUsageItemMultiError is an error wrapping multiple validation errors
// returned by QueueUsageItem.ValidateAll() if the designated constraints
// aren't met.
type QueueUsageItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueUsageItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueUsageItemMultiError) AllErrors() []error { return m }

// QueueUsageItemValidationError is the validation error returned by
// QueueUsageItem.Validate if the designated constraints aren't met.
type QueueUsageItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueUsageItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueUsageItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueUsageItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueUsageItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueUsageItemValidationError) ErrorName() string { return "QueueUsageItemValidationError" }

// Error satisfies the builtin error interface
func (e QueueUsageItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueUsageItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueUsageItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueUsageItemValidationError{}
