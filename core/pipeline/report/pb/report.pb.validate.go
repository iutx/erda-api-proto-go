// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: report.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineReportSetPagingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportSetPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportSetPagingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineReportSetPagingRequestMultiError, or nil if none found.
func (m *PipelineReportSetPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportSetPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTimeBeginTimestamp

	// no validation rules for EndTimeBeginTimestamp

	// no validation rules for StartTimeCreatedTimestamp

	// no validation rules for EndTimeCreatedTimestamp

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PipelineReportSetPagingRequestMultiError(errors)
	}

	return nil
}

// PipelineReportSetPagingRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineReportSetPagingRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineReportSetPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportSetPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportSetPagingRequestMultiError) AllErrors() []error { return m }

// PipelineReportSetPagingRequestValidationError is the validation error
// returned by PipelineReportSetPagingRequest.Validate if the designated
// constraints aren't met.
type PipelineReportSetPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportSetPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportSetPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportSetPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportSetPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportSetPagingRequestValidationError) ErrorName() string {
	return "PipelineReportSetPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportSetPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportSetPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportSetPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportSetPagingRequestValidationError{}

// Validate checks the field values on PipelineReportSetPagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportSetPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportSetPagingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineReportSetPagingResponseMultiError, or nil if none found.
func (m *PipelineReportSetPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportSetPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineReportSetPagingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineReportSetPagingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineReportSetPagingResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineReportSetPagingResponseMultiError(errors)
	}

	return nil
}

// PipelineReportSetPagingResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineReportSetPagingResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineReportSetPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportSetPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportSetPagingResponseMultiError) AllErrors() []error { return m }

// PipelineReportSetPagingResponseValidationError is the validation error
// returned by PipelineReportSetPagingResponse.Validate if the designated
// constraints aren't met.
type PipelineReportSetPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportSetPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportSetPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportSetPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportSetPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportSetPagingResponseValidationError) ErrorName() string {
	return "PipelineReportSetPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportSetPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportSetPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportSetPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportSetPagingResponseValidationError{}

// Validate checks the field values on PipelineReportSet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineReportSetMultiError, or nil if none found.
func (m *PipelineReportSet) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	for idx, item := range m.GetReports() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineReportSetValidationError{
						field:  fmt.Sprintf("Reports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineReportSetValidationError{
						field:  fmt.Sprintf("Reports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineReportSetValidationError{
					field:  fmt.Sprintf("Reports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineReportSetMultiError(errors)
	}

	return nil
}

// PipelineReportSetMultiError is an error wrapping multiple validation errors
// returned by PipelineReportSet.ValidateAll() if the designated constraints
// aren't met.
type PipelineReportSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportSetMultiError) AllErrors() []error { return m }

// PipelineReportSetValidationError is the validation error returned by
// PipelineReportSet.Validate if the designated constraints aren't met.
type PipelineReportSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportSetValidationError) ErrorName() string {
	return "PipelineReportSetValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportSetValidationError{}

// Validate checks the field values on PipelineReport with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineReportMultiError,
// or nil if none found.
func (m *PipelineReport) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for PipelineID

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineReportMultiError(errors)
	}

	return nil
}

// PipelineReportMultiError is an error wrapping multiple validation errors
// returned by PipelineReport.ValidateAll() if the designated constraints
// aren't met.
type PipelineReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportMultiError) AllErrors() []error { return m }

// PipelineReportValidationError is the validation error returned by
// PipelineReport.Validate if the designated constraints aren't met.
type PipelineReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportValidationError) ErrorName() string { return "PipelineReportValidationError" }

// Error satisfies the builtin error interface
func (e PipelineReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportValidationError{}

// Validate checks the field values on PipelineReportSetQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportSetQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportSetQueryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineReportSetQueryRequestMultiError, or nil if none found.
func (m *PipelineReportSetQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportSetQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return PipelineReportSetQueryRequestMultiError(errors)
	}

	return nil
}

// PipelineReportSetQueryRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineReportSetQueryRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineReportSetQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportSetQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportSetQueryRequestMultiError) AllErrors() []error { return m }

// PipelineReportSetQueryRequestValidationError is the validation error
// returned by PipelineReportSetQueryRequest.Validate if the designated
// constraints aren't met.
type PipelineReportSetQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportSetQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportSetQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportSetQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportSetQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportSetQueryRequestValidationError) ErrorName() string {
	return "PipelineReportSetQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportSetQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportSetQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportSetQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportSetQueryRequestValidationError{}

// Validate checks the field values on PipelineReportSetQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportSetQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportSetQueryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineReportSetQueryResponseMultiError, or nil if none found.
func (m *PipelineReportSetQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportSetQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportSetQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportSetQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportSetQueryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineReportSetQueryResponseMultiError(errors)
	}

	return nil
}

// PipelineReportSetQueryResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineReportSetQueryResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineReportSetQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportSetQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportSetQueryResponseMultiError) AllErrors() []error { return m }

// PipelineReportSetQueryResponseValidationError is the validation error
// returned by PipelineReportSetQueryResponse.Validate if the designated
// constraints aren't met.
type PipelineReportSetQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportSetQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportSetQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportSetQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportSetQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportSetQueryResponseValidationError) ErrorName() string {
	return "PipelineReportSetQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportSetQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportSetQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportSetQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportSetQueryResponseValidationError{}

// Validate checks the field values on PipelineReportCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineReportCreateRequestMultiError, or nil if none found.
func (m *PipelineReportCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportCreateRequestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportCreateRequestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportCreateRequestValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentityInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportCreateRequestValidationError{
				field:  "IdentityInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineReportCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineReportCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineReportCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineReportCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportCreateRequestMultiError) AllErrors() []error { return m }

// PipelineReportCreateRequestValidationError is the validation error returned
// by PipelineReportCreateRequest.Validate if the designated constraints
// aren't met.
type PipelineReportCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportCreateRequestValidationError) ErrorName() string {
	return "PipelineReportCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportCreateRequestValidationError{}

// Validate checks the field values on PipelineReportCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineReportCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineReportCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineReportCreateResponseMultiError, or nil if none found.
func (m *PipelineReportCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineReportCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReportCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReportCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReportCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineReportCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineReportCreateResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineReportCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineReportCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReportCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReportCreateResponseMultiError) AllErrors() []error { return m }

// PipelineReportCreateResponseValidationError is the validation error returned
// by PipelineReportCreateResponse.Validate if the designated constraints
// aren't met.
type PipelineReportCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReportCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReportCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReportCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReportCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReportCreateResponseValidationError) ErrorName() string {
	return "PipelineReportCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineReportCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineReportCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReportCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReportCreateResponseValidationError{}
