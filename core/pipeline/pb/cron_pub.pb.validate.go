// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cron_pub.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Cron with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cron) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cron with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CronMultiError, or nil if none found.
func (m *Cron) ValidateAll() error {
	return m.validate(true)
}

func (m *Cron) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApplicationID

	// no validation rules for Branch

	// no validation rules for CronExpr

	if all {
		switch v := interface{}(m.GetCronStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "CronStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "CronStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "CronStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineYmlName

	// no validation rules for BasePipelineID

	if all {
		switch v := interface{}(m.GetEnable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineYml

	// no validation rules for UserID

	// no validation rules for OrgID

	// no validation rules for PipelineDefinitionID

	// no validation rules for PipelineSource

	// no validation rules for Secrets

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsEdge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "IsEdge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronValidationError{
					field:  "IsEdge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsEdge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronValidationError{
				field:  "IsEdge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return CronMultiError(errors)
	}

	return nil
}

// CronMultiError is an error wrapping multiple validation errors returned by
// Cron.ValidateAll() if the designated constraints aren't met.
type CronMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronMultiError) AllErrors() []error { return m }

// CronValidationError is the validation error returned by Cron.Validate if the
// designated constraints aren't met.
type CronValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronValidationError) ErrorName() string { return "CronValidationError" }

// Error satisfies the builtin error interface
func (e CronValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCron.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronValidationError{}

// Validate checks the field values on CronExtra with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronExtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronExtra with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CronExtraMultiError, or nil
// if none found.
func (m *CronExtra) ValidateAll() error {
	return m.validate(true)
}

func (m *CronExtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineYml

	// no validation rules for ClusterName

	// no validation rules for Labels

	// no validation rules for NormalLabels

	// no validation rules for Envs

	// no validation rules for IncomingSecrets

	if all {
		switch v := interface{}(m.GetCronStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "CronStartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronExtraValidationError{
				field:  "CronStartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCompensator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "Compensator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "Compensator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompensator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronExtraValidationError{
				field:  "Compensator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastCompensateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "LastCompensateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronExtraValidationError{
					field:  "LastCompensateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCompensateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronExtraValidationError{
				field:  "LastCompensateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronExtraMultiError(errors)
	}

	return nil
}

// CronExtraMultiError is an error wrapping multiple validation errors returned
// by CronExtra.ValidateAll() if the designated constraints aren't met.
type CronExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronExtraMultiError) AllErrors() []error { return m }

// CronExtraValidationError is the validation error returned by
// CronExtra.Validate if the designated constraints aren't met.
type CronExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronExtraValidationError) ErrorName() string { return "CronExtraValidationError" }

// Error satisfies the builtin error interface
func (e CronExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronExtraValidationError{}

// Validate checks the field values on CronCompensator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CronCompensator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronCompensator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CronCompensatorMultiError, or nil if none found.
func (m *CronCompensator) ValidateAll() error {
	return m.validate(true)
}

func (m *CronCompensator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "Enable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCompensatorValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestFirst()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "LatestFirst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "LatestFirst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCompensatorValidationError{
				field:  "LatestFirst",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStopIfLatterExecuted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "StopIfLatterExecuted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronCompensatorValidationError{
					field:  "StopIfLatterExecuted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStopIfLatterExecuted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronCompensatorValidationError{
				field:  "StopIfLatterExecuted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronCompensatorMultiError(errors)
	}

	return nil
}

// CronCompensatorMultiError is an error wrapping multiple validation errors
// returned by CronCompensator.ValidateAll() if the designated constraints
// aren't met.
type CronCompensatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronCompensatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronCompensatorMultiError) AllErrors() []error { return m }

// CronCompensatorValidationError is the validation error returned by
// CronCompensator.Validate if the designated constraints aren't met.
type CronCompensatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronCompensatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronCompensatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronCompensatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronCompensatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronCompensatorValidationError) ErrorName() string { return "CronCompensatorValidationError" }

// Error satisfies the builtin error interface
func (e CronCompensatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronCompensator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronCompensatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronCompensatorValidationError{}
