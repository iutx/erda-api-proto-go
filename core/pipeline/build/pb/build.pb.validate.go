// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: build.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BuildCacheReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildCacheReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildCacheReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildCacheReportRequestMultiError, or nil if none found.
func (m *BuildCacheReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildCacheReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Name

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return BuildCacheReportRequestMultiError(errors)
	}

	return nil
}

// BuildCacheReportRequestMultiError is an error wrapping multiple validation
// errors returned by BuildCacheReportRequest.ValidateAll() if the designated
// constraints aren't met.
type BuildCacheReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildCacheReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildCacheReportRequestMultiError) AllErrors() []error { return m }

// BuildCacheReportRequestValidationError is the validation error returned by
// BuildCacheReportRequest.Validate if the designated constraints aren't met.
type BuildCacheReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildCacheReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildCacheReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildCacheReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildCacheReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildCacheReportRequestValidationError) ErrorName() string {
	return "BuildCacheReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuildCacheReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildCacheReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildCacheReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildCacheReportRequestValidationError{}

// Validate checks the field values on BuildCacheReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildCacheReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildCacheReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildCacheReportResponseMultiError, or nil if none found.
func (m *BuildCacheReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildCacheReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BuildCacheReportResponseMultiError(errors)
	}

	return nil
}

// BuildCacheReportResponseMultiError is an error wrapping multiple validation
// errors returned by BuildCacheReportResponse.ValidateAll() if the designated
// constraints aren't met.
type BuildCacheReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildCacheReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildCacheReportResponseMultiError) AllErrors() []error { return m }

// BuildCacheReportResponseValidationError is the validation error returned by
// BuildCacheReportResponse.Validate if the designated constraints aren't met.
type BuildCacheReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildCacheReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildCacheReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildCacheReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildCacheReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildCacheReportResponseValidationError) ErrorName() string {
	return "BuildCacheReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildCacheReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildCacheReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildCacheReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildCacheReportResponseValidationError{}

// Validate checks the field values on BuildArtifactRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildArtifactRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildArtifactRegisterRequestMultiError, or nil if none found.
func (m *BuildArtifactRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	// no validation rules for IdentityText

	// no validation rules for Type

	// no validation rules for Content

	// no validation rules for ClusterName

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return BuildArtifactRegisterRequestMultiError(errors)
	}

	return nil
}

// BuildArtifactRegisterRequestMultiError is an error wrapping multiple
// validation errors returned by BuildArtifactRegisterRequest.ValidateAll() if
// the designated constraints aren't met.
type BuildArtifactRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactRegisterRequestMultiError) AllErrors() []error { return m }

// BuildArtifactRegisterRequestValidationError is the validation error returned
// by BuildArtifactRegisterRequest.Validate if the designated constraints
// aren't met.
type BuildArtifactRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactRegisterRequestValidationError) ErrorName() string {
	return "BuildArtifactRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactRegisterRequestValidationError{}

// Validate checks the field values on BuildArtifactRegisterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildArtifactRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactRegisterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BuildArtifactRegisterResponseMultiError, or nil if none found.
func (m *BuildArtifactRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildArtifactRegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildArtifactRegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildArtifactRegisterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BuildArtifactRegisterResponseMultiError(errors)
	}

	return nil
}

// BuildArtifactRegisterResponseMultiError is an error wrapping multiple
// validation errors returned by BuildArtifactRegisterResponse.ValidateAll()
// if the designated constraints aren't met.
type BuildArtifactRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactRegisterResponseMultiError) AllErrors() []error { return m }

// BuildArtifactRegisterResponseValidationError is the validation error
// returned by BuildArtifactRegisterResponse.Validate if the designated
// constraints aren't met.
type BuildArtifactRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactRegisterResponseValidationError) ErrorName() string {
	return "BuildArtifactRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactRegisterResponseValidationError{}

// Validate checks the field values on BuildArtifactQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildArtifactQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildArtifactQueryRequestMultiError, or nil if none found.
func (m *BuildArtifactQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	if len(errors) > 0 {
		return BuildArtifactQueryRequestMultiError(errors)
	}

	return nil
}

// BuildArtifactQueryRequestMultiError is an error wrapping multiple validation
// errors returned by BuildArtifactQueryRequest.ValidateAll() if the
// designated constraints aren't met.
type BuildArtifactQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactQueryRequestMultiError) AllErrors() []error { return m }

// BuildArtifactQueryRequestValidationError is the validation error returned by
// BuildArtifactQueryRequest.Validate if the designated constraints aren't met.
type BuildArtifactQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactQueryRequestValidationError) ErrorName() string {
	return "BuildArtifactQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactQueryRequestValidationError{}

// Validate checks the field values on BuildArtifactQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildArtifactQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildArtifactQueryResponseMultiError, or nil if none found.
func (m *BuildArtifactQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildArtifactQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildArtifactQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildArtifactQueryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BuildArtifactQueryResponseMultiError(errors)
	}

	return nil
}

// BuildArtifactQueryResponseMultiError is an error wrapping multiple
// validation errors returned by BuildArtifactQueryResponse.ValidateAll() if
// the designated constraints aren't met.
type BuildArtifactQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactQueryResponseMultiError) AllErrors() []error { return m }

// BuildArtifactQueryResponseValidationError is the validation error returned
// by BuildArtifactQueryResponse.Validate if the designated constraints aren't met.
type BuildArtifactQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactQueryResponseValidationError) ErrorName() string {
	return "BuildArtifactQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactQueryResponseValidationError{}

// Validate checks the field values on BuildArtifact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BuildArtifact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BuildArtifactMultiError, or
// nil if none found.
func (m *BuildArtifact) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Sha256

	// no validation rules for IdentityText

	// no validation rules for Type

	// no validation rules for Content

	// no validation rules for ClusterName

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return BuildArtifactMultiError(errors)
	}

	return nil
}

// BuildArtifactMultiError is an error wrapping multiple validation errors
// returned by BuildArtifact.ValidateAll() if the designated constraints
// aren't met.
type BuildArtifactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactMultiError) AllErrors() []error { return m }

// BuildArtifactValidationError is the validation error returned by
// BuildArtifact.Validate if the designated constraints aren't met.
type BuildArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactValidationError) ErrorName() string { return "BuildArtifactValidationError" }

// Error satisfies the builtin error interface
func (e BuildArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactValidationError{}

// Validate checks the field values on BuildArtifactDeleteByImagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuildArtifactDeleteByImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactDeleteByImagesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuildArtifactDeleteByImagesRequestMultiError, or nil if none found.
func (m *BuildArtifactDeleteByImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactDeleteByImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BuildArtifactDeleteByImagesRequestMultiError(errors)
	}

	return nil
}

// BuildArtifactDeleteByImagesRequestMultiError is an error wrapping multiple
// validation errors returned by
// BuildArtifactDeleteByImagesRequest.ValidateAll() if the designated
// constraints aren't met.
type BuildArtifactDeleteByImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactDeleteByImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactDeleteByImagesRequestMultiError) AllErrors() []error { return m }

// BuildArtifactDeleteByImagesRequestValidationError is the validation error
// returned by BuildArtifactDeleteByImagesRequest.Validate if the designated
// constraints aren't met.
type BuildArtifactDeleteByImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactDeleteByImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactDeleteByImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactDeleteByImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactDeleteByImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactDeleteByImagesRequestValidationError) ErrorName() string {
	return "BuildArtifactDeleteByImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactDeleteByImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactDeleteByImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactDeleteByImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactDeleteByImagesRequestValidationError{}

// Validate checks the field values on BuildArtifactDeleteByImagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuildArtifactDeleteByImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildArtifactDeleteByImagesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuildArtifactDeleteByImagesResponseMultiError, or nil if none found.
func (m *BuildArtifactDeleteByImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildArtifactDeleteByImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BuildArtifactDeleteByImagesResponseMultiError(errors)
	}

	return nil
}

// BuildArtifactDeleteByImagesResponseMultiError is an error wrapping multiple
// validation errors returned by
// BuildArtifactDeleteByImagesResponse.ValidateAll() if the designated
// constraints aren't met.
type BuildArtifactDeleteByImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildArtifactDeleteByImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildArtifactDeleteByImagesResponseMultiError) AllErrors() []error { return m }

// BuildArtifactDeleteByImagesResponseValidationError is the validation error
// returned by BuildArtifactDeleteByImagesResponse.Validate if the designated
// constraints aren't met.
type BuildArtifactDeleteByImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildArtifactDeleteByImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildArtifactDeleteByImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildArtifactDeleteByImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildArtifactDeleteByImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildArtifactDeleteByImagesResponseValidationError) ErrorName() string {
	return "BuildArtifactDeleteByImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildArtifactDeleteByImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildArtifactDeleteByImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildArtifactDeleteByImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildArtifactDeleteByImagesResponseValidationError{}
