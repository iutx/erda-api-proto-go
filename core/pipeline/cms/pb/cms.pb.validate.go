// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cms.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineCmsNs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineCmsNs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCmsNs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineCmsNsMultiError, or
// nil if none found.
func (m *PipelineCmsNs) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCmsNs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineSource

	// no validation rules for Ns

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsNsValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsNsValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsNsValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsNsValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsNsValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsNsValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineCmsNsMultiError(errors)
	}

	return nil
}

// PipelineCmsNsMultiError is an error wrapping multiple validation errors
// returned by PipelineCmsNs.ValidateAll() if the designated constraints
// aren't met.
type PipelineCmsNsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCmsNsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCmsNsMultiError) AllErrors() []error { return m }

// PipelineCmsNsValidationError is the validation error returned by
// PipelineCmsNs.Validate if the designated constraints aren't met.
type PipelineCmsNsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCmsNsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCmsNsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCmsNsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCmsNsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCmsNsValidationError) ErrorName() string { return "PipelineCmsNsValidationError" }

// Error satisfies the builtin error interface
func (e PipelineCmsNsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCmsNs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCmsNsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCmsNsValidationError{}

// Validate checks the field values on PipelineCmsConfigValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCmsConfigValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCmsConfigValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCmsConfigValueMultiError, or nil if none found.
func (m *PipelineCmsConfigValue) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCmsConfigValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for EncryptInDB

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetOperations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "Operations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "Operations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValueValidationError{
				field:  "Operations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for From

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValueValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValueValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValueValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineCmsConfigValueMultiError(errors)
	}

	return nil
}

// PipelineCmsConfigValueMultiError is an error wrapping multiple validation
// errors returned by PipelineCmsConfigValue.ValidateAll() if the designated
// constraints aren't met.
type PipelineCmsConfigValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCmsConfigValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCmsConfigValueMultiError) AllErrors() []error { return m }

// PipelineCmsConfigValueValidationError is the validation error returned by
// PipelineCmsConfigValue.Validate if the designated constraints aren't met.
type PipelineCmsConfigValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCmsConfigValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCmsConfigValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCmsConfigValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCmsConfigValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCmsConfigValueValidationError) ErrorName() string {
	return "PipelineCmsConfigValueValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCmsConfigValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCmsConfigValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCmsConfigValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCmsConfigValueValidationError{}

// Validate checks the field values on PipelineCmsConfigOperations with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCmsConfigOperations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCmsConfigOperations with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCmsConfigOperationsMultiError, or nil if none found.
func (m *PipelineCmsConfigOperations) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCmsConfigOperations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanDownload

	// no validation rules for CanEdit

	// no validation rules for CanDelete

	if len(errors) > 0 {
		return PipelineCmsConfigOperationsMultiError(errors)
	}

	return nil
}

// PipelineCmsConfigOperationsMultiError is an error wrapping multiple
// validation errors returned by PipelineCmsConfigOperations.ValidateAll() if
// the designated constraints aren't met.
type PipelineCmsConfigOperationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCmsConfigOperationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCmsConfigOperationsMultiError) AllErrors() []error { return m }

// PipelineCmsConfigOperationsValidationError is the validation error returned
// by PipelineCmsConfigOperations.Validate if the designated constraints
// aren't met.
type PipelineCmsConfigOperationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCmsConfigOperationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCmsConfigOperationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCmsConfigOperationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCmsConfigOperationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCmsConfigOperationsValidationError) ErrorName() string {
	return "PipelineCmsConfigOperationsValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCmsConfigOperationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCmsConfigOperations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCmsConfigOperationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCmsConfigOperationsValidationError{}

// Validate checks the field values on PipelineCmsConfigKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineCmsConfigKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCmsConfigKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCmsConfigKeyMultiError, or nil if none found.
func (m *PipelineCmsConfigKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCmsConfigKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Decrypt

	// no validation rules for ShowEncryptedValue

	if len(errors) > 0 {
		return PipelineCmsConfigKeyMultiError(errors)
	}

	return nil
}

// PipelineCmsConfigKeyMultiError is an error wrapping multiple validation
// errors returned by PipelineCmsConfigKey.ValidateAll() if the designated
// constraints aren't met.
type PipelineCmsConfigKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCmsConfigKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCmsConfigKeyMultiError) AllErrors() []error { return m }

// PipelineCmsConfigKeyValidationError is the validation error returned by
// PipelineCmsConfigKey.Validate if the designated constraints aren't met.
type PipelineCmsConfigKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCmsConfigKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCmsConfigKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCmsConfigKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCmsConfigKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCmsConfigKeyValidationError) ErrorName() string {
	return "PipelineCmsConfigKeyValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCmsConfigKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCmsConfigKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCmsConfigKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCmsConfigKeyValidationError{}

// Validate checks the field values on PipelineCmsConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineCmsConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCmsConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCmsConfigMultiError, or nil if none found.
func (m *PipelineCmsConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCmsConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for EncryptInDB

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetOperations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "Operations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "Operations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValidationError{
				field:  "Operations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for From

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "Ns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineCmsConfigValidationError{
					field:  "Ns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineCmsConfigValidationError{
				field:  "Ns",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineCmsConfigMultiError(errors)
	}

	return nil
}

// PipelineCmsConfigMultiError is an error wrapping multiple validation errors
// returned by PipelineCmsConfig.ValidateAll() if the designated constraints
// aren't met.
type PipelineCmsConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCmsConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCmsConfigMultiError) AllErrors() []error { return m }

// PipelineCmsConfigValidationError is the validation error returned by
// PipelineCmsConfig.Validate if the designated constraints aren't met.
type PipelineCmsConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCmsConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCmsConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCmsConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCmsConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCmsConfigValidationError) ErrorName() string {
	return "PipelineCmsConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineCmsConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCmsConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCmsConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCmsConfigValidationError{}

// Validate checks the field values on CmsCreateNsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsCreateNsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsCreateNsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsCreateNsRequestMultiError, or nil if none found.
func (m *CmsCreateNsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsCreateNsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsCreateNsRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNs()) < 1 {
		err := CmsCreateNsRequestValidationError{
			field:  "Ns",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CmsCreateNsRequestMultiError(errors)
	}

	return nil
}

// CmsCreateNsRequestMultiError is an error wrapping multiple validation errors
// returned by CmsCreateNsRequest.ValidateAll() if the designated constraints
// aren't met.
type CmsCreateNsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsCreateNsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsCreateNsRequestMultiError) AllErrors() []error { return m }

// CmsCreateNsRequestValidationError is the validation error returned by
// CmsCreateNsRequest.Validate if the designated constraints aren't met.
type CmsCreateNsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsCreateNsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsCreateNsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsCreateNsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsCreateNsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsCreateNsRequestValidationError) ErrorName() string {
	return "CmsCreateNsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsCreateNsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsCreateNsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsCreateNsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsCreateNsRequestValidationError{}

// Validate checks the field values on CmsCreateNsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsCreateNsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsCreateNsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsCreateNsResponseMultiError, or nil if none found.
func (m *CmsCreateNsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsCreateNsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CmsCreateNsResponseMultiError(errors)
	}

	return nil
}

// CmsCreateNsResponseMultiError is an error wrapping multiple validation
// errors returned by CmsCreateNsResponse.ValidateAll() if the designated
// constraints aren't met.
type CmsCreateNsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsCreateNsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsCreateNsResponseMultiError) AllErrors() []error { return m }

// CmsCreateNsResponseValidationError is the validation error returned by
// CmsCreateNsResponse.Validate if the designated constraints aren't met.
type CmsCreateNsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsCreateNsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsCreateNsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsCreateNsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsCreateNsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsCreateNsResponseValidationError) ErrorName() string {
	return "CmsCreateNsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsCreateNsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsCreateNsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsCreateNsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsCreateNsResponseValidationError{}

// Validate checks the field values on CmsListNsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CmsListNsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsListNsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsListNsRequestMultiError, or nil if none found.
func (m *CmsListNsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsListNsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsListNsRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NsPrefix

	if len(errors) > 0 {
		return CmsListNsRequestMultiError(errors)
	}

	return nil
}

// CmsListNsRequestMultiError is an error wrapping multiple validation errors
// returned by CmsListNsRequest.ValidateAll() if the designated constraints
// aren't met.
type CmsListNsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsListNsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsListNsRequestMultiError) AllErrors() []error { return m }

// CmsListNsRequestValidationError is the validation error returned by
// CmsListNsRequest.Validate if the designated constraints aren't met.
type CmsListNsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsListNsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsListNsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsListNsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsListNsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsListNsRequestValidationError) ErrorName() string { return "CmsListNsRequestValidationError" }

// Error satisfies the builtin error interface
func (e CmsListNsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsListNsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsListNsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsListNsRequestValidationError{}

// Validate checks the field values on CmsListNsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CmsListNsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsListNsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsListNsResponseMultiError, or nil if none found.
func (m *CmsListNsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsListNsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CmsListNsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CmsListNsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CmsListNsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CmsListNsResponseMultiError(errors)
	}

	return nil
}

// CmsListNsResponseMultiError is an error wrapping multiple validation errors
// returned by CmsListNsResponse.ValidateAll() if the designated constraints
// aren't met.
type CmsListNsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsListNsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsListNsResponseMultiError) AllErrors() []error { return m }

// CmsListNsResponseValidationError is the validation error returned by
// CmsListNsResponse.Validate if the designated constraints aren't met.
type CmsListNsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsListNsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsListNsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsListNsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsListNsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsListNsResponseValidationError) ErrorName() string {
	return "CmsListNsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsListNsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsListNsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsListNsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsListNsResponseValidationError{}

// Validate checks the field values on CmsNsConfigsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsUpdateRequestMultiError, or nil if none found.
func (m *CmsNsConfigsUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ns

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsNsConfigsUpdateRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetKVs()))
		i := 0
		for key := range m.GetKVs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetKVs()[key]
			_ = val

			// no validation rules for KVs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CmsNsConfigsUpdateRequestValidationError{
							field:  fmt.Sprintf("KVs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CmsNsConfigsUpdateRequestValidationError{
							field:  fmt.Sprintf("KVs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CmsNsConfigsUpdateRequestValidationError{
						field:  fmt.Sprintf("KVs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CmsNsConfigsUpdateRequestMultiError(errors)
	}

	return nil
}

// CmsNsConfigsUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CmsNsConfigsUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type CmsNsConfigsUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsUpdateRequestMultiError) AllErrors() []error { return m }

// CmsNsConfigsUpdateRequestValidationError is the validation error returned by
// CmsNsConfigsUpdateRequest.Validate if the designated constraints aren't met.
type CmsNsConfigsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsUpdateRequestValidationError) ErrorName() string {
	return "CmsNsConfigsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsUpdateRequestValidationError{}

// Validate checks the field values on CmsNsConfigsUpdateV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsUpdateV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsUpdateV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsUpdateV1RequestMultiError, or nil if none found.
func (m *CmsNsConfigsUpdateV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsUpdateV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ns

	// no validation rules for KVs

	if len(errors) > 0 {
		return CmsNsConfigsUpdateV1RequestMultiError(errors)
	}

	return nil
}

// CmsNsConfigsUpdateV1RequestMultiError is an error wrapping multiple
// validation errors returned by CmsNsConfigsUpdateV1Request.ValidateAll() if
// the designated constraints aren't met.
type CmsNsConfigsUpdateV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsUpdateV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsUpdateV1RequestMultiError) AllErrors() []error { return m }

// CmsNsConfigsUpdateV1RequestValidationError is the validation error returned
// by CmsNsConfigsUpdateV1Request.Validate if the designated constraints
// aren't met.
type CmsNsConfigsUpdateV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsUpdateV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsUpdateV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsUpdateV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsUpdateV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsUpdateV1RequestValidationError) ErrorName() string {
	return "CmsNsConfigsUpdateV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsUpdateV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsUpdateV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsUpdateV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsUpdateV1RequestValidationError{}

// Validate checks the field values on CmsNsConfigsUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsUpdateResponseMultiError, or nil if none found.
func (m *CmsNsConfigsUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CmsNsConfigsUpdateResponseMultiError(errors)
	}

	return nil
}

// CmsNsConfigsUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by CmsNsConfigsUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type CmsNsConfigsUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsUpdateResponseMultiError) AllErrors() []error { return m }

// CmsNsConfigsUpdateResponseValidationError is the validation error returned
// by CmsNsConfigsUpdateResponse.Validate if the designated constraints aren't met.
type CmsNsConfigsUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsUpdateResponseValidationError) ErrorName() string {
	return "CmsNsConfigsUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsUpdateResponseValidationError{}

// Validate checks the field values on CmsNsConfigsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsDeleteRequestMultiError, or nil if none found.
func (m *CmsNsConfigsDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ns

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsNsConfigsDeleteRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeleteNs

	// no validation rules for DeleteForce

	if len(errors) > 0 {
		return CmsNsConfigsDeleteRequestMultiError(errors)
	}

	return nil
}

// CmsNsConfigsDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CmsNsConfigsDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type CmsNsConfigsDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsDeleteRequestMultiError) AllErrors() []error { return m }

// CmsNsConfigsDeleteRequestValidationError is the validation error returned by
// CmsNsConfigsDeleteRequest.Validate if the designated constraints aren't met.
type CmsNsConfigsDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsDeleteRequestValidationError) ErrorName() string {
	return "CmsNsConfigsDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsDeleteRequestValidationError{}

// Validate checks the field values on CmsNsConfigsDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsDeleteResponseMultiError, or nil if none found.
func (m *CmsNsConfigsDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CmsNsConfigsDeleteResponseMultiError(errors)
	}

	return nil
}

// CmsNsConfigsDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by CmsNsConfigsDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type CmsNsConfigsDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsDeleteResponseMultiError) AllErrors() []error { return m }

// CmsNsConfigsDeleteResponseValidationError is the validation error returned
// by CmsNsConfigsDeleteResponse.Validate if the designated constraints aren't met.
type CmsNsConfigsDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsDeleteResponseValidationError) ErrorName() string {
	return "CmsNsConfigsDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsDeleteResponseValidationError{}

// Validate checks the field values on CmsNsConfigsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsGetRequestMultiError, or nil if none found.
func (m *CmsNsConfigsGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ns

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsNsConfigsGetRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CmsNsConfigsGetRequestValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CmsNsConfigsGetRequestValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CmsNsConfigsGetRequestValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GlobalDecrypt

	if len(errors) > 0 {
		return CmsNsConfigsGetRequestMultiError(errors)
	}

	return nil
}

// CmsNsConfigsGetRequestMultiError is an error wrapping multiple validation
// errors returned by CmsNsConfigsGetRequest.ValidateAll() if the designated
// constraints aren't met.
type CmsNsConfigsGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsGetRequestMultiError) AllErrors() []error { return m }

// CmsNsConfigsGetRequestValidationError is the validation error returned by
// CmsNsConfigsGetRequest.Validate if the designated constraints aren't met.
type CmsNsConfigsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsGetRequestValidationError) ErrorName() string {
	return "CmsNsConfigsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsGetRequestValidationError{}

// Validate checks the field values on CmsNsConfigsBatchGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsBatchGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsBatchGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsBatchGetRequestMultiError, or nil if none found.
func (m *CmsNsConfigsBatchGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsBatchGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipelineSource()) < 1 {
		err := CmsNsConfigsBatchGetRequestValidationError{
			field:  "PipelineSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GlobalDecrypt

	if len(errors) > 0 {
		return CmsNsConfigsBatchGetRequestMultiError(errors)
	}

	return nil
}

// CmsNsConfigsBatchGetRequestMultiError is an error wrapping multiple
// validation errors returned by CmsNsConfigsBatchGetRequest.ValidateAll() if
// the designated constraints aren't met.
type CmsNsConfigsBatchGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsBatchGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsBatchGetRequestMultiError) AllErrors() []error { return m }

// CmsNsConfigsBatchGetRequestValidationError is the validation error returned
// by CmsNsConfigsBatchGetRequest.Validate if the designated constraints
// aren't met.
type CmsNsConfigsBatchGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsBatchGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsBatchGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsBatchGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsBatchGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsBatchGetRequestValidationError) ErrorName() string {
	return "CmsNsConfigsBatchGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsBatchGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsBatchGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsBatchGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsBatchGetRequestValidationError{}

// Validate checks the field values on CmsNsConfigsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsGetResponseMultiError, or nil if none found.
func (m *CmsNsConfigsGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CmsNsConfigsGetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CmsNsConfigsGetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CmsNsConfigsGetResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CmsNsConfigsGetResponseMultiError(errors)
	}

	return nil
}

// CmsNsConfigsGetResponseMultiError is an error wrapping multiple validation
// errors returned by CmsNsConfigsGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CmsNsConfigsGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsGetResponseMultiError) AllErrors() []error { return m }

// CmsNsConfigsGetResponseValidationError is the validation error returned by
// CmsNsConfigsGetResponse.Validate if the designated constraints aren't met.
type CmsNsConfigsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsGetResponseValidationError) ErrorName() string {
	return "CmsNsConfigsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsGetResponseValidationError{}

// Validate checks the field values on CmsNsConfigsBatchGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CmsNsConfigsBatchGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmsNsConfigsBatchGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CmsNsConfigsBatchGetResponseMultiError, or nil if none found.
func (m *CmsNsConfigsBatchGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CmsNsConfigsBatchGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CmsNsConfigsBatchGetResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CmsNsConfigsBatchGetResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CmsNsConfigsBatchGetResponseValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CmsNsConfigsBatchGetResponseMultiError(errors)
	}

	return nil
}

// CmsNsConfigsBatchGetResponseMultiError is an error wrapping multiple
// validation errors returned by CmsNsConfigsBatchGetResponse.ValidateAll() if
// the designated constraints aren't met.
type CmsNsConfigsBatchGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmsNsConfigsBatchGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmsNsConfigsBatchGetResponseMultiError) AllErrors() []error { return m }

// CmsNsConfigsBatchGetResponseValidationError is the validation error returned
// by CmsNsConfigsBatchGetResponse.Validate if the designated constraints
// aren't met.
type CmsNsConfigsBatchGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmsNsConfigsBatchGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmsNsConfigsBatchGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmsNsConfigsBatchGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmsNsConfigsBatchGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmsNsConfigsBatchGetResponseValidationError) ErrorName() string {
	return "CmsNsConfigsBatchGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CmsNsConfigsBatchGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmsNsConfigsBatchGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmsNsConfigsBatchGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmsNsConfigsBatchGetResponseValidationError{}
