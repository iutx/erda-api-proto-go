// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: task.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineTaskDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskDetailRequestMultiError, or nil if none found.
func (m *PipelineTaskDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for TaskID

	if len(errors) > 0 {
		return PipelineTaskDetailRequestMultiError(errors)
	}

	return nil
}

// PipelineTaskDetailRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineTaskDetailRequest.ValidateAll() if the
// designated constraints aren't met.
type PipelineTaskDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskDetailRequestMultiError) AllErrors() []error { return m }

// PipelineTaskDetailRequestValidationError is the validation error returned by
// PipelineTaskDetailRequest.Validate if the designated constraints aren't met.
type PipelineTaskDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskDetailRequestValidationError) ErrorName() string {
	return "PipelineTaskDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskDetailRequestValidationError{}

// Validate checks the field values on PipelineTaskDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTaskDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTaskDetailResponseMultiError, or nil if none found.
func (m *PipelineTaskDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTaskDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTaskDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTaskDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTaskDetailResponseMultiError(errors)
	}

	return nil
}

// PipelineTaskDetailResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineTaskDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type PipelineTaskDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskDetailResponseMultiError) AllErrors() []error { return m }

// PipelineTaskDetailResponseValidationError is the validation error returned
// by PipelineTaskDetailResponse.Validate if the designated constraints aren't met.
type PipelineTaskDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskDetailResponseValidationError) ErrorName() string {
	return "PipelineTaskDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskDetailResponseValidationError{}

// Validate checks the field values on PipelineTaskGetBootstrapInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTaskGetBootstrapInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskGetBootstrapInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTaskGetBootstrapInfoRequestMultiError, or nil if none found.
func (m *PipelineTaskGetBootstrapInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskGetBootstrapInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	// no validation rules for TaskID

	if len(errors) > 0 {
		return PipelineTaskGetBootstrapInfoRequestMultiError(errors)
	}

	return nil
}

// PipelineTaskGetBootstrapInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTaskGetBootstrapInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineTaskGetBootstrapInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskGetBootstrapInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskGetBootstrapInfoRequestMultiError) AllErrors() []error { return m }

// PipelineTaskGetBootstrapInfoRequestValidationError is the validation error
// returned by PipelineTaskGetBootstrapInfoRequest.Validate if the designated
// constraints aren't met.
type PipelineTaskGetBootstrapInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskGetBootstrapInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskGetBootstrapInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskGetBootstrapInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskGetBootstrapInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskGetBootstrapInfoRequestValidationError) ErrorName() string {
	return "PipelineTaskGetBootstrapInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskGetBootstrapInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskGetBootstrapInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskGetBootstrapInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskGetBootstrapInfoRequestValidationError{}

// Validate checks the field values on PipelineTaskGetBootstrapInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineTaskGetBootstrapInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTaskGetBootstrapInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTaskGetBootstrapInfoResponseMultiError, or nil if none found.
func (m *PipelineTaskGetBootstrapInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskGetBootstrapInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTaskGetBootstrapInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTaskGetBootstrapInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTaskGetBootstrapInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTaskGetBootstrapInfoResponseMultiError(errors)
	}

	return nil
}

// PipelineTaskGetBootstrapInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTaskGetBootstrapInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineTaskGetBootstrapInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskGetBootstrapInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskGetBootstrapInfoResponseMultiError) AllErrors() []error { return m }

// PipelineTaskGetBootstrapInfoResponseValidationError is the validation error
// returned by PipelineTaskGetBootstrapInfoResponse.Validate if the designated
// constraints aren't met.
type PipelineTaskGetBootstrapInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskGetBootstrapInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskGetBootstrapInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskGetBootstrapInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskGetBootstrapInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskGetBootstrapInfoResponseValidationError) ErrorName() string {
	return "PipelineTaskGetBootstrapInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskGetBootstrapInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskGetBootstrapInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskGetBootstrapInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskGetBootstrapInfoResponseValidationError{}

// Validate checks the field values on PipelineTaskGetBootstrapInfoResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineTaskGetBootstrapInfoResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PipelineTaskGetBootstrapInfoResponseData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PipelineTaskGetBootstrapInfoResponseDataMultiError, or nil if none found.
func (m *PipelineTaskGetBootstrapInfoResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTaskGetBootstrapInfoResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PipelineTaskGetBootstrapInfoResponseDataMultiError(errors)
	}

	return nil
}

// PipelineTaskGetBootstrapInfoResponseDataMultiError is an error wrapping
// multiple validation errors returned by
// PipelineTaskGetBootstrapInfoResponseData.ValidateAll() if the designated
// constraints aren't met.
type PipelineTaskGetBootstrapInfoResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTaskGetBootstrapInfoResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTaskGetBootstrapInfoResponseDataMultiError) AllErrors() []error { return m }

// PipelineTaskGetBootstrapInfoResponseDataValidationError is the validation
// error returned by PipelineTaskGetBootstrapInfoResponseData.Validate if the
// designated constraints aren't met.
type PipelineTaskGetBootstrapInfoResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) ErrorName() string {
	return "PipelineTaskGetBootstrapInfoResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTaskGetBootstrapInfoResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTaskGetBootstrapInfoResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTaskGetBootstrapInfoResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTaskGetBootstrapInfoResponseDataValidationError{}
