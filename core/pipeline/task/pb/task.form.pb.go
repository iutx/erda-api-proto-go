// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: task.proto

package pb

import (
	base64 "encoding/base64"
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/base/pb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskDetailRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskDetailResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskGetBootstrapInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskGetBootstrapInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineTaskGetBootstrapInfoResponseData)(nil)

// PipelineTaskDetailRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskDetailRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "taskID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TaskID = val
			}
		}
	}
	return nil
}

// PipelineTaskDetailResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskDetailResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.pipelineID":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PipelineID = val
			case "data.stageID":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.StageID = val
			case "data.name":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				m.Data.Name = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				m.Data.Type = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				m.Data.Status = vals[0]
			case "data.extra":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
			case "data.extra.UUID":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				m.Data.Extra.UUID = vals[0]
			case "data.extra.allowFailure":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Extra.AllowFailure = val
			case "data.extra.action":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
			case "data.extra.action.logoUrl":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.LogoUrl = vals[0]
			case "data.extra.action.displayName":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.DisplayName = vals[0]
			case "data.extra.action.description":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.Description = vals[0]
			case "data.extra.action.name":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.Name = vals[0]
			case "data.extra.action.version":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.Version = vals[0]
			case "data.extra.action.type":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Action == nil {
					m.Data.Extra.Action = &pb.PipelineTaskActionDetail{}
				}
				m.Data.Extra.Action.Type = vals[0]
			case "data.extra.breakpoint":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
			case "data.extra.breakpoint.on":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if m.Data.Extra.Breakpoint.On == nil {
					m.Data.Extra.Breakpoint.On = &pb.BreakpointOn{}
				}
			case "data.extra.breakpoint.on.failure":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if m.Data.Extra.Breakpoint.On == nil {
					m.Data.Extra.Breakpoint.On = &pb.BreakpointOn{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Extra.Breakpoint.On.Failure = val
			case "data.extra.breakpoint.timeout":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.null_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.number_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.string_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.bool_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.struct_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.extra.breakpoint.timeout.list_value":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Extra == nil {
					m.Data.Extra = &pb.PipelineTaskExtra{}
				}
				if m.Data.Extra.Breakpoint == nil {
					m.Data.Extra.Breakpoint = &pb.Breakpoint{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Extra.Breakpoint.Timeout = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Extra.Breakpoint.Timeout = val
					} else {
						m.Data.Extra.Breakpoint.Timeout = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
			case "data.result.machineStat":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
			case "data.result.machineStat.host":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
			case "data.result.machineStat.host.hostIP":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.HostIP = vals[0]
			case "data.result.machineStat.host.hostname":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.Hostname = vals[0]
			case "data.result.machineStat.host.uptimeSec":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Host.UptimeSec = val
			case "data.result.machineStat.host.bootTimeSec":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Host.BootTimeSec = val
			case "data.result.machineStat.host.os":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.Os = vals[0]
			case "data.result.machineStat.host.platform":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.Platform = vals[0]
			case "data.result.machineStat.host.platformVersion":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.PlatformVersion = vals[0]
			case "data.result.machineStat.host.kernelVersion":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.KernelVersion = vals[0]
			case "data.result.machineStat.host.kernelArch":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Host == nil {
					m.Data.Result.MachineStat.Host = &pb.PipelineTaskMachineHostStat{}
				}
				m.Data.Result.MachineStat.Host.KernelArch = vals[0]
			case "data.result.machineStat.pod":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Pod == nil {
					m.Data.Result.MachineStat.Pod = &pb.PipelineTaskMachinePodStat{}
				}
			case "data.result.machineStat.pod.podIP":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Pod == nil {
					m.Data.Result.MachineStat.Pod = &pb.PipelineTaskMachinePodStat{}
				}
				m.Data.Result.MachineStat.Pod.PodIP = vals[0]
			case "data.result.machineStat.load":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Load == nil {
					m.Data.Result.MachineStat.Load = &pb.PipelineTaskMachineLoadStat{}
				}
			case "data.result.machineStat.load.load1":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Load == nil {
					m.Data.Result.MachineStat.Load = &pb.PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Load.Load1 = val
			case "data.result.machineStat.load.load5":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Load == nil {
					m.Data.Result.MachineStat.Load = &pb.PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Load.Load5 = val
			case "data.result.machineStat.load.load15":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Load == nil {
					m.Data.Result.MachineStat.Load = &pb.PipelineTaskMachineLoadStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Load.Load15 = val
			case "data.result.machineStat.mem":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
			case "data.result.machineStat.mem.total":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Total = val
			case "data.result.machineStat.mem.available":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Available = val
			case "data.result.machineStat.mem.used":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Used = val
			case "data.result.machineStat.mem.free":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Free = val
			case "data.result.machineStat.mem.usedPercent":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.UsedPercent = val
			case "data.result.machineStat.mem.buffers":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Buffers = val
			case "data.result.machineStat.mem.cached":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Mem == nil {
					m.Data.Result.MachineStat.Mem = &pb.PipelineTaskMachineMemStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Mem.Cached = val
			case "data.result.machineStat.swap":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Swap == nil {
					m.Data.Result.MachineStat.Swap = &pb.PipelineTaskMachineSwapStat{}
				}
			case "data.result.machineStat.swap.total":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Swap == nil {
					m.Data.Result.MachineStat.Swap = &pb.PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Swap.Total = val
			case "data.result.machineStat.swap.used":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Swap == nil {
					m.Data.Result.MachineStat.Swap = &pb.PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Swap.Used = val
			case "data.result.machineStat.swap.free":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Swap == nil {
					m.Data.Result.MachineStat.Swap = &pb.PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Swap.Free = val
			case "data.result.machineStat.swap.usedPercent":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				if m.Data.Result.MachineStat == nil {
					m.Data.Result.MachineStat = &pb.PipelineTaskMachineStat{}
				}
				if m.Data.Result.MachineStat.Swap == nil {
					m.Data.Result.MachineStat.Swap = &pb.PipelineTaskMachineSwapStat{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.Result.MachineStat.Swap.UsedPercent = val
			case "data.result.inspect":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				m.Data.Result.Inspect = vals[0]
			case "data.result.events":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.Result == nil {
					m.Data.Result = &pb.PipelineTaskResult{}
				}
				m.Data.Result.Events = vals[0]
			case "data.isSnippet":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsSnippet = val
			case "data.snippetPipelineID":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.SnippetPipelineID = &val
			case "data.snippetPipelineDetail":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.SnippetPipelineDetail == nil {
					m.Data.SnippetPipelineDetail = &pb.PipelineTaskSnippetDetail{}
				}
			case "data.snippetPipelineDetail.directSnippetTasksNum":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.SnippetPipelineDetail == nil {
					m.Data.SnippetPipelineDetail = &pb.PipelineTaskSnippetDetail{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.SnippetPipelineDetail.DirectSnippetTasksNum = val
			case "data.snippetPipelineDetail.recursiveSnippetTasksNum":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.SnippetPipelineDetail == nil {
					m.Data.SnippetPipelineDetail = &pb.PipelineTaskSnippetDetail{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.SnippetPipelineDetail.RecursiveSnippetTasksNum = val
			case "data.costTimeSec":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CostTimeSec = val
			case "data.queueTimeSec":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.QueueTimeSec = val
			case "data.timeBegin":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeBegin == nil {
					m.Data.TimeBegin = &timestamppb.Timestamp{}
				}
			case "data.timeBegin.seconds":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeBegin == nil {
					m.Data.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeBegin.Seconds = val
			case "data.timeBegin.nanos":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeBegin == nil {
					m.Data.TimeBegin = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeBegin.Nanos = int32(val)
			case "data.timeEnd":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeEnd == nil {
					m.Data.TimeEnd = &timestamppb.Timestamp{}
				}
			case "data.timeEnd.seconds":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeEnd == nil {
					m.Data.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeEnd.Seconds = val
			case "data.timeEnd.nanos":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeEnd == nil {
					m.Data.TimeEnd = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeEnd.Nanos = int32(val)
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.opType":
				if m.Data == nil {
					m.Data = &pb.PipelineTaskDTO{}
				}
				m.Data.OpType = vals[0]
			}
		}
	}
	return nil
}

// PipelineTaskGetBootstrapInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskGetBootstrapInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "taskID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TaskID = val
			}
		}
	}
	return nil
}

// PipelineTaskGetBootstrapInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskGetBootstrapInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &PipelineTaskGetBootstrapInfoResponseData{}
				}
			case "data.data":
				if m.Data == nil {
					m.Data = &PipelineTaskGetBootstrapInfoResponseData{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Data.Data = val
			}
		}
	}
	return nil
}

// PipelineTaskGetBootstrapInfoResponseData implement urlenc.URLValuesUnmarshaler.
func (m *PipelineTaskGetBootstrapInfoResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}
