// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: runner_task.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/action_runner_scheduler/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// RunnerTaskService runner_task.proto
	RunnerTaskService() pb.RunnerTaskServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		runnerTaskService: pb.NewRunnerTaskServiceClient(cc),
	}
}

type serviceClients struct {
	runnerTaskService pb.RunnerTaskServiceClient
}

func (c *serviceClients) RunnerTaskService() pb.RunnerTaskServiceClient {
	return c.runnerTaskService
}

type runnerTaskServiceWrapper struct {
	client pb.RunnerTaskServiceClient
	opts   []grpc1.CallOption
}

func (s *runnerTaskServiceWrapper) CreateRunnerTask(ctx context.Context, req *pb.RunnerTaskCreateRequest) (*pb.RunnerTaskCreateResponse, error) {
	return s.client.CreateRunnerTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *runnerTaskServiceWrapper) UpdateRunnerTask(ctx context.Context, req *pb.RunnerTaskUpdateRequest) (*pb.RunnerTaskUpdateResponse, error) {
	return s.client.UpdateRunnerTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *runnerTaskServiceWrapper) GetRunnerTask(ctx context.Context, req *pb.RunnerTaskQueryRequest) (*pb.RunnerTaskQueryResponse, error) {
	return s.client.GetRunnerTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *runnerTaskServiceWrapper) FetchRunnerTask(ctx context.Context, req *pb.RunnerTaskFetchRequest) (*pb.RunnerTaskFetchResponse, error) {
	return s.client.FetchRunnerTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *runnerTaskServiceWrapper) CollectLogs(ctx context.Context, req *pb.LogCollectRequest) (*pb.LogCollectResponse, error) {
	return s.client.CollectLogs(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
