// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: runner_task.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// RunnerTaskServiceHandler is the server API for RunnerTaskService service.
type RunnerTaskServiceHandler interface {
	// POST /api/runner/tasks
	CreateRunnerTask(context.Context, *RunnerTaskCreateRequest) (*RunnerTaskCreateResponse, error)
	// PUT /api/runner/tasks/{id}
	UpdateRunnerTask(context.Context, *RunnerTaskUpdateRequest) (*RunnerTaskUpdateResponse, error)
	// GET /api/runner/tasks/{id}
	GetRunnerTask(context.Context, *RunnerTaskQueryRequest) (*RunnerTaskQueryResponse, error)
	// GET /api/runner/fetch-task
	FetchRunnerTask(context.Context, *RunnerTaskFetchRequest) (*RunnerTaskFetchResponse, error)
	// POST /api/runner/collect/logs/{source}
	CollectLogs(context.Context, *LogCollectRequest) (*LogCollectResponse, error)
}

// RegisterRunnerTaskServiceHandler register RunnerTaskServiceHandler to http.Router.
func RegisterRunnerTaskServiceHandler(r http.Router, srv RunnerTaskServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CreateRunnerTask := func(method, path string, fn func(context.Context, *RunnerTaskCreateRequest) (*RunnerTaskCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RunnerTaskCreateRequest))
		}
		var CreateRunnerTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "CreateRunnerTask", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateRunnerTask_info)
				}
				r = r.WithContext(ctx)
				var in RunnerTaskCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateRunnerTask := func(method, path string, fn func(context.Context, *RunnerTaskUpdateRequest) (*RunnerTaskUpdateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RunnerTaskUpdateRequest))
		}
		var UpdateRunnerTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "UpdateRunnerTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateRunnerTask_info)
				}
				r = r.WithContext(ctx)
				var in RunnerTaskUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetRunnerTask := func(method, path string, fn func(context.Context, *RunnerTaskQueryRequest) (*RunnerTaskQueryResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RunnerTaskQueryRequest))
		}
		var GetRunnerTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "GetRunnerTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetRunnerTask_info)
				}
				r = r.WithContext(ctx)
				var in RunnerTaskQueryRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_FetchRunnerTask := func(method, path string, fn func(context.Context, *RunnerTaskFetchRequest) (*RunnerTaskFetchResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RunnerTaskFetchRequest))
		}
		var FetchRunnerTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			FetchRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "FetchRunnerTask", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, FetchRunnerTask_info)
				}
				r = r.WithContext(ctx)
				var in RunnerTaskFetchRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CollectLogs := func(method, path string, fn func(context.Context, *LogCollectRequest) (*LogCollectResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*LogCollectRequest))
		}
		var CollectLogs_info transport.ServiceInfo
		if h.Interceptor != nil {
			CollectLogs_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "CollectLogs", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CollectLogs_info)
				}
				r = r.WithContext(ctx)
				var in LogCollectRequest
				if err := h.Decode(r, &in.Content); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "source":
							in.Source = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateRunnerTask("POST", "/api/runner/tasks", srv.CreateRunnerTask)
	add_UpdateRunnerTask("PUT", "/api/runner/tasks/{id}", srv.UpdateRunnerTask)
	add_GetRunnerTask("GET", "/api/runner/tasks/{id}", srv.GetRunnerTask)
	add_FetchRunnerTask("GET", "/api/runner/fetch-task", srv.FetchRunnerTask)
	add_CollectLogs("POST", "/api/runner/collect/logs/{source}", srv.CollectLogs)
}
