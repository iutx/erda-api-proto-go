// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: runner_task.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RunnerTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunnerTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunnerTaskMultiError, or
// nil if none found.
func (m *RunnerTask) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for JobID

	// no validation rules for Status

	// no validation rules for ContextDataUrl

	// no validation rules for OpenApiToken

	// no validation rules for ResultDataUrl

	// no validation rules for Workdir

	if len(errors) > 0 {
		return RunnerTaskMultiError(errors)
	}

	return nil
}

// RunnerTaskMultiError is an error wrapping multiple validation errors
// returned by RunnerTask.ValidateAll() if the designated constraints aren't met.
type RunnerTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskMultiError) AllErrors() []error { return m }

// RunnerTaskValidationError is the validation error returned by
// RunnerTask.Validate if the designated constraints aren't met.
type RunnerTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskValidationError) ErrorName() string { return "RunnerTaskValidationError" }

// Error satisfies the builtin error interface
func (e RunnerTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskValidationError{}

// Validate checks the field values on RunnerTaskQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskQueryRequestMultiError, or nil if none found.
func (m *RunnerTaskQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RunnerTaskQueryRequestMultiError(errors)
	}

	return nil
}

// RunnerTaskQueryRequestMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskQueryRequest.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskQueryRequestMultiError) AllErrors() []error { return m }

// RunnerTaskQueryRequestValidationError is the validation error returned by
// RunnerTaskQueryRequest.Validate if the designated constraints aren't met.
type RunnerTaskQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskQueryRequestValidationError) ErrorName() string {
	return "RunnerTaskQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskQueryRequestValidationError{}

// Validate checks the field values on RunnerTaskQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskQueryResponseMultiError, or nil if none found.
func (m *RunnerTaskQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnerTaskQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnerTaskQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnerTaskQueryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunnerTaskQueryResponseMultiError(errors)
	}

	return nil
}

// RunnerTaskQueryResponseMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskQueryResponse.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskQueryResponseMultiError) AllErrors() []error { return m }

// RunnerTaskQueryResponseValidationError is the validation error returned by
// RunnerTaskQueryResponse.Validate if the designated constraints aren't met.
type RunnerTaskQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskQueryResponseValidationError) ErrorName() string {
	return "RunnerTaskQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskQueryResponseValidationError{}

// Validate checks the field values on RunnerTaskFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskFetchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskFetchRequestMultiError, or nil if none found.
func (m *RunnerTaskFetchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskFetchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RunnerTaskFetchRequestMultiError(errors)
	}

	return nil
}

// RunnerTaskFetchRequestMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskFetchRequest.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskFetchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskFetchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskFetchRequestMultiError) AllErrors() []error { return m }

// RunnerTaskFetchRequestValidationError is the validation error returned by
// RunnerTaskFetchRequest.Validate if the designated constraints aren't met.
type RunnerTaskFetchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskFetchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskFetchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskFetchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskFetchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskFetchRequestValidationError) ErrorName() string {
	return "RunnerTaskFetchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskFetchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskFetchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskFetchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskFetchRequestValidationError{}

// Validate checks the field values on RunnerTaskFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskFetchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskFetchResponseMultiError, or nil if none found.
func (m *RunnerTaskFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnerTaskFetchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnerTaskFetchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnerTaskFetchResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RunnerTaskFetchResponseMultiError(errors)
	}

	return nil
}

// RunnerTaskFetchResponseMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskFetchResponse.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskFetchResponseMultiError) AllErrors() []error { return m }

// RunnerTaskFetchResponseValidationError is the validation error returned by
// RunnerTaskFetchResponse.Validate if the designated constraints aren't met.
type RunnerTaskFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskFetchResponseValidationError) ErrorName() string {
	return "RunnerTaskFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskFetchResponseValidationError{}

// Validate checks the field values on RunnerTaskCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskCreateRequestMultiError, or nil if none found.
func (m *RunnerTaskCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobID

	// no validation rules for ContextDataUrl

	// no validation rules for Workdir

	if len(errors) > 0 {
		return RunnerTaskCreateRequestMultiError(errors)
	}

	return nil
}

// RunnerTaskCreateRequestMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskCreateRequestMultiError) AllErrors() []error { return m }

// RunnerTaskCreateRequestValidationError is the validation error returned by
// RunnerTaskCreateRequest.Validate if the designated constraints aren't met.
type RunnerTaskCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskCreateRequestValidationError) ErrorName() string {
	return "RunnerTaskCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskCreateRequestValidationError{}

// Validate checks the field values on RunnerTaskCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskCreateResponseMultiError, or nil if none found.
func (m *RunnerTaskCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RunnerTaskCreateResponseMultiError(errors)
	}

	return nil
}

// RunnerTaskCreateResponseMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskCreateResponseMultiError) AllErrors() []error { return m }

// RunnerTaskCreateResponseValidationError is the validation error returned by
// RunnerTaskCreateResponse.Validate if the designated constraints aren't met.
type RunnerTaskCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskCreateResponseValidationError) ErrorName() string {
	return "RunnerTaskCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskCreateResponseValidationError{}

// Validate checks the field values on RunnerTaskUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskUpdateRequestMultiError, or nil if none found.
func (m *RunnerTaskUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaskID

	// no validation rules for Status

	// no validation rules for ContextDataUrl

	// no validation rules for ResultDataUrl

	if len(errors) > 0 {
		return RunnerTaskUpdateRequestMultiError(errors)
	}

	return nil
}

// RunnerTaskUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskUpdateRequestMultiError) AllErrors() []error { return m }

// RunnerTaskUpdateRequestValidationError is the validation error returned by
// RunnerTaskUpdateRequest.Validate if the designated constraints aren't met.
type RunnerTaskUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskUpdateRequestValidationError) ErrorName() string {
	return "RunnerTaskUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskUpdateRequestValidationError{}

// Validate checks the field values on RunnerTaskUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnerTaskUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnerTaskUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnerTaskUpdateResponseMultiError, or nil if none found.
func (m *RunnerTaskUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnerTaskUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RunnerTaskUpdateResponseMultiError(errors)
	}

	return nil
}

// RunnerTaskUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by RunnerTaskUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type RunnerTaskUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnerTaskUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnerTaskUpdateResponseMultiError) AllErrors() []error { return m }

// RunnerTaskUpdateResponseValidationError is the validation error returned by
// RunnerTaskUpdateResponse.Validate if the designated constraints aren't met.
type RunnerTaskUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerTaskUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerTaskUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerTaskUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerTaskUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerTaskUpdateResponseValidationError) ErrorName() string {
	return "RunnerTaskUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunnerTaskUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnerTaskUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerTaskUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerTaskUpdateResponseValidationError{}

// Validate checks the field values on LogCollectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogCollectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogCollectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogCollectRequestMultiError, or nil if none found.
func (m *LogCollectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogCollectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Content

	if len(errors) > 0 {
		return LogCollectRequestMultiError(errors)
	}

	return nil
}

// LogCollectRequestMultiError is an error wrapping multiple validation errors
// returned by LogCollectRequest.ValidateAll() if the designated constraints
// aren't met.
type LogCollectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogCollectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogCollectRequestMultiError) AllErrors() []error { return m }

// LogCollectRequestValidationError is the validation error returned by
// LogCollectRequest.Validate if the designated constraints aren't met.
type LogCollectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogCollectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogCollectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogCollectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogCollectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogCollectRequestValidationError) ErrorName() string {
	return "LogCollectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LogCollectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogCollectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogCollectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogCollectRequestValidationError{}

// Validate checks the field values on LogCollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogCollectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogCollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogCollectResponseMultiError, or nil if none found.
func (m *LogCollectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogCollectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogCollectResponseMultiError(errors)
	}

	return nil
}

// LogCollectResponseMultiError is an error wrapping multiple validation errors
// returned by LogCollectResponse.ValidateAll() if the designated constraints
// aren't met.
type LogCollectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogCollectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogCollectResponseMultiError) AllErrors() []error { return m }

// LogCollectResponseValidationError is the validation error returned by
// LogCollectResponse.Validate if the designated constraints aren't met.
type LogCollectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogCollectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogCollectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogCollectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogCollectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogCollectResponseValidationError) ErrorName() string {
	return "LogCollectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LogCollectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogCollectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogCollectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogCollectResponseValidationError{}
