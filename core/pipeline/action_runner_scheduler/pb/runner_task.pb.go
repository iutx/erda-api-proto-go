// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: runner_task.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunnerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64   `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	JobID          string   `protobuf:"bytes,2,opt,name=jobID,json=job_id,proto3" json:"jobID,omitempty"`
	Status         string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ContextDataUrl string   `protobuf:"bytes,4,opt,name=contextDataUrl,json=context_data_url,proto3" json:"contextDataUrl,omitempty"`
	OpenApiToken   string   `protobuf:"bytes,5,opt,name=openApiToken,json=openapi_token,proto3" json:"openApiToken,omitempty"`
	ResultDataUrl  string   `protobuf:"bytes,6,opt,name=resultDataUrl,json=result_data_url,proto3" json:"resultDataUrl,omitempty"`
	Commands       []string `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty"`
	Targets        []string `protobuf:"bytes,8,rep,name=targets,proto3" json:"targets,omitempty"`
	Workdir        string   `protobuf:"bytes,9,opt,name=workdir,proto3" json:"workdir,omitempty"`
}

func (x *RunnerTask) Reset() {
	*x = RunnerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTask) ProtoMessage() {}

func (x *RunnerTask) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTask.ProtoReflect.Descriptor instead.
func (*RunnerTask) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{0}
}

func (x *RunnerTask) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RunnerTask) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *RunnerTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RunnerTask) GetContextDataUrl() string {
	if x != nil {
		return x.ContextDataUrl
	}
	return ""
}

func (x *RunnerTask) GetOpenApiToken() string {
	if x != nil {
		return x.OpenApiToken
	}
	return ""
}

func (x *RunnerTask) GetResultDataUrl() string {
	if x != nil {
		return x.ResultDataUrl
	}
	return ""
}

func (x *RunnerTask) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RunnerTask) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *RunnerTask) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

type RunnerTaskQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RunnerTaskQueryRequest) Reset() {
	*x = RunnerTaskQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskQueryRequest) ProtoMessage() {}

func (x *RunnerTaskQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskQueryRequest.ProtoReflect.Descriptor instead.
func (*RunnerTaskQueryRequest) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{1}
}

func (x *RunnerTaskQueryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RunnerTaskQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RunnerTask `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunnerTaskQueryResponse) Reset() {
	*x = RunnerTaskQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskQueryResponse) ProtoMessage() {}

func (x *RunnerTaskQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskQueryResponse.ProtoReflect.Descriptor instead.
func (*RunnerTaskQueryResponse) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{2}
}

func (x *RunnerTaskQueryResponse) GetData() *RunnerTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunnerTaskFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunnerTaskFetchRequest) Reset() {
	*x = RunnerTaskFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskFetchRequest) ProtoMessage() {}

func (x *RunnerTaskFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskFetchRequest.ProtoReflect.Descriptor instead.
func (*RunnerTaskFetchRequest) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{3}
}

type RunnerTaskFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RunnerTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RunnerTaskFetchResponse) Reset() {
	*x = RunnerTaskFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskFetchResponse) ProtoMessage() {}

func (x *RunnerTaskFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskFetchResponse.ProtoReflect.Descriptor instead.
func (*RunnerTaskFetchResponse) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{4}
}

func (x *RunnerTaskFetchResponse) GetData() []*RunnerTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunnerTaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID          string   `protobuf:"bytes,1,opt,name=jobID,json=job_id,proto3" json:"jobID,omitempty"`
	ContextDataUrl string   `protobuf:"bytes,2,opt,name=contextDataUrl,json=context_data_url,proto3" json:"contextDataUrl,omitempty"`
	Commands       []string `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	Targets        []string `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	Workdir        string   `protobuf:"bytes,5,opt,name=workdir,proto3" json:"workdir,omitempty"`
}

func (x *RunnerTaskCreateRequest) Reset() {
	*x = RunnerTaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskCreateRequest) ProtoMessage() {}

func (x *RunnerTaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskCreateRequest.ProtoReflect.Descriptor instead.
func (*RunnerTaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{5}
}

func (x *RunnerTaskCreateRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *RunnerTaskCreateRequest) GetContextDataUrl() string {
	if x != nil {
		return x.ContextDataUrl
	}
	return ""
}

func (x *RunnerTaskCreateRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RunnerTaskCreateRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *RunnerTaskCreateRequest) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

type RunnerTaskCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunnerTaskCreateResponse) Reset() {
	*x = RunnerTaskCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskCreateResponse) ProtoMessage() {}

func (x *RunnerTaskCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskCreateResponse.ProtoReflect.Descriptor instead.
func (*RunnerTaskCreateResponse) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{6}
}

func (x *RunnerTaskCreateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type RunnerTaskUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskID         string `protobuf:"bytes,2,opt,name=taskID,json=task_id,proto3" json:"taskID,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ContextDataUrl string `protobuf:"bytes,4,opt,name=contextDataUrl,json=context_data_url,proto3" json:"contextDataUrl,omitempty"`
	ResultDataUrl  string `protobuf:"bytes,5,opt,name=resultDataUrl,json=result_data_url,proto3" json:"resultDataUrl,omitempty"`
}

func (x *RunnerTaskUpdateRequest) Reset() {
	*x = RunnerTaskUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskUpdateRequest) ProtoMessage() {}

func (x *RunnerTaskUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskUpdateRequest.ProtoReflect.Descriptor instead.
func (*RunnerTaskUpdateRequest) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{7}
}

func (x *RunnerTaskUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunnerTaskUpdateRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *RunnerTaskUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RunnerTaskUpdateRequest) GetContextDataUrl() string {
	if x != nil {
		return x.ContextDataUrl
	}
	return ""
}

func (x *RunnerTaskUpdateRequest) GetResultDataUrl() string {
	if x != nil {
		return x.ResultDataUrl
	}
	return ""
}

type RunnerTaskUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunnerTaskUpdateResponse) Reset() {
	*x = RunnerTaskUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerTaskUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerTaskUpdateResponse) ProtoMessage() {}

func (x *RunnerTaskUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerTaskUpdateResponse.ProtoReflect.Descriptor instead.
func (*RunnerTaskUpdateResponse) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{8}
}

type LogCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *LogCollectRequest) Reset() {
	*x = LogCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCollectRequest) ProtoMessage() {}

func (x *LogCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCollectRequest.ProtoReflect.Descriptor instead.
func (*LogCollectRequest) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{9}
}

func (x *LogCollectRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogCollectRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type LogCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogCollectResponse) Reset() {
	*x = LogCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCollectResponse) ProtoMessage() {}

func (x *LogCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCollectResponse.ProtoReflect.Descriptor instead.
func (*LogCollectResponse) Descriptor() ([]byte, []int) {
	return file_runner_task_proto_rawDescGZIP(), []int{10}
}

var File_runner_task_proto protoreflect.FileDescriptor

var file_runner_task_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x22,
	0x28, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x17, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x18, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x22, 0x2e,
	0x0a, 0x18, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac,
	0x01, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x1a, 0x0a,
	0x18, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x14, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x89, 0x09, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd6, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x43, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x19, 0x0a, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x12, 0xde, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x1c, 0x0a, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x32, 0x02, 0x08, 0x01, 0x12, 0xdb, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x12, 0xdb, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x73,
	0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x1c, 0x0a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x02,
	0x08, 0x01, 0x12, 0xec, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x7d, 0x3a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x27, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f,
	0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x7d, 0x32, 0x02, 0x08,
	0x01, 0x1a, 0x0f, 0xc2, 0xc4, 0xcb, 0x1c, 0x0a, 0x22, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72,
	0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runner_task_proto_rawDescOnce sync.Once
	file_runner_task_proto_rawDescData = file_runner_task_proto_rawDesc
)

func file_runner_task_proto_rawDescGZIP() []byte {
	file_runner_task_proto_rawDescOnce.Do(func() {
		file_runner_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_runner_task_proto_rawDescData)
	})
	return file_runner_task_proto_rawDescData
}

var file_runner_task_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_runner_task_proto_goTypes = []interface{}{
	(*RunnerTask)(nil),               // 0: erda.core.pipeline.action_runner_scheduler.RunnerTask
	(*RunnerTaskQueryRequest)(nil),   // 1: erda.core.pipeline.action_runner_scheduler.RunnerTaskQueryRequest
	(*RunnerTaskQueryResponse)(nil),  // 2: erda.core.pipeline.action_runner_scheduler.RunnerTaskQueryResponse
	(*RunnerTaskFetchRequest)(nil),   // 3: erda.core.pipeline.action_runner_scheduler.RunnerTaskFetchRequest
	(*RunnerTaskFetchResponse)(nil),  // 4: erda.core.pipeline.action_runner_scheduler.RunnerTaskFetchResponse
	(*RunnerTaskCreateRequest)(nil),  // 5: erda.core.pipeline.action_runner_scheduler.RunnerTaskCreateRequest
	(*RunnerTaskCreateResponse)(nil), // 6: erda.core.pipeline.action_runner_scheduler.RunnerTaskCreateResponse
	(*RunnerTaskUpdateRequest)(nil),  // 7: erda.core.pipeline.action_runner_scheduler.RunnerTaskUpdateRequest
	(*RunnerTaskUpdateResponse)(nil), // 8: erda.core.pipeline.action_runner_scheduler.RunnerTaskUpdateResponse
	(*LogCollectRequest)(nil),        // 9: erda.core.pipeline.action_runner_scheduler.LogCollectRequest
	(*LogCollectResponse)(nil),       // 10: erda.core.pipeline.action_runner_scheduler.LogCollectResponse
}
var file_runner_task_proto_depIdxs = []int32{
	0,  // 0: erda.core.pipeline.action_runner_scheduler.RunnerTaskQueryResponse.data:type_name -> erda.core.pipeline.action_runner_scheduler.RunnerTask
	0,  // 1: erda.core.pipeline.action_runner_scheduler.RunnerTaskFetchResponse.data:type_name -> erda.core.pipeline.action_runner_scheduler.RunnerTask
	5,  // 2: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.CreateRunnerTask:input_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskCreateRequest
	7,  // 3: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.UpdateRunnerTask:input_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskUpdateRequest
	1,  // 4: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.GetRunnerTask:input_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskQueryRequest
	3,  // 5: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.FetchRunnerTask:input_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskFetchRequest
	9,  // 6: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.CollectLogs:input_type -> erda.core.pipeline.action_runner_scheduler.LogCollectRequest
	6,  // 7: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.CreateRunnerTask:output_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskCreateResponse
	8,  // 8: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.UpdateRunnerTask:output_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskUpdateResponse
	2,  // 9: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.GetRunnerTask:output_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskQueryResponse
	4,  // 10: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.FetchRunnerTask:output_type -> erda.core.pipeline.action_runner_scheduler.RunnerTaskFetchResponse
	10, // 11: erda.core.pipeline.action_runner_scheduler.RunnerTaskService.CollectLogs:output_type -> erda.core.pipeline.action_runner_scheduler.LogCollectResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_runner_task_proto_init() }
func file_runner_task_proto_init() {
	if File_runner_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runner_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerTaskUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runner_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runner_task_proto_goTypes,
		DependencyIndexes: file_runner_task_proto_depIdxs,
		MessageInfos:      file_runner_task_proto_msgTypes,
	}.Build()
	File_runner_task_proto = out.File
	file_runner_task_proto_rawDesc = nil
	file_runner_task_proto_goTypes = nil
	file_runner_task_proto_depIdxs = nil
}
