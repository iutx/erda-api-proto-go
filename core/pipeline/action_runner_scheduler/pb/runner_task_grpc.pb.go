// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: runner_task.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RunnerTaskServiceClient is the client API for RunnerTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerTaskServiceClient interface {
	CreateRunnerTask(ctx context.Context, in *RunnerTaskCreateRequest, opts ...grpc.CallOption) (*RunnerTaskCreateResponse, error)
	UpdateRunnerTask(ctx context.Context, in *RunnerTaskUpdateRequest, opts ...grpc.CallOption) (*RunnerTaskUpdateResponse, error)
	GetRunnerTask(ctx context.Context, in *RunnerTaskQueryRequest, opts ...grpc.CallOption) (*RunnerTaskQueryResponse, error)
	FetchRunnerTask(ctx context.Context, in *RunnerTaskFetchRequest, opts ...grpc.CallOption) (*RunnerTaskFetchResponse, error)
	CollectLogs(ctx context.Context, in *LogCollectRequest, opts ...grpc.CallOption) (*LogCollectResponse, error)
}

type runnerTaskServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRunnerTaskServiceClient(cc grpc1.ClientConnInterface) RunnerTaskServiceClient {
	return &runnerTaskServiceClient{cc}
}

func (c *runnerTaskServiceClient) CreateRunnerTask(ctx context.Context, in *RunnerTaskCreateRequest, opts ...grpc.CallOption) (*RunnerTaskCreateResponse, error) {
	out := new(RunnerTaskCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/CreateRunnerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerTaskServiceClient) UpdateRunnerTask(ctx context.Context, in *RunnerTaskUpdateRequest, opts ...grpc.CallOption) (*RunnerTaskUpdateResponse, error) {
	out := new(RunnerTaskUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/UpdateRunnerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerTaskServiceClient) GetRunnerTask(ctx context.Context, in *RunnerTaskQueryRequest, opts ...grpc.CallOption) (*RunnerTaskQueryResponse, error) {
	out := new(RunnerTaskQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/GetRunnerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerTaskServiceClient) FetchRunnerTask(ctx context.Context, in *RunnerTaskFetchRequest, opts ...grpc.CallOption) (*RunnerTaskFetchResponse, error) {
	out := new(RunnerTaskFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/FetchRunnerTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerTaskServiceClient) CollectLogs(ctx context.Context, in *LogCollectRequest, opts ...grpc.CallOption) (*LogCollectResponse, error) {
	out := new(LogCollectResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/CollectLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerTaskServiceServer is the server API for RunnerTaskService service.
// All implementations should embed UnimplementedRunnerTaskServiceServer
// for forward compatibility
type RunnerTaskServiceServer interface {
	CreateRunnerTask(context.Context, *RunnerTaskCreateRequest) (*RunnerTaskCreateResponse, error)
	UpdateRunnerTask(context.Context, *RunnerTaskUpdateRequest) (*RunnerTaskUpdateResponse, error)
	GetRunnerTask(context.Context, *RunnerTaskQueryRequest) (*RunnerTaskQueryResponse, error)
	FetchRunnerTask(context.Context, *RunnerTaskFetchRequest) (*RunnerTaskFetchResponse, error)
	CollectLogs(context.Context, *LogCollectRequest) (*LogCollectResponse, error)
}

// UnimplementedRunnerTaskServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRunnerTaskServiceServer struct {
}

func (*UnimplementedRunnerTaskServiceServer) CreateRunnerTask(context.Context, *RunnerTaskCreateRequest) (*RunnerTaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunnerTask not implemented")
}
func (*UnimplementedRunnerTaskServiceServer) UpdateRunnerTask(context.Context, *RunnerTaskUpdateRequest) (*RunnerTaskUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerTask not implemented")
}
func (*UnimplementedRunnerTaskServiceServer) GetRunnerTask(context.Context, *RunnerTaskQueryRequest) (*RunnerTaskQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerTask not implemented")
}
func (*UnimplementedRunnerTaskServiceServer) FetchRunnerTask(context.Context, *RunnerTaskFetchRequest) (*RunnerTaskFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRunnerTask not implemented")
}
func (*UnimplementedRunnerTaskServiceServer) CollectLogs(context.Context, *LogCollectRequest) (*LogCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectLogs not implemented")
}

func RegisterRunnerTaskServiceServer(s grpc1.ServiceRegistrar, srv RunnerTaskServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RunnerTaskService_serviceDesc(srv, opts...), srv)
}

var _RunnerTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.action_runner_scheduler.RunnerTaskService",
	HandlerType: (*RunnerTaskServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "runner_task.proto",
}

func _get_RunnerTaskService_serviceDesc(srv RunnerTaskServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RunnerTaskService_CreateRunnerTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRunnerTask(ctx, req.(*RunnerTaskCreateRequest))
	}
	var _RunnerTaskService_CreateRunnerTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RunnerTaskService_CreateRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "CreateRunnerTask", srv)
		_RunnerTaskService_CreateRunnerTask_Handler = h.Interceptor(_RunnerTaskService_CreateRunnerTask_Handler)
	}

	_RunnerTaskService_UpdateRunnerTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateRunnerTask(ctx, req.(*RunnerTaskUpdateRequest))
	}
	var _RunnerTaskService_UpdateRunnerTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RunnerTaskService_UpdateRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "UpdateRunnerTask", srv)
		_RunnerTaskService_UpdateRunnerTask_Handler = h.Interceptor(_RunnerTaskService_UpdateRunnerTask_Handler)
	}

	_RunnerTaskService_GetRunnerTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRunnerTask(ctx, req.(*RunnerTaskQueryRequest))
	}
	var _RunnerTaskService_GetRunnerTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RunnerTaskService_GetRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "GetRunnerTask", srv)
		_RunnerTaskService_GetRunnerTask_Handler = h.Interceptor(_RunnerTaskService_GetRunnerTask_Handler)
	}

	_RunnerTaskService_FetchRunnerTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FetchRunnerTask(ctx, req.(*RunnerTaskFetchRequest))
	}
	var _RunnerTaskService_FetchRunnerTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RunnerTaskService_FetchRunnerTask_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "FetchRunnerTask", srv)
		_RunnerTaskService_FetchRunnerTask_Handler = h.Interceptor(_RunnerTaskService_FetchRunnerTask_Handler)
	}

	_RunnerTaskService_CollectLogs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CollectLogs(ctx, req.(*LogCollectRequest))
	}
	var _RunnerTaskService_CollectLogs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RunnerTaskService_CollectLogs_info = transport.NewServiceInfo("erda.core.pipeline.action_runner_scheduler.RunnerTaskService", "CollectLogs", srv)
		_RunnerTaskService_CollectLogs_Handler = h.Interceptor(_RunnerTaskService_CollectLogs_Handler)
	}

	var serviceDesc = _RunnerTaskService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateRunnerTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RunnerTaskCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RunnerTaskServiceServer).CreateRunnerTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RunnerTaskService_CreateRunnerTask_info)
				}
				if interceptor == nil {
					return _RunnerTaskService_CreateRunnerTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/CreateRunnerTask",
				}
				return interceptor(ctx, in, info, _RunnerTaskService_CreateRunnerTask_Handler)
			},
		},
		{
			MethodName: "UpdateRunnerTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RunnerTaskUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RunnerTaskServiceServer).UpdateRunnerTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RunnerTaskService_UpdateRunnerTask_info)
				}
				if interceptor == nil {
					return _RunnerTaskService_UpdateRunnerTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/UpdateRunnerTask",
				}
				return interceptor(ctx, in, info, _RunnerTaskService_UpdateRunnerTask_Handler)
			},
		},
		{
			MethodName: "GetRunnerTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RunnerTaskQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RunnerTaskServiceServer).GetRunnerTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RunnerTaskService_GetRunnerTask_info)
				}
				if interceptor == nil {
					return _RunnerTaskService_GetRunnerTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/GetRunnerTask",
				}
				return interceptor(ctx, in, info, _RunnerTaskService_GetRunnerTask_Handler)
			},
		},
		{
			MethodName: "FetchRunnerTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RunnerTaskFetchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RunnerTaskServiceServer).FetchRunnerTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RunnerTaskService_FetchRunnerTask_info)
				}
				if interceptor == nil {
					return _RunnerTaskService_FetchRunnerTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/FetchRunnerTask",
				}
				return interceptor(ctx, in, info, _RunnerTaskService_FetchRunnerTask_Handler)
			},
		},
		{
			MethodName: "CollectLogs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(LogCollectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RunnerTaskServiceServer).CollectLogs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RunnerTaskService_CollectLogs_info)
				}
				if interceptor == nil {
					return _RunnerTaskService_CollectLogs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action_runner_scheduler.RunnerTaskService/CollectLogs",
				}
				return interceptor(ctx, in, info, _RunnerTaskService_CollectLogs_Handler)
			},
		},
	}
	return &serviceDesc
}
