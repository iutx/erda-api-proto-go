// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: core-project.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckProjectExistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckProjectExistReq) Reset() {
	*x = CheckProjectExistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_project_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProjectExistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProjectExistReq) ProtoMessage() {}

func (x *CheckProjectExistReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_project_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProjectExistReq.ProtoReflect.Descriptor instead.
func (*CheckProjectExistReq) Descriptor() ([]byte, []int) {
	return file_core_project_proto_rawDescGZIP(), []int{0}
}

func (x *CheckProjectExistReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CheckProjectExistResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *CheckProjectExistResp) Reset() {
	*x = CheckProjectExistResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_project_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProjectExistResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProjectExistResp) ProtoMessage() {}

func (x *CheckProjectExistResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_project_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProjectExistResp.ProtoReflect.Descriptor instead.
func (*CheckProjectExistResp) Descriptor() ([]byte, []int) {
	return file_core_project_proto_rawDescGZIP(), []int{1}
}

func (x *CheckProjectExistResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type GetProjectByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID *string `protobuf:"bytes,2,opt,name=userID,proto3,oneof" json:"userID,omitempty"`
}

func (x *GetProjectByIDReq) Reset() {
	*x = GetProjectByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_project_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectByIDReq) ProtoMessage() {}

func (x *GetProjectByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_project_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectByIDReq.ProtoReflect.Descriptor instead.
func (*GetProjectByIDReq) Descriptor() ([]byte, []int) {
	return file_core_project_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProjectByIDReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

type ProjectDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project primary key
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// project identifies
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// project display name
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// org primary key
	OrgID uint64 `protobuf:"varint,5,opt,name=orgID,proto3" json:"orgID,omitempty"`
	// the project creator userID
	CreatorID string `protobuf:"bytes,6,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	// the project logo url
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	// the project description
	Desc string `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	// project active time
	ActiveTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=activeTime,proto3" json:"activeTime,omitempty"`
	// is the project public
	IsPublic    bool                   `protobuf:"varint,15,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	// project type
	Type string `protobuf:"bytes,28,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ProjectDto) Reset() {
	*x = ProjectDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_project_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDto) ProtoMessage() {}

func (x *ProjectDto) ProtoReflect() protoreflect.Message {
	mi := &file_core_project_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDto.ProtoReflect.Descriptor instead.
func (*ProjectDto) Descriptor() ([]byte, []int) {
	return file_core_project_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectDto) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectDto) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectDto) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectDto) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *ProjectDto) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectDto) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProjectDto) GetActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveTime
	}
	return nil
}

func (x *ProjectDto) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ProjectDto) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ProjectDto) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *ProjectDto) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_core_project_proto protoreflect.FileDescriptor

var file_core_project_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a,
	0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x4b,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xf6, 0x03, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d,
	0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04,
	0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14,
	0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x16,
	0x10, 0x17, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x4a, 0x04,
	0x08, 0x19, 0x10, 0x1a, 0x32, 0xcc, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x68, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x74,
	0x6f, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_project_proto_rawDescOnce sync.Once
	file_core_project_proto_rawDescData = file_core_project_proto_rawDesc
)

func file_core_project_proto_rawDescGZIP() []byte {
	file_core_project_proto_rawDescOnce.Do(func() {
		file_core_project_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_project_proto_rawDescData)
	})
	return file_core_project_proto_rawDescData
}

var file_core_project_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_core_project_proto_goTypes = []interface{}{
	(*CheckProjectExistReq)(nil),  // 0: erda.core.project.CheckProjectExistReq
	(*CheckProjectExistResp)(nil), // 1: erda.core.project.CheckProjectExistResp
	(*GetProjectByIDReq)(nil),     // 2: erda.core.project.GetProjectByIDReq
	(*ProjectDto)(nil),            // 3: erda.core.project.ProjectDto
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_core_project_proto_depIdxs = []int32{
	4, // 0: erda.core.project.ProjectDto.activeTime:type_name -> google.protobuf.Timestamp
	4, // 1: erda.core.project.ProjectDto.createdTime:type_name -> google.protobuf.Timestamp
	4, // 2: erda.core.project.ProjectDto.updatedTime:type_name -> google.protobuf.Timestamp
	0, // 3: erda.core.project.Project.CheckProjectExist:input_type -> erda.core.project.CheckProjectExistReq
	2, // 4: erda.core.project.Project.GetProjectByID:input_type -> erda.core.project.GetProjectByIDReq
	1, // 5: erda.core.project.Project.CheckProjectExist:output_type -> erda.core.project.CheckProjectExistResp
	3, // 6: erda.core.project.Project.GetProjectByID:output_type -> erda.core.project.ProjectDto
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_core_project_proto_init() }
func file_core_project_proto_init() {
	if File_core_project_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_project_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProjectExistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_project_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProjectExistResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_project_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_project_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_project_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_project_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_project_proto_goTypes,
		DependencyIndexes: file_core_project_proto_depIdxs,
		MessageInfos:      file_core_project_proto_msgTypes,
	}.Build()
	File_core_project_proto = out.File
	file_core_project_proto_rawDesc = nil
	file_core_project_proto_goTypes = nil
	file_core_project_proto_depIdxs = nil
}
