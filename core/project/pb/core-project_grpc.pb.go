// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: core-project.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	CheckProjectExist(ctx context.Context, in *CheckProjectExistReq, opts ...grpc.CallOption) (*CheckProjectExistResp, error)
	GetProjectByID(ctx context.Context, in *GetProjectByIDReq, opts ...grpc.CallOption) (*ProjectDto, error)
}

type projectClient struct {
	cc grpc1.ClientConnInterface
}

func NewProjectClient(cc grpc1.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) CheckProjectExist(ctx context.Context, in *CheckProjectExistReq, opts ...grpc.CallOption) (*CheckProjectExistResp, error) {
	out := new(CheckProjectExistResp)
	err := c.cc.Invoke(ctx, "/erda.core.project.Project/CheckProjectExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) GetProjectByID(ctx context.Context, in *GetProjectByIDReq, opts ...grpc.CallOption) (*ProjectDto, error) {
	out := new(ProjectDto)
	err := c.cc.Invoke(ctx, "/erda.core.project.Project/GetProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServer is the server API for Project service.
// All implementations should embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	CheckProjectExist(context.Context, *CheckProjectExistReq) (*CheckProjectExistResp, error)
	GetProjectByID(context.Context, *GetProjectByIDReq) (*ProjectDto, error)
}

// UnimplementedProjectServer should be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (*UnimplementedProjectServer) CheckProjectExist(context.Context, *CheckProjectExistReq) (*CheckProjectExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProjectExist not implemented")
}
func (*UnimplementedProjectServer) GetProjectByID(context.Context, *GetProjectByIDReq) (*ProjectDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}

func RegisterProjectServer(s grpc1.ServiceRegistrar, srv ProjectServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Project_serviceDesc(srv, opts...), srv)
}

var _Project_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.project.Project",
	HandlerType: (*ProjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "core-project.proto",
}

func _get_Project_serviceDesc(srv ProjectServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Project_CheckProjectExist_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CheckProjectExist(ctx, req.(*CheckProjectExistReq))
	}
	var _Project_CheckProjectExist_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Project_CheckProjectExist_info = transport.NewServiceInfo("erda.core.project.Project", "CheckProjectExist", srv)
		_Project_CheckProjectExist_Handler = h.Interceptor(_Project_CheckProjectExist_Handler)
	}

	_Project_GetProjectByID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjectByID(ctx, req.(*GetProjectByIDReq))
	}
	var _Project_GetProjectByID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Project_GetProjectByID_info = transport.NewServiceInfo("erda.core.project.Project", "GetProjectByID", srv)
		_Project_GetProjectByID_Handler = h.Interceptor(_Project_GetProjectByID_Handler)
	}

	var serviceDesc = _Project_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CheckProjectExist",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CheckProjectExistReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServer).CheckProjectExist(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Project_CheckProjectExist_info)
				}
				if interceptor == nil {
					return _Project_CheckProjectExist_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.project.Project/CheckProjectExist",
				}
				return interceptor(ctx, in, info, _Project_CheckProjectExist_Handler)
			},
		},
		{
			MethodName: "GetProjectByID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectByIDReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServer).GetProjectByID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Project_GetProjectByID_info)
				}
				if interceptor == nil {
					return _Project_GetProjectByID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.project.Project/GetProjectByID",
				}
				return interceptor(ctx, in, info, _Project_GetProjectByID_Handler)
			},
		},
	}
	return &serviceDesc
}
