// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: hub_info.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetHubInfoReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateHubInfoReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHubInfoResp)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHubInfoItem)(nil)

// GetHubInfoReq implement urlenc.URLValuesUnmarshaler.
func (m *GetHubInfoReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "env":
				m.Env = vals[0]
			case "az":
				m.Az = vals[0]
			case "oneOfDomains":
				m.OneOfDomains = vals[0]
			}
		}
	}
	return nil
}

// CreateHubInfoReq implement urlenc.URLValuesUnmarshaler.
func (m *CreateHubInfoReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "env":
				m.Env = vals[0]
			case "az":
				m.Az = vals[0]
			case "domains":
				m.Domains = vals
			}
		}
	}
	return nil
}

// GetHubInfoResp implement urlenc.URLValuesUnmarshaler.
func (m *GetHubInfoResp) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "data":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.Id = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.OrgID = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.ProjectID = vals[0]
			case "data.env":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.Env = vals[0]
			case "data.az":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.Az = vals[0]
			case "data.domains":
				if m.Data == nil {
					m.Data = &GetHubInfoItem{}
				}
				m.Data.Domains = vals
			}
		}
	}
	return nil
}

// GetHubInfoItem implement urlenc.URLValuesUnmarshaler.
func (m *GetHubInfoItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "orgID":
				m.OrgID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "env":
				m.Env = vals[0]
			case "az":
				m.Az = vals[0]
			case "domains":
				m.Domains = vals
			}
		}
	}
	return nil
}
