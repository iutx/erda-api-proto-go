// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: runtime_service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetServiceApiPrefixRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceApiPrefixRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceApiPrefixRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceApiPrefixRequestMultiError, or nil if none found.
func (m *GetServiceApiPrefixRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceApiPrefixRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for App

	// no validation rules for Service

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return GetServiceApiPrefixRequestMultiError(errors)
	}

	return nil
}

// GetServiceApiPrefixRequestMultiError is an error wrapping multiple
// validation errors returned by GetServiceApiPrefixRequest.ValidateAll() if
// the designated constraints aren't met.
type GetServiceApiPrefixRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceApiPrefixRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceApiPrefixRequestMultiError) AllErrors() []error { return m }

// GetServiceApiPrefixRequestValidationError is the validation error returned
// by GetServiceApiPrefixRequest.Validate if the designated constraints aren't met.
type GetServiceApiPrefixRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceApiPrefixRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceApiPrefixRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceApiPrefixRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceApiPrefixRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceApiPrefixRequestValidationError) ErrorName() string {
	return "GetServiceApiPrefixRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceApiPrefixRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceApiPrefixRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceApiPrefixRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceApiPrefixRequestValidationError{}

// Validate checks the field values on GetServiceApiPrefixResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceApiPrefixResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceApiPrefixResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceApiPrefixResponseMultiError, or nil if none found.
func (m *GetServiceApiPrefixResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceApiPrefixResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServiceApiPrefixResponseMultiError(errors)
	}

	return nil
}

// GetServiceApiPrefixResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceApiPrefixResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceApiPrefixResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceApiPrefixResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceApiPrefixResponseMultiError) AllErrors() []error { return m }

// GetServiceApiPrefixResponseValidationError is the validation error returned
// by GetServiceApiPrefixResponse.Validate if the designated constraints
// aren't met.
type GetServiceApiPrefixResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceApiPrefixResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceApiPrefixResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceApiPrefixResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceApiPrefixResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceApiPrefixResponseValidationError) ErrorName() string {
	return "GetServiceApiPrefixResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceApiPrefixResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceApiPrefixResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceApiPrefixResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceApiPrefixResponseValidationError{}

// Validate checks the field values on ServiceRuntime with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceRuntime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceRuntime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceRuntimeMultiError,
// or nil if none found.
func (m *ServiceRuntime) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceRuntime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	// no validation rules for RuntimeName

	// no validation rules for AppId

	// no validation rules for AppName

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return ServiceRuntimeMultiError(errors)
	}

	return nil
}

// ServiceRuntimeMultiError is an error wrapping multiple validation errors
// returned by ServiceRuntime.ValidateAll() if the designated constraints
// aren't met.
type ServiceRuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceRuntimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceRuntimeMultiError) AllErrors() []error { return m }

// ServiceRuntimeValidationError is the validation error returned by
// ServiceRuntime.Validate if the designated constraints aren't met.
type ServiceRuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceRuntimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceRuntimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceRuntimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceRuntimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceRuntimeValidationError) ErrorName() string { return "ServiceRuntimeValidationError" }

// Error satisfies the builtin error interface
func (e ServiceRuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceRuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceRuntimeValidationError{}

// Validate checks the field values on GetServiceRuntimesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRuntimesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRuntimesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRuntimesResponseMultiError, or nil if none found.
func (m *GetServiceRuntimesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRuntimesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceRuntimesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceRuntimesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceRuntimesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceRuntimesResponseMultiError(errors)
	}

	return nil
}

// GetServiceRuntimesResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceRuntimesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceRuntimesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRuntimesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRuntimesResponseMultiError) AllErrors() []error { return m }

// GetServiceRuntimesResponseValidationError is the validation error returned
// by GetServiceRuntimesResponse.Validate if the designated constraints aren't met.
type GetServiceRuntimesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRuntimesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRuntimesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRuntimesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRuntimesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRuntimesResponseValidationError) ErrorName() string {
	return "GetServiceRuntimesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRuntimesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRuntimesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRuntimesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRuntimesResponseValidationError{}

// Validate checks the field values on GetServiceRuntimesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRuntimesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRuntimesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRuntimesRequestMultiError, or nil if none found.
func (m *GetServiceRuntimesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRuntimesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for App

	// no validation rules for Service

	if len(errors) > 0 {
		return GetServiceRuntimesRequestMultiError(errors)
	}

	return nil
}

// GetServiceRuntimesRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceRuntimesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetServiceRuntimesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRuntimesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRuntimesRequestMultiError) AllErrors() []error { return m }

// GetServiceRuntimesRequestValidationError is the validation error returned by
// GetServiceRuntimesRequest.Validate if the designated constraints aren't met.
type GetServiceRuntimesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRuntimesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRuntimesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRuntimesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRuntimesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRuntimesRequestValidationError) ErrorName() string {
	return "GetServiceRuntimesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRuntimesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRuntimesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRuntimesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRuntimesRequestValidationError{}

// Validate checks the field values on DeleteRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuntimeRequestMultiError, or nil if none found.
func (m *DeleteRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return DeleteRuntimeRequestMultiError(errors)
	}

	return nil
}

// DeleteRuntimeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRuntimeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuntimeRequestMultiError) AllErrors() []error { return m }

// DeleteRuntimeRequestValidationError is the validation error returned by
// DeleteRuntimeRequest.Validate if the designated constraints aren't met.
type DeleteRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuntimeRequestValidationError) ErrorName() string {
	return "DeleteRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuntimeRequestValidationError{}

// Validate checks the field values on DeleteRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuntimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuntimeResponseMultiError, or nil if none found.
func (m *DeleteRuntimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuntimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteRuntimeResponseMultiError(errors)
	}

	return nil
}

// DeleteRuntimeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRuntimeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRuntimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuntimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuntimeResponseMultiError) AllErrors() []error { return m }

// DeleteRuntimeResponseValidationError is the validation error returned by
// DeleteRuntimeResponse.Validate if the designated constraints aren't met.
type DeleteRuntimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuntimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuntimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuntimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuntimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuntimeResponseValidationError) ErrorName() string {
	return "DeleteRuntimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuntimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuntimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuntimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuntimeResponseValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on GetAppsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppsResponseMultiError, or nil if none found.
func (m *GetAppsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppsResponseMultiError(errors)
	}

	return nil
}

// GetAppsResponseMultiError is an error wrapping multiple validation errors
// returned by GetAppsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAppsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppsResponseMultiError) AllErrors() []error { return m }

// GetAppsResponseValidationError is the validation error returned by
// GetAppsResponse.Validate if the designated constraints aren't met.
type GetAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppsResponseValidationError) ErrorName() string { return "GetAppsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppsResponseValidationError{}

// Validate checks the field values on GetAppsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppsRequestMultiError,
// or nil if none found.
func (m *GetAppsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if len(errors) > 0 {
		return GetAppsRequestMultiError(errors)
	}

	return nil
}

// GetAppsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAppsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppsRequestMultiError) AllErrors() []error { return m }

// GetAppsRequestValidationError is the validation error returned by
// GetAppsRequest.Validate if the designated constraints aren't met.
type GetAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppsRequestValidationError) ErrorName() string { return "GetAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppsRequestValidationError{}

// Validate checks the field values on ChangeRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRuntimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRuntimeResponseMultiError, or nil if none found.
func (m *ChangeRuntimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRuntimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeRuntimeResponseMultiError(errors)
	}

	return nil
}

// ChangeRuntimeResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeRuntimeResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeRuntimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRuntimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRuntimeResponseMultiError) AllErrors() []error { return m }

// ChangeRuntimeResponseValidationError is the validation error returned by
// ChangeRuntimeResponse.Validate if the designated constraints aren't met.
type ChangeRuntimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRuntimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRuntimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRuntimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRuntimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRuntimeResponseValidationError) ErrorName() string {
	return "ChangeRuntimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRuntimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRuntimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRuntimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRuntimeResponseValidationError{}

// Validate checks the field values on EndpointDomain with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndpointDomain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointDomain with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointDomainMultiError,
// or nil if none found.
func (m *EndpointDomain) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointDomain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Type

	if len(errors) > 0 {
		return EndpointDomainMultiError(errors)
	}

	return nil
}

// EndpointDomainMultiError is an error wrapping multiple validation errors
// returned by EndpointDomain.ValidateAll() if the designated constraints
// aren't met.
type EndpointDomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointDomainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointDomainMultiError) AllErrors() []error { return m }

// EndpointDomainValidationError is the validation error returned by
// EndpointDomain.Validate if the designated constraints aren't met.
type EndpointDomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointDomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointDomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointDomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointDomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointDomainValidationError) ErrorName() string { return "EndpointDomainValidationError" }

// Error satisfies the builtin error interface
func (e EndpointDomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointDomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointDomainValidationError{}

// Validate checks the field values on ServiceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceDetailMultiError, or
// nil if none found.
func (m *ServiceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for InnerAddress

	for idx, item := range m.GetEndpointDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceDetailValidationError{
						field:  fmt.Sprintf("EndpointDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceDetailValidationError{
						field:  fmt.Sprintf("EndpointDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceDetailValidationError{
					field:  fmt.Sprintf("EndpointDomains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceDetailMultiError(errors)
	}

	return nil
}

// ServiceDetailMultiError is an error wrapping multiple validation errors
// returned by ServiceDetail.ValidateAll() if the designated constraints
// aren't met.
type ServiceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceDetailMultiError) AllErrors() []error { return m }

// ServiceDetailValidationError is the validation error returned by
// ServiceDetail.Validate if the designated constraints aren't met.
type ServiceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDetailValidationError) ErrorName() string { return "ServiceDetailValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDetailValidationError{}

// Validate checks the field values on ChangeRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRuntimeRequestMultiError, or nil if none found.
func (m *ChangeRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for ClusterName

	// no validation rules for RuntimeId

	// no validation rules for RuntimeName

	// no validation rules for ReleaseId

	// no validation rules for ServiceGroupNamespace

	// no validation rules for ProjectNamespace

	// no validation rules for ServiceGroupName

	// no validation rules for AppId

	// no validation rules for AppName

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeRuntimeRequestValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeRuntimeRequestValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeRuntimeRequestValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UseApigw

	if len(errors) > 0 {
		return ChangeRuntimeRequestMultiError(errors)
	}

	return nil
}

// ChangeRuntimeRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeRuntimeRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRuntimeRequestMultiError) AllErrors() []error { return m }

// ChangeRuntimeRequestValidationError is the validation error returned by
// ChangeRuntimeRequest.Validate if the designated constraints aren't met.
type ChangeRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRuntimeRequestValidationError) ErrorName() string {
	return "ChangeRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRuntimeRequestValidationError{}
