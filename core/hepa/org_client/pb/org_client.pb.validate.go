// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: org_client.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChangeClientLimitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeClientLimitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeClientLimitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeClientLimitResponseMultiError, or nil if none found.
func (m *ChangeClientLimitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeClientLimitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeClientLimitResponseMultiError(errors)
	}

	return nil
}

// ChangeClientLimitResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeClientLimitResponse.ValidateAll() if the
// designated constraints aren't met.
type ChangeClientLimitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeClientLimitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeClientLimitResponseMultiError) AllErrors() []error { return m }

// ChangeClientLimitResponseValidationError is the validation error returned by
// ChangeClientLimitResponse.Validate if the designated constraints aren't met.
type ChangeClientLimitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeClientLimitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeClientLimitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeClientLimitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeClientLimitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeClientLimitResponseValidationError) ErrorName() string {
	return "ChangeClientLimitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeClientLimitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeClientLimitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeClientLimitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeClientLimitResponseValidationError{}

// Validate checks the field values on ChangeClientLimitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeClientLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeClientLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeClientLimitRequestMultiError, or nil if none found.
func (m *ChangeClientLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeClientLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for PackageId

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeClientLimitRequestValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeClientLimitRequestValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeClientLimitRequestValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangeClientLimitRequestMultiError(errors)
	}

	return nil
}

// ChangeClientLimitRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeClientLimitRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeClientLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeClientLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeClientLimitRequestMultiError) AllErrors() []error { return m }

// ChangeClientLimitRequestValidationError is the validation error returned by
// ChangeClientLimitRequest.Validate if the designated constraints aren't met.
type ChangeClientLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeClientLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeClientLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeClientLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeClientLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeClientLimitRequestValidationError) ErrorName() string {
	return "ChangeClientLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeClientLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeClientLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeClientLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeClientLimitRequestValidationError{}

// Validate checks the field values on GrantEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantEndpointRequestMultiError, or nil if none found.
func (m *GrantEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for PackageId

	if len(errors) > 0 {
		return GrantEndpointRequestMultiError(errors)
	}

	return nil
}

// GrantEndpointRequestMultiError is an error wrapping multiple validation
// errors returned by GrantEndpointRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantEndpointRequestMultiError) AllErrors() []error { return m }

// GrantEndpointRequestValidationError is the validation error returned by
// GrantEndpointRequest.Validate if the designated constraints aren't met.
type GrantEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantEndpointRequestValidationError) ErrorName() string {
	return "GrantEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantEndpointRequestValidationError{}

// Validate checks the field values on GrantEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantEndpointResponseMultiError, or nil if none found.
func (m *GrantEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GrantEndpointResponseMultiError(errors)
	}

	return nil
}

// GrantEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by GrantEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantEndpointResponseMultiError) AllErrors() []error { return m }

// GrantEndpointResponseValidationError is the validation error returned by
// GrantEndpointResponse.Validate if the designated constraints aren't met.
type GrantEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantEndpointResponseValidationError) ErrorName() string {
	return "GrantEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantEndpointResponseValidationError{}

// Validate checks the field values on RevokeEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeEndpointRequestMultiError, or nil if none found.
func (m *RevokeEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for PackageId

	if len(errors) > 0 {
		return RevokeEndpointRequestMultiError(errors)
	}

	return nil
}

// RevokeEndpointRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeEndpointRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeEndpointRequestMultiError) AllErrors() []error { return m }

// RevokeEndpointRequestValidationError is the validation error returned by
// RevokeEndpointRequest.Validate if the designated constraints aren't met.
type RevokeEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeEndpointRequestValidationError) ErrorName() string {
	return "RevokeEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeEndpointRequestValidationError{}

// Validate checks the field values on RevokeEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeEndpointResponseMultiError, or nil if none found.
func (m *RevokeEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RevokeEndpointResponseMultiError(errors)
	}

	return nil
}

// RevokeEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeEndpointResponseMultiError) AllErrors() []error { return m }

// RevokeEndpointResponseValidationError is the validation error returned by
// RevokeEndpointResponse.Validate if the designated constraints aren't met.
type RevokeEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeEndpointResponseValidationError) ErrorName() string {
	return "RevokeEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeEndpointResponseValidationError{}

// Validate checks the field values on UpdateCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCredentialsResponseMultiError, or nil if none found.
func (m *UpdateCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCredentialsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCredentialsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCredentialsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCredentialsResponseMultiError(errors)
	}

	return nil
}

// UpdateCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCredentialsResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCredentialsResponseMultiError) AllErrors() []error { return m }

// UpdateCredentialsResponseValidationError is the validation error returned by
// UpdateCredentialsResponse.Validate if the designated constraints aren't met.
type UpdateCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCredentialsResponseValidationError) ErrorName() string {
	return "UpdateCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCredentialsResponseValidationError{}

// Validate checks the field values on UpdateCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCredentialsRequestMultiError, or nil if none found.
func (m *UpdateCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return UpdateCredentialsRequestMultiError(errors)
	}

	return nil
}

// UpdateCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCredentialsRequestMultiError) AllErrors() []error { return m }

// UpdateCredentialsRequestValidationError is the validation error returned by
// UpdateCredentialsRequest.Validate if the designated constraints aren't met.
type UpdateCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCredentialsRequestValidationError) ErrorName() string {
	return "UpdateCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCredentialsRequestValidationError{}

// Validate checks the field values on GetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCredentialsResponseMultiError, or nil if none found.
func (m *GetCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCredentialsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCredentialsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCredentialsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialsResponseMultiError) AllErrors() []error { return m }

// GetCredentialsResponseValidationError is the validation error returned by
// GetCredentialsResponse.Validate if the designated constraints aren't met.
type GetCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialsResponseValidationError) ErrorName() string {
	return "GetCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialsResponseValidationError{}

// Validate checks the field values on GetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCredentialsRequestMultiError, or nil if none found.
func (m *GetCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialsRequestMultiError) AllErrors() []error { return m }

// GetCredentialsRequestValidationError is the validation error returned by
// GetCredentialsRequest.Validate if the designated constraints aren't met.
type GetCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialsRequestValidationError) ErrorName() string {
	return "GetCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialsRequestValidationError{}

// Validate checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientRequestMultiError, or nil if none found.
func (m *DeleteClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return DeleteClientRequestMultiError(errors)
	}

	return nil
}

// DeleteClientRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClientRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientRequestMultiError) AllErrors() []error { return m }

// DeleteClientRequestValidationError is the validation error returned by
// DeleteClientRequest.Validate if the designated constraints aren't met.
type DeleteClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientRequestValidationError) ErrorName() string {
	return "DeleteClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientRequestValidationError{}

// Validate checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientResponseMultiError, or nil if none found.
func (m *DeleteClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteClientResponseMultiError(errors)
	}

	return nil
}

// DeleteClientResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteClientResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientResponseMultiError) AllErrors() []error { return m }

// DeleteClientResponseValidationError is the validation error returned by
// DeleteClientResponse.Validate if the designated constraints aren't met.
type DeleteClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientResponseValidationError) ErrorName() string {
	return "DeleteClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientResponseValidationError{}

// Validate checks the field values on ClientInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientInfoMultiError, or
// nil if none found.
func (m *ClientInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return ClientInfoMultiError(errors)
	}

	return nil
}

// ClientInfoMultiError is an error wrapping multiple validation errors
// returned by ClientInfo.ValidateAll() if the designated constraints aren't met.
type ClientInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientInfoMultiError) AllErrors() []error { return m }

// ClientInfoValidationError is the validation error returned by
// ClientInfo.Validate if the designated constraints aren't met.
type ClientInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientInfoValidationError) ErrorName() string { return "ClientInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClientInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientInfoValidationError{}

// Validate checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientRequestMultiError, or nil if none found.
func (m *CreateClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientName

	if len(errors) > 0 {
		return CreateClientRequestMultiError(errors)
	}

	return nil
}

// CreateClientRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClientRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientRequestMultiError) AllErrors() []error { return m }

// CreateClientRequestValidationError is the validation error returned by
// CreateClientRequest.Validate if the designated constraints aren't met.
type CreateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRequestValidationError) ErrorName() string {
	return "CreateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRequestValidationError{}

// Validate checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientResponseMultiError, or nil if none found.
func (m *CreateClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClientResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClientResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClientResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateClientResponseMultiError(errors)
	}

	return nil
}

// CreateClientResponseMultiError is an error wrapping multiple validation
// errors returned by CreateClientResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientResponseMultiError) AllErrors() []error { return m }

// CreateClientResponseValidationError is the validation error returned by
// CreateClientResponse.Validate if the designated constraints aren't met.
type CreateClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientResponseValidationError) ErrorName() string {
	return "CreateClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientResponseValidationError{}
