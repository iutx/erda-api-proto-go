// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: legacy_upstream_lb.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpstreamLb with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpstreamLb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpstreamLb with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpstreamLbMultiError, or
// nil if none found.
func (m *UpstreamLb) ValidateAll() error {
	return m.validate(true)
}

func (m *UpstreamLb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Az

	// no validation rules for LbName

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for DeploymentId

	// no validation rules for HealthcheckPath

	if len(errors) > 0 {
		return UpstreamLbMultiError(errors)
	}

	return nil
}

// UpstreamLbMultiError is an error wrapping multiple validation errors
// returned by UpstreamLb.ValidateAll() if the designated constraints aren't met.
type UpstreamLbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamLbMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamLbMultiError) AllErrors() []error { return m }

// UpstreamLbValidationError is the validation error returned by
// UpstreamLb.Validate if the designated constraints aren't met.
type UpstreamLbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamLbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamLbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamLbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamLbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamLbValidationError) ErrorName() string { return "UpstreamLbValidationError" }

// Error satisfies the builtin error interface
func (e UpstreamLbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstreamLb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamLbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamLbValidationError{}

// Validate checks the field values on TargetOnlineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOnlineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOnlineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetOnlineRequestMultiError, or nil if none found.
func (m *TargetOnlineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOnlineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TargetOnlineRequestValidationError{
					field:  "Lb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TargetOnlineRequestValidationError{
					field:  "Lb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TargetOnlineRequestValidationError{
				field:  "Lb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TargetOnlineRequestMultiError(errors)
	}

	return nil
}

// TargetOnlineRequestMultiError is an error wrapping multiple validation
// errors returned by TargetOnlineRequest.ValidateAll() if the designated
// constraints aren't met.
type TargetOnlineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOnlineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOnlineRequestMultiError) AllErrors() []error { return m }

// TargetOnlineRequestValidationError is the validation error returned by
// TargetOnlineRequest.Validate if the designated constraints aren't met.
type TargetOnlineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOnlineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOnlineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOnlineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOnlineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOnlineRequestValidationError) ErrorName() string {
	return "TargetOnlineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOnlineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOnlineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOnlineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOnlineRequestValidationError{}

// Validate checks the field values on TargetOnlineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOnlineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOnlineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetOnlineResponseMultiError, or nil if none found.
func (m *TargetOnlineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOnlineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TargetOnlineResponseMultiError(errors)
	}

	return nil
}

// TargetOnlineResponseMultiError is an error wrapping multiple validation
// errors returned by TargetOnlineResponse.ValidateAll() if the designated
// constraints aren't met.
type TargetOnlineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOnlineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOnlineResponseMultiError) AllErrors() []error { return m }

// TargetOnlineResponseValidationError is the validation error returned by
// TargetOnlineResponse.Validate if the designated constraints aren't met.
type TargetOnlineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOnlineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOnlineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOnlineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOnlineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOnlineResponseValidationError) ErrorName() string {
	return "TargetOnlineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOnlineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOnlineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOnlineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOnlineResponseValidationError{}

// Validate checks the field values on TargetOfflineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOfflineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOfflineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetOfflineRequestMultiError, or nil if none found.
func (m *TargetOfflineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOfflineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TargetOfflineRequestValidationError{
					field:  "Lb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TargetOfflineRequestValidationError{
					field:  "Lb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TargetOfflineRequestValidationError{
				field:  "Lb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TargetOfflineRequestMultiError(errors)
	}

	return nil
}

// TargetOfflineRequestMultiError is an error wrapping multiple validation
// errors returned by TargetOfflineRequest.ValidateAll() if the designated
// constraints aren't met.
type TargetOfflineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOfflineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOfflineRequestMultiError) AllErrors() []error { return m }

// TargetOfflineRequestValidationError is the validation error returned by
// TargetOfflineRequest.Validate if the designated constraints aren't met.
type TargetOfflineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOfflineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOfflineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOfflineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOfflineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOfflineRequestValidationError) ErrorName() string {
	return "TargetOfflineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOfflineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOfflineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOfflineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOfflineRequestValidationError{}

// Validate checks the field values on TargetOfflineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOfflineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOfflineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetOfflineResponseMultiError, or nil if none found.
func (m *TargetOfflineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOfflineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TargetOfflineResponseMultiError(errors)
	}

	return nil
}

// TargetOfflineResponseMultiError is an error wrapping multiple validation
// errors returned by TargetOfflineResponse.ValidateAll() if the designated
// constraints aren't met.
type TargetOfflineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOfflineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOfflineResponseMultiError) AllErrors() []error { return m }

// TargetOfflineResponseValidationError is the validation error returned by
// TargetOfflineResponse.Validate if the designated constraints aren't met.
type TargetOfflineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOfflineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOfflineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOfflineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOfflineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOfflineResponseValidationError) ErrorName() string {
	return "TargetOfflineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOfflineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOfflineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOfflineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOfflineResponseValidationError{}
