// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: global.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetFeaturesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFeaturesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeaturesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeaturesResponseMultiError, or nil if none found.
func (m *GetFeaturesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeaturesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetFeaturesResponseMultiError(errors)
	}

	return nil
}

// GetFeaturesResponseMultiError is an error wrapping multiple validation
// errors returned by GetFeaturesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFeaturesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeaturesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeaturesResponseMultiError) AllErrors() []error { return m }

// GetFeaturesResponseValidationError is the validation error returned by
// GetFeaturesResponse.Validate if the designated constraints aren't met.
type GetFeaturesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeaturesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeaturesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeaturesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeaturesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeaturesResponseValidationError) ErrorName() string {
	return "GetFeaturesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeaturesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeaturesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeaturesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeaturesResponseValidationError{}

// Validate checks the field values on GetFeaturesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFeaturesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeaturesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeaturesRequestMultiError, or nil if none found.
func (m *GetFeaturesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeaturesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return GetFeaturesRequestMultiError(errors)
	}

	return nil
}

// GetFeaturesRequestMultiError is an error wrapping multiple validation errors
// returned by GetFeaturesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFeaturesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeaturesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeaturesRequestMultiError) AllErrors() []error { return m }

// GetFeaturesRequestValidationError is the validation error returned by
// GetFeaturesRequest.Validate if the designated constraints aren't met.
type GetFeaturesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeaturesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeaturesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeaturesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeaturesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeaturesRequestValidationError) ErrorName() string {
	return "GetFeaturesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeaturesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeaturesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeaturesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeaturesRequestValidationError{}

// Validate checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantResponseMultiError, or nil if none found.
func (m *CreateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateTenantResponseMultiError(errors)
	}

	return nil
}

// CreateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantResponseMultiError) AllErrors() []error { return m }

// CreateTenantResponseValidationError is the validation error returned by
// CreateTenantResponse.Validate if the designated constraints aren't met.
type CreateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantResponseValidationError) ErrorName() string {
	return "CreateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantResponseValidationError{}

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantGroup

	// no validation rules for Az

	// no validation rules for Env

	// no validation rules for ProjectId

	// no validation rules for ProjectName

	// no validation rules for AdminAddr

	// no validation rules for GatewayEndpoint

	// no validation rules for InnerAddr

	// no validation rules for ServiceName

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}

	return nil
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

// Validate checks the field values on GetTenantGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantGroupResponseMultiError, or nil if none found.
func (m *GetTenantGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetTenantGroupResponseMultiError(errors)
	}

	return nil
}

// GetTenantGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetTenantGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTenantGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantGroupResponseMultiError) AllErrors() []error { return m }

// GetTenantGroupResponseValidationError is the validation error returned by
// GetTenantGroupResponse.Validate if the designated constraints aren't met.
type GetTenantGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantGroupResponseValidationError) ErrorName() string {
	return "GetTenantGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantGroupResponseValidationError{}

// Validate checks the field values on GetTenantGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantGroupRequestMultiError, or nil if none found.
func (m *GetTenantGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if len(errors) > 0 {
		return GetTenantGroupRequestMultiError(errors)
	}

	return nil
}

// GetTenantGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetTenantGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantGroupRequestMultiError) AllErrors() []error { return m }

// GetTenantGroupRequestValidationError is the validation error returned by
// GetTenantGroupRequest.Validate if the designated constraints aren't met.
type GetTenantGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantGroupRequestValidationError) ErrorName() string {
	return "GetTenantGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantGroupRequestValidationError{}

// Validate checks the field values on HealthModule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthModule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthModule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthModuleMultiError, or
// nil if none found.
func (m *HealthModule) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthModule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return HealthModuleMultiError(errors)
	}

	return nil
}

// HealthModuleMultiError is an error wrapping multiple validation errors
// returned by HealthModule.ValidateAll() if the designated constraints aren't met.
type HealthModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthModuleMultiError) AllErrors() []error { return m }

// HealthModuleValidationError is the validation error returned by
// HealthModule.Validate if the designated constraints aren't met.
type HealthModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthModuleValidationError) ErrorName() string { return "HealthModuleValidationError" }

// Error satisfies the builtin error interface
func (e HealthModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthModuleValidationError{}

// Validate checks the field values on GetHealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthRequestMultiError, or nil if none found.
func (m *GetHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHealthRequestMultiError(errors)
	}

	return nil
}

// GetHealthRequestMultiError is an error wrapping multiple validation errors
// returned by GetHealthRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthRequestMultiError) AllErrors() []error { return m }

// GetHealthRequestValidationError is the validation error returned by
// GetHealthRequest.Validate if the designated constraints aren't met.
type GetHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthRequestValidationError) ErrorName() string { return "GetHealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthRequestValidationError{}

// Validate checks the field values on GetHealthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthResponseMultiError, or nil if none found.
func (m *GetHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHealthResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHealthResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHealthResponseValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetHealthResponseMultiError(errors)
	}

	return nil
}

// GetHealthResponseMultiError is an error wrapping multiple validation errors
// returned by GetHealthResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthResponseMultiError) AllErrors() []error { return m }

// GetHealthResponseValidationError is the validation error returned by
// GetHealthResponse.Validate if the designated constraints aren't met.
type GetHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthResponseValidationError) ErrorName() string {
	return "GetHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthResponseValidationError{}
