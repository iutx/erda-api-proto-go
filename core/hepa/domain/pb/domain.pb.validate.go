// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: domain.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTenantDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantDomainsRequestMultiError, or nil if none found.
func (m *GetTenantDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if len(errors) > 0 {
		return GetTenantDomainsRequestMultiError(errors)
	}

	return nil
}

// GetTenantDomainsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTenantDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantDomainsRequestMultiError) AllErrors() []error { return m }

// GetTenantDomainsRequestValidationError is the validation error returned by
// GetTenantDomainsRequest.Validate if the designated constraints aren't met.
type GetTenantDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantDomainsRequestValidationError) ErrorName() string {
	return "GetTenantDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantDomainsRequestValidationError{}

// Validate checks the field values on GetTenantDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantDomainsResponseMultiError, or nil if none found.
func (m *GetTenantDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTenantDomainsResponseMultiError(errors)
	}

	return nil
}

// GetTenantDomainsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTenantDomainsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTenantDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantDomainsResponseMultiError) AllErrors() []error { return m }

// GetTenantDomainsResponseValidationError is the validation error returned by
// GetTenantDomainsResponse.Validate if the designated constraints aren't met.
type GetTenantDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantDomainsResponseValidationError) ErrorName() string {
	return "GetTenantDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantDomainsResponseValidationError{}

// Validate checks the field values on ChangeRuntimeDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRuntimeDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRuntimeDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRuntimeDomainsRequestMultiError, or nil if none found.
func (m *ChangeRuntimeDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRuntimeDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	// no validation rules for ServiceName

	// no validation rules for ReleaseId

	if len(errors) > 0 {
		return ChangeRuntimeDomainsRequestMultiError(errors)
	}

	return nil
}

// ChangeRuntimeDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeRuntimeDomainsRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeRuntimeDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRuntimeDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRuntimeDomainsRequestMultiError) AllErrors() []error { return m }

// ChangeRuntimeDomainsRequestValidationError is the validation error returned
// by ChangeRuntimeDomainsRequest.Validate if the designated constraints
// aren't met.
type ChangeRuntimeDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRuntimeDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRuntimeDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRuntimeDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRuntimeDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRuntimeDomainsRequestValidationError) ErrorName() string {
	return "ChangeRuntimeDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRuntimeDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRuntimeDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRuntimeDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRuntimeDomainsRequestValidationError{}

// Validate checks the field values on ChangeRuntimeDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeRuntimeDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeRuntimeDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeRuntimeDomainsResponseMultiError, or nil if none found.
func (m *ChangeRuntimeDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeRuntimeDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeRuntimeDomainsResponseMultiError(errors)
	}

	return nil
}

// ChangeRuntimeDomainsResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeRuntimeDomainsResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeRuntimeDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeRuntimeDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeRuntimeDomainsResponseMultiError) AllErrors() []error { return m }

// ChangeRuntimeDomainsResponseValidationError is the validation error returned
// by ChangeRuntimeDomainsResponse.Validate if the designated constraints
// aren't met.
type ChangeRuntimeDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeRuntimeDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeRuntimeDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeRuntimeDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeRuntimeDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeRuntimeDomainsResponseValidationError) ErrorName() string {
	return "ChangeRuntimeDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeRuntimeDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeRuntimeDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeRuntimeDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeRuntimeDomainsResponseValidationError{}

// Validate checks the field values on GetRuntimeDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRuntimeDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuntimeDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuntimeDomainsResponseMultiError, or nil if none found.
func (m *GetRuntimeDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuntimeDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetRuntimeDomainsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetRuntimeDomainsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetRuntimeDomainsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetRuntimeDomainsResponseMultiError(errors)
	}

	return nil
}

// GetRuntimeDomainsResponseMultiError is an error wrapping multiple validation
// errors returned by GetRuntimeDomainsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetRuntimeDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuntimeDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuntimeDomainsResponseMultiError) AllErrors() []error { return m }

// GetRuntimeDomainsResponseValidationError is the validation error returned by
// GetRuntimeDomainsResponse.Validate if the designated constraints aren't met.
type GetRuntimeDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuntimeDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuntimeDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuntimeDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuntimeDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuntimeDomainsResponseValidationError) ErrorName() string {
	return "GetRuntimeDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuntimeDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuntimeDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuntimeDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuntimeDomainsResponseValidationError{}

// Validate checks the field values on GetRuntimeDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRuntimeDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuntimeDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuntimeDomainsRequestMultiError, or nil if none found.
func (m *GetRuntimeDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuntimeDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return GetRuntimeDomainsRequestMultiError(errors)
	}

	return nil
}

// GetRuntimeDomainsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRuntimeDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRuntimeDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuntimeDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuntimeDomainsRequestMultiError) AllErrors() []error { return m }

// GetRuntimeDomainsRequestValidationError is the validation error returned by
// GetRuntimeDomainsRequest.Validate if the designated constraints aren't met.
type GetRuntimeDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuntimeDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuntimeDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuntimeDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuntimeDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuntimeDomainsRequestValidationError) ErrorName() string {
	return "GetRuntimeDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuntimeDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuntimeDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuntimeDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuntimeDomainsRequestValidationError{}

// Validate checks the field values on ChangeInnerIngressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeInnerIngressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeInnerIngressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeInnerIngressResponseMultiError, or nil if none found.
func (m *ChangeInnerIngressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeInnerIngressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeInnerIngressResponseMultiError(errors)
	}

	return nil
}

// ChangeInnerIngressResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeInnerIngressResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeInnerIngressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeInnerIngressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeInnerIngressResponseMultiError) AllErrors() []error { return m }

// ChangeInnerIngressResponseValidationError is the validation error returned
// by ChangeInnerIngressResponse.Validate if the designated constraints aren't met.
type ChangeInnerIngressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeInnerIngressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeInnerIngressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeInnerIngressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeInnerIngressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeInnerIngressResponseValidationError) ErrorName() string {
	return "ChangeInnerIngressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeInnerIngressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeInnerIngressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeInnerIngressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeInnerIngressResponseValidationError{}

// Validate checks the field values on ChangeInnerIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeInnerIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeInnerIngressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeInnerIngressRequestMultiError, or nil if none found.
func (m *ChangeInnerIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeInnerIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for K8SNamespace

	// no validation rules for ComponentName

	// no validation rules for ComponentPort

	// no validation rules for ClusterName

	// no validation rules for IngressName

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeInnerIngressRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeInnerIngressRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeInnerIngressRequestValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRouteOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeInnerIngressRequestValidationError{
					field:  "RouteOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeInnerIngressRequestValidationError{
					field:  "RouteOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRouteOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeInnerIngressRequestValidationError{
				field:  "RouteOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeInnerIngressRequestMultiError(errors)
	}

	return nil
}

// ChangeInnerIngressRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeInnerIngressRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangeInnerIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeInnerIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeInnerIngressRequestMultiError) AllErrors() []error { return m }

// ChangeInnerIngressRequestValidationError is the validation error returned by
// ChangeInnerIngressRequest.Validate if the designated constraints aren't met.
type ChangeInnerIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeInnerIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeInnerIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeInnerIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeInnerIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeInnerIngressRequestValidationError) ErrorName() string {
	return "ChangeInnerIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeInnerIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeInnerIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeInnerIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeInnerIngressRequestValidationError{}

// Validate checks the field values on RouteOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouteOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouteOptionsMultiError, or
// nil if none found.
func (m *RouteOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RewriteHost

	// no validation rules for RewritePath

	// no validation rules for UseRegex

	if all {
		switch v := interface{}(m.GetEnableTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteOptionsValidationError{
					field:  "EnableTls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteOptionsValidationError{
					field:  "EnableTls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnableTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteOptionsValidationError{
				field:  "EnableTls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Annotations

	// no validation rules for LocationSnippet

	if len(errors) > 0 {
		return RouteOptionsMultiError(errors)
	}

	return nil
}

// RouteOptionsMultiError is an error wrapping multiple validation errors
// returned by RouteOptions.ValidateAll() if the designated constraints aren't met.
type RouteOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteOptionsMultiError) AllErrors() []error { return m }

// RouteOptionsValidationError is the validation error returned by
// RouteOptions.Validate if the designated constraints aren't met.
type RouteOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteOptionsValidationError) ErrorName() string { return "RouteOptionsValidationError" }

// Error satisfies the builtin error interface
func (e RouteOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteOptionsValidationError{}

// Validate checks the field values on IngressRoute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressRoute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressRoute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressRouteMultiError, or
// nil if none found.
func (m *IngressRoute) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressRoute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Path

	if len(errors) > 0 {
		return IngressRouteMultiError(errors)
	}

	return nil
}

// IngressRouteMultiError is an error wrapping multiple validation errors
// returned by IngressRoute.ValidateAll() if the designated constraints aren't met.
type IngressRouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressRouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressRouteMultiError) AllErrors() []error { return m }

// IngressRouteValidationError is the validation error returned by
// IngressRoute.Validate if the designated constraints aren't met.
type IngressRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressRouteValidationError) ErrorName() string { return "IngressRouteValidationError" }

// Error satisfies the builtin error interface
func (e IngressRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressRouteValidationError{}

// Validate checks the field values on GetOrgDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgDomainsRequestMultiError, or nil if none found.
func (m *GetOrgDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Domain

	// no validation rules for ClusterName

	// no validation rules for Type

	if len(errors) > 0 {
		return GetOrgDomainsRequestMultiError(errors)
	}

	return nil
}

// GetOrgDomainsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrgDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgDomainsRequestMultiError) AllErrors() []error { return m }

// GetOrgDomainsRequestValidationError is the validation error returned by
// GetOrgDomainsRequest.Validate if the designated constraints aren't met.
type GetOrgDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgDomainsRequestValidationError) ErrorName() string {
	return "GetOrgDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgDomainsRequestValidationError{}

// Validate checks the field values on GetOrgDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgDomainsResponseMultiError, or nil if none found.
func (m *GetOrgDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgDomainsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgDomainsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgDomainsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgDomainsResponseMultiError(errors)
	}

	return nil
}

// GetOrgDomainsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrgDomainsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrgDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgDomainsResponseMultiError) AllErrors() []error { return m }

// GetOrgDomainsResponseValidationError is the validation error returned by
// GetOrgDomainsResponse.Validate if the designated constraints aren't met.
type GetOrgDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgDomainsResponseValidationError) ErrorName() string {
	return "GetOrgDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgDomainsResponseValidationError{}
