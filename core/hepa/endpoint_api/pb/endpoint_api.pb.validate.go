// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: endpoint_api.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChangeEndpointRootResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeEndpointRootResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEndpointRootResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEndpointRootResponseMultiError, or nil if none found.
func (m *ChangeEndpointRootResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEndpointRootResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ChangeEndpointRootResponseMultiError(errors)
	}

	return nil
}

// ChangeEndpointRootResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeEndpointRootResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeEndpointRootResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEndpointRootResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEndpointRootResponseMultiError) AllErrors() []error { return m }

// ChangeEndpointRootResponseValidationError is the validation error returned
// by ChangeEndpointRootResponse.Validate if the designated constraints aren't met.
type ChangeEndpointRootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEndpointRootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEndpointRootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEndpointRootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEndpointRootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEndpointRootResponseValidationError) ErrorName() string {
	return "ChangeEndpointRootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEndpointRootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEndpointRootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEndpointRootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEndpointRootResponseValidationError{}

// Validate checks the field values on ChangeEndpointRootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeEndpointRootRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEndpointRootRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEndpointRootRequestMultiError, or nil if none found.
func (m *ChangeEndpointRootRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEndpointRootRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if all {
		switch v := interface{}(m.GetEndpointApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeEndpointRootRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeEndpointRootRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpointApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeEndpointRootRequestValidationError{
				field:  "EndpointApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeEndpointRootRequestMultiError(errors)
	}

	return nil
}

// ChangeEndpointRootRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeEndpointRootRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangeEndpointRootRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEndpointRootRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEndpointRootRequestMultiError) AllErrors() []error { return m }

// ChangeEndpointRootRequestValidationError is the validation error returned by
// ChangeEndpointRootRequest.Validate if the designated constraints aren't met.
type ChangeEndpointRootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEndpointRootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEndpointRootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEndpointRootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEndpointRootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEndpointRootRequestValidationError) ErrorName() string {
	return "ChangeEndpointRootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEndpointRootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEndpointRootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEndpointRootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEndpointRootRequestValidationError{}

// Validate checks the field values on DeleteEndpointApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEndpointApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEndpointApiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEndpointApiRequestMultiError, or nil if none found.
func (m *DeleteEndpointApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEndpointApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for ApiId

	if len(errors) > 0 {
		return DeleteEndpointApiRequestMultiError(errors)
	}

	return nil
}

// DeleteEndpointApiRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEndpointApiRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEndpointApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEndpointApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEndpointApiRequestMultiError) AllErrors() []error { return m }

// DeleteEndpointApiRequestValidationError is the validation error returned by
// DeleteEndpointApiRequest.Validate if the designated constraints aren't met.
type DeleteEndpointApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEndpointApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEndpointApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEndpointApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEndpointApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEndpointApiRequestValidationError) ErrorName() string {
	return "DeleteEndpointApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEndpointApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEndpointApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEndpointApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEndpointApiRequestValidationError{}

// Validate checks the field values on DeleteEndpointApiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEndpointApiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEndpointApiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEndpointApiResponseMultiError, or nil if none found.
func (m *DeleteEndpointApiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEndpointApiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteEndpointApiResponseMultiError(errors)
	}

	return nil
}

// DeleteEndpointApiResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEndpointApiResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteEndpointApiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEndpointApiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEndpointApiResponseMultiError) AllErrors() []error { return m }

// DeleteEndpointApiResponseValidationError is the validation error returned by
// DeleteEndpointApiResponse.Validate if the designated constraints aren't met.
type DeleteEndpointApiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEndpointApiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEndpointApiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEndpointApiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEndpointApiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEndpointApiResponseValidationError) ErrorName() string {
	return "DeleteEndpointApiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEndpointApiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEndpointApiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEndpointApiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEndpointApiResponseValidationError{}

// Validate checks the field values on UpdateEndpointApiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointApiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointApiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointApiResponseMultiError, or nil if none found.
func (m *UpdateEndpointApiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointApiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEndpointApiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEndpointApiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndpointApiResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEndpointApiResponseMultiError(errors)
	}

	return nil
}

// UpdateEndpointApiResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointApiResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateEndpointApiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointApiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointApiResponseMultiError) AllErrors() []error { return m }

// UpdateEndpointApiResponseValidationError is the validation error returned by
// UpdateEndpointApiResponse.Validate if the designated constraints aren't met.
type UpdateEndpointApiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointApiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointApiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointApiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointApiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointApiResponseValidationError) ErrorName() string {
	return "UpdateEndpointApiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointApiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointApiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointApiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointApiResponseValidationError{}

// Validate checks the field values on UpdateEndpointApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointApiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointApiRequestMultiError, or nil if none found.
func (m *UpdateEndpointApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for ApiId

	if all {
		switch v := interface{}(m.GetEndpointApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEndpointApiRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEndpointApiRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpointApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndpointApiRequestValidationError{
				field:  "EndpointApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEndpointApiRequestMultiError(errors)
	}

	return nil
}

// UpdateEndpointApiRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointApiRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndpointApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointApiRequestMultiError) AllErrors() []error { return m }

// UpdateEndpointApiRequestValidationError is the validation error returned by
// UpdateEndpointApiRequest.Validate if the designated constraints aren't met.
type UpdateEndpointApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointApiRequestValidationError) ErrorName() string {
	return "UpdateEndpointApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointApiRequestValidationError{}

// Validate checks the field values on CreateEndpointApiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEndpointApiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndpointApiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEndpointApiResponseMultiError, or nil if none found.
func (m *CreateEndpointApiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndpointApiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateEndpointApiResponseMultiError(errors)
	}

	return nil
}

// CreateEndpointApiResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEndpointApiResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateEndpointApiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndpointApiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndpointApiResponseMultiError) AllErrors() []error { return m }

// CreateEndpointApiResponseValidationError is the validation error returned by
// CreateEndpointApiResponse.Validate if the designated constraints aren't met.
type CreateEndpointApiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointApiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointApiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointApiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointApiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointApiResponseValidationError) ErrorName() string {
	return "CreateEndpointApiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointApiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointApiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointApiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointApiResponseValidationError{}

// Validate checks the field values on EndpointApi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndpointApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointApi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointApiMultiError, or
// nil if none found.
func (m *EndpointApi) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiPath

	// no validation rules for RedirectType

	// no validation rules for RedirectAddr

	// no validation rules for RedirectPath

	// no validation rules for RedirectApp

	// no validation rules for RedirectService

	// no validation rules for RedirectRuntimeId

	// no validation rules for RedirectRuntimeName

	if all {
		switch v := interface{}(m.GetMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndpointApiValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndpointApiValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndpointApiValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowPassAuth

	// no validation rules for Description

	// no validation rules for ApiId

	// no validation rules for CreateAt

	// no validation rules for DiceApp

	// no validation rules for DiceService

	// no validation rules for Origin

	// no validation rules for Mutable

	if len(errors) > 0 {
		return EndpointApiMultiError(errors)
	}

	return nil
}

// EndpointApiMultiError is an error wrapping multiple validation errors
// returned by EndpointApi.ValidateAll() if the designated constraints aren't met.
type EndpointApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointApiMultiError) AllErrors() []error { return m }

// EndpointApiValidationError is the validation error returned by
// EndpointApi.Validate if the designated constraints aren't met.
type EndpointApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointApiValidationError) ErrorName() string { return "EndpointApiValidationError" }

// Error satisfies the builtin error interface
func (e EndpointApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointApiValidationError{}

// Validate checks the field values on CreateEndpointApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEndpointApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndpointApiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEndpointApiRequestMultiError, or nil if none found.
func (m *CreateEndpointApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndpointApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if all {
		switch v := interface{}(m.GetEndpointApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEndpointApiRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEndpointApiRequestValidationError{
					field:  "EndpointApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpointApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEndpointApiRequestValidationError{
				field:  "EndpointApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEndpointApiRequestMultiError(errors)
	}

	return nil
}

// CreateEndpointApiRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEndpointApiRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEndpointApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndpointApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndpointApiRequestMultiError) AllErrors() []error { return m }

// CreateEndpointApiRequestValidationError is the validation error returned by
// CreateEndpointApiRequest.Validate if the designated constraints aren't met.
type CreateEndpointApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointApiRequestValidationError) ErrorName() string {
	return "CreateEndpointApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointApiRequestValidationError{}

// Validate checks the field values on GetEndpointApisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointApisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointApisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointApisRequestMultiError, or nil if none found.
func (m *GetEndpointApisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointApisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for ApiPath

	// no validation rules for Method

	// no validation rules for Origin

	// no validation rules for DiceApp

	// no validation rules for DiceService

	// no validation rules for SortField

	// no validation rules for SortType

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetEndpointApisRequestMultiError(errors)
	}

	return nil
}

// GetEndpointApisRequestMultiError is an error wrapping multiple validation
// errors returned by GetEndpointApisRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointApisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointApisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointApisRequestMultiError) AllErrors() []error { return m }

// GetEndpointApisRequestValidationError is the validation error returned by
// GetEndpointApisRequest.Validate if the designated constraints aren't met.
type GetEndpointApisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointApisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointApisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointApisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointApisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointApisRequestValidationError) ErrorName() string {
	return "GetEndpointApisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointApisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointApisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointApisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointApisRequestValidationError{}

// Validate checks the field values on GetEndpointApisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointApisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointApisResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointApisResponseMultiError, or nil if none found.
func (m *GetEndpointApisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointApisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEndpointApisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEndpointApisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEndpointApisResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEndpointApisResponseMultiError(errors)
	}

	return nil
}

// GetEndpointApisResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointApisResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointApisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointApisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointApisResponseMultiError) AllErrors() []error { return m }

// GetEndpointApisResponseValidationError is the validation error returned by
// GetEndpointApisResponse.Validate if the designated constraints aren't met.
type GetEndpointApisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointApisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointApisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointApisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointApisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointApisResponseValidationError) ErrorName() string {
	return "GetEndpointApisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointApisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointApisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointApisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointApisResponseValidationError{}

// Validate checks the field values on DeleteEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEndpointRequestMultiError, or nil if none found.
func (m *DeleteEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return DeleteEndpointRequestMultiError(errors)
	}

	return nil
}

// DeleteEndpointRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEndpointRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEndpointRequestMultiError) AllErrors() []error { return m }

// DeleteEndpointRequestValidationError is the validation error returned by
// DeleteEndpointRequest.Validate if the designated constraints aren't met.
type DeleteEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEndpointRequestValidationError) ErrorName() string {
	return "DeleteEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEndpointRequestValidationError{}

// Validate checks the field values on DeleteEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEndpointResponseMultiError, or nil if none found.
func (m *DeleteEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteEndpointResponseMultiError(errors)
	}

	return nil
}

// DeleteEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEndpointResponseMultiError) AllErrors() []error { return m }

// DeleteEndpointResponseValidationError is the validation error returned by
// DeleteEndpointResponse.Validate if the designated constraints aren't met.
type DeleteEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEndpointResponseValidationError) ErrorName() string {
	return "DeleteEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEndpointResponseValidationError{}

// Validate checks the field values on UpdateEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointResponseMultiError, or nil if none found.
func (m *UpdateEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndpointResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEndpointResponseMultiError(errors)
	}

	return nil
}

// UpdateEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointResponseMultiError) AllErrors() []error { return m }

// UpdateEndpointResponseValidationError is the validation error returned by
// UpdateEndpointResponse.Validate if the designated constraints aren't met.
type UpdateEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointResponseValidationError) ErrorName() string {
	return "UpdateEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointResponseValidationError{}

// Validate checks the field values on UpdateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointRequestMultiError, or nil if none found.
func (m *UpdateEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEndpointRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEndpointRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEndpointRequestValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEndpointRequestMultiError(errors)
	}

	return nil
}

// UpdateEndpointRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointRequestMultiError) AllErrors() []error { return m }

// UpdateEndpointRequestValidationError is the validation error returned by
// UpdateEndpointRequest.Validate if the designated constraints aren't met.
type UpdateEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointRequestValidationError) ErrorName() string {
	return "UpdateEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointRequestValidationError{}

// Validate checks the field values on CreateEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEndpointResponseMultiError, or nil if none found.
func (m *CreateEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEndpointResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEndpointResponseMultiError(errors)
	}

	return nil
}

// CreateEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndpointResponseMultiError) AllErrors() []error { return m }

// CreateEndpointResponseValidationError is the validation error returned by
// CreateEndpointResponse.Validate if the designated constraints aren't met.
type CreateEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointResponseValidationError) ErrorName() string {
	return "CreateEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointResponseValidationError{}

// Validate checks the field values on CreateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEndpointRequestMultiError, or nil if none found.
func (m *CreateEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEndpointRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEndpointRequestValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEndpointRequestValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEndpointRequestMultiError(errors)
	}

	return nil
}

// CreateEndpointRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEndpointRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndpointRequestMultiError) AllErrors() []error { return m }

// CreateEndpointRequestValidationError is the validation error returned by
// CreateEndpointRequest.Validate if the designated constraints aren't met.
type CreateEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointRequestValidationError) ErrorName() string {
	return "CreateEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointRequestValidationError{}

// Validate checks the field values on GetEndpointsNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointsNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointsNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointsNameRequestMultiError, or nil if none found.
func (m *GetEndpointsNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointsNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Env

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetEndpointsNameRequestMultiError(errors)
	}

	return nil
}

// GetEndpointsNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetEndpointsNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointsNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointsNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointsNameRequestMultiError) AllErrors() []error { return m }

// GetEndpointsNameRequestValidationError is the validation error returned by
// GetEndpointsNameRequest.Validate if the designated constraints aren't met.
type GetEndpointsNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointsNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointsNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointsNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointsNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointsNameRequestValidationError) ErrorName() string {
	return "GetEndpointsNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointsNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointsNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointsNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointsNameRequestValidationError{}

// Validate checks the field values on Endpoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointMultiError, or nil
// if none found.
func (m *Endpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateAt

	// no validation rules for Name

	// no validation rules for AuthType

	// no validation rules for AclType

	// no validation rules for Scene

	// no validation rules for Description

	if len(errors) > 0 {
		return EndpointMultiError(errors)
	}

	return nil
}

// EndpointMultiError is an error wrapping multiple validation errors returned
// by Endpoint.ValidateAll() if the designated constraints aren't met.
type EndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointMultiError) AllErrors() []error { return m }

// EndpointValidationError is the validation error returned by
// Endpoint.Validate if the designated constraints aren't met.
type EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointValidationError) ErrorName() string { return "EndpointValidationError" }

// Error satisfies the builtin error interface
func (e EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointValidationError{}

// Validate checks the field values on GetEndpointsNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointsNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointsNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointsNameResponseMultiError, or nil if none found.
func (m *GetEndpointsNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointsNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEndpointsNameResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEndpointsNameResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEndpointsNameResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEndpointsNameResponseMultiError(errors)
	}

	return nil
}

// GetEndpointsNameResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointsNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointsNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointsNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointsNameResponseMultiError) AllErrors() []error { return m }

// GetEndpointsNameResponseValidationError is the validation error returned by
// GetEndpointsNameResponse.Validate if the designated constraints aren't met.
type GetEndpointsNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointsNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointsNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointsNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointsNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointsNameResponseValidationError) ErrorName() string {
	return "GetEndpointsNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointsNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointsNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointsNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointsNameResponseValidationError{}

// Validate checks the field values on GetEndpointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointsRequestMultiError, or nil if none found.
func (m *GetEndpointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for SortField

	// no validation rules for SortType

	// no validation rules for Domain

	if len(errors) > 0 {
		return GetEndpointsRequestMultiError(errors)
	}

	return nil
}

// GetEndpointsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEndpointsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointsRequestMultiError) AllErrors() []error { return m }

// GetEndpointsRequestValidationError is the validation error returned by
// GetEndpointsRequest.Validate if the designated constraints aren't met.
type GetEndpointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointsRequestValidationError) ErrorName() string {
	return "GetEndpointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointsRequestValidationError{}

// Validate checks the field values on GetEndpointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointsResponseMultiError, or nil if none found.
func (m *GetEndpointsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEndpointsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEndpointsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEndpointsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEndpointsResponseMultiError(errors)
	}

	return nil
}

// GetEndpointsResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointsResponseMultiError) AllErrors() []error { return m }

// GetEndpointsResponseValidationError is the validation error returned by
// GetEndpointsResponse.Validate if the designated constraints aren't met.
type GetEndpointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointsResponseValidationError) ErrorName() string {
	return "GetEndpointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointsResponseValidationError{}

// Validate checks the field values on GetEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointRequestMultiError, or nil if none found.
func (m *GetEndpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return GetEndpointRequestMultiError(errors)
	}

	return nil
}

// GetEndpointRequestMultiError is an error wrapping multiple validation errors
// returned by GetEndpointRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEndpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointRequestMultiError) AllErrors() []error { return m }

// GetEndpointRequestValidationError is the validation error returned by
// GetEndpointRequest.Validate if the designated constraints aren't met.
type GetEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointRequestValidationError) ErrorName() string {
	return "GetEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointRequestValidationError{}

// Validate checks the field values on GetEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointResponseMultiError, or nil if none found.
func (m *GetEndpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEndpointResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEndpointResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEndpointResponseMultiError(errors)
	}

	return nil
}

// GetEndpointResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointResponseMultiError) AllErrors() []error { return m }

// GetEndpointResponseValidationError is the validation error returned by
// GetEndpointResponse.Validate if the designated constraints aren't met.
type GetEndpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointResponseValidationError) ErrorName() string {
	return "GetEndpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointResponseValidationError{}

// Validate checks the field values on ListInvalidEndpointApiReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvalidEndpointApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvalidEndpointApiReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvalidEndpointApiReqMultiError, or nil if none found.
func (m *ListInvalidEndpointApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvalidEndpointApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ListInvalidEndpointApiReqMultiError(errors)
	}

	return nil
}

// ListInvalidEndpointApiReqMultiError is an error wrapping multiple validation
// errors returned by ListInvalidEndpointApiReq.ValidateAll() if the
// designated constraints aren't met.
type ListInvalidEndpointApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvalidEndpointApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvalidEndpointApiReqMultiError) AllErrors() []error { return m }

// ListInvalidEndpointApiReqValidationError is the validation error returned by
// ListInvalidEndpointApiReq.Validate if the designated constraints aren't met.
type ListInvalidEndpointApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvalidEndpointApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvalidEndpointApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvalidEndpointApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvalidEndpointApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvalidEndpointApiReqValidationError) ErrorName() string {
	return "ListInvalidEndpointApiReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvalidEndpointApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvalidEndpointApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvalidEndpointApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvalidEndpointApiReqValidationError{}

// Validate checks the field values on ListInvalidEndpointApiResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvalidEndpointApiResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvalidEndpointApiResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvalidEndpointApiRespMultiError, or nil if none found.
func (m *ListInvalidEndpointApiResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvalidEndpointApiResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for TotalProjectIsInvalid

	// no validation rules for TotalRuntimeIsInvalid

	// no validation rules for TotalInnerAddrIsInvalid

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInvalidEndpointApiRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInvalidEndpointApiRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvalidEndpointApiRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInvalidEndpointApiRespMultiError(errors)
	}

	return nil
}

// ListInvalidEndpointApiRespMultiError is an error wrapping multiple
// validation errors returned by ListInvalidEndpointApiResp.ValidateAll() if
// the designated constraints aren't met.
type ListInvalidEndpointApiRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvalidEndpointApiRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvalidEndpointApiRespMultiError) AllErrors() []error { return m }

// ListInvalidEndpointApiRespValidationError is the validation error returned
// by ListInvalidEndpointApiResp.Validate if the designated constraints aren't met.
type ListInvalidEndpointApiRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvalidEndpointApiRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvalidEndpointApiRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvalidEndpointApiRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvalidEndpointApiRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvalidEndpointApiRespValidationError) ErrorName() string {
	return "ListInvalidEndpointApiRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvalidEndpointApiRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvalidEndpointApiResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvalidEndpointApiRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvalidEndpointApiRespValidationError{}

// Validate checks the field values on ListInvalidEndpointApiItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvalidEndpointApiItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvalidEndpointApiItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvalidEndpointApiItemMultiError, or nil if none found.
func (m *ListInvalidEndpointApiItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvalidEndpointApiItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvalidReason

	// no validation rules for Type

	// no validation rules for ProjectID

	// no validation rules for PackageID

	// no validation rules for PackageApiID

	// no validation rules for RuntimeID

	// no validation rules for InnerHostname

	// no validation rules for KongRouteID

	// no validation rules for KongServiceID

	// no validation rules for ClusterName

	// no validation rules for RouteDeleting

	// no validation rules for ServiceDeleting

	if len(errors) > 0 {
		return ListInvalidEndpointApiItemMultiError(errors)
	}

	return nil
}

// ListInvalidEndpointApiItemMultiError is an error wrapping multiple
// validation errors returned by ListInvalidEndpointApiItem.ValidateAll() if
// the designated constraints aren't met.
type ListInvalidEndpointApiItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvalidEndpointApiItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvalidEndpointApiItemMultiError) AllErrors() []error { return m }

// ListInvalidEndpointApiItemValidationError is the validation error returned
// by ListInvalidEndpointApiItem.Validate if the designated constraints aren't met.
type ListInvalidEndpointApiItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvalidEndpointApiItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvalidEndpointApiItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvalidEndpointApiItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvalidEndpointApiItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvalidEndpointApiItemValidationError) ErrorName() string {
	return "ListInvalidEndpointApiItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvalidEndpointApiItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvalidEndpointApiItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvalidEndpointApiItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvalidEndpointApiItemValidationError{}

// Validate checks the field values on ListAllCrontabsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllCrontabsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllCrontabsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllCrontabsRespMultiError, or nil if none found.
func (m *ListAllCrontabsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllCrontabsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllCrontabsRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllCrontabsRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllCrontabsRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllCrontabsRespMultiError(errors)
	}

	return nil
}

// ListAllCrontabsRespMultiError is an error wrapping multiple validation
// errors returned by ListAllCrontabsResp.ValidateAll() if the designated
// constraints aren't met.
type ListAllCrontabsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllCrontabsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllCrontabsRespMultiError) AllErrors() []error { return m }

// ListAllCrontabsRespValidationError is the validation error returned by
// ListAllCrontabsResp.Validate if the designated constraints aren't met.
type ListAllCrontabsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllCrontabsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllCrontabsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllCrontabsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllCrontabsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllCrontabsRespValidationError) ErrorName() string {
	return "ListAllCrontabsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllCrontabsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllCrontabsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllCrontabsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllCrontabsRespValidationError{}

// Validate checks the field values on ListAllCrontabsRespItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllCrontabsRespItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllCrontabsRespItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllCrontabsRespItemMultiError, or nil if none found.
func (m *ListAllCrontabsRespItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllCrontabsRespItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Running

	// no validation rules for LastTime

	// no validation rules for NextTime

	// no validation rules for ExecTimes

	if len(errors) > 0 {
		return ListAllCrontabsRespItemMultiError(errors)
	}

	return nil
}

// ListAllCrontabsRespItemMultiError is an error wrapping multiple validation
// errors returned by ListAllCrontabsRespItem.ValidateAll() if the designated
// constraints aren't met.
type ListAllCrontabsRespItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllCrontabsRespItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllCrontabsRespItemMultiError) AllErrors() []error { return m }

// ListAllCrontabsRespItemValidationError is the validation error returned by
// ListAllCrontabsRespItem.Validate if the designated constraints aren't met.
type ListAllCrontabsRespItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllCrontabsRespItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllCrontabsRespItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllCrontabsRespItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllCrontabsRespItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllCrontabsRespItemValidationError) ErrorName() string {
	return "ListAllCrontabsRespItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllCrontabsRespItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllCrontabsRespItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllCrontabsRespItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllCrontabsRespItemValidationError{}

// Validate checks the field values on ListPackageApisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackageApisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackageApisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackageApisReqMultiError, or nil if none found.
func (m *ListPackageApisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackageApisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for Domain

	// no validation rules for DeleteMode

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPackageApisReqValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPackageApisReqValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPackageApisReqValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Address

	if len(errors) > 0 {
		return ListPackageApisReqMultiError(errors)
	}

	return nil
}

// ListPackageApisReqMultiError is an error wrapping multiple validation errors
// returned by ListPackageApisReq.ValidateAll() if the designated constraints
// aren't met.
type ListPackageApisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackageApisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackageApisReqMultiError) AllErrors() []error { return m }

// ListPackageApisReqValidationError is the validation error returned by
// ListPackageApisReq.Validate if the designated constraints aren't met.
type ListPackageApisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackageApisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackageApisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackageApisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackageApisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackageApisReqValidationError) ErrorName() string {
	return "ListPackageApisReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackageApisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackageApisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackageApisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackageApisReqValidationError{}

// Validate checks the field values on ListPackageApiItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackageApiItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackageApiItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackageApiItemMultiError, or nil if none found.
func (m *ListPackageApiItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackageApiItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Address

	if len(errors) > 0 {
		return ListPackageApiItemMultiError(errors)
	}

	return nil
}

// ListPackageApiItemMultiError is an error wrapping multiple validation errors
// returned by ListPackageApiItem.ValidateAll() if the designated constraints
// aren't met.
type ListPackageApiItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackageApiItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackageApiItemMultiError) AllErrors() []error { return m }

// ListPackageApiItemValidationError is the validation error returned by
// ListPackageApiItem.Validate if the designated constraints aren't met.
type ListPackageApiItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackageApiItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackageApiItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackageApiItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackageApiItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackageApiItemValidationError) ErrorName() string {
	return "ListPackageApiItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackageApiItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackageApiItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackageApiItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackageApiItemValidationError{}

// Validate checks the field values on ListPackageApisResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPackageApisResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPackageApisResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPackageApisRespMultiError, or nil if none found.
func (m *ListPackageApisResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPackageApisResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPackageApisRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPackageApisRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPackageApisRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPackageApisRespMultiError(errors)
	}

	return nil
}

// ListPackageApisRespMultiError is an error wrapping multiple validation
// errors returned by ListPackageApisResp.ValidateAll() if the designated
// constraints aren't met.
type ListPackageApisRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPackageApisRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPackageApisRespMultiError) AllErrors() []error { return m }

// ListPackageApisRespValidationError is the validation error returned by
// ListPackageApisResp.Validate if the designated constraints aren't met.
type ListPackageApisRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackageApisRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackageApisRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackageApisRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackageApisRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackageApisRespValidationError) ErrorName() string {
	return "ListPackageApisRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackageApisRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackageApisResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackageApisRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackageApisRespValidationError{}

// Validate checks the field values on DeletePackageApiResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePackageApiResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePackageApiResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePackageApiRespMultiError, or nil if none found.
func (m *DeletePackageApiResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePackageApiResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeletePackageApiRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeletePackageApiRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeletePackageApiRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeletePackageApiRespMultiError(errors)
	}

	return nil
}

// DeletePackageApiRespMultiError is an error wrapping multiple validation
// errors returned by DeletePackageApiResp.ValidateAll() if the designated
// constraints aren't met.
type DeletePackageApiRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePackageApiRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePackageApiRespMultiError) AllErrors() []error { return m }

// DeletePackageApiRespValidationError is the validation error returned by
// DeletePackageApiResp.Validate if the designated constraints aren't met.
type DeletePackageApiRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageApiRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageApiRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageApiRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageApiRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageApiRespValidationError) ErrorName() string {
	return "DeletePackageApiRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageApiRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageApiResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageApiRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageApiRespValidationError{}

// Validate checks the field values on DeletePackageApiRespPath with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePackageApiRespPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePackageApiRespPath with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePackageApiRespPathMultiError, or nil if none found.
func (m *DeletePackageApiRespPath) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePackageApiRespPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePackageApiRespPathValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePackageApiRespPathValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePackageApiRespPathValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePackageApiRespPathMultiError(errors)
	}

	return nil
}

// DeletePackageApiRespPathMultiError is an error wrapping multiple validation
// errors returned by DeletePackageApiRespPath.ValidateAll() if the designated
// constraints aren't met.
type DeletePackageApiRespPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePackageApiRespPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePackageApiRespPathMultiError) AllErrors() []error { return m }

// DeletePackageApiRespPathValidationError is the validation error returned by
// DeletePackageApiRespPath.Validate if the designated constraints aren't met.
type DeletePackageApiRespPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageApiRespPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageApiRespPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageApiRespPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageApiRespPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageApiRespPathValidationError) ErrorName() string {
	return "DeletePackageApiRespPathValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageApiRespPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageApiRespPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageApiRespPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageApiRespPathValidationError{}
