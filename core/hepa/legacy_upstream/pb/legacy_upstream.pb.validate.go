// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: legacy_upstream.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AsyncRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AsyncRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncRegisterResponseMultiError, or nil if none found.
func (m *AsyncRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AsyncRegisterResponseMultiError(errors)
	}

	return nil
}

// AsyncRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by AsyncRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type AsyncRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncRegisterResponseMultiError) AllErrors() []error { return m }

// AsyncRegisterResponseValidationError is the validation error returned by
// AsyncRegisterResponse.Validate if the designated constraints aren't met.
type AsyncRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncRegisterResponseValidationError) ErrorName() string {
	return "AsyncRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AsyncRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncRegisterResponseValidationError{}

// Validate checks the field values on AsyncRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AsyncRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncRegisterRequestMultiError, or nil if none found.
func (m *AsyncRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpstream()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AsyncRegisterRequestValidationError{
					field:  "Upstream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AsyncRegisterRequestValidationError{
					field:  "Upstream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpstream()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AsyncRegisterRequestValidationError{
				field:  "Upstream",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AsyncRegisterRequestMultiError(errors)
	}

	return nil
}

// AsyncRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by AsyncRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type AsyncRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncRegisterRequestMultiError) AllErrors() []error { return m }

// AsyncRegisterRequestValidationError is the validation error returned by
// AsyncRegisterRequest.Validate if the designated constraints aren't met.
type AsyncRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncRegisterRequestValidationError) ErrorName() string {
	return "AsyncRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AsyncRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncRegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpstream()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Upstream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Upstream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpstream()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "Upstream",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on UpstreamApi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpstreamApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpstreamApi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpstreamApiMultiError, or
// nil if none found.
func (m *UpstreamApi) ValidateAll() error {
	return m.validate(true)
}

func (m *UpstreamApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for GatewayPath

	// no validation rules for Method

	// no validation rules for Address

	// no validation rules for IsInner

	// no validation rules for IsCustom

	if all {
		switch v := interface{}(m.GetDoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpstreamApiValidationError{
					field:  "Doc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpstreamApiValidationError{
					field:  "Doc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamApiValidationError{
				field:  "Doc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Domain

	if len(errors) > 0 {
		return UpstreamApiMultiError(errors)
	}

	return nil
}

// UpstreamApiMultiError is an error wrapping multiple validation errors
// returned by UpstreamApi.ValidateAll() if the designated constraints aren't met.
type UpstreamApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamApiMultiError) AllErrors() []error { return m }

// UpstreamApiValidationError is the validation error returned by
// UpstreamApi.Validate if the designated constraints aren't met.
type UpstreamApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamApiValidationError) ErrorName() string { return "UpstreamApiValidationError" }

// Error satisfies the builtin error interface
func (e UpstreamApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstreamApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamApiValidationError{}

// Validate checks the field values on Upstream with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Upstream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Upstream with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpstreamMultiError, or nil
// if none found.
func (m *Upstream) ValidateAll() error {
	return m.validate(true)
}

func (m *Upstream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Az

	// no validation rules for DiceAppId

	// no validation rules for DiceService

	// no validation rules for RuntimeName

	// no validation rules for RuntimeId

	// no validation rules for AppName

	// no validation rules for ServiceName

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for Env

	for idx, item := range m.GetApiList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpstreamValidationError{
						field:  fmt.Sprintf("ApiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpstreamValidationError{
						field:  fmt.Sprintf("ApiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpstreamValidationError{
					field:  fmt.Sprintf("ApiList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RegisterId

	// no validation rules for RegisterTag

	// no validation rules for PathPrefix

	// no validation rules for Scene

	// no validation rules for OnlyRuntimePath

	// no validation rules for Oflag

	if len(errors) > 0 {
		return UpstreamMultiError(errors)
	}

	return nil
}

// UpstreamMultiError is an error wrapping multiple validation errors returned
// by Upstream.ValidateAll() if the designated constraints aren't met.
type UpstreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamMultiError) AllErrors() []error { return m }

// UpstreamValidationError is the validation error returned by
// Upstream.Validate if the designated constraints aren't met.
type UpstreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamValidationError) ErrorName() string { return "UpstreamValidationError" }

// Error satisfies the builtin error interface
func (e UpstreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamValidationError{}
