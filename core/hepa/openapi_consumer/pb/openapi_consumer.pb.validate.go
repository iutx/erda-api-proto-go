// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openapi_consumer.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateEndpointApiAclResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointApiAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointApiAclResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointApiAclResponseMultiError, or nil if none found.
func (m *UpdateEndpointApiAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointApiAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateEndpointApiAclResponseMultiError(errors)
	}

	return nil
}

// UpdateEndpointApiAclResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateEndpointApiAclResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateEndpointApiAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointApiAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointApiAclResponseMultiError) AllErrors() []error { return m }

// UpdateEndpointApiAclResponseValidationError is the validation error returned
// by UpdateEndpointApiAclResponse.Validate if the designated constraints
// aren't met.
type UpdateEndpointApiAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointApiAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointApiAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointApiAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointApiAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointApiAclResponseValidationError) ErrorName() string {
	return "UpdateEndpointApiAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointApiAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointApiAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointApiAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointApiAclResponseValidationError{}

// Validate checks the field values on UpdateEndpointApiAclRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointApiAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointApiAclRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointApiAclRequestMultiError, or nil if none found.
func (m *UpdateEndpointApiAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointApiAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for ApiId

	if len(errors) > 0 {
		return UpdateEndpointApiAclRequestMultiError(errors)
	}

	return nil
}

// UpdateEndpointApiAclRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEndpointApiAclRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateEndpointApiAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointApiAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointApiAclRequestMultiError) AllErrors() []error { return m }

// UpdateEndpointApiAclRequestValidationError is the validation error returned
// by UpdateEndpointApiAclRequest.Validate if the designated constraints
// aren't met.
type UpdateEndpointApiAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointApiAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointApiAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointApiAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointApiAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointApiAclRequestValidationError) ErrorName() string {
	return "UpdateEndpointApiAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointApiAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointApiAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointApiAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointApiAclRequestValidationError{}

// Validate checks the field values on GetEndpointApiAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointApiAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointApiAclResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointApiAclResponseMultiError, or nil if none found.
func (m *GetEndpointApiAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointApiAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEndpointApiAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEndpointApiAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEndpointApiAclResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEndpointApiAclResponseMultiError(errors)
	}

	return nil
}

// GetEndpointApiAclResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointApiAclResponse.ValidateAll() if the
// designated constraints aren't met.
type GetEndpointApiAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointApiAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointApiAclResponseMultiError) AllErrors() []error { return m }

// GetEndpointApiAclResponseValidationError is the validation error returned by
// GetEndpointApiAclResponse.Validate if the designated constraints aren't met.
type GetEndpointApiAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointApiAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointApiAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointApiAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointApiAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointApiAclResponseValidationError) ErrorName() string {
	return "GetEndpointApiAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointApiAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointApiAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointApiAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointApiAclResponseValidationError{}

// Validate checks the field values on GetEndpointApiAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointApiAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointApiAclRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointApiAclRequestMultiError, or nil if none found.
func (m *GetEndpointApiAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointApiAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for ApiId

	if len(errors) > 0 {
		return GetEndpointApiAclRequestMultiError(errors)
	}

	return nil
}

// GetEndpointApiAclRequestMultiError is an error wrapping multiple validation
// errors returned by GetEndpointApiAclRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointApiAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointApiAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointApiAclRequestMultiError) AllErrors() []error { return m }

// GetEndpointApiAclRequestValidationError is the validation error returned by
// GetEndpointApiAclRequest.Validate if the designated constraints aren't met.
type GetEndpointApiAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointApiAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointApiAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointApiAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointApiAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointApiAclRequestValidationError) ErrorName() string {
	return "GetEndpointApiAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointApiAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointApiAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointApiAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointApiAclRequestValidationError{}

// Validate checks the field values on UpdateEndpointAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointAclResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointAclResponseMultiError, or nil if none found.
func (m *UpdateEndpointAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateEndpointAclResponseMultiError(errors)
	}

	return nil
}

// UpdateEndpointAclResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointAclResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateEndpointAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointAclResponseMultiError) AllErrors() []error { return m }

// UpdateEndpointAclResponseValidationError is the validation error returned by
// UpdateEndpointAclResponse.Validate if the designated constraints aren't met.
type UpdateEndpointAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointAclResponseValidationError) ErrorName() string {
	return "UpdateEndpointAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointAclResponseValidationError{}

// Validate checks the field values on UpdateEndpointAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEndpointAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndpointAclRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEndpointAclRequestMultiError, or nil if none found.
func (m *UpdateEndpointAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndpointAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return UpdateEndpointAclRequestMultiError(errors)
	}

	return nil
}

// UpdateEndpointAclRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEndpointAclRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndpointAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndpointAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndpointAclRequestMultiError) AllErrors() []error { return m }

// UpdateEndpointAclRequestValidationError is the validation error returned by
// UpdateEndpointAclRequest.Validate if the designated constraints aren't met.
type UpdateEndpointAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndpointAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndpointAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndpointAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndpointAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndpointAclRequestValidationError) ErrorName() string {
	return "UpdateEndpointAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndpointAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndpointAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndpointAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndpointAclRequestValidationError{}

// Validate checks the field values on GetEndpointAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointAclRequestMultiError, or nil if none found.
func (m *GetEndpointAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return GetEndpointAclRequestMultiError(errors)
	}

	return nil
}

// GetEndpointAclRequestMultiError is an error wrapping multiple validation
// errors returned by GetEndpointAclRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointAclRequestMultiError) AllErrors() []error { return m }

// GetEndpointAclRequestValidationError is the validation error returned by
// GetEndpointAclRequest.Validate if the designated constraints aren't met.
type GetEndpointAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointAclRequestValidationError) ErrorName() string {
	return "GetEndpointAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointAclRequestValidationError{}

// Validate checks the field values on GetEndpointAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointAclResponseMultiError, or nil if none found.
func (m *GetEndpointAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEndpointAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEndpointAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEndpointAclResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEndpointAclResponseMultiError(errors)
	}

	return nil
}

// GetEndpointAclResponseMultiError is an error wrapping multiple validation
// errors returned by GetEndpointAclResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEndpointAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointAclResponseMultiError) AllErrors() []error { return m }

// GetEndpointAclResponseValidationError is the validation error returned by
// GetEndpointAclResponse.Validate if the designated constraints aren't met.
type GetEndpointAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointAclResponseValidationError) ErrorName() string {
	return "GetEndpointAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointAclResponseValidationError{}

// Validate checks the field values on UpdateConsumerAuthResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerAuthResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerAuthResponseMultiError, or nil if none found.
func (m *UpdateConsumerAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerAuthResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerAuthResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerAuthResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerAuthResponseMultiError(errors)
	}

	return nil
}

// UpdateConsumerAuthResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateConsumerAuthResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateConsumerAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerAuthResponseMultiError) AllErrors() []error { return m }

// UpdateConsumerAuthResponseValidationError is the validation error returned
// by UpdateConsumerAuthResponse.Validate if the designated constraints aren't met.
type UpdateConsumerAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerAuthResponseValidationError) ErrorName() string {
	return "UpdateConsumerAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerAuthResponseValidationError{}

// Validate checks the field values on UpdateConsumerAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerAuthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerAuthRequestMultiError, or nil if none found.
func (m *UpdateConsumerAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerAuthRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerAuthRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerAuthRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerAuthRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerAuthRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerAuthRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateConsumerAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerAuthRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerAuthRequestValidationError is the validation error returned by
// UpdateConsumerAuthRequest.Validate if the designated constraints aren't met.
type UpdateConsumerAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerAuthRequestValidationError) ErrorName() string {
	return "UpdateConsumerAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerAuthRequestValidationError{}

// Validate checks the field values on Credential with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credential) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credential with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CredentialMultiError, or
// nil if none found.
func (m *Credential) ValidateAll() error {
	return m.validate(true)
}

func (m *Credential) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	// no validation rules for CreatedAt

	// no validation rules for Id

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetRedirectUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CredentialValidationError{
					field:  "RedirectUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CredentialValidationError{
					field:  "RedirectUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedirectUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CredentialValidationError{
				field:  "RedirectUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for Secret

	// no validation rules for Username

	if len(errors) > 0 {
		return CredentialMultiError(errors)
	}

	return nil
}

// CredentialMultiError is an error wrapping multiple validation errors
// returned by Credential.ValidateAll() if the designated constraints aren't met.
type CredentialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CredentialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CredentialMultiError) AllErrors() []error { return m }

// CredentialValidationError is the validation error returned by
// Credential.Validate if the designated constraints aren't met.
type CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialValidationError) ErrorName() string { return "CredentialValidationError" }

// Error satisfies the builtin error interface
func (e CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialValidationError{}

// Validate checks the field values on CredentialList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CredentialList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CredentialList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CredentialListMultiError,
// or nil if none found.
func (m *CredentialList) ValidateAll() error {
	return m.validate(true)
}

func (m *CredentialList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CredentialListValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CredentialListValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialListValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CredentialListMultiError(errors)
	}

	return nil
}

// CredentialListMultiError is an error wrapping multiple validation errors
// returned by CredentialList.ValidateAll() if the designated constraints
// aren't met.
type CredentialListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CredentialListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CredentialListMultiError) AllErrors() []error { return m }

// CredentialListValidationError is the validation error returned by
// CredentialList.Validate if the designated constraints aren't met.
type CredentialListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialListValidationError) ErrorName() string { return "CredentialListValidationError" }

// Error satisfies the builtin error interface
func (e CredentialListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentialList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialListValidationError{}

// Validate checks the field values on ConsumerAuthItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsumerAuthItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerAuthItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerAuthItemMultiError, or nil if none found.
func (m *ConsumerAuthItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerAuthItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthType

	if all {
		switch v := interface{}(m.GetAuthData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumerAuthItemValidationError{
					field:  "AuthData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumerAuthItemValidationError{
					field:  "AuthData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumerAuthItemValidationError{
				field:  "AuthData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthTips

	if len(errors) > 0 {
		return ConsumerAuthItemMultiError(errors)
	}

	return nil
}

// ConsumerAuthItemMultiError is an error wrapping multiple validation errors
// returned by ConsumerAuthItem.ValidateAll() if the designated constraints
// aren't met.
type ConsumerAuthItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerAuthItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerAuthItemMultiError) AllErrors() []error { return m }

// ConsumerAuthItemValidationError is the validation error returned by
// ConsumerAuthItem.Validate if the designated constraints aren't met.
type ConsumerAuthItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerAuthItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerAuthItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerAuthItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerAuthItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerAuthItemValidationError) ErrorName() string { return "ConsumerAuthItemValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerAuthItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerAuthItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerAuthItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerAuthItemValidationError{}

// Validate checks the field values on ConsumerAuthConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumerAuthConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerAuthConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerAuthConfigMultiError, or nil if none found.
func (m *ConsumerAuthConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerAuthConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumerAuthConfigValidationError{
						field:  fmt.Sprintf("Auths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumerAuthConfigValidationError{
						field:  fmt.Sprintf("Auths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumerAuthConfigValidationError{
					field:  fmt.Sprintf("Auths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsumerAuthConfigMultiError(errors)
	}

	return nil
}

// ConsumerAuthConfigMultiError is an error wrapping multiple validation errors
// returned by ConsumerAuthConfig.ValidateAll() if the designated constraints
// aren't met.
type ConsumerAuthConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerAuthConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerAuthConfigMultiError) AllErrors() []error { return m }

// ConsumerAuthConfigValidationError is the validation error returned by
// ConsumerAuthConfig.Validate if the designated constraints aren't met.
type ConsumerAuthConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerAuthConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerAuthConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerAuthConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerAuthConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerAuthConfigValidationError) ErrorName() string {
	return "ConsumerAuthConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumerAuthConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerAuthConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerAuthConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerAuthConfigValidationError{}

// Validate checks the field values on ConsumerCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumerCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerCredentialsMultiError, or nil if none found.
func (m *ConsumerCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerName

	// no validation rules for ConsumerId

	if all {
		switch v := interface{}(m.GetAuthConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumerCredentialsValidationError{
					field:  "AuthConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumerCredentialsValidationError{
					field:  "AuthConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumerCredentialsValidationError{
				field:  "AuthConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsumerCredentialsMultiError(errors)
	}

	return nil
}

// ConsumerCredentialsMultiError is an error wrapping multiple validation
// errors returned by ConsumerCredentials.ValidateAll() if the designated
// constraints aren't met.
type ConsumerCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerCredentialsMultiError) AllErrors() []error { return m }

// ConsumerCredentialsValidationError is the validation error returned by
// ConsumerCredentials.Validate if the designated constraints aren't met.
type ConsumerCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerCredentialsValidationError) ErrorName() string {
	return "ConsumerCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumerCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerCredentialsValidationError{}

// Validate checks the field values on GetConsumerAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAuthResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAuthResponseMultiError, or nil if none found.
func (m *GetConsumerAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsumerAuthResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsumerAuthResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsumerAuthResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsumerAuthResponseMultiError(errors)
	}

	return nil
}

// GetConsumerAuthResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAuthResponseMultiError) AllErrors() []error { return m }

// GetConsumerAuthResponseValidationError is the validation error returned by
// GetConsumerAuthResponse.Validate if the designated constraints aren't met.
type GetConsumerAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAuthResponseValidationError) ErrorName() string {
	return "GetConsumerAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAuthResponseValidationError{}

// Validate checks the field values on GetConsumerAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAuthRequestMultiError, or nil if none found.
func (m *GetConsumerAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if len(errors) > 0 {
		return GetConsumerAuthRequestMultiError(errors)
	}

	return nil
}

// GetConsumerAuthRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAuthRequestMultiError) AllErrors() []error { return m }

// GetConsumerAuthRequestValidationError is the validation error returned by
// GetConsumerAuthRequest.Validate if the designated constraints aren't met.
type GetConsumerAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAuthRequestValidationError) ErrorName() string {
	return "GetConsumerAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAuthRequestValidationError{}

// Validate checks the field values on UpdateConsumerAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerAclResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerAclResponseMultiError, or nil if none found.
func (m *UpdateConsumerAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateConsumerAclResponseMultiError(errors)
	}

	return nil
}

// UpdateConsumerAclResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerAclResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateConsumerAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerAclResponseMultiError) AllErrors() []error { return m }

// UpdateConsumerAclResponseValidationError is the validation error returned by
// UpdateConsumerAclResponse.Validate if the designated constraints aren't met.
type UpdateConsumerAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerAclResponseValidationError) ErrorName() string {
	return "UpdateConsumerAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerAclResponseValidationError{}

// Validate checks the field values on UpdateConsumerAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerAclRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerAclRequestMultiError, or nil if none found.
func (m *UpdateConsumerAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if len(errors) > 0 {
		return UpdateConsumerAclRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerAclRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerAclRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConsumerAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerAclRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerAclRequestValidationError is the validation error returned by
// UpdateConsumerAclRequest.Validate if the designated constraints aren't met.
type UpdateConsumerAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerAclRequestValidationError) ErrorName() string {
	return "UpdateConsumerAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerAclRequestValidationError{}

// Validate checks the field values on GetConsumerAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAclResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAclResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAclResponseMultiError, or nil if none found.
func (m *GetConsumerAclResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAclResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumerAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumerAclResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumerAclResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumerAclResponseMultiError(errors)
	}

	return nil
}

// GetConsumerAclResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAclResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerAclResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAclResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAclResponseMultiError) AllErrors() []error { return m }

// GetConsumerAclResponseValidationError is the validation error returned by
// GetConsumerAclResponse.Validate if the designated constraints aren't met.
type GetConsumerAclResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAclResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAclResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAclResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAclResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAclResponseValidationError) ErrorName() string {
	return "GetConsumerAclResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAclResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAclResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAclResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAclResponseValidationError{}

// Validate checks the field values on Acl with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Acl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Acl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AclMultiError, or nil if none found.
func (m *Acl) ValidateAll() error {
	return m.validate(true)
}

func (m *Acl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Selected

	if len(errors) > 0 {
		return AclMultiError(errors)
	}

	return nil
}

// AclMultiError is an error wrapping multiple validation errors returned by
// Acl.ValidateAll() if the designated constraints aren't met.
type AclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AclMultiError) AllErrors() []error { return m }

// AclValidationError is the validation error returned by Acl.Validate if the
// designated constraints aren't met.
type AclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AclValidationError) ErrorName() string { return "AclValidationError" }

// Error satisfies the builtin error interface
func (e AclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AclValidationError{}

// Validate checks the field values on GetConsumerAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAclRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAclRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAclRequestMultiError, or nil if none found.
func (m *GetConsumerAclRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAclRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if len(errors) > 0 {
		return GetConsumerAclRequestMultiError(errors)
	}

	return nil
}

// GetConsumerAclRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAclRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerAclRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAclRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAclRequestMultiError) AllErrors() []error { return m }

// GetConsumerAclRequestValidationError is the validation error returned by
// GetConsumerAclRequest.Validate if the designated constraints aren't met.
type GetConsumerAclRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAclRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAclRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAclRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAclRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAclRequestValidationError) ErrorName() string {
	return "GetConsumerAclRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAclRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAclRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAclRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAclRequestValidationError{}

// Validate checks the field values on GetConsumersNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersNameResponseMultiError, or nil if none found.
func (m *GetConsumersNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumersNameResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumersNameResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumersNameResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumersNameResponseMultiError(errors)
	}

	return nil
}

// GetConsumersNameResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumersNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersNameResponseMultiError) AllErrors() []error { return m }

// GetConsumersNameResponseValidationError is the validation error returned by
// GetConsumersNameResponse.Validate if the designated constraints aren't met.
type GetConsumersNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersNameResponseValidationError) ErrorName() string {
	return "GetConsumersNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersNameResponseValidationError{}

// Validate checks the field values on GetConsumersNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersNameRequestMultiError, or nil if none found.
func (m *GetConsumersNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if len(errors) > 0 {
		return GetConsumersNameRequestMultiError(errors)
	}

	return nil
}

// GetConsumersNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumersNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersNameRequestMultiError) AllErrors() []error { return m }

// GetConsumersNameRequestValidationError is the validation error returned by
// GetConsumersNameRequest.Validate if the designated constraints aren't met.
type GetConsumersNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersNameRequestValidationError) ErrorName() string {
	return "GetConsumersNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersNameRequestValidationError{}

// Validate checks the field values on DeleteConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConsumerResponseMultiError, or nil if none found.
func (m *DeleteConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteConsumerResponseMultiError(errors)
	}

	return nil
}

// DeleteConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerResponseMultiError) AllErrors() []error { return m }

// DeleteConsumerResponseValidationError is the validation error returned by
// DeleteConsumerResponse.Validate if the designated constraints aren't met.
type DeleteConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerResponseValidationError) ErrorName() string {
	return "DeleteConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerResponseValidationError{}

// Validate checks the field values on DeleteConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConsumerRequestMultiError, or nil if none found.
func (m *DeleteConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if len(errors) > 0 {
		return DeleteConsumerRequestMultiError(errors)
	}

	return nil
}

// DeleteConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerRequestMultiError) AllErrors() []error { return m }

// DeleteConsumerRequestValidationError is the validation error returned by
// DeleteConsumerRequest.Validate if the designated constraints aren't met.
type DeleteConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerRequestValidationError) ErrorName() string {
	return "DeleteConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerRequestValidationError{}

// Validate checks the field values on UpdateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerResponseMultiError, or nil if none found.
func (m *UpdateConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerResponseMultiError(errors)
	}

	return nil
}

// UpdateConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerResponseMultiError) AllErrors() []error { return m }

// UpdateConsumerResponseValidationError is the validation error returned by
// UpdateConsumerResponse.Validate if the designated constraints aren't met.
type UpdateConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerResponseValidationError) ErrorName() string {
	return "UpdateConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerResponseValidationError{}

// Validate checks the field values on UpdateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerRequestMultiError, or nil if none found.
func (m *UpdateConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerId

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerRequestValidationError is the validation error returned by
// UpdateConsumerRequest.Validate if the designated constraints aren't met.
type UpdateConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerRequestValidationError) ErrorName() string {
	return "UpdateConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerRequestValidationError{}

// Validate checks the field values on CreateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsumerResponseMultiError, or nil if none found.
func (m *CreateConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateConsumerResponseMultiError(errors)
	}

	return nil
}

// CreateConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsumerResponseMultiError) AllErrors() []error { return m }

// CreateConsumerResponseValidationError is the validation error returned by
// CreateConsumerResponse.Validate if the designated constraints aren't met.
type CreateConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsumerResponseValidationError) ErrorName() string {
	return "CreateConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsumerResponseValidationError{}

// Validate checks the field values on Consumer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consumer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumerMultiError, or nil
// if none found.
func (m *Consumer) ValidateAll() error {
	return m.validate(true)
}

func (m *Consumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateAt

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return ConsumerMultiError(errors)
	}

	return nil
}

// ConsumerMultiError is an error wrapping multiple validation errors returned
// by Consumer.ValidateAll() if the designated constraints aren't met.
type ConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerMultiError) AllErrors() []error { return m }

// ConsumerValidationError is the validation error returned by
// Consumer.Validate if the designated constraints aren't met.
type ConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerValidationError) ErrorName() string { return "ConsumerValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerValidationError{}

// Validate checks the field values on CreateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsumerRequestMultiError, or nil if none found.
func (m *CreateConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsumerRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsumerRequestMultiError(errors)
	}

	return nil
}

// CreateConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsumerRequestMultiError) AllErrors() []error { return m }

// CreateConsumerRequestValidationError is the validation error returned by
// CreateConsumerRequest.Validate if the designated constraints aren't met.
type CreateConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsumerRequestValidationError) ErrorName() string {
	return "CreateConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsumerRequestValidationError{}

// Validate checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersResponseMultiError, or nil if none found.
func (m *GetConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsumersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsumersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsumersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsumersResponseMultiError(errors)
	}

	return nil
}

// GetConsumersResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersResponseMultiError) AllErrors() []error { return m }

// GetConsumersResponseValidationError is the validation error returned by
// GetConsumersResponse.Validate if the designated constraints aren't met.
type GetConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersResponseValidationError) ErrorName() string {
	return "GetConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersResponseValidationError{}

// Validate checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersRequestMultiError, or nil if none found.
func (m *GetConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Env

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for SortField

	// no validation rules for SortType

	if len(errors) > 0 {
		return GetConsumersRequestMultiError(errors)
	}

	return nil
}

// GetConsumersRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersRequestMultiError) AllErrors() []error { return m }

// GetConsumersRequestValidationError is the validation error returned by
// GetConsumersRequest.Validate if the designated constraints aren't met.
type GetConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersRequestValidationError) ErrorName() string {
	return "GetConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersRequestValidationError{}
