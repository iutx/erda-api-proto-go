// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: release.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReleaseList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseListMultiError, or
// nil if none found.
func (m *ReleaseList) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleaseListMultiError(errors)
	}

	return nil
}

// ReleaseListMultiError is an error wrapping multiple validation errors
// returned by ReleaseList.ValidateAll() if the designated constraints aren't met.
type ReleaseListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListMultiError) AllErrors() []error { return m }

// ReleaseListValidationError is the validation error returned by
// ReleaseList.Validate if the designated constraints aren't met.
type ReleaseListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListValidationError) ErrorName() string { return "ReleaseListValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListValidationError{}

// Validate checks the field values on Mode with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Mode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Mode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModeMultiError, or nil if none found.
func (m *Mode) ValidateAll() error {
	return m.validate(true)
}

func (m *Mode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expose

	for idx, item := range m.GetApplicationReleaseList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModeValidationError{
						field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModeValidationError{
						field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModeValidationError{
					field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModeMultiError(errors)
	}

	return nil
}

// ModeMultiError is an error wrapping multiple validation errors returned by
// Mode.ValidateAll() if the designated constraints aren't met.
type ModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModeMultiError) AllErrors() []error { return m }

// ModeValidationError is the validation error returned by Mode.Validate if the
// designated constraints aren't met.
type ModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModeValidationError) ErrorName() string { return "ModeValidationError" }

// Error satisfies the builtin error interface
func (e ModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModeValidationError{}

// Validate checks the field values on ReleaseCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseCreateRequestMultiError, or nil if none found.
func (m *ReleaseCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseName

	// no validation rules for Desc

	// no validation rules for Dice

	// no validation rules for Addon

	// no validation rules for IsStable

	// no validation rules for IsFormal

	// no validation rules for IsProjectRelease

	// no validation rules for Changelog

	{
		sorted_keys := make([]string, len(m.GetModes()))
		i := 0
		for key := range m.GetModes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetModes()[key]
			_ = val

			// no validation rules for Modes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReleaseCreateRequestValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReleaseCreateRequestValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReleaseCreateRequestValidationError{
						field:  fmt.Sprintf("Modes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Labels

	// no validation rules for Version

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for UserID

	// no validation rules for ClusterName

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseCreateRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseCreateRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseCreateRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CrossCluster

	if len(errors) > 0 {
		return ReleaseCreateRequestMultiError(errors)
	}

	return nil
}

// ReleaseCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseCreateRequestMultiError) AllErrors() []error { return m }

// ReleaseCreateRequestValidationError is the validation error returned by
// ReleaseCreateRequest.Validate if the designated constraints aren't met.
type ReleaseCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseCreateRequestValidationError) ErrorName() string {
	return "ReleaseCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseCreateRequestValidationError{}

// Validate checks the field values on ReleaseResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseResourceMultiError, or nil if none found.
func (m *ReleaseResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for URL

	{
		sorted_keys := make([]string, len(m.GetMeta()))
		i := 0
		for key := range m.GetMeta() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMeta()[key]
			_ = val

			// no validation rules for Meta[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReleaseResourceValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReleaseResourceValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReleaseResourceValidationError{
						field:  fmt.Sprintf("Meta[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ReleaseResourceMultiError(errors)
	}

	return nil
}

// ReleaseResourceMultiError is an error wrapping multiple validation errors
// returned by ReleaseResource.ValidateAll() if the designated constraints
// aren't met.
type ReleaseResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseResourceMultiError) AllErrors() []error { return m }

// ReleaseResourceValidationError is the validation error returned by
// ReleaseResource.Validate if the designated constraints aren't met.
type ReleaseResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseResourceValidationError) ErrorName() string { return "ReleaseResourceValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseResourceValidationError{}

// Validate checks the field values on ReleaseCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseCreateResponseMultiError, or nil if none found.
func (m *ReleaseCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseCreateResponseMultiError(errors)
	}

	return nil
}

// ReleaseCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseCreateResponseMultiError) AllErrors() []error { return m }

// ReleaseCreateResponseValidationError is the validation error returned by
// ReleaseCreateResponse.Validate if the designated constraints aren't met.
type ReleaseCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseCreateResponseValidationError) ErrorName() string {
	return "ReleaseCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseCreateResponseValidationError{}

// Validate checks the field values on ReleaseCreateResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseCreateResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseCreateResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseCreateResponseDataMultiError, or nil if none found.
func (m *ReleaseCreateResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseCreateResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ReleaseCreateResponseDataMultiError(errors)
	}

	return nil
}

// ReleaseCreateResponseDataMultiError is an error wrapping multiple validation
// errors returned by ReleaseCreateResponseData.ValidateAll() if the
// designated constraints aren't met.
type ReleaseCreateResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseCreateResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseCreateResponseDataMultiError) AllErrors() []error { return m }

// ReleaseCreateResponseDataValidationError is the validation error returned by
// ReleaseCreateResponseData.Validate if the designated constraints aren't met.
type ReleaseCreateResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseCreateResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseCreateResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseCreateResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseCreateResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseCreateResponseDataValidationError) ErrorName() string {
	return "ReleaseCreateResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseCreateResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseCreateResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseCreateResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseCreateResponseDataValidationError{}

// Validate checks the field values on ReleaseUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseUpdateRequestMultiError, or nil if none found.
func (m *ReleaseUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for Version

	// no validation rules for Desc

	// no validation rules for Changelog

	{
		sorted_keys := make([]string, len(m.GetModes()))
		i := 0
		for key := range m.GetModes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetModes()[key]
			_ = val

			// no validation rules for Modes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReleaseUpdateRequestValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReleaseUpdateRequestValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReleaseUpdateRequestValidationError{
						field:  fmt.Sprintf("Modes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	if len(errors) > 0 {
		return ReleaseUpdateRequestMultiError(errors)
	}

	return nil
}

// ReleaseUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseUpdateRequestMultiError) AllErrors() []error { return m }

// ReleaseUpdateRequestValidationError is the validation error returned by
// ReleaseUpdateRequest.Validate if the designated constraints aren't met.
type ReleaseUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseUpdateRequestValidationError) ErrorName() string {
	return "ReleaseUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseUpdateRequestValidationError{}

// Validate checks the field values on ReleaseDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseDataResponseMultiError, or nil if none found.
func (m *ReleaseDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleaseDataResponseMultiError(errors)
	}

	return nil
}

// ReleaseDataResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseDataResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseDataResponseMultiError) AllErrors() []error { return m }

// ReleaseDataResponseValidationError is the validation error returned by
// ReleaseDataResponse.Validate if the designated constraints aren't met.
type ReleaseDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDataResponseValidationError) ErrorName() string {
	return "ReleaseDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDataResponseValidationError{}

// Validate checks the field values on ReleaseUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseUserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseUserDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseUserDataResponseMultiError, or nil if none found.
func (m *ReleaseUserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseUserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleaseUserDataResponseMultiError(errors)
	}

	return nil
}

// ReleaseUserDataResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseUserDataResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseUserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseUserDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseUserDataResponseMultiError) AllErrors() []error { return m }

// ReleaseUserDataResponseValidationError is the validation error returned by
// ReleaseUserDataResponse.Validate if the designated constraints aren't met.
type ReleaseUserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseUserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseUserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseUserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseUserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseUserDataResponseValidationError) ErrorName() string {
	return "ReleaseUserDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseUserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseUserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseUserDataResponseValidationError{}

// Validate checks the field values on ReleaseUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseUpdateResponseMultiError, or nil if none found.
func (m *ReleaseUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleaseUpdateResponseMultiError(errors)
	}

	return nil
}

// ReleaseUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseUpdateResponseMultiError) AllErrors() []error { return m }

// ReleaseUpdateResponseValidationError is the validation error returned by
// ReleaseUpdateResponse.Validate if the designated constraints aren't met.
type ReleaseUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseUpdateResponseValidationError) ErrorName() string {
	return "ReleaseUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseUpdateResponseValidationError{}

// Validate checks the field values on ReleaseReferenceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseReferenceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseReferenceUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReleaseReferenceUpdateRequestMultiError, or nil if none found.
func (m *ReleaseReferenceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseReferenceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for Increase

	if len(errors) > 0 {
		return ReleaseReferenceUpdateRequestMultiError(errors)
	}

	return nil
}

// ReleaseReferenceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by ReleaseReferenceUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type ReleaseReferenceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseReferenceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseReferenceUpdateRequestMultiError) AllErrors() []error { return m }

// ReleaseReferenceUpdateRequestValidationError is the validation error
// returned by ReleaseReferenceUpdateRequest.Validate if the designated
// constraints aren't met.
type ReleaseReferenceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseReferenceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseReferenceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseReferenceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseReferenceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseReferenceUpdateRequestValidationError) ErrorName() string {
	return "ReleaseReferenceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseReferenceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseReferenceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseReferenceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseReferenceUpdateRequestValidationError{}

// Validate checks the field values on GetIosPlistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIosPlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIosPlistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIosPlistRequestMultiError, or nil if none found.
func (m *GetIosPlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIosPlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return GetIosPlistRequestMultiError(errors)
	}

	return nil
}

// GetIosPlistRequestMultiError is an error wrapping multiple validation errors
// returned by GetIosPlistRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIosPlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIosPlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIosPlistRequestMultiError) AllErrors() []error { return m }

// GetIosPlistRequestValidationError is the validation error returned by
// GetIosPlistRequest.Validate if the designated constraints aren't met.
type GetIosPlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIosPlistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIosPlistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIosPlistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIosPlistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIosPlistRequestValidationError) ErrorName() string {
	return "GetIosPlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIosPlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIosPlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIosPlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIosPlistRequestValidationError{}

// Validate checks the field values on GetIosPlistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIosPlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIosPlistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIosPlistResponseMultiError, or nil if none found.
func (m *GetIosPlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIosPlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetIosPlistResponseMultiError(errors)
	}

	return nil
}

// GetIosPlistResponseMultiError is an error wrapping multiple validation
// errors returned by GetIosPlistResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIosPlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIosPlistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIosPlistResponseMultiError) AllErrors() []error { return m }

// GetIosPlistResponseValidationError is the validation error returned by
// GetIosPlistResponse.Validate if the designated constraints aren't met.
type GetIosPlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIosPlistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIosPlistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIosPlistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIosPlistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIosPlistResponseValidationError) ErrorName() string {
	return "GetIosPlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIosPlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIosPlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIosPlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIosPlistResponseValidationError{}

// Validate checks the field values on ReleaseDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseDeleteRequestMultiError, or nil if none found.
func (m *ReleaseDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ReleaseDeleteRequestMultiError(errors)
	}

	return nil
}

// ReleaseDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseDeleteRequestMultiError) AllErrors() []error { return m }

// ReleaseDeleteRequestValidationError is the validation error returned by
// ReleaseDeleteRequest.Validate if the designated constraints aren't met.
type ReleaseDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDeleteRequestValidationError) ErrorName() string {
	return "ReleaseDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDeleteRequestValidationError{}

// Validate checks the field values on ReleaseDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseDeleteResponseMultiError, or nil if none found.
func (m *ReleaseDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleaseDeleteResponseMultiError(errors)
	}

	return nil
}

// ReleaseDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseDeleteResponseMultiError) AllErrors() []error { return m }

// ReleaseDeleteResponseValidationError is the validation error returned by
// ReleaseDeleteResponse.Validate if the designated constraints aren't met.
type ReleaseDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDeleteResponseValidationError) ErrorName() string {
	return "ReleaseDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDeleteResponseValidationError{}

// Validate checks the field values on ReleaseGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseGetRequestMultiError, or nil if none found.
func (m *ReleaseGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ReleaseGetRequestMultiError(errors)
	}

	return nil
}

// ReleaseGetRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseGetRequestMultiError) AllErrors() []error { return m }

// ReleaseGetRequestValidationError is the validation error returned by
// ReleaseGetRequest.Validate if the designated constraints aren't met.
type ReleaseGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseGetRequestValidationError) ErrorName() string {
	return "ReleaseGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseGetRequestValidationError{}

// Validate checks the field values on ReleaseGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseGetResponseMultiError, or nil if none found.
func (m *ReleaseGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseGetResponseMultiError(errors)
	}

	return nil
}

// ReleaseGetResponseMultiError is an error wrapping multiple validation errors
// returned by ReleaseGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ReleaseGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseGetResponseMultiError) AllErrors() []error { return m }

// ReleaseGetResponseValidationError is the validation error returned by
// ReleaseGetResponse.Validate if the designated constraints aren't met.
type ReleaseGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseGetResponseValidationError) ErrorName() string {
	return "ReleaseGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseGetResponseValidationError{}

// Validate checks the field values on ModeSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModeSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModeSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModeSummaryMultiError, or
// nil if none found.
func (m *ModeSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ModeSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expose

	for idx, item := range m.GetApplicationReleaseList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModeSummaryValidationError{
						field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModeSummaryValidationError{
						field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModeSummaryValidationError{
					field:  fmt.Sprintf("ApplicationReleaseList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModeSummaryMultiError(errors)
	}

	return nil
}

// ModeSummaryMultiError is an error wrapping multiple validation errors
// returned by ModeSummary.ValidateAll() if the designated constraints aren't met.
type ModeSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModeSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModeSummaryMultiError) AllErrors() []error { return m }

// ModeSummaryValidationError is the validation error returned by
// ModeSummary.Validate if the designated constraints aren't met.
type ModeSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModeSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModeSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModeSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModeSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModeSummaryValidationError) ErrorName() string { return "ModeSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ModeSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModeSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModeSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModeSummaryValidationError{}

// Validate checks the field values on ReleaseSummaryArray with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseSummaryArray) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseSummaryArray with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseSummaryArrayMultiError, or nil if none found.
func (m *ReleaseSummaryArray) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseSummaryArray) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseSummaryArrayValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseSummaryArrayValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseSummaryArrayValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReleaseSummaryArrayMultiError(errors)
	}

	return nil
}

// ReleaseSummaryArrayMultiError is an error wrapping multiple validation
// errors returned by ReleaseSummaryArray.ValidateAll() if the designated
// constraints aren't met.
type ReleaseSummaryArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseSummaryArrayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseSummaryArrayMultiError) AllErrors() []error { return m }

// ReleaseSummaryArrayValidationError is the validation error returned by
// ReleaseSummaryArray.Validate if the designated constraints aren't met.
type ReleaseSummaryArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseSummaryArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseSummaryArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseSummaryArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseSummaryArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseSummaryArrayValidationError) ErrorName() string {
	return "ReleaseSummaryArrayValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseSummaryArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseSummaryArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseSummaryArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseSummaryArrayValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Id

	// no validation rules for Color

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on ReleaseGetResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseGetResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseGetResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseGetResponseDataMultiError, or nil if none found.
func (m *ReleaseGetResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseGetResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Diceyml

	// no validation rules for Desc

	// no validation rules for Addon

	// no validation rules for Changelog

	// no validation rules for IsStable

	// no validation rules for IsFormal

	// no validation rules for IsProjectRelease

	{
		sorted_keys := make([]string, len(m.GetModes()))
		i := 0
		for key := range m.GetModes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetModes()[key]
			_ = val

			// no validation rules for Modes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReleaseGetResponseDataValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReleaseGetResponseDataValidationError{
							field:  fmt.Sprintf("Modes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Modes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseGetResponseDataValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("ServiceImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("ServiceImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseGetResponseDataValidationError{
					field:  fmt.Sprintf("ServiceImages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseGetResponseDataValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	// no validation rules for CrossCluster

	// no validation rules for Reference

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for UserID

	// no validation rules for ClusterName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseGetResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseGetResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseGetResponseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseGetResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseGetResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseGetResponseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsLatest

	for idx, item := range m.GetAddons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Addons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseGetResponseDataValidationError{
						field:  fmt.Sprintf("Addons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseGetResponseDataValidationError{
					field:  fmt.Sprintf("Addons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AddonYaml

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	if len(errors) > 0 {
		return ReleaseGetResponseDataMultiError(errors)
	}

	return nil
}

// ReleaseGetResponseDataMultiError is an error wrapping multiple validation
// errors returned by ReleaseGetResponseData.ValidateAll() if the designated
// constraints aren't met.
type ReleaseGetResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseGetResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseGetResponseDataMultiError) AllErrors() []error { return m }

// ReleaseGetResponseDataValidationError is the validation error returned by
// ReleaseGetResponseData.Validate if the designated constraints aren't met.
type ReleaseGetResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseGetResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseGetResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseGetResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseGetResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseGetResponseDataValidationError) ErrorName() string {
	return "ReleaseGetResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseGetResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseGetResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseGetResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseGetResponseDataValidationError{}

// Validate checks the field values on AddonInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddonInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddonInfoMultiError, or nil
// if none found.
func (m *AddonInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Plan

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for LogoURL

	if len(errors) > 0 {
		return AddonInfoMultiError(errors)
	}

	return nil
}

// AddonInfoMultiError is an error wrapping multiple validation errors returned
// by AddonInfo.ValidateAll() if the designated constraints aren't met.
type AddonInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonInfoMultiError) AllErrors() []error { return m }

// AddonInfoValidationError is the validation error returned by
// AddonInfo.Validate if the designated constraints aren't met.
type AddonInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonInfoValidationError) ErrorName() string { return "AddonInfoValidationError" }

// Error satisfies the builtin error interface
func (e AddonInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonInfoValidationError{}

// Validate checks the field values on ServiceImagePair with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceImagePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceImagePair with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceImagePairMultiError, or nil if none found.
func (m *ServiceImagePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceImagePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Image

	if len(errors) > 0 {
		return ServiceImagePairMultiError(errors)
	}

	return nil
}

// ServiceImagePairMultiError is an error wrapping multiple validation errors
// returned by ServiceImagePair.ValidateAll() if the designated constraints
// aren't met.
type ServiceImagePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceImagePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceImagePairMultiError) AllErrors() []error { return m }

// ServiceImagePairValidationError is the validation error returned by
// ServiceImagePair.Validate if the designated constraints aren't met.
type ServiceImagePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceImagePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceImagePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceImagePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceImagePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceImagePairValidationError) ErrorName() string { return "ServiceImagePairValidationError" }

// Error satisfies the builtin error interface
func (e ServiceImagePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceImagePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceImagePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceImagePairValidationError{}

// Validate checks the field values on ApplicationReleaseSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationReleaseSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationReleaseSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationReleaseSummaryMultiError, or nil if none found.
func (m *ApplicationReleaseSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationReleaseSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Version

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for CreatedAt

	// no validation rules for DiceYml

	if len(errors) > 0 {
		return ApplicationReleaseSummaryMultiError(errors)
	}

	return nil
}

// ApplicationReleaseSummaryMultiError is an error wrapping multiple validation
// errors returned by ApplicationReleaseSummary.ValidateAll() if the
// designated constraints aren't met.
type ApplicationReleaseSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationReleaseSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationReleaseSummaryMultiError) AllErrors() []error { return m }

// ApplicationReleaseSummaryValidationError is the validation error returned by
// ApplicationReleaseSummary.Validate if the designated constraints aren't met.
type ApplicationReleaseSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationReleaseSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationReleaseSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationReleaseSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationReleaseSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationReleaseSummaryValidationError) ErrorName() string {
	return "ApplicationReleaseSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationReleaseSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationReleaseSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationReleaseSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationReleaseSummaryValidationError{}

// Validate checks the field values on ReleaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListRequestMultiError, or nil if none found.
func (m *ReleaseListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Cluster

	// no validation rules for Branch

	// no validation rules for IsLatest

	// no validation rules for IsStable

	// no validation rules for IsFormal

	// no validation rules for IsProjectRelease

	// no validation rules for From

	// no validation rules for Version

	// no validation rules for CommitID

	// no validation rules for IsVersion

	// no validation rules for CrossCluster

	// no validation rules for CrossClusterOrSpecifyCluster

	// no validation rules for ProjectID

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PageSize

	// no validation rules for PageNo

	// no validation rules for OrderBy

	// no validation rules for Order

	if len(errors) > 0 {
		return ReleaseListRequestMultiError(errors)
	}

	return nil
}

// ReleaseListRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseListRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListRequestMultiError) AllErrors() []error { return m }

// ReleaseListRequestValidationError is the validation error returned by
// ReleaseListRequest.Validate if the designated constraints aren't met.
type ReleaseListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListRequestValidationError) ErrorName() string {
	return "ReleaseListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListRequestValidationError{}

// Validate checks the field values on ReleaseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListResponseMultiError, or nil if none found.
func (m *ReleaseListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseListResponseMultiError(errors)
	}

	return nil
}

// ReleaseListResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseListResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListResponseMultiError) AllErrors() []error { return m }

// ReleaseListResponseValidationError is the validation error returned by
// ReleaseListResponse.Validate if the designated constraints aren't met.
type ReleaseListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListResponseValidationError) ErrorName() string {
	return "ReleaseListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListResponseValidationError{}

// Validate checks the field values on ListReleaseNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReleaseNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleaseNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleaseNameRequestMultiError, or nil if none found.
func (m *ListReleaseNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleaseNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return ListReleaseNameRequestMultiError(errors)
	}

	return nil
}

// ListReleaseNameRequestMultiError is an error wrapping multiple validation
// errors returned by ListReleaseNameRequest.ValidateAll() if the designated
// constraints aren't met.
type ListReleaseNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleaseNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleaseNameRequestMultiError) AllErrors() []error { return m }

// ListReleaseNameRequestValidationError is the validation error returned by
// ListReleaseNameRequest.Validate if the designated constraints aren't met.
type ListReleaseNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleaseNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleaseNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleaseNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleaseNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleaseNameRequestValidationError) ErrorName() string {
	return "ListReleaseNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReleaseNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleaseNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleaseNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleaseNameRequestValidationError{}

// Validate checks the field values on ListReleaseNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReleaseNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleaseNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleaseNameResponseMultiError, or nil if none found.
func (m *ListReleaseNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleaseNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListReleaseNameResponseMultiError(errors)
	}

	return nil
}

// ListReleaseNameResponseMultiError is an error wrapping multiple validation
// errors returned by ListReleaseNameResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReleaseNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleaseNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleaseNameResponseMultiError) AllErrors() []error { return m }

// ListReleaseNameResponseValidationError is the validation error returned by
// ListReleaseNameResponse.Validate if the designated constraints aren't met.
type ListReleaseNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleaseNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleaseNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleaseNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleaseNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleaseNameResponseValidationError) ErrorName() string {
	return "ListReleaseNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReleaseNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleaseNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleaseNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleaseNameResponseValidationError{}

// Validate checks the field values on ReleaseListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListResponseDataMultiError, or nil if none found.
func (m *ReleaseListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReleaseListResponseDataMultiError(errors)
	}

	return nil
}

// ReleaseListResponseDataMultiError is an error wrapping multiple validation
// errors returned by ReleaseListResponseData.ValidateAll() if the designated
// constraints aren't met.
type ReleaseListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListResponseDataMultiError) AllErrors() []error { return m }

// ReleaseListResponseDataValidationError is the validation error returned by
// ReleaseListResponseData.Validate if the designated constraints aren't met.
type ReleaseListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListResponseDataValidationError) ErrorName() string {
	return "ReleaseListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListResponseDataValidationError{}

// Validate checks the field values on ReleaseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseDataMultiError, or
// nil if none found.
func (m *ReleaseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Diceyml

	// no validation rules for Desc

	// no validation rules for Addon

	// no validation rules for Changelog

	// no validation rules for IsStable

	// no validation rules for IsFormal

	// no validation rules for IsProjectRelease

	// no validation rules for Modes

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseDataValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseDataValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	// no validation rules for CrossCluster

	// no validation rules for Reference

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	// no validation rules for ApplicationName

	// no validation rules for UserID

	// no validation rules for ClusterName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsLatest

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	if len(errors) > 0 {
		return ReleaseDataMultiError(errors)
	}

	return nil
}

// ReleaseDataMultiError is an error wrapping multiple validation errors
// returned by ReleaseData.ValidateAll() if the designated constraints aren't met.
type ReleaseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseDataMultiError) AllErrors() []error { return m }

// ReleaseDataValidationError is the validation error returned by
// ReleaseData.Validate if the designated constraints aren't met.
type ReleaseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDataValidationError) ErrorName() string { return "ReleaseDataValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDataValidationError{}

// Validate checks the field values on ReleaseNameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseNameListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseNameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseNameListRequestMultiError, or nil if none found.
func (m *ReleaseNameListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseNameListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationID

	if len(errors) > 0 {
		return ReleaseNameListRequestMultiError(errors)
	}

	return nil
}

// ReleaseNameListRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseNameListRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseNameListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseNameListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseNameListRequestMultiError) AllErrors() []error { return m }

// ReleaseNameListRequestValidationError is the validation error returned by
// ReleaseNameListRequest.Validate if the designated constraints aren't met.
type ReleaseNameListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseNameListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseNameListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseNameListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseNameListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseNameListRequestValidationError) ErrorName() string {
	return "ReleaseNameListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseNameListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseNameListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseNameListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseNameListRequestValidationError{}

// Validate checks the field values on ReleaseNameListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseNameListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseNameListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseNameListResponseMultiError, or nil if none found.
func (m *ReleaseNameListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseNameListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleaseNameListResponseMultiError(errors)
	}

	return nil
}

// ReleaseNameListResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseNameListResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseNameListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseNameListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseNameListResponseMultiError) AllErrors() []error { return m }

// ReleaseNameListResponseValidationError is the validation error returned by
// ReleaseNameListResponse.Validate if the designated constraints aren't met.
type ReleaseNameListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseNameListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseNameListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseNameListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseNameListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseNameListResponseValidationError) ErrorName() string {
	return "ReleaseNameListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseNameListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseNameListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseNameListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseNameListResponseValidationError{}

// Validate checks the field values on GetLatestReleasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestReleasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestReleasesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestReleasesRequestMultiError, or nil if none found.
func (m *GetLatestReleasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestReleasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetLatestReleasesRequestMultiError(errors)
	}

	return nil
}

// GetLatestReleasesRequestMultiError is an error wrapping multiple validation
// errors returned by GetLatestReleasesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLatestReleasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestReleasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestReleasesRequestMultiError) AllErrors() []error { return m }

// GetLatestReleasesRequestValidationError is the validation error returned by
// GetLatestReleasesRequest.Validate if the designated constraints aren't met.
type GetLatestReleasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestReleasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestReleasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestReleasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestReleasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestReleasesRequestValidationError) ErrorName() string {
	return "GetLatestReleasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestReleasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestReleasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestReleasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestReleasesRequestValidationError{}

// Validate checks the field values on GetLatestReleasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestReleasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestReleasesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestReleasesResponseMultiError, or nil if none found.
func (m *GetLatestReleasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestReleasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestReleasesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestReleasesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestReleasesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLatestReleasesResponseMultiError(errors)
	}

	return nil
}

// GetLatestReleasesResponseMultiError is an error wrapping multiple validation
// errors returned by GetLatestReleasesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetLatestReleasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestReleasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestReleasesResponseMultiError) AllErrors() []error { return m }

// GetLatestReleasesResponseValidationError is the validation error returned by
// GetLatestReleasesResponse.Validate if the designated constraints aren't met.
type GetLatestReleasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestReleasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestReleasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestReleasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestReleasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestReleasesResponseValidationError) ErrorName() string {
	return "GetLatestReleasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestReleasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestReleasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestReleasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestReleasesResponseValidationError{}

// Validate checks the field values on GetLatestReleasesResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestReleasesResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestReleasesResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLatestReleasesResponseDataMultiError, or nil if none found.
func (m *GetLatestReleasesResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestReleasesResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Desc

	// no validation rules for Dice

	// no validation rules for Addon

	// no validation rules for Labels

	// no validation rules for Version

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for UserID

	// no validation rules for ClusterName

	// no validation rules for Resources

	// no validation rules for Reference

	// no validation rules for CrossCluster

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestReleasesResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestReleasesResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestReleasesResponseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestReleasesResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestReleasesResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestReleasesResponseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	if len(errors) > 0 {
		return GetLatestReleasesResponseDataMultiError(errors)
	}

	return nil
}

// GetLatestReleasesResponseDataMultiError is an error wrapping multiple
// validation errors returned by GetLatestReleasesResponseData.ValidateAll()
// if the designated constraints aren't met.
type GetLatestReleasesResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestReleasesResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestReleasesResponseDataMultiError) AllErrors() []error { return m }

// GetLatestReleasesResponseDataValidationError is the validation error
// returned by GetLatestReleasesResponseData.Validate if the designated
// constraints aren't met.
type GetLatestReleasesResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestReleasesResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestReleasesResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestReleasesResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestReleasesResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestReleasesResponseDataValidationError) ErrorName() string {
	return "GetLatestReleasesResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestReleasesResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestReleasesResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestReleasesResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestReleasesResponseDataValidationError{}

// Validate checks the field values on ReleaseGCRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseGCRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseGCRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseGCRequestMultiError, or nil if none found.
func (m *ReleaseGCRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseGCRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleaseGCRequestMultiError(errors)
	}

	return nil
}

// ReleaseGCRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseGCRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseGCRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseGCRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseGCRequestMultiError) AllErrors() []error { return m }

// ReleaseGCRequestValidationError is the validation error returned by
// ReleaseGCRequest.Validate if the designated constraints aren't met.
type ReleaseGCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseGCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseGCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseGCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseGCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseGCRequestValidationError) ErrorName() string { return "ReleaseGCRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseGCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseGCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseGCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseGCRequestValidationError{}

// Validate checks the field values on ReleaseUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseUploadRequestMultiError, or nil if none found.
func (m *ReleaseUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiceFileID

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for OrgID

	// no validation rules for UserID

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ReleaseUploadRequestMultiError(errors)
	}

	return nil
}

// ReleaseUploadRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseUploadRequestMultiError) AllErrors() []error { return m }

// ReleaseUploadRequestValidationError is the validation error returned by
// ReleaseUploadRequest.Validate if the designated constraints aren't met.
type ReleaseUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseUploadRequestValidationError) ErrorName() string {
	return "ReleaseUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseUploadRequestValidationError{}

// Validate checks the field values on ReleaseUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseUploadResponseMultiError, or nil if none found.
func (m *ReleaseUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseUploadResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseUploadResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseUploadResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseUploadResponseMultiError(errors)
	}

	return nil
}

// ReleaseUploadResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseUploadResponseMultiError) AllErrors() []error { return m }

// ReleaseUploadResponseValidationError is the validation error returned by
// ReleaseUploadResponse.Validate if the designated constraints aren't met.
type ReleaseUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseUploadResponseValidationError) ErrorName() string {
	return "ReleaseUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseUploadResponseValidationError{}

// Validate checks the field values on ParseReleaseFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseReleaseFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseReleaseFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseReleaseFileRequestMultiError, or nil if none found.
func (m *ParseReleaseFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseReleaseFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiceFileID

	if len(errors) > 0 {
		return ParseReleaseFileRequestMultiError(errors)
	}

	return nil
}

// ParseReleaseFileRequestMultiError is an error wrapping multiple validation
// errors returned by ParseReleaseFileRequest.ValidateAll() if the designated
// constraints aren't met.
type ParseReleaseFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseReleaseFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseReleaseFileRequestMultiError) AllErrors() []error { return m }

// ParseReleaseFileRequestValidationError is the validation error returned by
// ParseReleaseFileRequest.Validate if the designated constraints aren't met.
type ParseReleaseFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseReleaseFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseReleaseFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseReleaseFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseReleaseFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseReleaseFileRequestValidationError) ErrorName() string {
	return "ParseReleaseFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ParseReleaseFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseReleaseFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseReleaseFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseReleaseFileRequestValidationError{}

// Validate checks the field values on ParseReleaseFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseReleaseFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseReleaseFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseReleaseFileResponseMultiError, or nil if none found.
func (m *ParseReleaseFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseReleaseFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParseReleaseFileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParseReleaseFileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParseReleaseFileResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParseReleaseFileResponseMultiError(errors)
	}

	return nil
}

// ParseReleaseFileResponseMultiError is an error wrapping multiple validation
// errors returned by ParseReleaseFileResponse.ValidateAll() if the designated
// constraints aren't met.
type ParseReleaseFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseReleaseFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseReleaseFileResponseMultiError) AllErrors() []error { return m }

// ParseReleaseFileResponseValidationError is the validation error returned by
// ParseReleaseFileResponse.Validate if the designated constraints aren't met.
type ParseReleaseFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseReleaseFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseReleaseFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseReleaseFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseReleaseFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseReleaseFileResponseValidationError) ErrorName() string {
	return "ParseReleaseFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ParseReleaseFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseReleaseFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseReleaseFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseReleaseFileResponseValidationError{}

// Validate checks the field values on ParseReleaseFileResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseReleaseFileResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseReleaseFileResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseReleaseFileResponseDataMultiError, or nil if none found.
func (m *ParseReleaseFileResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseReleaseFileResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return ParseReleaseFileResponseDataMultiError(errors)
	}

	return nil
}

// ParseReleaseFileResponseDataMultiError is an error wrapping multiple
// validation errors returned by ParseReleaseFileResponseData.ValidateAll() if
// the designated constraints aren't met.
type ParseReleaseFileResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseReleaseFileResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseReleaseFileResponseDataMultiError) AllErrors() []error { return m }

// ParseReleaseFileResponseDataValidationError is the validation error returned
// by ParseReleaseFileResponseData.Validate if the designated constraints
// aren't met.
type ParseReleaseFileResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseReleaseFileResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseReleaseFileResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseReleaseFileResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseReleaseFileResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseReleaseFileResponseDataValidationError) ErrorName() string {
	return "ParseReleaseFileResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ParseReleaseFileResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseReleaseFileResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseReleaseFileResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseReleaseFileResponseDataValidationError{}

// Validate checks the field values on FormalReleaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormalReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormalReleaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormalReleaseRequestMultiError, or nil if none found.
func (m *FormalReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FormalReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseId

	if len(errors) > 0 {
		return FormalReleaseRequestMultiError(errors)
	}

	return nil
}

// FormalReleaseRequestMultiError is an error wrapping multiple validation
// errors returned by FormalReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type FormalReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormalReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormalReleaseRequestMultiError) AllErrors() []error { return m }

// FormalReleaseRequestValidationError is the validation error returned by
// FormalReleaseRequest.Validate if the designated constraints aren't met.
type FormalReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormalReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormalReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormalReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormalReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormalReleaseRequestValidationError) ErrorName() string {
	return "FormalReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FormalReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormalReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormalReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormalReleaseRequestValidationError{}

// Validate checks the field values on FormalReleaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormalReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormalReleaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormalReleaseResponseMultiError, or nil if none found.
func (m *FormalReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormalReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return FormalReleaseResponseMultiError(errors)
	}

	return nil
}

// FormalReleaseResponseMultiError is an error wrapping multiple validation
// errors returned by FormalReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type FormalReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormalReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormalReleaseResponseMultiError) AllErrors() []error { return m }

// FormalReleaseResponseValidationError is the validation error returned by
// FormalReleaseResponse.Validate if the designated constraints aren't met.
type FormalReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormalReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormalReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormalReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormalReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormalReleaseResponseValidationError) ErrorName() string {
	return "FormalReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FormalReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormalReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormalReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormalReleaseResponseValidationError{}

// Validate checks the field values on FormalReleasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormalReleasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormalReleasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormalReleasesRequestMultiError, or nil if none found.
func (m *FormalReleasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FormalReleasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsProjectRelease

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return FormalReleasesRequestMultiError(errors)
	}

	return nil
}

// FormalReleasesRequestMultiError is an error wrapping multiple validation
// errors returned by FormalReleasesRequest.ValidateAll() if the designated
// constraints aren't met.
type FormalReleasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormalReleasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormalReleasesRequestMultiError) AllErrors() []error { return m }

// FormalReleasesRequestValidationError is the validation error returned by
// FormalReleasesRequest.Validate if the designated constraints aren't met.
type FormalReleasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormalReleasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormalReleasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormalReleasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormalReleasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormalReleasesRequestValidationError) ErrorName() string {
	return "FormalReleasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FormalReleasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormalReleasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormalReleasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormalReleasesRequestValidationError{}

// Validate checks the field values on FormalReleasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormalReleasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormalReleasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormalReleasesResponseMultiError, or nil if none found.
func (m *FormalReleasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormalReleasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return FormalReleasesResponseMultiError(errors)
	}

	return nil
}

// FormalReleasesResponseMultiError is an error wrapping multiple validation
// errors returned by FormalReleasesResponse.ValidateAll() if the designated
// constraints aren't met.
type FormalReleasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormalReleasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormalReleasesResponseMultiError) AllErrors() []error { return m }

// FormalReleasesResponseValidationError is the validation error returned by
// FormalReleasesResponse.Validate if the designated constraints aren't met.
type FormalReleasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormalReleasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormalReleasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormalReleasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormalReleasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormalReleasesResponseValidationError) ErrorName() string {
	return "FormalReleasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FormalReleasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormalReleasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormalReleasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormalReleasesResponseValidationError{}

// Validate checks the field values on ReleasesDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasesDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasesDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasesDeleteRequestMultiError, or nil if none found.
func (m *ReleasesDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasesDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsProjectRelease

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ReleasesDeleteRequestMultiError(errors)
	}

	return nil
}

// ReleasesDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ReleasesDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleasesDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasesDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasesDeleteRequestMultiError) AllErrors() []error { return m }

// ReleasesDeleteRequestValidationError is the validation error returned by
// ReleasesDeleteRequest.Validate if the designated constraints aren't met.
type ReleasesDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasesDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasesDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasesDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasesDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasesDeleteRequestValidationError) ErrorName() string {
	return "ReleasesDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasesDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasesDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasesDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasesDeleteRequestValidationError{}

// Validate checks the field values on ReleasesDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasesDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasesDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasesDeleteResponseMultiError, or nil if none found.
func (m *ReleasesDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasesDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleasesDeleteResponseMultiError(errors)
	}

	return nil
}

// ReleasesDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ReleasesDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleasesDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasesDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasesDeleteResponseMultiError) AllErrors() []error { return m }

// ReleasesDeleteResponseValidationError is the validation error returned by
// ReleasesDeleteResponse.Validate if the designated constraints aren't met.
type ReleasesDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasesDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasesDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasesDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasesDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasesDeleteResponseValidationError) ErrorName() string {
	return "ReleasesDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasesDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasesDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasesDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasesDeleteResponseValidationError{}

// Validate checks the field values on CheckVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVersionRequestMultiError, or nil if none found.
func (m *CheckVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsProjectRelease

	// no validation rules for AppID

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for Version

	if len(errors) > 0 {
		return CheckVersionRequestMultiError(errors)
	}

	return nil
}

// CheckVersionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVersionRequestMultiError) AllErrors() []error { return m }

// CheckVersionRequestValidationError is the validation error returned by
// CheckVersionRequest.Validate if the designated constraints aren't met.
type CheckVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVersionRequestValidationError) ErrorName() string {
	return "CheckVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVersionRequestValidationError{}

// Validate checks the field values on CheckVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVersionResponseMultiError, or nil if none found.
func (m *CheckVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckVersionResponseMultiError(errors)
	}

	return nil
}

// CheckVersionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVersionResponseMultiError) AllErrors() []error { return m }

// CheckVersionResponseValidationError is the validation error returned by
// CheckVersionResponse.Validate if the designated constraints aren't met.
type CheckVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVersionResponseValidationError) ErrorName() string {
	return "CheckVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVersionResponseValidationError{}

// Validate checks the field values on CheckVersionResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckVersionResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVersionResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVersionResponseDataMultiError, or nil if none found.
func (m *CheckVersionResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVersionResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsUnique

	if len(errors) > 0 {
		return CheckVersionResponseDataMultiError(errors)
	}

	return nil
}

// CheckVersionResponseDataMultiError is an error wrapping multiple validation
// errors returned by CheckVersionResponseData.ValidateAll() if the designated
// constraints aren't met.
type CheckVersionResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVersionResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVersionResponseDataMultiError) AllErrors() []error { return m }

// CheckVersionResponseDataValidationError is the validation error returned by
// CheckVersionResponseData.Validate if the designated constraints aren't met.
type CheckVersionResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVersionResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVersionResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVersionResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVersionResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVersionResponseDataValidationError) ErrorName() string {
	return "CheckVersionResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVersionResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVersionResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVersionResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVersionResponseDataValidationError{}

// Validate checks the field values on UpdateGalleryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGalleryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGalleryInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGalleryInfoRequestMultiError, or nil if none found.
func (m *UpdateGalleryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGalleryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	if len(errors) > 0 {
		return UpdateGalleryInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGalleryInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGalleryInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGalleryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGalleryInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGalleryInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGalleryInfoRequestValidationError is the validation error returned by
// UpdateGalleryInfoRequest.Validate if the designated constraints aren't met.
type UpdateGalleryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGalleryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGalleryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGalleryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGalleryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGalleryInfoRequestValidationError) ErrorName() string {
	return "UpdateGalleryInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGalleryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGalleryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGalleryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGalleryInfoRequestValidationError{}

// Validate checks the field values on ReleasePutOnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasePutOnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasePutOnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasePutOnRequestMultiError, or nil if none found.
func (m *ReleasePutOnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasePutOnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleasePutOnRequestValidationError{
					field:  "Req",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleasePutOnRequestValidationError{
					field:  "Req",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleasePutOnRequestValidationError{
				field:  "Req",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleasePutOnRequestMultiError(errors)
	}

	return nil
}

// ReleasePutOnRequestMultiError is an error wrapping multiple validation
// errors returned by ReleasePutOnRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleasePutOnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasePutOnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasePutOnRequestMultiError) AllErrors() []error { return m }

// ReleasePutOnRequestValidationError is the validation error returned by
// ReleasePutOnRequest.Validate if the designated constraints aren't met.
type ReleasePutOnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasePutOnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasePutOnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasePutOnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasePutOnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasePutOnRequestValidationError) ErrorName() string {
	return "ReleasePutOnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasePutOnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasePutOnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasePutOnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasePutOnRequestValidationError{}

// Validate checks the field values on ReleasePutOnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasePutOnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasePutOnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasePutOnResponseMultiError, or nil if none found.
func (m *ReleasePutOnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasePutOnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleasePutOnResponseMultiError(errors)
	}

	return nil
}

// ReleasePutOnResponseMultiError is an error wrapping multiple validation
// errors returned by ReleasePutOnResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleasePutOnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasePutOnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasePutOnResponseMultiError) AllErrors() []error { return m }

// ReleasePutOnResponseValidationError is the validation error returned by
// ReleasePutOnResponse.Validate if the designated constraints aren't met.
type ReleasePutOnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasePutOnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasePutOnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasePutOnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasePutOnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasePutOnResponseValidationError) ErrorName() string {
	return "ReleasePutOnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasePutOnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasePutOnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasePutOnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasePutOnResponseValidationError{}

// Validate checks the field values on ReleasePutOffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasePutOffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasePutOffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasePutOffRequestMultiError, or nil if none found.
func (m *ReleasePutOffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasePutOffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleasePutOffRequestValidationError{
					field:  "Req",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleasePutOffRequestValidationError{
					field:  "Req",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleasePutOffRequestValidationError{
				field:  "Req",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ReleasePutOffRequestMultiError(errors)
	}

	return nil
}

// ReleasePutOffRequestMultiError is an error wrapping multiple validation
// errors returned by ReleasePutOffRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleasePutOffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasePutOffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasePutOffRequestMultiError) AllErrors() []error { return m }

// ReleasePutOffRequestValidationError is the validation error returned by
// ReleasePutOffRequest.Validate if the designated constraints aren't met.
type ReleasePutOffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasePutOffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasePutOffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasePutOffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasePutOffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasePutOffRequestValidationError) ErrorName() string {
	return "ReleasePutOffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasePutOffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasePutOffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasePutOffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasePutOffRequestValidationError{}

// Validate checks the field values on ReleasePutOffResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleasePutOffResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleasePutOffResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleasePutOffResponseMultiError, or nil if none found.
func (m *ReleasePutOffResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleasePutOffResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleasePutOffResponseMultiError(errors)
	}

	return nil
}

// ReleasePutOffResponseMultiError is an error wrapping multiple validation
// errors returned by ReleasePutOffResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleasePutOffResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleasePutOffResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleasePutOffResponseMultiError) AllErrors() []error { return m }

// ReleasePutOffResponseValidationError is the validation error returned by
// ReleasePutOffResponse.Validate if the designated constraints aren't met.
type ReleasePutOffResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleasePutOffResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleasePutOffResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleasePutOffResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleasePutOffResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleasePutOffResponseValidationError) ErrorName() string {
	return "ReleasePutOffResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleasePutOffResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleasePutOffResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleasePutOffResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleasePutOffResponseValidationError{}
