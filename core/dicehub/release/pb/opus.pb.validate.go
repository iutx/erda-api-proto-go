// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: opus.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PutOnArtifactsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutOnArtifactsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOnArtifactsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutOnArtifactsReqMultiError, or nil if none found.
func (m *PutOnArtifactsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOnArtifactsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for UserID

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return PutOnArtifactsReqMultiError(errors)
	}

	return nil
}

// PutOnArtifactsReqMultiError is an error wrapping multiple validation errors
// returned by PutOnArtifactsReq.ValidateAll() if the designated constraints
// aren't met.
type PutOnArtifactsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOnArtifactsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOnArtifactsReqMultiError) AllErrors() []error { return m }

// PutOnArtifactsReqValidationError is the validation error returned by
// PutOnArtifactsReq.Validate if the designated constraints aren't met.
type PutOnArtifactsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOnArtifactsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOnArtifactsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOnArtifactsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOnArtifactsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOnArtifactsReqValidationError) ErrorName() string {
	return "PutOnArtifactsReqValidationError"
}

// Error satisfies the builtin error interface
func (e PutOnArtifactsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOnArtifactsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOnArtifactsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOnArtifactsReqValidationError{}

// Validate checks the field values on PutOffArtifactsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutOffArtifactsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOffArtifactsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutOffArtifactsReqMultiError, or nil if none found.
func (m *PutOffArtifactsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOffArtifactsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for UserID

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return PutOffArtifactsReqMultiError(errors)
	}

	return nil
}

// PutOffArtifactsReqMultiError is an error wrapping multiple validation errors
// returned by PutOffArtifactsReq.ValidateAll() if the designated constraints
// aren't met.
type PutOffArtifactsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOffArtifactsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOffArtifactsReqMultiError) AllErrors() []error { return m }

// PutOffArtifactsReqValidationError is the validation error returned by
// PutOffArtifactsReq.Validate if the designated constraints aren't met.
type PutOffArtifactsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOffArtifactsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOffArtifactsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOffArtifactsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOffArtifactsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOffArtifactsReqValidationError) ErrorName() string {
	return "PutOffArtifactsReqValidationError"
}

// Error satisfies the builtin error interface
func (e PutOffArtifactsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOffArtifactsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOffArtifactsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOffArtifactsReqValidationError{}

// Validate checks the field values on ListArtifactsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListArtifactsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArtifactsReqMultiError, or nil if none found.
func (m *ListArtifactsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for UserID

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListArtifactsReqMultiError(errors)
	}

	return nil
}

// ListArtifactsReqMultiError is an error wrapping multiple validation errors
// returned by ListArtifactsReq.ValidateAll() if the designated constraints
// aren't met.
type ListArtifactsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactsReqMultiError) AllErrors() []error { return m }

// ListArtifactsReqValidationError is the validation error returned by
// ListArtifactsReq.Validate if the designated constraints aren't met.
type ListArtifactsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsReqValidationError) ErrorName() string { return "ListArtifactsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListArtifactsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsReqValidationError{}

// Validate checks the field values on ListArtifactsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListArtifactsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArtifactsRespMultiError, or nil if none found.
func (m *ListArtifactsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListArtifactsRespValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListArtifactsRespValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListArtifactsRespValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListArtifactsRespMultiError(errors)
	}

	return nil
}

// ListArtifactsRespMultiError is an error wrapping multiple validation errors
// returned by ListArtifactsResp.ValidateAll() if the designated constraints
// aren't met.
type ListArtifactsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactsRespMultiError) AllErrors() []error { return m }

// ListArtifactsRespValidationError is the validation error returned by
// ListArtifactsResp.Validate if the designated constraints aren't met.
type ListArtifactsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsRespValidationError) ErrorName() string {
	return "ListArtifactsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsRespValidationError{}

// Validate checks the field values on ListArtifactsRespItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArtifactsRespItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactsRespItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArtifactsRespItemMultiError, or nil if none found.
func (m *ListArtifactsRespItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactsRespItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpusID

	// no validation rules for OpusVersionID

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ListArtifactsRespItemMultiError(errors)
	}

	return nil
}

// ListArtifactsRespItemMultiError is an error wrapping multiple validation
// errors returned by ListArtifactsRespItem.ValidateAll() if the designated
// constraints aren't met.
type ListArtifactsRespItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactsRespItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactsRespItemMultiError) AllErrors() []error { return m }

// ListArtifactsRespItemValidationError is the validation error returned by
// ListArtifactsRespItem.Validate if the designated constraints aren't met.
type ListArtifactsRespItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsRespItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsRespItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsRespItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsRespItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsRespItemValidationError) ErrorName() string {
	return "ListArtifactsRespItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsRespItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsRespItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsRespItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsRespItemValidationError{}
