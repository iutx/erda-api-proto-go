// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: expression.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetExpressionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExpressionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExpressionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExpressionsRequestMultiError, or nil if none found.
func (m *GetExpressionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExpressionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return GetExpressionsRequestMultiError(errors)
	}

	return nil
}

// GetExpressionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetExpressionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExpressionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExpressionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExpressionsRequestMultiError) AllErrors() []error { return m }

// GetExpressionsRequestValidationError is the validation error returned by
// GetExpressionsRequest.Validate if the designated constraints aren't met.
type GetExpressionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExpressionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExpressionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExpressionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExpressionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExpressionsRequestValidationError) ErrorName() string {
	return "GetExpressionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExpressionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExpressionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExpressionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExpressionsRequestValidationError{}

// Validate checks the field values on GetExpressionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExpressionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExpressionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExpressionsResponseMultiError, or nil if none found.
func (m *GetExpressionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExpressionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExpressionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExpressionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExpressionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExpressionsResponseMultiError(errors)
	}

	return nil
}

// GetExpressionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetExpressionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExpressionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExpressionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExpressionsResponseMultiError) AllErrors() []error { return m }

// GetExpressionsResponseValidationError is the validation error returned by
// GetExpressionsResponse.Validate if the designated constraints aren't met.
type GetExpressionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExpressionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExpressionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExpressionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExpressionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExpressionsResponseValidationError) ErrorName() string {
	return "GetExpressionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExpressionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExpressionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExpressionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExpressionsResponseValidationError{}

// Validate checks the field values on GetMetricExpressionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricExpressionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricExpressionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricExpressionsRequestMultiError, or nil if none found.
func (m *GetMetricExpressionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricExpressionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return GetMetricExpressionsRequestMultiError(errors)
	}

	return nil
}

// GetMetricExpressionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetMetricExpressionsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMetricExpressionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricExpressionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricExpressionsRequestMultiError) AllErrors() []error { return m }

// GetMetricExpressionsRequestValidationError is the validation error returned
// by GetMetricExpressionsRequest.Validate if the designated constraints
// aren't met.
type GetMetricExpressionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricExpressionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricExpressionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricExpressionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricExpressionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricExpressionsRequestValidationError) ErrorName() string {
	return "GetMetricExpressionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricExpressionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricExpressionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricExpressionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricExpressionsRequestValidationError{}

// Validate checks the field values on GetMetricExpressionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricExpressionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricExpressionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricExpressionsResponseMultiError, or nil if none found.
func (m *GetMetricExpressionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricExpressionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetricExpressionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetricExpressionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricExpressionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetricExpressionsResponseMultiError(errors)
	}

	return nil
}

// GetMetricExpressionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetMetricExpressionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMetricExpressionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricExpressionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricExpressionsResponseMultiError) AllErrors() []error { return m }

// GetMetricExpressionsResponseValidationError is the validation error returned
// by GetMetricExpressionsResponse.Validate if the designated constraints
// aren't met.
type GetMetricExpressionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricExpressionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricExpressionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricExpressionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricExpressionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricExpressionsResponseValidationError) ErrorName() string {
	return "GetMetricExpressionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricExpressionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricExpressionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricExpressionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricExpressionsResponseValidationError{}

// Validate checks the field values on ExpressionData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpressionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpressionData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionDataMultiError,
// or nil if none found.
func (m *ExpressionData) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpressionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ExpressionDataMultiError(errors)
	}

	return nil
}

// ExpressionDataMultiError is an error wrapping multiple validation errors
// returned by ExpressionData.ValidateAll() if the designated constraints
// aren't met.
type ExpressionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionDataMultiError) AllErrors() []error { return m }

// ExpressionDataValidationError is the validation error returned by
// ExpressionData.Validate if the designated constraints aren't met.
type ExpressionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionDataValidationError) ErrorName() string { return "ExpressionDataValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpressionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionDataValidationError{}

// Validate checks the field values on Expression with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionMultiError, or
// nil if none found.
func (m *Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExpressionValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExpressionValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExpressionValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetExpression()))
		i := 0
		for key := range m.GetExpression() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetExpression()[key]
			_ = val

			// no validation rules for Expression[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExpressionValidationError{
							field:  fmt.Sprintf("Expression[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExpressionValidationError{
							field:  fmt.Sprintf("Expression[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExpressionValidationError{
						field:  fmt.Sprintf("Expression[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Enable

	// no validation rules for AlertId

	if len(errors) > 0 {
		return ExpressionMultiError(errors)
	}

	return nil
}

// ExpressionMultiError is an error wrapping multiple validation errors
// returned by Expression.ValidateAll() if the designated constraints aren't met.
type ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionMultiError) AllErrors() []error { return m }

// ExpressionValidationError is the validation error returned by
// Expression.Validate if the designated constraints aren't met.
type ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionValidationError) ErrorName() string { return "ExpressionValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionValidationError{}

// Validate checks the field values on GetAlertNotifiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertNotifiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertNotifiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertNotifiesRequestMultiError, or nil if none found.
func (m *GetAlertNotifiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertNotifiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNo

	if len(errors) > 0 {
		return GetAlertNotifiesRequestMultiError(errors)
	}

	return nil
}

// GetAlertNotifiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertNotifiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertNotifiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertNotifiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertNotifiesRequestMultiError) AllErrors() []error { return m }

// GetAlertNotifiesRequestValidationError is the validation error returned by
// GetAlertNotifiesRequest.Validate if the designated constraints aren't met.
type GetAlertNotifiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertNotifiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertNotifiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertNotifiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertNotifiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertNotifiesRequestValidationError) ErrorName() string {
	return "GetAlertNotifiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertNotifiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertNotifiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertNotifiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertNotifiesRequestValidationError{}

// Validate checks the field values on GetAlertNotifiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertNotifiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertNotifiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertNotifiesResponseMultiError, or nil if none found.
func (m *GetAlertNotifiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertNotifiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertNotifiesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertNotifiesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertNotifiesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertNotifiesResponseMultiError(errors)
	}

	return nil
}

// GetAlertNotifiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertNotifiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertNotifiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertNotifiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertNotifiesResponseMultiError) AllErrors() []error { return m }

// GetAlertNotifiesResponseValidationError is the validation error returned by
// GetAlertNotifiesResponse.Validate if the designated constraints aren't met.
type GetAlertNotifiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertNotifiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertNotifiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertNotifiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertNotifiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertNotifiesResponseValidationError) ErrorName() string {
	return "GetAlertNotifiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertNotifiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertNotifiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertNotifiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertNotifiesResponseValidationError{}

// Validate checks the field values on AlertNotifyData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertNotifyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotifyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertNotifyDataMultiError, or nil if none found.
func (m *AlertNotifyData) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotifyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertNotifyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertNotifyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertNotifyDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return AlertNotifyDataMultiError(errors)
	}

	return nil
}

// AlertNotifyDataMultiError is an error wrapping multiple validation errors
// returned by AlertNotifyData.ValidateAll() if the designated constraints
// aren't met.
type AlertNotifyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyDataMultiError) AllErrors() []error { return m }

// AlertNotifyDataValidationError is the validation error returned by
// AlertNotifyData.Validate if the designated constraints aren't met.
type AlertNotifyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyDataValidationError) ErrorName() string { return "AlertNotifyDataValidationError" }

// Error satisfies the builtin error interface
func (e AlertNotifyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotifyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyDataValidationError{}

// Validate checks the field values on AlertNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertNotifyMultiError, or
// nil if none found.
func (m *AlertNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlertId

	if all {
		switch v := interface{}(m.GetNotifyTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertNotifyValidationError{
				field:  "NotifyTarget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Silence

	// no validation rules for SilencePolicy

	// no validation rules for Enable

	if len(errors) > 0 {
		return AlertNotifyMultiError(errors)
	}

	return nil
}

// AlertNotifyMultiError is an error wrapping multiple validation errors
// returned by AlertNotify.ValidateAll() if the designated constraints aren't met.
type AlertNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyMultiError) AllErrors() []error { return m }

// AlertNotifyValidationError is the validation error returned by
// AlertNotify.Validate if the designated constraints aren't met.
type AlertNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyValidationError) ErrorName() string { return "AlertNotifyValidationError" }

// Error satisfies the builtin error interface
func (e AlertNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for GroupId

	// no validation rules for GroupType

	// no validation rules for Level

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on GetTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplatesRequestMultiError, or nil if none found.
func (m *GetTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetTemplatesRequestMultiError(errors)
	}

	return nil
}

// GetTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by GetTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplatesRequestMultiError) AllErrors() []error { return m }

// GetTemplatesRequestValidationError is the validation error returned by
// GetTemplatesRequest.Validate if the designated constraints aren't met.
type GetTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplatesRequestValidationError) ErrorName() string {
	return "GetTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplatesRequestValidationError{}

// Validate checks the field values on GetTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplatesResponseMultiError, or nil if none found.
func (m *GetTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplatesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplatesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplatesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTemplatesResponseMultiError(errors)
	}

	return nil
}

// GetTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplatesResponseMultiError) AllErrors() []error { return m }

// GetTemplatesResponseValidationError is the validation error returned by
// GetTemplatesResponse.Validate if the designated constraints aren't met.
type GetTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplatesResponseValidationError) ErrorName() string {
	return "GetTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplatesResponseValidationError{}

// Validate checks the field values on AlertTemplateData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertTemplateData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertTemplateData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertTemplateDataMultiError, or nil if none found.
func (m *AlertTemplateData) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertTemplateData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTemplateDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTemplateDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTemplateDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return AlertTemplateDataMultiError(errors)
	}

	return nil
}

// AlertTemplateDataMultiError is an error wrapping multiple validation errors
// returned by AlertTemplateData.ValidateAll() if the designated constraints
// aren't met.
type AlertTemplateDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertTemplateDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertTemplateDataMultiError) AllErrors() []error { return m }

// AlertTemplateDataValidationError is the validation error returned by
// AlertTemplateData.Validate if the designated constraints aren't met.
type AlertTemplateDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTemplateDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTemplateDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTemplateDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTemplateDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTemplateDataValidationError) ErrorName() string {
	return "AlertTemplateDataValidationError"
}

// Error satisfies the builtin error interface
func (e AlertTemplateDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTemplateData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTemplateDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTemplateDataValidationError{}

// Validate checks the field values on AlertTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertTemplateMultiError, or
// nil if none found.
func (m *AlertTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertIndex

	// no validation rules for Target

	// no validation rules for Trigger

	// no validation rules for Title

	// no validation rules for Template

	{
		sorted_keys := make([]string, len(m.GetFormats()))
		i := 0
		for key := range m.GetFormats() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFormats()[key]
			_ = val

			// no validation rules for Formats[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AlertTemplateValidationError{
							field:  fmt.Sprintf("Formats[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AlertTemplateValidationError{
							field:  fmt.Sprintf("Formats[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AlertTemplateValidationError{
						field:  fmt.Sprintf("Formats[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Version

	// no validation rules for Enable

	// no validation rules for Language

	if len(errors) > 0 {
		return AlertTemplateMultiError(errors)
	}

	return nil
}

// AlertTemplateMultiError is an error wrapping multiple validation errors
// returned by AlertTemplate.ValidateAll() if the designated constraints
// aren't met.
type AlertTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertTemplateMultiError) AllErrors() []error { return m }

// AlertTemplateValidationError is the validation error returned by
// AlertTemplate.Validate if the designated constraints aren't met.
type AlertTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTemplateValidationError) ErrorName() string { return "AlertTemplateValidationError" }

// Error satisfies the builtin error interface
func (e AlertTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTemplateValidationError{}

// Validate checks the field values on GetOrgsLocaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgsLocaleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgsLocaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgsLocaleRequestMultiError, or nil if none found.
func (m *GetOrgsLocaleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgsLocaleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrgsLocaleRequestMultiError(errors)
	}

	return nil
}

// GetOrgsLocaleRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrgsLocaleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgsLocaleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgsLocaleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgsLocaleRequestMultiError) AllErrors() []error { return m }

// GetOrgsLocaleRequestValidationError is the validation error returned by
// GetOrgsLocaleRequest.Validate if the designated constraints aren't met.
type GetOrgsLocaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgsLocaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgsLocaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgsLocaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgsLocaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgsLocaleRequestValidationError) ErrorName() string {
	return "GetOrgsLocaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgsLocaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgsLocaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgsLocaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgsLocaleRequestValidationError{}

// Validate checks the field values on GetOrgsLocaleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgsLocaleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgsLocaleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgsLocaleResponseMultiError, or nil if none found.
func (m *GetOrgsLocaleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgsLocaleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetOrgsLocaleResponseMultiError(errors)
	}

	return nil
}

// GetOrgsLocaleResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrgsLocaleResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrgsLocaleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgsLocaleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgsLocaleResponseMultiError) AllErrors() []error { return m }

// GetOrgsLocaleResponseValidationError is the validation error returned by
// GetOrgsLocaleResponse.Validate if the designated constraints aren't met.
type GetOrgsLocaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgsLocaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgsLocaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgsLocaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgsLocaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgsLocaleResponseValidationError) ErrorName() string {
	return "GetOrgsLocaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgsLocaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgsLocaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgsLocaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgsLocaleResponseValidationError{}
