// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: alert.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CountUnRecoverAlertEventsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUnRecoverAlertEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUnRecoverAlertEventsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountUnRecoverAlertEventsRequestMultiError, or nil if none found.
func (m *CountUnRecoverAlertEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUnRecoverAlertEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return CountUnRecoverAlertEventsRequestMultiError(errors)
	}

	return nil
}

// CountUnRecoverAlertEventsRequestMultiError is an error wrapping multiple
// validation errors returned by
// CountUnRecoverAlertEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type CountUnRecoverAlertEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUnRecoverAlertEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUnRecoverAlertEventsRequestMultiError) AllErrors() []error { return m }

// CountUnRecoverAlertEventsRequestValidationError is the validation error
// returned by CountUnRecoverAlertEventsRequest.Validate if the designated
// constraints aren't met.
type CountUnRecoverAlertEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUnRecoverAlertEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUnRecoverAlertEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUnRecoverAlertEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUnRecoverAlertEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUnRecoverAlertEventsRequestValidationError) ErrorName() string {
	return "CountUnRecoverAlertEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountUnRecoverAlertEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUnRecoverAlertEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUnRecoverAlertEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUnRecoverAlertEventsRequestValidationError{}

// Validate checks the field values on CountUnRecoverAlertEventsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUnRecoverAlertEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUnRecoverAlertEventsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountUnRecoverAlertEventsResponseMultiError, or nil if none found.
func (m *CountUnRecoverAlertEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUnRecoverAlertEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CountUnRecoverAlertEventsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CountUnRecoverAlertEventsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CountUnRecoverAlertEventsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CountUnRecoverAlertEventsResponseMultiError(errors)
	}

	return nil
}

// CountUnRecoverAlertEventsResponseMultiError is an error wrapping multiple
// validation errors returned by
// CountUnRecoverAlertEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type CountUnRecoverAlertEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUnRecoverAlertEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUnRecoverAlertEventsResponseMultiError) AllErrors() []error { return m }

// CountUnRecoverAlertEventsResponseValidationError is the validation error
// returned by CountUnRecoverAlertEventsResponse.Validate if the designated
// constraints aren't met.
type CountUnRecoverAlertEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUnRecoverAlertEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUnRecoverAlertEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUnRecoverAlertEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUnRecoverAlertEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUnRecoverAlertEventsResponseValidationError) ErrorName() string {
	return "CountUnRecoverAlertEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountUnRecoverAlertEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUnRecoverAlertEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUnRecoverAlertEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUnRecoverAlertEventsResponseValidationError{}

// Validate checks the field values on CountUnRecoverAlertEventsResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountUnRecoverAlertEventsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUnRecoverAlertEventsResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountUnRecoverAlertEventsResultMultiError, or nil if none found.
func (m *CountUnRecoverAlertEventsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUnRecoverAlertEventsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return CountUnRecoverAlertEventsResultMultiError(errors)
	}

	return nil
}

// CountUnRecoverAlertEventsResultMultiError is an error wrapping multiple
// validation errors returned by CountUnRecoverAlertEventsResult.ValidateAll()
// if the designated constraints aren't met.
type CountUnRecoverAlertEventsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUnRecoverAlertEventsResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUnRecoverAlertEventsResultMultiError) AllErrors() []error { return m }

// CountUnRecoverAlertEventsResultValidationError is the validation error
// returned by CountUnRecoverAlertEventsResult.Validate if the designated
// constraints aren't met.
type CountUnRecoverAlertEventsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUnRecoverAlertEventsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUnRecoverAlertEventsResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUnRecoverAlertEventsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUnRecoverAlertEventsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUnRecoverAlertEventsResultValidationError) ErrorName() string {
	return "CountUnRecoverAlertEventsResultValidationError"
}

// Error satisfies the builtin error interface
func (e CountUnRecoverAlertEventsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUnRecoverAlertEventsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUnRecoverAlertEventsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUnRecoverAlertEventsResultValidationError{}

// Validate checks the field values on GetRawAlertExpressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawAlertExpressionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawAlertExpressionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRawAlertExpressionResponseMultiError, or nil if none found.
func (m *GetRawAlertExpressionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawAlertExpressionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRawAlertExpressionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRawAlertExpressionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRawAlertExpressionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRawAlertExpressionResponseMultiError(errors)
	}

	return nil
}

// GetRawAlertExpressionResponseMultiError is an error wrapping multiple
// validation errors returned by GetRawAlertExpressionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetRawAlertExpressionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawAlertExpressionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawAlertExpressionResponseMultiError) AllErrors() []error { return m }

// GetRawAlertExpressionResponseValidationError is the validation error
// returned by GetRawAlertExpressionResponse.Validate if the designated
// constraints aren't met.
type GetRawAlertExpressionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawAlertExpressionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawAlertExpressionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawAlertExpressionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawAlertExpressionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawAlertExpressionResponseValidationError) ErrorName() string {
	return "GetRawAlertExpressionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawAlertExpressionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawAlertExpressionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawAlertExpressionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawAlertExpressionResponseValidationError{}

// Validate checks the field values on RawAlertExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RawAlertExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawAlertExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RawAlertExpressionMultiError, or nil if none found.
func (m *RawAlertExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *RawAlertExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlertId

	// no validation rules for Expression

	// no validation rules for Attributes

	// no validation rules for Version

	// no validation rules for Enable

	if len(errors) > 0 {
		return RawAlertExpressionMultiError(errors)
	}

	return nil
}

// RawAlertExpressionMultiError is an error wrapping multiple validation errors
// returned by RawAlertExpression.ValidateAll() if the designated constraints
// aren't met.
type RawAlertExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawAlertExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawAlertExpressionMultiError) AllErrors() []error { return m }

// RawAlertExpressionValidationError is the validation error returned by
// RawAlertExpression.Validate if the designated constraints aren't met.
type RawAlertExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawAlertExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawAlertExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawAlertExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawAlertExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawAlertExpressionValidationError) ErrorName() string {
	return "RawAlertExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e RawAlertExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawAlertExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawAlertExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawAlertExpressionValidationError{}

// Validate checks the field values on GetRawAlertExpressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawAlertExpressionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawAlertExpressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawAlertExpressionRequestMultiError, or nil if none found.
func (m *GetRawAlertExpressionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawAlertExpressionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRawAlertExpressionRequestMultiError(errors)
	}

	return nil
}

// GetRawAlertExpressionRequestMultiError is an error wrapping multiple
// validation errors returned by GetRawAlertExpressionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetRawAlertExpressionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawAlertExpressionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawAlertExpressionRequestMultiError) AllErrors() []error { return m }

// GetRawAlertExpressionRequestValidationError is the validation error returned
// by GetRawAlertExpressionRequest.Validate if the designated constraints
// aren't met.
type GetRawAlertExpressionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawAlertExpressionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawAlertExpressionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawAlertExpressionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawAlertExpressionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawAlertExpressionRequestValidationError) ErrorName() string {
	return "GetRawAlertExpressionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawAlertExpressionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawAlertExpressionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawAlertExpressionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawAlertExpressionRequestValidationError{}

// Validate checks the field values on AlertEventSort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertEventSort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertEventSort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertEventSortMultiError,
// or nil if none found.
func (m *AlertEventSort) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertEventSort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortField

	// no validation rules for Descending

	if len(errors) > 0 {
		return AlertEventSortMultiError(errors)
	}

	return nil
}

// AlertEventSortMultiError is an error wrapping multiple validation errors
// returned by AlertEventSort.ValidateAll() if the designated constraints
// aren't met.
type AlertEventSortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertEventSortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertEventSortMultiError) AllErrors() []error { return m }

// AlertEventSortValidationError is the validation error returned by
// AlertEventSort.Validate if the designated constraints aren't met.
type AlertEventSortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertEventSortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertEventSortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertEventSortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertEventSortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertEventSortValidationError) ErrorName() string { return "AlertEventSortValidationError" }

// Error satisfies the builtin error interface
func (e AlertEventSortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertEventSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertEventSortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertEventSortValidationError{}

// Validate checks the field values on SuppressAlertEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuppressAlertEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuppressAlertEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuppressAlertEventRequestMultiError, or nil if none found.
func (m *SuppressAlertEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuppressAlertEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for AlertEventID

	// no validation rules for SuppressType

	// no validation rules for ExpireTime

	if len(errors) > 0 {
		return SuppressAlertEventRequestMultiError(errors)
	}

	return nil
}

// SuppressAlertEventRequestMultiError is an error wrapping multiple validation
// errors returned by SuppressAlertEventRequest.ValidateAll() if the
// designated constraints aren't met.
type SuppressAlertEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuppressAlertEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuppressAlertEventRequestMultiError) AllErrors() []error { return m }

// SuppressAlertEventRequestValidationError is the validation error returned by
// SuppressAlertEventRequest.Validate if the designated constraints aren't met.
type SuppressAlertEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuppressAlertEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuppressAlertEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuppressAlertEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuppressAlertEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuppressAlertEventRequestValidationError) ErrorName() string {
	return "SuppressAlertEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuppressAlertEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuppressAlertEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuppressAlertEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuppressAlertEventRequestValidationError{}

// Validate checks the field values on SuppressAlertEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuppressAlertEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuppressAlertEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuppressAlertEventResponseMultiError, or nil if none found.
func (m *SuppressAlertEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuppressAlertEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SuppressAlertEventResponseMultiError(errors)
	}

	return nil
}

// SuppressAlertEventResponseMultiError is an error wrapping multiple
// validation errors returned by SuppressAlertEventResponse.ValidateAll() if
// the designated constraints aren't met.
type SuppressAlertEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuppressAlertEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuppressAlertEventResponseMultiError) AllErrors() []error { return m }

// SuppressAlertEventResponseValidationError is the validation error returned
// by SuppressAlertEventResponse.Validate if the designated constraints aren't met.
type SuppressAlertEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuppressAlertEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuppressAlertEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuppressAlertEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuppressAlertEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuppressAlertEventResponseValidationError) ErrorName() string {
	return "SuppressAlertEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuppressAlertEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuppressAlertEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuppressAlertEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuppressAlertEventResponseValidationError{}

// Validate checks the field values on CancelSuppressAlertEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSuppressAlertEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSuppressAlertEventRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelSuppressAlertEventRequestMultiError, or nil if none found.
func (m *CancelSuppressAlertEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSuppressAlertEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlertEventID

	if len(errors) > 0 {
		return CancelSuppressAlertEventRequestMultiError(errors)
	}

	return nil
}

// CancelSuppressAlertEventRequestMultiError is an error wrapping multiple
// validation errors returned by CancelSuppressAlertEventRequest.ValidateAll()
// if the designated constraints aren't met.
type CancelSuppressAlertEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSuppressAlertEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSuppressAlertEventRequestMultiError) AllErrors() []error { return m }

// CancelSuppressAlertEventRequestValidationError is the validation error
// returned by CancelSuppressAlertEventRequest.Validate if the designated
// constraints aren't met.
type CancelSuppressAlertEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSuppressAlertEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSuppressAlertEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSuppressAlertEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSuppressAlertEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSuppressAlertEventRequestValidationError) ErrorName() string {
	return "CancelSuppressAlertEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSuppressAlertEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSuppressAlertEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSuppressAlertEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSuppressAlertEventRequestValidationError{}

// Validate checks the field values on CancelSuppressAlertEventResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelSuppressAlertEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSuppressAlertEventResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelSuppressAlertEventResponseMultiError, or nil if none found.
func (m *CancelSuppressAlertEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSuppressAlertEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CancelSuppressAlertEventResponseMultiError(errors)
	}

	return nil
}

// CancelSuppressAlertEventResponseMultiError is an error wrapping multiple
// validation errors returned by
// CancelSuppressAlertEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelSuppressAlertEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSuppressAlertEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSuppressAlertEventResponseMultiError) AllErrors() []error { return m }

// CancelSuppressAlertEventResponseValidationError is the validation error
// returned by CancelSuppressAlertEventResponse.Validate if the designated
// constraints aren't met.
type CancelSuppressAlertEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSuppressAlertEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSuppressAlertEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSuppressAlertEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSuppressAlertEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSuppressAlertEventResponseValidationError) ErrorName() string {
	return "CancelSuppressAlertEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSuppressAlertEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSuppressAlertEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSuppressAlertEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSuppressAlertEventResponseValidationError{}

// Validate checks the field values on GetAlertEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertEventRequestMultiError, or nil if none found.
func (m *GetAlertEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertEventRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertEventRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertEventRequestValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageNo

	// no validation rules for PageSize

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertEventRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertEventRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertEventRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertEventRequestMultiError(errors)
	}

	return nil
}

// GetAlertEventRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertEventRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertEventRequestMultiError) AllErrors() []error { return m }

// GetAlertEventRequestValidationError is the validation error returned by
// GetAlertEventRequest.Validate if the designated constraints aren't met.
type GetAlertEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertEventRequestValidationError) ErrorName() string {
	return "GetAlertEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertEventRequestValidationError{}

// Validate checks the field values on GetAlertEventRequestCondition with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertEventRequestCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertEventRequestCondition with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAlertEventRequestConditionMultiError, or nil if none found.
func (m *GetAlertEventRequestCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertEventRequestCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for LastTriggerTimeMsMin

	// no validation rules for LastTriggerTimeMsMax

	if len(errors) > 0 {
		return GetAlertEventRequestConditionMultiError(errors)
	}

	return nil
}

// GetAlertEventRequestConditionMultiError is an error wrapping multiple
// validation errors returned by GetAlertEventRequestCondition.ValidateAll()
// if the designated constraints aren't met.
type GetAlertEventRequestConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertEventRequestConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertEventRequestConditionMultiError) AllErrors() []error { return m }

// GetAlertEventRequestConditionValidationError is the validation error
// returned by GetAlertEventRequestCondition.Validate if the designated
// constraints aren't met.
type GetAlertEventRequestConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertEventRequestConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertEventRequestConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertEventRequestConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertEventRequestConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertEventRequestConditionValidationError) ErrorName() string {
	return "GetAlertEventRequestConditionValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertEventRequestConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertEventRequestCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertEventRequestConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertEventRequestConditionValidationError{}

// Validate checks the field values on GetAlertEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertEventResponseMultiError, or nil if none found.
func (m *GetAlertEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertEventResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertEventResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertEventResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertEventResponseMultiError(errors)
	}

	return nil
}

// GetAlertEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertEventResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertEventResponseMultiError) AllErrors() []error { return m }

// GetAlertEventResponseValidationError is the validation error returned by
// GetAlertEventResponse.Validate if the designated constraints aren't met.
type GetAlertEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertEventResponseValidationError) ErrorName() string {
	return "GetAlertEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertEventResponseValidationError{}

// Validate checks the field values on AlertEventItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertEventItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertEventItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertEventItemMultiError,
// or nil if none found.
func (m *AlertEventItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertEventItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OrgID

	// no validation rules for AlertGroupID

	// no validation rules for AlertGroup

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for AlertID

	// no validation rules for AlertName

	// no validation rules for AlertType

	// no validation rules for AlertIndex

	// no validation rules for AlertLevel

	// no validation rules for AlertSource

	// no validation rules for AlertSubject

	// no validation rules for RuleID

	// no validation rules for RuleName

	// no validation rules for ExpressionID

	// no validation rules for LastTriggerTime

	// no validation rules for FirstTriggerTime

	// no validation rules for AlertState

	// no validation rules for SuppressExpireTime

	if len(errors) > 0 {
		return AlertEventItemMultiError(errors)
	}

	return nil
}

// AlertEventItemMultiError is an error wrapping multiple validation errors
// returned by AlertEventItem.ValidateAll() if the designated constraints
// aren't met.
type AlertEventItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertEventItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertEventItemMultiError) AllErrors() []error { return m }

// AlertEventItemValidationError is the validation error returned by
// AlertEventItem.Validate if the designated constraints aren't met.
type AlertEventItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertEventItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertEventItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertEventItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertEventItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertEventItemValidationError) ErrorName() string { return "AlertEventItemValidationError" }

// Error satisfies the builtin error interface
func (e AlertEventItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertEventItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertEventItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertEventItemValidationError{}

// Validate checks the field values on QueryCustomizeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeMetricRequestMultiError, or nil if none found.
func (m *QueryCustomizeMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return QueryCustomizeMetricRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeMetricRequestMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeMetricRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeMetricRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeMetricRequestValidationError is the validation error returned
// by QueryCustomizeMetricRequest.Validate if the designated constraints
// aren't met.
type QueryCustomizeMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeMetricRequestValidationError) ErrorName() string {
	return "QueryCustomizeMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeMetricRequestValidationError{}

// Validate checks the field values on QueryCustomizeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeMetricResponseMultiError, or nil if none found.
func (m *QueryCustomizeMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeMetricResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeMetricResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeMetricResponseMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeMetricResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeMetricResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeMetricResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeMetricResponseValidationError is the validation error returned
// by QueryCustomizeMetricResponse.Validate if the designated constraints
// aren't met.
type QueryCustomizeMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeMetricResponseValidationError) ErrorName() string {
	return "QueryCustomizeMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeMetricResponseValidationError{}

// Validate checks the field values on CustomizeMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CustomizeMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeMetricsMultiError, or nil if none found.
func (m *CustomizeMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeMetricsValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFunctionOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("FunctionOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("FunctionOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeMetricsValidationError{
					field:  fmt.Sprintf("FunctionOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFilterOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("FilterOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("FilterOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeMetricsValidationError{
					field:  fmt.Sprintf("FilterOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAggregator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("Aggregator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeMetricsValidationError{
						field:  fmt.Sprintf("Aggregator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeMetricsValidationError{
					field:  fmt.Sprintf("Aggregator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NotifySample

	if len(errors) > 0 {
		return CustomizeMetricsMultiError(errors)
	}

	return nil
}

// CustomizeMetricsMultiError is an error wrapping multiple validation errors
// returned by CustomizeMetrics.ValidateAll() if the designated constraints
// aren't met.
type CustomizeMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeMetricsMultiError) AllErrors() []error { return m }

// CustomizeMetricsValidationError is the validation error returned by
// CustomizeMetrics.Validate if the designated constraints aren't met.
type CustomizeMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeMetricsValidationError) ErrorName() string { return "CustomizeMetricsValidationError" }

// Error satisfies the builtin error interface
func (e CustomizeMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeMetricsValidationError{}

// Validate checks the field values on MetricMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricMetaMultiError, or
// nil if none found.
func (m *MetricMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricMetaValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricMetaValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricMetaValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricMetaValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricMetaValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricMetaValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricMetaValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricMetaValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricMetaValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricMetaMultiError(errors)
	}

	return nil
}

// MetricMetaMultiError is an error wrapping multiple validation errors
// returned by MetricMeta.ValidateAll() if the designated constraints aren't met.
type MetricMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricMetaMultiError) AllErrors() []error { return m }

// MetricMetaValidationError is the validation error returned by
// MetricMeta.Validate if the designated constraints aren't met.
type MetricMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricMetaValidationError) ErrorName() string { return "MetricMetaValidationError" }

// Error satisfies the builtin error interface
func (e MetricMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricMetaValidationError{}

// Validate checks the field values on DisplayKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisplayKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisplayKeyMultiError, or
// nil if none found.
func (m *DisplayKey) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Display

	if len(errors) > 0 {
		return DisplayKeyMultiError(errors)
	}

	return nil
}

// DisplayKeyMultiError is an error wrapping multiple validation errors
// returned by DisplayKey.ValidateAll() if the designated constraints aren't met.
type DisplayKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayKeyMultiError) AllErrors() []error { return m }

// DisplayKeyValidationError is the validation error returned by
// DisplayKey.Validate if the designated constraints aren't met.
type DisplayKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayKeyValidationError) ErrorName() string { return "DisplayKeyValidationError" }

// Error satisfies the builtin error interface
func (e DisplayKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayKeyValidationError{}

// Validate checks the field values on FieldMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FieldMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FieldMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FieldMetaMultiError, or nil
// if none found.
func (m *FieldMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *FieldMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetField()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FieldMetaValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FieldMetaValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FieldMetaValidationError{
				field:  "Field",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataType

	if len(errors) > 0 {
		return FieldMetaMultiError(errors)
	}

	return nil
}

// FieldMetaMultiError is an error wrapping multiple validation errors returned
// by FieldMeta.ValidateAll() if the designated constraints aren't met.
type FieldMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldMetaMultiError) AllErrors() []error { return m }

// FieldMetaValidationError is the validation error returned by
// FieldMeta.Validate if the designated constraints aren't met.
type FieldMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldMetaValidationError) ErrorName() string { return "FieldMetaValidationError" }

// Error satisfies the builtin error interface
func (e FieldMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFieldMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldMetaValidationError{}

// Validate checks the field values on TagMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMetaMultiError, or nil if none found.
func (m *TagMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *TagMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagMetaValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagMetaValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagMetaValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataType

	if len(errors) > 0 {
		return TagMetaMultiError(errors)
	}

	return nil
}

// TagMetaMultiError is an error wrapping multiple validation errors returned
// by TagMeta.ValidateAll() if the designated constraints aren't met.
type TagMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMetaMultiError) AllErrors() []error { return m }

// TagMetaValidationError is the validation error returned by TagMeta.Validate
// if the designated constraints aren't met.
type TagMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagMetaValidationError) ErrorName() string { return "TagMetaValidationError" }

// Error satisfies the builtin error interface
func (e TagMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagMetaValidationError{}

// Validate checks the field values on Operator with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Operator with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperatorMultiError, or nil
// if none found.
func (m *Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Display

	// no validation rules for Type

	if len(errors) > 0 {
		return OperatorMultiError(errors)
	}

	return nil
}

// OperatorMultiError is an error wrapping multiple validation errors returned
// by Operator.ValidateAll() if the designated constraints aren't met.
type OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorMultiError) AllErrors() []error { return m }

// OperatorValidationError is the validation error returned by
// Operator.Validate if the designated constraints aren't met.
type OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorValidationError) ErrorName() string { return "OperatorValidationError" }

// Error satisfies the builtin error interface
func (e OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorValidationError{}

// Validate checks the field values on QueryCustomizeNotifyTargetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryCustomizeNotifyTargetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeNotifyTargetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryCustomizeNotifyTargetRequestMultiError, or nil if none found.
func (m *QueryCustomizeNotifyTargetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeNotifyTargetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryCustomizeNotifyTargetRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeNotifyTargetRequestMultiError is an error wrapping multiple
// validation errors returned by
// QueryCustomizeNotifyTargetRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeNotifyTargetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeNotifyTargetRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeNotifyTargetRequestValidationError is the validation error
// returned by QueryCustomizeNotifyTargetRequest.Validate if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeNotifyTargetRequestValidationError) ErrorName() string {
	return "QueryCustomizeNotifyTargetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeNotifyTargetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeNotifyTargetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeNotifyTargetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeNotifyTargetRequestValidationError{}

// Validate checks the field values on QueryCustomizeNotifyTargetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryCustomizeNotifyTargetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeNotifyTargetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryCustomizeNotifyTargetResponseMultiError, or nil if none found.
func (m *QueryCustomizeNotifyTargetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeNotifyTargetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeNotifyTargetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeNotifyTargetResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeNotifyTargetResponseMultiError is an error wrapping multiple
// validation errors returned by
// QueryCustomizeNotifyTargetResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeNotifyTargetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeNotifyTargetResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeNotifyTargetResponseValidationError is the validation error
// returned by QueryCustomizeNotifyTargetResponse.Validate if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeNotifyTargetResponseValidationError) ErrorName() string {
	return "QueryCustomizeNotifyTargetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeNotifyTargetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeNotifyTargetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeNotifyTargetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeNotifyTargetResponseValidationError{}

// Validate checks the field values on QueryCustomizeNotifyTargetData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeNotifyTargetData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeNotifyTargetData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryCustomizeNotifyTargetDataMultiError, or nil if none found.
func (m *QueryCustomizeNotifyTargetData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeNotifyTargetData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCustomizeNotifyTargetDataValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCustomizeNotifyTargetDataValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCustomizeNotifyTargetDataValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryCustomizeNotifyTargetDataMultiError(errors)
	}

	return nil
}

// QueryCustomizeNotifyTargetDataMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeNotifyTargetData.ValidateAll()
// if the designated constraints aren't met.
type QueryCustomizeNotifyTargetDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeNotifyTargetDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeNotifyTargetDataMultiError) AllErrors() []error { return m }

// QueryCustomizeNotifyTargetDataValidationError is the validation error
// returned by QueryCustomizeNotifyTargetData.Validate if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeNotifyTargetDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeNotifyTargetDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeNotifyTargetDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeNotifyTargetDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeNotifyTargetDataValidationError) ErrorName() string {
	return "QueryCustomizeNotifyTargetDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeNotifyTargetDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeNotifyTargetData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeNotifyTargetDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeNotifyTargetDataValidationError{}

// Validate checks the field values on QueryOrgCustomizeNotifyTargetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *QueryOrgCustomizeNotifyTargetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeNotifyTargetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeNotifyTargetRequestMultiError, or nil if none found.
func (m *QueryOrgCustomizeNotifyTargetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeNotifyTargetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryOrgCustomizeNotifyTargetRequestMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeNotifyTargetRequestMultiError is an error wrapping multiple
// validation errors returned by
// QueryOrgCustomizeNotifyTargetRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgCustomizeNotifyTargetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeNotifyTargetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeNotifyTargetRequestMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeNotifyTargetRequestValidationError is the validation error
// returned by QueryOrgCustomizeNotifyTargetRequest.Validate if the designated
// constraints aren't met.
type QueryOrgCustomizeNotifyTargetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) ErrorName() string {
	return "QueryOrgCustomizeNotifyTargetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeNotifyTargetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeNotifyTargetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeNotifyTargetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeNotifyTargetRequestValidationError{}

// Validate checks the field values on QueryOrgCustomizeNotifyTargetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *QueryOrgCustomizeNotifyTargetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeNotifyTargetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeNotifyTargetResponseMultiError, or nil if none found.
func (m *QueryOrgCustomizeNotifyTargetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeNotifyTargetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgCustomizeNotifyTargetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgCustomizeNotifyTargetResponseMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeNotifyTargetResponseMultiError is an error wrapping
// multiple validation errors returned by
// QueryOrgCustomizeNotifyTargetResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgCustomizeNotifyTargetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeNotifyTargetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeNotifyTargetResponseMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeNotifyTargetResponseValidationError is the validation error
// returned by QueryOrgCustomizeNotifyTargetResponse.Validate if the
// designated constraints aren't met.
type QueryOrgCustomizeNotifyTargetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) ErrorName() string {
	return "QueryOrgCustomizeNotifyTargetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeNotifyTargetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeNotifyTargetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeNotifyTargetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeNotifyTargetResponseValidationError{}

// Validate checks the field values on QueryCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeAlertRequestMultiError, or nil if none found.
func (m *QueryCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if m.GetPageNo() <= 0 {
		err := QueryCustomizeAlertRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryCustomizeAlertRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeAlertRequestValidationError is the validation error returned
// by QueryCustomizeAlertRequest.Validate if the designated constraints aren't met.
type QueryCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeAlertRequestValidationError) ErrorName() string {
	return "QueryCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeAlertRequestValidationError{}

// Validate checks the field values on QueryCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeAlertResponseMultiError, or nil if none found.
func (m *QueryCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeAlertResponseValidationError is the validation error returned
// by QueryCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type QueryCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeAlertResponseValidationError) ErrorName() string {
	return "QueryCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeAlertResponseValidationError{}

// Validate checks the field values on QueryCustomizeAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeAlertData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeAlertDataMultiError, or nil if none found.
func (m *QueryCustomizeAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCustomizeAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCustomizeAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCustomizeAlertDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryCustomizeAlertDataMultiError(errors)
	}

	return nil
}

// QueryCustomizeAlertDataMultiError is an error wrapping multiple validation
// errors returned by QueryCustomizeAlertData.ValidateAll() if the designated
// constraints aren't met.
type QueryCustomizeAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeAlertDataMultiError) AllErrors() []error { return m }

// QueryCustomizeAlertDataValidationError is the validation error returned by
// QueryCustomizeAlertData.Validate if the designated constraints aren't met.
type QueryCustomizeAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeAlertDataValidationError) ErrorName() string {
	return "QueryCustomizeAlertDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeAlertDataValidationError{}

// Validate checks the field values on CustomizeAlertOverview with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertOverview with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeAlertOverviewMultiError, or nil if none found.
func (m *CustomizeAlertOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Metric

	// no validation rules for Window

	// no validation rules for DashboardId

	// no validation rules for Enable

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Creator

	if len(errors) > 0 {
		return CustomizeAlertOverviewMultiError(errors)
	}

	return nil
}

// CustomizeAlertOverviewMultiError is an error wrapping multiple validation
// errors returned by CustomizeAlertOverview.ValidateAll() if the designated
// constraints aren't met.
type CustomizeAlertOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertOverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertOverviewMultiError) AllErrors() []error { return m }

// CustomizeAlertOverviewValidationError is the validation error returned by
// CustomizeAlertOverview.Validate if the designated constraints aren't met.
type CustomizeAlertOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertOverviewValidationError) ErrorName() string {
	return "CustomizeAlertOverviewValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertOverviewValidationError{}

// Validate checks the field values on GetCustomizeAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertRequestMultiError, or nil if none found.
func (m *GetCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomizeAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// GetCustomizeAlertRequestValidationError is the validation error returned by
// GetCustomizeAlertRequest.Validate if the designated constraints aren't met.
type GetCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertRequestValidationError) ErrorName() string {
	return "GetCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertRequestValidationError{}

// Validate checks the field values on GetCustomizeAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertResponseMultiError, or nil if none found.
func (m *GetCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomizeAlertResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// GetCustomizeAlertResponseValidationError is the validation error returned by
// GetCustomizeAlertResponse.Validate if the designated constraints aren't met.
type GetCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertResponseValidationError) ErrorName() string {
	return "GetCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertResponseValidationError{}

// Validate checks the field values on CustomizeAlertDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeAlertDetailMultiError, or nil if none found.
func (m *CustomizeAlertDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomizeAlertDetailValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomizeAlertDetailValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomizeAlertDetailValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeAlertDetailValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeAlertDetailValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeAlertDetailValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeAlertDetailValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeAlertDetailValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeAlertDetailValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CustomizeAlertDetailMultiError(errors)
	}

	return nil
}

// CustomizeAlertDetailMultiError is an error wrapping multiple validation
// errors returned by CustomizeAlertDetail.ValidateAll() if the designated
// constraints aren't met.
type CustomizeAlertDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertDetailMultiError) AllErrors() []error { return m }

// CustomizeAlertDetailValidationError is the validation error returned by
// CustomizeAlertDetail.Validate if the designated constraints aren't met.
type CustomizeAlertDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertDetailValidationError) ErrorName() string {
	return "CustomizeAlertDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertDetailValidationError{}

// Validate checks the field values on CustomizeAlertRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeAlertRuleMultiError, or nil if none found.
func (m *CustomizeAlertRule) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Metric

	// no validation rules for Window

	for idx, item := range m.GetFunctions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeAlertRuleValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeAlertRuleValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeAlertRuleValidationError{
					field:  fmt.Sprintf("Functions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomizeAlertRuleValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomizeAlertRuleValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomizeAlertRuleValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Select

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomizeAlertRuleValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomizeAlertRuleValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomizeAlertRuleValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CustomizeAlertRuleMultiError(errors)
	}

	return nil
}

// CustomizeAlertRuleMultiError is an error wrapping multiple validation errors
// returned by CustomizeAlertRule.ValidateAll() if the designated constraints
// aren't met.
type CustomizeAlertRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertRuleMultiError) AllErrors() []error { return m }

// CustomizeAlertRuleValidationError is the validation error returned by
// CustomizeAlertRule.Validate if the designated constraints aren't met.
type CustomizeAlertRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertRuleValidationError) ErrorName() string {
	return "CustomizeAlertRuleValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertRuleValidationError{}

// Validate checks the field values on CustomizeAlertRuleFunction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertRuleFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertRuleFunction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeAlertRuleFunctionMultiError, or nil if none found.
func (m *CustomizeAlertRuleFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertRuleFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Alias

	// no validation rules for Aggregator

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomizeAlertRuleFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomizeAlertRuleFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomizeAlertRuleFunctionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataType

	// no validation rules for Unit

	if len(errors) > 0 {
		return CustomizeAlertRuleFunctionMultiError(errors)
	}

	return nil
}

// CustomizeAlertRuleFunctionMultiError is an error wrapping multiple
// validation errors returned by CustomizeAlertRuleFunction.ValidateAll() if
// the designated constraints aren't met.
type CustomizeAlertRuleFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertRuleFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertRuleFunctionMultiError) AllErrors() []error { return m }

// CustomizeAlertRuleFunctionValidationError is the validation error returned
// by CustomizeAlertRuleFunction.Validate if the designated constraints aren't met.
type CustomizeAlertRuleFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertRuleFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertRuleFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertRuleFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertRuleFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertRuleFunctionValidationError) ErrorName() string {
	return "CustomizeAlertRuleFunctionValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertRuleFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertRuleFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertRuleFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertRuleFunctionValidationError{}

// Validate checks the field values on CustomizeAlertRuleFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertRuleFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertRuleFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomizeAlertRuleFilterMultiError, or nil if none found.
func (m *CustomizeAlertRuleFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertRuleFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomizeAlertRuleFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomizeAlertRuleFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomizeAlertRuleFilterValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataType

	if len(errors) > 0 {
		return CustomizeAlertRuleFilterMultiError(errors)
	}

	return nil
}

// CustomizeAlertRuleFilterMultiError is an error wrapping multiple validation
// errors returned by CustomizeAlertRuleFilter.ValidateAll() if the designated
// constraints aren't met.
type CustomizeAlertRuleFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertRuleFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertRuleFilterMultiError) AllErrors() []error { return m }

// CustomizeAlertRuleFilterValidationError is the validation error returned by
// CustomizeAlertRuleFilter.Validate if the designated constraints aren't met.
type CustomizeAlertRuleFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertRuleFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertRuleFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertRuleFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertRuleFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertRuleFilterValidationError) ErrorName() string {
	return "CustomizeAlertRuleFilterValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertRuleFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertRuleFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertRuleFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertRuleFilterValidationError{}

// Validate checks the field values on CustomizeAlertNotifyTemplates with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomizeAlertNotifyTemplates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomizeAlertNotifyTemplates with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CustomizeAlertNotifyTemplatesMultiError, or nil if none found.
func (m *CustomizeAlertNotifyTemplates) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomizeAlertNotifyTemplates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Content

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomizeAlertNotifyTemplatesValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomizeAlertNotifyTemplatesValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomizeAlertNotifyTemplatesValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CustomizeAlertNotifyTemplatesMultiError(errors)
	}

	return nil
}

// CustomizeAlertNotifyTemplatesMultiError is an error wrapping multiple
// validation errors returned by CustomizeAlertNotifyTemplates.ValidateAll()
// if the designated constraints aren't met.
type CustomizeAlertNotifyTemplatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomizeAlertNotifyTemplatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomizeAlertNotifyTemplatesMultiError) AllErrors() []error { return m }

// CustomizeAlertNotifyTemplatesValidationError is the validation error
// returned by CustomizeAlertNotifyTemplates.Validate if the designated
// constraints aren't met.
type CustomizeAlertNotifyTemplatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomizeAlertNotifyTemplatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomizeAlertNotifyTemplatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomizeAlertNotifyTemplatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomizeAlertNotifyTemplatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomizeAlertNotifyTemplatesValidationError) ErrorName() string {
	return "CustomizeAlertNotifyTemplatesValidationError"
}

// Error satisfies the builtin error interface
func (e CustomizeAlertNotifyTemplatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomizeAlertNotifyTemplates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomizeAlertNotifyTemplatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomizeAlertNotifyTemplatesValidationError{}

// Validate checks the field values on GetCustomizeAlertDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertDetailRequestMultiError, or nil if none found.
func (m *GetCustomizeAlertDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCustomizeAlertDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomizeAlertDetailRequestMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetCustomizeAlertDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCustomizeAlertDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertDetailRequestMultiError) AllErrors() []error { return m }

// GetCustomizeAlertDetailRequestValidationError is the validation error
// returned by GetCustomizeAlertDetailRequest.Validate if the designated
// constraints aren't met.
type GetCustomizeAlertDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertDetailRequestValidationError) ErrorName() string {
	return "GetCustomizeAlertDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertDetailRequestValidationError{}

// Validate checks the field values on GetCustomizeAlertDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertDetailResponseMultiError, or nil if none found.
func (m *GetCustomizeAlertDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomizeAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomizeAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomizeAlertDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomizeAlertDetailResponseMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetCustomizeAlertDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCustomizeAlertDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertDetailResponseMultiError) AllErrors() []error { return m }

// GetCustomizeAlertDetailResponseValidationError is the validation error
// returned by GetCustomizeAlertDetailResponse.Validate if the designated
// constraints aren't met.
type GetCustomizeAlertDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertDetailResponseValidationError) ErrorName() string {
	return "GetCustomizeAlertDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertDetailResponseValidationError{}

// Validate checks the field values on CreateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomizeAlertRequestMultiError, or nil if none found.
func (m *CreateCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CreateCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// CreateCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// CreateCustomizeAlertRequestValidationError is the validation error returned
// by CreateCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type CreateCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomizeAlertRequestValidationError) ErrorName() string {
	return "CreateCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomizeAlertRequestValidationError{}

// Validate checks the field values on CreateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomizeAlertResponseMultiError, or nil if none found.
func (m *CreateCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// CreateCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// CreateCustomizeAlertResponseValidationError is the validation error returned
// by CreateCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type CreateCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomizeAlertResponseValidationError) ErrorName() string {
	return "CreateCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomizeAlertResponseValidationError{}

// Validate checks the field values on UpdateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertRequestMultiError, or nil if none found.
func (m *UpdateCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return UpdateCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertRequestValidationError is the validation error returned
// by UpdateCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type UpdateCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertRequestValidationError) ErrorName() string {
	return "UpdateCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertRequestValidationError{}

// Validate checks the field values on UpdateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertResponseMultiError, or nil if none found.
func (m *UpdateCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertResponseValidationError is the validation error returned
// by UpdateCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type UpdateCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertResponseValidationError) ErrorName() string {
	return "UpdateCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertResponseValidationError{}

// Validate checks the field values on UpdateCustomizeAlertEnableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCustomizeAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertEnableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateCustomizeAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCustomizeAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateCustomizeAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertEnableRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCustomizeAlertEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertEnableRequestValidationError is the validation error
// returned by UpdateCustomizeAlertEnableRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateCustomizeAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateCustomizeAlertEnableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCustomizeAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertEnableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateCustomizeAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCustomizeAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertEnableResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCustomizeAlertEnableResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertEnableResponseValidationError is the validation error
// returned by UpdateCustomizeAlertEnableResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateCustomizeAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomizeAlertRequestMultiError, or nil if none found.
func (m *DeleteCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// DeleteCustomizeAlertRequestValidationError is the validation error returned
// by DeleteCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type DeleteCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomizeAlertRequestValidationError) ErrorName() string {
	return "DeleteCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomizeAlertRequestValidationError{}

// Validate checks the field values on DeleteCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomizeAlertResponseMultiError, or nil if none found.
func (m *DeleteCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// DeleteCustomizeAlertResponseValidationError is the validation error returned
// by DeleteCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type DeleteCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomizeAlertResponseValidationError) ErrorName() string {
	return "DeleteCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomizeAlertResponseValidationError{}

// Validate checks the field values on QueryOrgCustomizeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgCustomizeMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeMetricRequestMultiError, or nil if none found.
func (m *QueryOrgCustomizeMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryOrgCustomizeMetricRequestMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeMetricRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgCustomizeMetricRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgCustomizeMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeMetricRequestMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeMetricRequestValidationError is the validation error
// returned by QueryOrgCustomizeMetricRequest.Validate if the designated
// constraints aren't met.
type QueryOrgCustomizeMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeMetricRequestValidationError) ErrorName() string {
	return "QueryOrgCustomizeMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeMetricRequestValidationError{}

// Validate checks the field values on QueryOrgCustomizeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgCustomizeMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeMetricResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeMetricResponseMultiError, or nil if none found.
func (m *QueryOrgCustomizeMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgCustomizeMetricResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgCustomizeMetricResponseMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeMetricResponseMultiError is an error wrapping multiple
// validation errors returned by QueryOrgCustomizeMetricResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgCustomizeMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeMetricResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeMetricResponseMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeMetricResponseValidationError is the validation error
// returned by QueryOrgCustomizeMetricResponse.Validate if the designated
// constraints aren't met.
type QueryOrgCustomizeMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeMetricResponseValidationError) ErrorName() string {
	return "QueryOrgCustomizeMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeMetricResponseValidationError{}

// Validate checks the field values on QueryOrgCustomizeAlertsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgCustomizeAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeAlertsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeAlertsRequestMultiError, or nil if none found.
func (m *QueryOrgCustomizeAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNo() <= 0 {
		err := QueryOrgCustomizeAlertsRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryOrgCustomizeAlertsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryOrgCustomizeAlertsRequestMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeAlertsRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgCustomizeAlertsRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgCustomizeAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeAlertsRequestMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeAlertsRequestValidationError is the validation error
// returned by QueryOrgCustomizeAlertsRequest.Validate if the designated
// constraints aren't met.
type QueryOrgCustomizeAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeAlertsRequestValidationError) ErrorName() string {
	return "QueryOrgCustomizeAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeAlertsRequestValidationError{}

// Validate checks the field values on QueryOrgCustomizeAlertsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgCustomizeAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeAlertsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeAlertsResponseMultiError, or nil if none found.
func (m *QueryOrgCustomizeAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgCustomizeAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgCustomizeAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgCustomizeAlertsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgCustomizeAlertsResponseMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeAlertsResponseMultiError is an error wrapping multiple
// validation errors returned by QueryOrgCustomizeAlertsResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgCustomizeAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeAlertsResponseMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeAlertsResponseValidationError is the validation error
// returned by QueryOrgCustomizeAlertsResponse.Validate if the designated
// constraints aren't met.
type QueryOrgCustomizeAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeAlertsResponseValidationError) ErrorName() string {
	return "QueryOrgCustomizeAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeAlertsResponseValidationError{}

// Validate checks the field values on QueryOrgCustomizeAlertsData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgCustomizeAlertsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgCustomizeAlertsData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgCustomizeAlertsDataMultiError, or nil if none found.
func (m *QueryOrgCustomizeAlertsData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgCustomizeAlertsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgCustomizeAlertsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgCustomizeAlertsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgCustomizeAlertsDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryOrgCustomizeAlertsDataMultiError(errors)
	}

	return nil
}

// QueryOrgCustomizeAlertsDataMultiError is an error wrapping multiple
// validation errors returned by QueryOrgCustomizeAlertsData.ValidateAll() if
// the designated constraints aren't met.
type QueryOrgCustomizeAlertsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgCustomizeAlertsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgCustomizeAlertsDataMultiError) AllErrors() []error { return m }

// QueryOrgCustomizeAlertsDataValidationError is the validation error returned
// by QueryOrgCustomizeAlertsData.Validate if the designated constraints
// aren't met.
type QueryOrgCustomizeAlertsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgCustomizeAlertsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgCustomizeAlertsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgCustomizeAlertsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgCustomizeAlertsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgCustomizeAlertsDataValidationError) ErrorName() string {
	return "QueryOrgCustomizeAlertsDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgCustomizeAlertsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgCustomizeAlertsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgCustomizeAlertsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgCustomizeAlertsDataValidationError{}

// Validate checks the field values on GetOrgCustomizeAlertDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrgCustomizeAlertDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgCustomizeAlertDetailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrgCustomizeAlertDetailRequestMultiError, or nil if none found.
func (m *GetOrgCustomizeAlertDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgCustomizeAlertDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetOrgCustomizeAlertDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgCustomizeAlertDetailRequestMultiError(errors)
	}

	return nil
}

// GetOrgCustomizeAlertDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrgCustomizeAlertDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgCustomizeAlertDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgCustomizeAlertDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgCustomizeAlertDetailRequestMultiError) AllErrors() []error { return m }

// GetOrgCustomizeAlertDetailRequestValidationError is the validation error
// returned by GetOrgCustomizeAlertDetailRequest.Validate if the designated
// constraints aren't met.
type GetOrgCustomizeAlertDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgCustomizeAlertDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgCustomizeAlertDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgCustomizeAlertDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgCustomizeAlertDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgCustomizeAlertDetailRequestValidationError) ErrorName() string {
	return "GetOrgCustomizeAlertDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgCustomizeAlertDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgCustomizeAlertDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgCustomizeAlertDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgCustomizeAlertDetailRequestValidationError{}

// Validate checks the field values on GetOrgCustomizeAlertDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrgCustomizeAlertDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgCustomizeAlertDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrgCustomizeAlertDetailResponseMultiError, or nil if none found.
func (m *GetOrgCustomizeAlertDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgCustomizeAlertDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgCustomizeAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgCustomizeAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgCustomizeAlertDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgCustomizeAlertDetailResponseMultiError(errors)
	}

	return nil
}

// GetOrgCustomizeAlertDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrgCustomizeAlertDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrgCustomizeAlertDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgCustomizeAlertDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgCustomizeAlertDetailResponseMultiError) AllErrors() []error { return m }

// GetOrgCustomizeAlertDetailResponseValidationError is the validation error
// returned by GetOrgCustomizeAlertDetailResponse.Validate if the designated
// constraints aren't met.
type GetOrgCustomizeAlertDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgCustomizeAlertDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgCustomizeAlertDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgCustomizeAlertDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgCustomizeAlertDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgCustomizeAlertDetailResponseValidationError) ErrorName() string {
	return "GetOrgCustomizeAlertDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgCustomizeAlertDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgCustomizeAlertDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgCustomizeAlertDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgCustomizeAlertDetailResponseValidationError{}

// Validate checks the field values on CreateOrgCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgCustomizeAlertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrgCustomizeAlertRequestMultiError, or nil if none found.
func (m *CreateOrgCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrgCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrgCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CreateOrgCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// CreateOrgCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrgCustomizeAlertRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrgCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// CreateOrgCustomizeAlertRequestValidationError is the validation error
// returned by CreateOrgCustomizeAlertRequest.Validate if the designated
// constraints aren't met.
type CreateOrgCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgCustomizeAlertRequestValidationError) ErrorName() string {
	return "CreateOrgCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgCustomizeAlertRequestValidationError{}

// Validate checks the field values on CreateOrgCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgCustomizeAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrgCustomizeAlertResponseMultiError, or nil if none found.
func (m *CreateOrgCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CreateOrgCustomizeAlertResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrgCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// CreateOrgCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrgCustomizeAlertResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrgCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// CreateOrgCustomizeAlertResponseValidationError is the validation error
// returned by CreateOrgCustomizeAlertResponse.Validate if the designated
// constraints aren't met.
type CreateOrgCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgCustomizeAlertResponseValidationError) ErrorName() string {
	return "CreateOrgCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgCustomizeAlertResponseValidationError{}

// Validate checks the field values on UpdateOrgCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgCustomizeAlertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrgCustomizeAlertRequestMultiError, or nil if none found.
func (m *UpdateOrgCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrgCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return UpdateOrgCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgCustomizeAlertRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrgCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// UpdateOrgCustomizeAlertRequestValidationError is the validation error
// returned by UpdateOrgCustomizeAlertRequest.Validate if the designated
// constraints aren't met.
type UpdateOrgCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgCustomizeAlertRequestValidationError) ErrorName() string {
	return "UpdateOrgCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgCustomizeAlertRequestValidationError{}

// Validate checks the field values on UpdateOrgCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgCustomizeAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrgCustomizeAlertResponseMultiError, or nil if none found.
func (m *UpdateOrgCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateOrgCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgCustomizeAlertResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrgCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// UpdateOrgCustomizeAlertResponseValidationError is the validation error
// returned by UpdateOrgCustomizeAlertResponse.Validate if the designated
// constraints aren't met.
type UpdateOrgCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgCustomizeAlertResponseValidationError) ErrorName() string {
	return "UpdateOrgCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgCustomizeAlertResponseValidationError{}

// Validate checks the field values on UpdateOrgCustomizeAlertEnableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOrgCustomizeAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgCustomizeAlertEnableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrgCustomizeAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateOrgCustomizeAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgCustomizeAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrgCustomizeAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateOrgCustomizeAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgCustomizeAlertEnableRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrgCustomizeAlertEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrgCustomizeAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgCustomizeAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgCustomizeAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateOrgCustomizeAlertEnableRequestValidationError is the validation error
// returned by UpdateOrgCustomizeAlertEnableRequest.Validate if the designated
// constraints aren't met.
type UpdateOrgCustomizeAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateOrgCustomizeAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgCustomizeAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgCustomizeAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgCustomizeAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgCustomizeAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateOrgCustomizeAlertEnableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOrgCustomizeAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgCustomizeAlertEnableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrgCustomizeAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateOrgCustomizeAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgCustomizeAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrgCustomizeAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgCustomizeAlertEnableResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOrgCustomizeAlertEnableResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrgCustomizeAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgCustomizeAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgCustomizeAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateOrgCustomizeAlertEnableResponseValidationError is the validation error
// returned by UpdateOrgCustomizeAlertEnableResponse.Validate if the
// designated constraints aren't met.
type UpdateOrgCustomizeAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateOrgCustomizeAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgCustomizeAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgCustomizeAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgCustomizeAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgCustomizeAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteOrgCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgCustomizeAlertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrgCustomizeAlertRequestMultiError, or nil if none found.
func (m *DeleteOrgCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOrgCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrgCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrgCustomizeAlertRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrgCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// DeleteOrgCustomizeAlertRequestValidationError is the validation error
// returned by DeleteOrgCustomizeAlertRequest.Validate if the designated
// constraints aren't met.
type DeleteOrgCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgCustomizeAlertRequestValidationError) ErrorName() string {
	return "DeleteOrgCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgCustomizeAlertRequestValidationError{}

// Validate checks the field values on DeleteOrgCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgCustomizeAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrgCustomizeAlertResponseMultiError, or nil if none found.
func (m *DeleteOrgCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOrgCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOrgCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOrgCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOrgCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteOrgCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrgCustomizeAlertResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrgCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// DeleteOrgCustomizeAlertResponseValidationError is the validation error
// returned by DeleteOrgCustomizeAlertResponse.Validate if the designated
// constraints aren't met.
type DeleteOrgCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgCustomizeAlertResponseValidationError) ErrorName() string {
	return "DeleteOrgCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgCustomizeAlertResponseValidationError{}

// Validate checks the field values on QueryDashboardByAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDashboardByAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDashboardByAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDashboardByAlertRequestMultiError, or nil if none found.
func (m *QueryDashboardByAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDashboardByAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QueryDashboardByAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QueryDashboardByAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QueryDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDashboardByAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDashboardByAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return QueryDashboardByAlertRequestMultiError(errors)
	}

	return nil
}

// QueryDashboardByAlertRequestMultiError is an error wrapping multiple
// validation errors returned by QueryDashboardByAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryDashboardByAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDashboardByAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDashboardByAlertRequestMultiError) AllErrors() []error { return m }

// QueryDashboardByAlertRequestValidationError is the validation error returned
// by QueryDashboardByAlertRequest.Validate if the designated constraints
// aren't met.
type QueryDashboardByAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDashboardByAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDashboardByAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDashboardByAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDashboardByAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDashboardByAlertRequestValidationError) ErrorName() string {
	return "QueryDashboardByAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDashboardByAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDashboardByAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDashboardByAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDashboardByAlertRequestValidationError{}

// Validate checks the field values on QueryDashboardByAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDashboardByAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDashboardByAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryDashboardByAlertResponseMultiError, or nil if none found.
func (m *QueryDashboardByAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDashboardByAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDashboardByAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDashboardByAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDashboardByAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryDashboardByAlertResponseMultiError(errors)
	}

	return nil
}

// QueryDashboardByAlertResponseMultiError is an error wrapping multiple
// validation errors returned by QueryDashboardByAlertResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryDashboardByAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDashboardByAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDashboardByAlertResponseMultiError) AllErrors() []error { return m }

// QueryDashboardByAlertResponseValidationError is the validation error
// returned by QueryDashboardByAlertResponse.Validate if the designated
// constraints aren't met.
type QueryDashboardByAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDashboardByAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDashboardByAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDashboardByAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDashboardByAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDashboardByAlertResponseValidationError) ErrorName() string {
	return "QueryDashboardByAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDashboardByAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDashboardByAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDashboardByAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDashboardByAlertResponseValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *View) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on View with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ViewMultiError, or nil if none found.
func (m *View) ValidateAll() error {
	return m.validate(true)
}

func (m *View) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ChartType

	// no validation rules for DataSourceType

	if all {
		switch v := interface{}(m.GetStaticData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaticData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "StaticData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Controls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Controls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "Controls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ViewMultiError(errors)
	}

	return nil
}

// ViewMultiError is an error wrapping multiple validation errors returned by
// View.ValidateAll() if the designated constraints aren't met.
type ViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewMultiError) AllErrors() []error { return m }

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetOptionProps()))
		i := 0
		for key := range m.GetOptionProps() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOptionProps()[key]
			_ = val

			// no validation rules for OptionProps[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("OptionProps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("OptionProps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConfigValidationError{
						field:  fmt.Sprintf("OptionProps[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetDataSourceConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "DataSourceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "DataSourceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSourceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "DataSourceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Option",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Option",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Option",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on API with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *API) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on API with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in APIMultiError, or nil if none found.
func (m *API) ValidateAll() error {
	return m.validate(true)
}

func (m *API) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	{
		sorted_keys := make([]string, len(m.GetQuery()))
		i := 0
		for key := range m.GetQuery() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQuery()[key]
			_ = val

			// no validation rules for Query[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Query[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Query[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return APIValidationError{
						field:  fmt.Sprintf("Query[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetBody()))
		i := 0
		for key := range m.GetBody() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBody()[key]
			_ = val

			// no validation rules for Body[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return APIValidationError{
						field:  fmt.Sprintf("Body[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetHeader()))
		i := 0
		for key := range m.GetHeader() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeader()[key]
			_ = val

			// no validation rules for Header[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return APIValidationError{
						field:  fmt.Sprintf("Header[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetExtraData()))
		i := 0
		for key := range m.GetExtraData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetExtraData()[key]
			_ = val

			// no validation rules for ExtraData[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("ExtraData[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, APIValidationError{
							field:  fmt.Sprintf("ExtraData[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return APIValidationError{
						field:  fmt.Sprintf("ExtraData[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Method

	if len(errors) > 0 {
		return APIMultiError(errors)
	}

	return nil
}

// APIMultiError is an error wrapping multiple validation errors returned by
// API.ValidateAll() if the designated constraints aren't met.
type APIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIMultiError) AllErrors() []error { return m }

// APIValidationError is the validation error returned by API.Validate if the
// designated constraints aren't met.
type APIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIValidationError) ErrorName() string { return "APIValidationError" }

// Error satisfies the builtin error interface
func (e APIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIValidationError{}

// Validate checks the field values on QueryOrgDashboardByAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgDashboardByAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgDashboardByAlertRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgDashboardByAlertRequestMultiError, or nil if none found.
func (m *QueryOrgDashboardByAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgDashboardByAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QueryOrgDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgDashboardByAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgDashboardByAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgDashboardByAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return QueryOrgDashboardByAlertRequestMultiError(errors)
	}

	return nil
}

// QueryOrgDashboardByAlertRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgDashboardByAlertRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgDashboardByAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgDashboardByAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgDashboardByAlertRequestMultiError) AllErrors() []error { return m }

// QueryOrgDashboardByAlertRequestValidationError is the validation error
// returned by QueryOrgDashboardByAlertRequest.Validate if the designated
// constraints aren't met.
type QueryOrgDashboardByAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgDashboardByAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgDashboardByAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgDashboardByAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgDashboardByAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgDashboardByAlertRequestValidationError) ErrorName() string {
	return "QueryOrgDashboardByAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgDashboardByAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgDashboardByAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgDashboardByAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgDashboardByAlertRequestValidationError{}

// Validate checks the field values on QueryOrgDashboardByAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryOrgDashboardByAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgDashboardByAlertResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgDashboardByAlertResponseMultiError, or nil if none found.
func (m *QueryOrgDashboardByAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgDashboardByAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgDashboardByAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgDashboardByAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgDashboardByAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgDashboardByAlertResponseMultiError(errors)
	}

	return nil
}

// QueryOrgDashboardByAlertResponseMultiError is an error wrapping multiple
// validation errors returned by
// QueryOrgDashboardByAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgDashboardByAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgDashboardByAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgDashboardByAlertResponseMultiError) AllErrors() []error { return m }

// QueryOrgDashboardByAlertResponseValidationError is the validation error
// returned by QueryOrgDashboardByAlertResponse.Validate if the designated
// constraints aren't met.
type QueryOrgDashboardByAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgDashboardByAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgDashboardByAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgDashboardByAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgDashboardByAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgDashboardByAlertResponseValidationError) ErrorName() string {
	return "QueryOrgDashboardByAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgDashboardByAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgDashboardByAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgDashboardByAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgDashboardByAlertResponseValidationError{}

// Validate checks the field values on QueryAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRuleRequestMultiError, or nil if none found.
func (m *QueryAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return QueryAlertRuleRequestMultiError(errors)
	}

	return nil
}

// QueryAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRuleRequestMultiError) AllErrors() []error { return m }

// QueryAlertRuleRequestValidationError is the validation error returned by
// QueryAlertRuleRequest.Validate if the designated constraints aren't met.
type QueryAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRuleRequestValidationError) ErrorName() string {
	return "QueryAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRuleRequestValidationError{}

// Validate checks the field values on QueryAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRuleResponseMultiError, or nil if none found.
func (m *QueryAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertRuleResponseMultiError(errors)
	}

	return nil
}

// QueryAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRuleResponseMultiError) AllErrors() []error { return m }

// QueryAlertRuleResponseValidationError is the validation error returned by
// QueryAlertRuleResponse.Validate if the designated constraints aren't met.
type QueryAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRuleResponseValidationError) ErrorName() string {
	return "QueryAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRuleResponseValidationError{}

// Validate checks the field values on AlertTypeRuleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertTypeRuleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertTypeRuleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertTypeRuleRespMultiError, or nil if none found.
func (m *AlertTypeRuleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertTypeRuleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlertTypeRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("AlertTypeRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("AlertTypeRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeRuleRespValidationError{
					field:  fmt.Sprintf("AlertTypeRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeRuleRespValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAggregator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Aggregator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Aggregator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeRuleRespValidationError{
					field:  fmt.Sprintf("Aggregator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSilence() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Silence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTypeRuleRespValidationError{
						field:  fmt.Sprintf("Silence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeRuleRespValidationError{
					field:  fmt.Sprintf("Silence[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AlertTypeRuleRespMultiError(errors)
	}

	return nil
}

// AlertTypeRuleRespMultiError is an error wrapping multiple validation errors
// returned by AlertTypeRuleResp.ValidateAll() if the designated constraints
// aren't met.
type AlertTypeRuleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertTypeRuleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertTypeRuleRespMultiError) AllErrors() []error { return m }

// AlertTypeRuleRespValidationError is the validation error returned by
// AlertTypeRuleResp.Validate if the designated constraints aren't met.
type AlertTypeRuleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTypeRuleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTypeRuleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTypeRuleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTypeRuleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTypeRuleRespValidationError) ErrorName() string {
	return "AlertTypeRuleRespValidationError"
}

// Error satisfies the builtin error interface
func (e AlertTypeRuleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTypeRuleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTypeRuleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTypeRuleRespValidationError{}

// Validate checks the field values on AlertTypeRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertTypeRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertTypeRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertTypeRuleMultiError, or
// nil if none found.
func (m *AlertTypeRule) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertTypeRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAlertType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertTypeRuleValidationError{
					field:  "AlertType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertTypeRuleValidationError{
					field:  "AlertType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlertType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertTypeRuleValidationError{
				field:  "AlertType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertTypeRuleValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertTypeRuleValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertTypeRuleValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AlertTypeRuleMultiError(errors)
	}

	return nil
}

// AlertTypeRuleMultiError is an error wrapping multiple validation errors
// returned by AlertTypeRule.ValidateAll() if the designated constraints
// aren't met.
type AlertTypeRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertTypeRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertTypeRuleMultiError) AllErrors() []error { return m }

// AlertTypeRuleValidationError is the validation error returned by
// AlertTypeRule.Validate if the designated constraints aren't met.
type AlertTypeRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertTypeRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertTypeRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertTypeRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertTypeRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertTypeRuleValidationError) ErrorName() string { return "AlertTypeRuleValidationError" }

// Error satisfies the builtin error interface
func (e AlertTypeRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertTypeRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertTypeRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertTypeRuleValidationError{}

// Validate checks the field values on AlertRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertRuleMultiError, or nil
// if none found.
func (m *AlertRule) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertType

	if all {
		switch v := interface{}(m.GetAlertIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertRuleValidationError{
					field:  "AlertIndex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertRuleValidationError{
					field:  "AlertIndex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlertIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertRuleValidationError{
				field:  "AlertIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetTemplate()))
		i := 0
		for key := range m.GetTemplate() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTemplate()[key]
			_ = val

			// no validation rules for Template[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AlertRuleValidationError{
							field:  fmt.Sprintf("Template[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AlertRuleValidationError{
							field:  fmt.Sprintf("Template[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AlertRuleValidationError{
						field:  fmt.Sprintf("Template[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Window

	for idx, item := range m.GetFunctions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertRuleValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertRuleValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertRuleValidationError{
					field:  fmt.Sprintf("Functions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsRecover

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AlertRuleValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AlertRuleValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AlertRuleValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Version

	// no validation rules for Enable

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return AlertRuleMultiError(errors)
	}

	return nil
}

// AlertRuleMultiError is an error wrapping multiple validation errors returned
// by AlertRule.ValidateAll() if the designated constraints aren't met.
type AlertRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRuleMultiError) AllErrors() []error { return m }

// AlertRuleValidationError is the validation error returned by
// AlertRule.Validate if the designated constraints aren't met.
type AlertRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRuleValidationError) ErrorName() string { return "AlertRuleValidationError" }

// Error satisfies the builtin error interface
func (e AlertRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRuleValidationError{}

// Validate checks the field values on AlertRuleFunction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertRuleFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRuleFunction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertRuleFunctionMultiError, or nil if none found.
func (m *AlertRuleFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRuleFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetField()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertRuleFunctionValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertRuleFunctionValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertRuleFunctionValidationError{
				field:  "Field",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Aggregator

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertRuleFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertRuleFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertRuleFunctionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataType

	// no validation rules for Unit

	if len(errors) > 0 {
		return AlertRuleFunctionMultiError(errors)
	}

	return nil
}

// AlertRuleFunctionMultiError is an error wrapping multiple validation errors
// returned by AlertRuleFunction.ValidateAll() if the designated constraints
// aren't met.
type AlertRuleFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRuleFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRuleFunctionMultiError) AllErrors() []error { return m }

// AlertRuleFunctionValidationError is the validation error returned by
// AlertRuleFunction.Validate if the designated constraints aren't met.
type AlertRuleFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRuleFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRuleFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRuleFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRuleFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRuleFunctionValidationError) ErrorName() string {
	return "AlertRuleFunctionValidationError"
}

// Error satisfies the builtin error interface
func (e AlertRuleFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRuleFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRuleFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRuleFunctionValidationError{}

// Validate checks the field values on NotifySilence with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifySilence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifySilence with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifySilenceMultiError, or
// nil if none found.
func (m *NotifySilence) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifySilence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifySilenceValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifySilenceValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifySilenceValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifySilenceMultiError(errors)
	}

	return nil
}

// NotifySilenceMultiError is an error wrapping multiple validation errors
// returned by NotifySilence.ValidateAll() if the designated constraints
// aren't met.
type NotifySilenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifySilenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifySilenceMultiError) AllErrors() []error { return m }

// NotifySilenceValidationError is the validation error returned by
// NotifySilence.Validate if the designated constraints aren't met.
type NotifySilenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifySilenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifySilenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifySilenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifySilenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifySilenceValidationError) ErrorName() string { return "NotifySilenceValidationError" }

// Error satisfies the builtin error interface
func (e NotifySilenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifySilence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifySilenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifySilenceValidationError{}

// Validate checks the field values on QueryAlertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRequestMultiError, or nil if none found.
func (m *QueryAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if m.GetPageNo() <= 0 {
		err := QueryAlertRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := QueryAlertRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryAlertRequestMultiError(errors)
	}

	return nil
}

// QueryAlertRequestMultiError is an error wrapping multiple validation errors
// returned by QueryAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRequestMultiError) AllErrors() []error { return m }

// QueryAlertRequestValidationError is the validation error returned by
// QueryAlertRequest.Validate if the designated constraints aren't met.
type QueryAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRequestValidationError) ErrorName() string {
	return "QueryAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRequestValidationError{}

// Validate checks the field values on QueryAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertsResponseMultiError, or nil if none found.
func (m *QueryAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertsResponseMultiError(errors)
	}

	return nil
}

// QueryAlertsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAlertsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertsResponseMultiError) AllErrors() []error { return m }

// QueryAlertsResponseValidationError is the validation error returned by
// QueryAlertsResponse.Validate if the designated constraints aren't met.
type QueryAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertsResponseValidationError) ErrorName() string {
	return "QueryAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertsResponseValidationError{}

// Validate checks the field values on QueryAlertsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertsDataMultiError, or nil if none found.
func (m *QueryAlertsData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAlertsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAlertsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAlertsDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryAlertsDataMultiError(errors)
	}

	return nil
}

// QueryAlertsDataMultiError is an error wrapping multiple validation errors
// returned by QueryAlertsData.ValidateAll() if the designated constraints
// aren't met.
type QueryAlertsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertsDataMultiError) AllErrors() []error { return m }

// QueryAlertsDataValidationError is the validation error returned by
// QueryAlertsData.Validate if the designated constraints aren't met.
type QueryAlertsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertsDataValidationError) ErrorName() string { return "QueryAlertsDataValidationError" }

// Error satisfies the builtin error interface
func (e QueryAlertsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertsDataValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertMultiError, or nil if none found.
func (m *Alert) ValidateAll() error {
	return m.validate(true)
}

func (m *Alert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AlertValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AlertValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AlertValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AlertValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AlertValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AlertValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for RuleCount

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}

	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.ValidateAll() if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on AlertExpression with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertExpressionMultiError, or nil if none found.
func (m *AlertExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RuleId

	// no validation rules for AlertIndex

	// no validation rules for Window

	for idx, item := range m.GetFunctions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertExpressionValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertExpressionValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertExpressionValidationError{
					field:  fmt.Sprintf("Functions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsRecover

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Level

	if len(errors) > 0 {
		return AlertExpressionMultiError(errors)
	}

	return nil
}

// AlertExpressionMultiError is an error wrapping multiple validation errors
// returned by AlertExpression.ValidateAll() if the designated constraints
// aren't met.
type AlertExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertExpressionMultiError) AllErrors() []error { return m }

// AlertExpressionValidationError is the validation error returned by
// AlertExpression.Validate if the designated constraints aren't met.
type AlertExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertExpressionValidationError) ErrorName() string { return "AlertExpressionValidationError" }

// Error satisfies the builtin error interface
func (e AlertExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertExpressionValidationError{}

// Validate checks the field values on AlertExpressionFunction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertExpressionFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertExpressionFunction with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertExpressionFunctionMultiError, or nil if none found.
func (m *AlertExpressionFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertExpressionFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Aggregator

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertExpressionFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertExpressionFunctionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertExpressionFunctionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlertExpressionFunctionMultiError(errors)
	}

	return nil
}

// AlertExpressionFunctionMultiError is an error wrapping multiple validation
// errors returned by AlertExpressionFunction.ValidateAll() if the designated
// constraints aren't met.
type AlertExpressionFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertExpressionFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertExpressionFunctionMultiError) AllErrors() []error { return m }

// AlertExpressionFunctionValidationError is the validation error returned by
// AlertExpressionFunction.Validate if the designated constraints aren't met.
type AlertExpressionFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertExpressionFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertExpressionFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertExpressionFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertExpressionFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertExpressionFunctionValidationError) ErrorName() string {
	return "AlertExpressionFunctionValidationError"
}

// Error satisfies the builtin error interface
func (e AlertExpressionFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertExpressionFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertExpressionFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertExpressionFunctionValidationError{}

// Validate checks the field values on AlertNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertNotifyMultiError, or
// nil if none found.
func (m *AlertNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for GroupId

	// no validation rules for GroupType

	if all {
		switch v := interface{}(m.GetNotifyGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "NotifyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "NotifyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertNotifyValidationError{
				field:  "NotifyGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DingdingUrl

	if all {
		switch v := interface{}(m.GetSilence()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "Silence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertNotifyValidationError{
					field:  "Silence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSilence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertNotifyValidationError{
				field:  "Silence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Level

	if len(errors) > 0 {
		return AlertNotifyMultiError(errors)
	}

	return nil
}

// AlertNotifyMultiError is an error wrapping multiple validation errors
// returned by AlertNotify.ValidateAll() if the designated constraints aren't met.
type AlertNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyMultiError) AllErrors() []error { return m }

// AlertNotifyValidationError is the validation error returned by
// AlertNotify.Validate if the designated constraints aren't met.
type AlertNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyValidationError) ErrorName() string { return "AlertNotifyValidationError" }

// Error satisfies the builtin error interface
func (e AlertNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyValidationError{}

// Validate checks the field values on NotifyGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyGroupMultiError, or
// nil if none found.
func (m *NotifyGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyGroupValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyGroupValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyGroupValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	if len(errors) > 0 {
		return NotifyGroupMultiError(errors)
	}

	return nil
}

// NotifyGroupMultiError is an error wrapping multiple validation errors
// returned by NotifyGroup.ValidateAll() if the designated constraints aren't met.
type NotifyGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyGroupMultiError) AllErrors() []error { return m }

// NotifyGroupValidationError is the validation error returned by
// NotifyGroup.Validate if the designated constraints aren't met.
type NotifyGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyGroupValidationError) ErrorName() string { return "NotifyGroupValidationError" }

// Error satisfies the builtin error interface
func (e NotifyGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyGroupValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyTargetValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Secret

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on AlertNotifySilence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertNotifySilence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotifySilence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertNotifySilenceMultiError, or nil if none found.
func (m *AlertNotifySilence) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotifySilence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Unit

	// no validation rules for Policy

	if len(errors) > 0 {
		return AlertNotifySilenceMultiError(errors)
	}

	return nil
}

// AlertNotifySilenceMultiError is an error wrapping multiple validation errors
// returned by AlertNotifySilence.ValidateAll() if the designated constraints
// aren't met.
type AlertNotifySilenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifySilenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifySilenceMultiError) AllErrors() []error { return m }

// AlertNotifySilenceValidationError is the validation error returned by
// AlertNotifySilence.Validate if the designated constraints aren't met.
type AlertNotifySilenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifySilenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifySilenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifySilenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifySilenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifySilenceValidationError) ErrorName() string {
	return "AlertNotifySilenceValidationError"
}

// Error satisfies the builtin error interface
func (e AlertNotifySilenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotifySilence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifySilenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifySilenceValidationError{}

// Validate checks the field values on GetAlertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRequestMultiError, or nil if none found.
func (m *GetAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlertRequestMultiError(errors)
	}

	return nil
}

// GetAlertRequestMultiError is an error wrapping multiple validation errors
// returned by GetAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRequestMultiError) AllErrors() []error { return m }

// GetAlertRequestValidationError is the validation error returned by
// GetAlertRequest.Validate if the designated constraints aren't met.
type GetAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRequestValidationError) ErrorName() string { return "GetAlertRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRequestValidationError{}

// Validate checks the field values on GetAlertResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertResponseMultiError, or nil if none found.
func (m *GetAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertResponseMultiError(errors)
	}

	return nil
}

// GetAlertResponseMultiError is an error wrapping multiple validation errors
// returned by GetAlertResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertResponseMultiError) AllErrors() []error { return m }

// GetAlertResponseValidationError is the validation error returned by
// GetAlertResponse.Validate if the designated constraints aren't met.
type GetAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertResponseValidationError) ErrorName() string { return "GetAlertResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertResponseValidationError{}

// Validate checks the field values on GetAlertDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertDetailRequestMultiError, or nil if none found.
func (m *GetAlertDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAlertDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlertDetailRequestMultiError(errors)
	}

	return nil
}

// GetAlertDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertDetailRequestMultiError) AllErrors() []error { return m }

// GetAlertDetailRequestValidationError is the validation error returned by
// GetAlertDetailRequest.Validate if the designated constraints aren't met.
type GetAlertDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertDetailRequestValidationError) ErrorName() string {
	return "GetAlertDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertDetailRequestValidationError{}

// Validate checks the field values on GetAlertDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertDetailResponseMultiError, or nil if none found.
func (m *GetAlertDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertDetailResponseMultiError(errors)
	}

	return nil
}

// GetAlertDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertDetailResponseMultiError) AllErrors() []error { return m }

// GetAlertDetailResponseValidationError is the validation error returned by
// GetAlertDetailResponse.Validate if the designated constraints aren't met.
type GetAlertDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertDetailResponseValidationError) ErrorName() string {
	return "GetAlertDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertDetailResponseValidationError{}

// Validate checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRequestMultiError, or nil if none found.
func (m *CreateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAlertRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRequestMultiError) AllErrors() []error { return m }

// CreateAlertRequestValidationError is the validation error returned by
// CreateAlertRequest.Validate if the designated constraints aren't met.
type CreateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRequestValidationError) ErrorName() string {
	return "CreateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRequestValidationError{}

// Validate checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertResponseMultiError, or nil if none found.
func (m *CreateAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateAlertResponseMultiError(errors)
	}

	return nil
}

// CreateAlertResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertResponseMultiError) AllErrors() []error { return m }

// CreateAlertResponseValidationError is the validation error returned by
// CreateAlertResponse.Validate if the designated constraints aren't met.
type CreateAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertResponseValidationError) ErrorName() string {
	return "CreateAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertResponseValidationError{}

// Validate checks the field values on UpdateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertRequestMultiError, or nil if none found.
func (m *UpdateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRequestMultiError) AllErrors() []error { return m }

// UpdateAlertRequestValidationError is the validation error returned by
// UpdateAlertRequest.Validate if the designated constraints aren't met.
type UpdateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRequestValidationError) ErrorName() string {
	return "UpdateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRequestValidationError{}

// Validate checks the field values on UpdateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertResponseMultiError, or nil if none found.
func (m *UpdateAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertResponseMultiError) AllErrors() []error { return m }

// UpdateAlertResponseValidationError is the validation error returned by
// UpdateAlertResponse.Validate if the designated constraints aren't met.
type UpdateAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertResponseValidationError) ErrorName() string {
	return "UpdateAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertResponseValidationError{}

// Validate checks the field values on UpdateAlertEnableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertEnableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertEnableRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateAlertEnableRequestValidationError is the validation error returned by
// UpdateAlertEnableRequest.Validate if the designated constraints aren't met.
type UpdateAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateAlertEnableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertEnableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertEnableResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertEnableResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateAlertEnableResponseValidationError is the validation error returned by
// UpdateAlertEnableResponse.Validate if the designated constraints aren't met.
type UpdateAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertRequestMultiError, or nil if none found.
func (m *DeleteAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteAlertRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertRequestMultiError) AllErrors() []error { return m }

// DeleteAlertRequestValidationError is the validation error returned by
// DeleteAlertRequest.Validate if the designated constraints aren't met.
type DeleteAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertRequestValidationError) ErrorName() string {
	return "DeleteAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertRequestValidationError{}

// Validate checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertResponseMultiError, or nil if none found.
func (m *DeleteAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DeleteAlertResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DeleteAlertResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DeleteAlertResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DeleteAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteAlertResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertResponseMultiError) AllErrors() []error { return m }

// DeleteAlertResponseValidationError is the validation error returned by
// DeleteAlertResponse.Validate if the designated constraints aren't met.
type DeleteAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertResponseValidationError) ErrorName() string {
	return "DeleteAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertResponseValidationError{}

// Validate checks the field values on QueryOrgAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertRuleRequestMultiError, or nil if none found.
func (m *QueryOrgAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryOrgAlertRuleRequestMultiError(errors)
	}

	return nil
}

// QueryOrgAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by QueryOrgAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertRuleRequestMultiError) AllErrors() []error { return m }

// QueryOrgAlertRuleRequestValidationError is the validation error returned by
// QueryOrgAlertRuleRequest.Validate if the designated constraints aren't met.
type QueryOrgAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertRuleRequestValidationError) ErrorName() string {
	return "QueryOrgAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertRuleRequestValidationError{}

// Validate checks the field values on QueryOrgAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertRuleResponseMultiError, or nil if none found.
func (m *QueryOrgAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgAlertRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgAlertRuleResponseMultiError(errors)
	}

	return nil
}

// QueryOrgAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by QueryOrgAlertRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type QueryOrgAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertRuleResponseMultiError) AllErrors() []error { return m }

// QueryOrgAlertRuleResponseValidationError is the validation error returned by
// QueryOrgAlertRuleResponse.Validate if the designated constraints aren't met.
type QueryOrgAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertRuleResponseValidationError) ErrorName() string {
	return "QueryOrgAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertRuleResponseValidationError{}

// Validate checks the field values on QueryOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertRequestMultiError, or nil if none found.
func (m *QueryOrgAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNo() <= 0 {
		err := QueryOrgAlertRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryOrgAlertRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryOrgAlertRequestMultiError(errors)
	}

	return nil
}

// QueryOrgAlertRequestMultiError is an error wrapping multiple validation
// errors returned by QueryOrgAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertRequestMultiError) AllErrors() []error { return m }

// QueryOrgAlertRequestValidationError is the validation error returned by
// QueryOrgAlertRequest.Validate if the designated constraints aren't met.
type QueryOrgAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertRequestValidationError) ErrorName() string {
	return "QueryOrgAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertRequestValidationError{}

// Validate checks the field values on QueryOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertResponseMultiError, or nil if none found.
func (m *QueryOrgAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgAlertResponseMultiError(errors)
	}

	return nil
}

// QueryOrgAlertResponseMultiError is an error wrapping multiple validation
// errors returned by QueryOrgAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryOrgAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertResponseMultiError) AllErrors() []error { return m }

// QueryOrgAlertResponseValidationError is the validation error returned by
// QueryOrgAlertResponse.Validate if the designated constraints aren't met.
type QueryOrgAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertResponseValidationError) ErrorName() string {
	return "QueryOrgAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertResponseValidationError{}

// Validate checks the field values on QueryOrgAlertData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertDataMultiError, or nil if none found.
func (m *QueryOrgAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgAlertDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryOrgAlertDataMultiError(errors)
	}

	return nil
}

// QueryOrgAlertDataMultiError is an error wrapping multiple validation errors
// returned by QueryOrgAlertData.ValidateAll() if the designated constraints
// aren't met.
type QueryOrgAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertDataMultiError) AllErrors() []error { return m }

// QueryOrgAlertDataValidationError is the validation error returned by
// QueryOrgAlertData.Validate if the designated constraints aren't met.
type QueryOrgAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertDataValidationError) ErrorName() string {
	return "QueryOrgAlertDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertDataValidationError{}

// Validate checks the field values on GetOrgAlertDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgAlertDetailRequestMultiError, or nil if none found.
func (m *GetOrgAlertDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetOrgAlertDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgAlertDetailRequestMultiError(errors)
	}

	return nil
}

// GetOrgAlertDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrgAlertDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgAlertDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertDetailRequestMultiError) AllErrors() []error { return m }

// GetOrgAlertDetailRequestValidationError is the validation error returned by
// GetOrgAlertDetailRequest.Validate if the designated constraints aren't met.
type GetOrgAlertDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertDetailRequestValidationError) ErrorName() string {
	return "GetOrgAlertDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertDetailRequestValidationError{}

// Validate checks the field values on GetOrgAlertDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgAlertDetailResponseMultiError, or nil if none found.
func (m *GetOrgAlertDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgAlertDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgAlertDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgAlertDetailResponseMultiError(errors)
	}

	return nil
}

// GetOrgAlertDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrgAlertDetailResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrgAlertDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertDetailResponseMultiError) AllErrors() []error { return m }

// GetOrgAlertDetailResponseValidationError is the validation error returned by
// GetOrgAlertDetailResponse.Validate if the designated constraints aren't met.
type GetOrgAlertDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertDetailResponseValidationError) ErrorName() string {
	return "GetOrgAlertDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertDetailResponseValidationError{}

// Validate checks the field values on CreateOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgAlertRequestMultiError, or nil if none found.
func (m *CreateOrgAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrgAlertRequestMultiError(errors)
	}

	return nil
}

// CreateOrgAlertRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrgAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgAlertRequestMultiError) AllErrors() []error { return m }

// CreateOrgAlertRequestValidationError is the validation error returned by
// CreateOrgAlertRequest.Validate if the designated constraints aren't met.
type CreateOrgAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgAlertRequestValidationError) ErrorName() string {
	return "CreateOrgAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgAlertRequestValidationError{}

// Validate checks the field values on TriggerCondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerConditionMultiError, or nil if none found.
func (m *TriggerCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Condition

	// no validation rules for Operator

	// no validation rules for Values

	if len(errors) > 0 {
		return TriggerConditionMultiError(errors)
	}

	return nil
}

// TriggerConditionMultiError is an error wrapping multiple validation errors
// returned by TriggerCondition.ValidateAll() if the designated constraints
// aren't met.
type TriggerConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerConditionMultiError) AllErrors() []error { return m }

// TriggerConditionValidationError is the validation error returned by
// TriggerCondition.Validate if the designated constraints aren't met.
type TriggerConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerConditionValidationError) ErrorName() string { return "TriggerConditionValidationError" }

// Error satisfies the builtin error interface
func (e TriggerConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerConditionValidationError{}

// Validate checks the field values on CreateOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgAlertResponseMultiError, or nil if none found.
func (m *CreateOrgAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CreateOrgAlertResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrgAlertResponseMultiError(errors)
	}

	return nil
}

// CreateOrgAlertResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrgAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgAlertResponseMultiError) AllErrors() []error { return m }

// CreateOrgAlertResponseValidationError is the validation error returned by
// CreateOrgAlertResponse.Validate if the designated constraints aren't met.
type CreateOrgAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgAlertResponseValidationError) ErrorName() string {
	return "CreateOrgAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgAlertResponseValidationError{}

// Validate checks the field values on UpdateOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertRequestMultiError, or nil if none found.
func (m *UpdateOrgAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrgAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetFilters()))
		i := 0
		for key := range m.GetFilters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFilters()[key]
			_ = val

			// no validation rules for Filters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Filters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateOrgAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateOrgAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrgAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrgAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertRequestMultiError) AllErrors() []error { return m }

// UpdateOrgAlertRequestValidationError is the validation error returned by
// UpdateOrgAlertRequest.Validate if the designated constraints aren't met.
type UpdateOrgAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertRequestValidationError) ErrorName() string {
	return "UpdateOrgAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertRequestValidationError{}

// Validate checks the field values on UpdateOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertResponseMultiError, or nil if none found.
func (m *UpdateOrgAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrgAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrgAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrgAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertResponseMultiError) AllErrors() []error { return m }

// UpdateOrgAlertResponseValidationError is the validation error returned by
// UpdateOrgAlertResponse.Validate if the designated constraints aren't met.
type UpdateOrgAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertResponseValidationError) ErrorName() string {
	return "UpdateOrgAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertResponseValidationError{}

// Validate checks the field values on UpdateOrgAlertEnableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertEnableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateOrgAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrgAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateOrgAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertEnableRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgAlertEnableRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrgAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateOrgAlertEnableRequestValidationError is the validation error returned
// by UpdateOrgAlertEnableRequest.Validate if the designated constraints
// aren't met.
type UpdateOrgAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateOrgAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateOrgAlertEnableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertEnableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateOrgAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrgAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertEnableResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgAlertEnableResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrgAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateOrgAlertEnableResponseValidationError is the validation error returned
// by UpdateOrgAlertEnableResponse.Validate if the designated constraints
// aren't met.
type UpdateOrgAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateOrgAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgAlertRequestMultiError, or nil if none found.
func (m *DeleteOrgAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOrgAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrgAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgAlertRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgAlertRequestMultiError) AllErrors() []error { return m }

// DeleteOrgAlertRequestValidationError is the validation error returned by
// DeleteOrgAlertRequest.Validate if the designated constraints aren't met.
type DeleteOrgAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgAlertRequestValidationError) ErrorName() string {
	return "DeleteOrgAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgAlertRequestValidationError{}

// Validate checks the field values on DeleteOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgAlertResponseMultiError, or nil if none found.
func (m *DeleteOrgAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DeleteOrgAlertResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DeleteOrgAlertResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DeleteOrgAlertResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DeleteOrgAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteOrgAlertResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOrgAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrgAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgAlertResponseMultiError) AllErrors() []error { return m }

// DeleteOrgAlertResponseValidationError is the validation error returned by
// DeleteOrgAlertResponse.Validate if the designated constraints aren't met.
type DeleteOrgAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgAlertResponseValidationError) ErrorName() string {
	return "DeleteOrgAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgAlertResponseValidationError{}

// Validate checks the field values on GetAlertRecordAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordAttrRequestMultiError, or nil if none found.
func (m *GetAlertRecordAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return GetAlertRecordAttrRequestMultiError(errors)
	}

	return nil
}

// GetAlertRecordAttrRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordAttrRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAlertRecordAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordAttrRequestMultiError) AllErrors() []error { return m }

// GetAlertRecordAttrRequestValidationError is the validation error returned by
// GetAlertRecordAttrRequest.Validate if the designated constraints aren't met.
type GetAlertRecordAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordAttrRequestValidationError) ErrorName() string {
	return "GetAlertRecordAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordAttrRequestValidationError{}

// Validate checks the field values on GetAlertRecordAttrResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordAttrResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordAttrResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordAttrResponseMultiError, or nil if none found.
func (m *GetAlertRecordAttrResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordAttrResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertRecordAttrResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertRecordAttrResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertRecordAttrResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertRecordAttrResponseMultiError(errors)
	}

	return nil
}

// GetAlertRecordAttrResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertRecordAttrResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertRecordAttrResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordAttrResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordAttrResponseMultiError) AllErrors() []error { return m }

// GetAlertRecordAttrResponseValidationError is the validation error returned
// by GetAlertRecordAttrResponse.Validate if the designated constraints aren't met.
type GetAlertRecordAttrResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordAttrResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordAttrResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordAttrResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordAttrResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordAttrResponseValidationError) ErrorName() string {
	return "GetAlertRecordAttrResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordAttrResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordAttrResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordAttrResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordAttrResponseValidationError{}

// Validate checks the field values on AlertRecordAttr with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertRecordAttr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRecordAttr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertRecordAttrMultiError, or nil if none found.
func (m *AlertRecordAttr) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRecordAttr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlertState() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("AlertState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("AlertState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertRecordAttrValidationError{
					field:  fmt.Sprintf("AlertState[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAlertType() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("AlertType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("AlertType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertRecordAttrValidationError{
					field:  fmt.Sprintf("AlertType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHandleState() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("HandleState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertRecordAttrValidationError{
						field:  fmt.Sprintf("HandleState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertRecordAttrValidationError{
					field:  fmt.Sprintf("HandleState[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AlertRecordAttrMultiError(errors)
	}

	return nil
}

// AlertRecordAttrMultiError is an error wrapping multiple validation errors
// returned by AlertRecordAttr.ValidateAll() if the designated constraints
// aren't met.
type AlertRecordAttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRecordAttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRecordAttrMultiError) AllErrors() []error { return m }

// AlertRecordAttrValidationError is the validation error returned by
// AlertRecordAttr.Validate if the designated constraints aren't met.
type AlertRecordAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRecordAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRecordAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRecordAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRecordAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRecordAttrValidationError) ErrorName() string { return "AlertRecordAttrValidationError" }

// Error satisfies the builtin error interface
func (e AlertRecordAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRecordAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRecordAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRecordAttrValidationError{}

// Validate checks the field values on QueryAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRecordRequestMultiError, or nil if none found.
func (m *QueryAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeKey

	if m.GetPageNo() <= 0 {
		err := QueryAlertRecordRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryAlertRecordRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryAlertRecordRequestMultiError(errors)
	}

	return nil
}

// QueryAlertRecordRequestMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRecordRequestMultiError) AllErrors() []error { return m }

// QueryAlertRecordRequestValidationError is the validation error returned by
// QueryAlertRecordRequest.Validate if the designated constraints aren't met.
type QueryAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRecordRequestValidationError) ErrorName() string {
	return "QueryAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRecordRequestValidationError{}

// Validate checks the field values on QueryAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRecordResponseMultiError, or nil if none found.
func (m *QueryAlertRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertRecordResponseMultiError(errors)
	}

	return nil
}

// QueryAlertRecordResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRecordResponseMultiError) AllErrors() []error { return m }

// QueryAlertRecordResponseValidationError is the validation error returned by
// QueryAlertRecordResponse.Validate if the designated constraints aren't met.
type QueryAlertRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRecordResponseValidationError) ErrorName() string {
	return "QueryAlertRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRecordResponseValidationError{}

// Validate checks the field values on ListResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResultMultiError, or
// nil if none found.
func (m *ListResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResultValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResultValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResultValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListResultMultiError(errors)
	}

	return nil
}

// ListResultMultiError is an error wrapping multiple validation errors
// returned by ListResult.ValidateAll() if the designated constraints aren't met.
type ListResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResultMultiError) AllErrors() []error { return m }

// ListResultValidationError is the validation error returned by
// ListResult.Validate if the designated constraints aren't met.
type ListResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResultValidationError) ErrorName() string { return "ListResultValidationError" }

// Error satisfies the builtin error interface
func (e ListResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResultValidationError{}

// Validate checks the field values on AlertRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertRecordMultiError, or
// nil if none found.
func (m *AlertRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Scope

	// no validation rules for ScopeKey

	// no validation rules for AlertGroup

	// no validation rules for Title

	// no validation rules for AlertState

	// no validation rules for AlertType

	// no validation rules for AlertIndex

	// no validation rules for ExpressionKey

	// no validation rules for AlertId

	// no validation rules for AlertName

	// no validation rules for RuleId

	// no validation rules for ProjectId

	// no validation rules for IssueId

	// no validation rules for HandleState

	// no validation rules for HandlerId

	// no validation rules for AlertTime

	// no validation rules for HandleTime

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return AlertRecordMultiError(errors)
	}

	return nil
}

// AlertRecordMultiError is an error wrapping multiple validation errors
// returned by AlertRecord.ValidateAll() if the designated constraints aren't met.
type AlertRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRecordMultiError) AllErrors() []error { return m }

// AlertRecordValidationError is the validation error returned by
// AlertRecord.Validate if the designated constraints aren't met.
type AlertRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRecordValidationError) ErrorName() string { return "AlertRecordValidationError" }

// Error satisfies the builtin error interface
func (e AlertRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRecordValidationError{}

// Validate checks the field values on GetAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordRequestMultiError, or nil if none found.
func (m *GetAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetAlertRecordRequestMultiError(errors)
	}

	return nil
}

// GetAlertRecordRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordRequestMultiError) AllErrors() []error { return m }

// GetAlertRecordRequestValidationError is the validation error returned by
// GetAlertRecordRequest.Validate if the designated constraints aren't met.
type GetAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordRequestValidationError) ErrorName() string {
	return "GetAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordRequestValidationError{}

// Validate checks the field values on GetAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordResponseMultiError, or nil if none found.
func (m *GetAlertRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertRecordResponseMultiError(errors)
	}

	return nil
}

// GetAlertRecordResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordResponseMultiError) AllErrors() []error { return m }

// GetAlertRecordResponseValidationError is the validation error returned by
// GetAlertRecordResponse.Validate if the designated constraints aren't met.
type GetAlertRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordResponseValidationError) ErrorName() string {
	return "GetAlertRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordResponseValidationError{}

// Validate checks the field values on QueryAlertHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertHistoryRequestMultiError, or nil if none found.
func (m *QueryAlertHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if m.GetStart() <= 0 {
		err := QueryAlertHistoryRequestValidationError{
			field:  "Start",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnd() <= 0 {
		err := QueryAlertHistoryRequestValidationError{
			field:  "End",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return QueryAlertHistoryRequestMultiError(errors)
	}

	return nil
}

// QueryAlertHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by QueryAlertHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertHistoryRequestMultiError) AllErrors() []error { return m }

// QueryAlertHistoryRequestValidationError is the validation error returned by
// QueryAlertHistoryRequest.Validate if the designated constraints aren't met.
type QueryAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertHistoryRequestValidationError) ErrorName() string {
	return "QueryAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertHistoryRequestValidationError{}

// Validate checks the field values on QueryAlertHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertHistoryResponseMultiError, or nil if none found.
func (m *QueryAlertHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryAlertHistoryResponseMultiError(errors)
	}

	return nil
}

// QueryAlertHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAlertHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type QueryAlertHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertHistoryResponseMultiError) AllErrors() []error { return m }

// QueryAlertHistoryResponseValidationError is the validation error returned by
// QueryAlertHistoryResponse.Validate if the designated constraints aren't met.
type QueryAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertHistoryResponseValidationError) ErrorName() string {
	return "QueryAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertHistoryResponseValidationError{}

// Validate checks the field values on AlertHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertHistoryMultiError, or
// nil if none found.
func (m *AlertHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Timestamp

	// no validation rules for AlertState

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for DisplayUrl

	if len(errors) > 0 {
		return AlertHistoryMultiError(errors)
	}

	return nil
}

// AlertHistoryMultiError is an error wrapping multiple validation errors
// returned by AlertHistory.ValidateAll() if the designated constraints aren't met.
type AlertHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertHistoryMultiError) AllErrors() []error { return m }

// AlertHistoryValidationError is the validation error returned by
// AlertHistory.Validate if the designated constraints aren't met.
type AlertHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertHistoryValidationError) ErrorName() string { return "AlertHistoryValidationError" }

// Error satisfies the builtin error interface
func (e AlertHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertHistoryValidationError{}

// Validate checks the field values on CreateAlertIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertIssueRequestMultiError, or nil if none found.
func (m *CreateAlertIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetPlanStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertIssueRequestValidationError{
				field:  "PlanStartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlanFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertIssueRequestValidationError{
				field:  "PlanFinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for IterationID

	// no validation rules for AppID

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Priority

	// no validation rules for Complexity

	// no validation rules for Severity

	// no validation rules for Assignee

	// no validation rules for Creator

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetIssueManHour()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueManHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertIssueRequestValidationError{
				field:  "IssueManHour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskType

	// no validation rules for BugStage

	// no validation rules for Owner

	// no validation rules for UserID

	// no validation rules for InternalClient

	// no validation rules for External

	if len(errors) > 0 {
		return CreateAlertIssueRequestMultiError(errors)
	}

	return nil
}

// CreateAlertIssueRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAlertIssueRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertIssueRequestMultiError) AllErrors() []error { return m }

// CreateAlertIssueRequestValidationError is the validation error returned by
// CreateAlertIssueRequest.Validate if the designated constraints aren't met.
type CreateAlertIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertIssueRequestValidationError) ErrorName() string {
	return "CreateAlertIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertIssueRequestValidationError{}

// Validate checks the field values on IssueManHour with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IssueManHour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueManHour with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IssueManHourMultiError, or
// nil if none found.
func (m *IssueManHour) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueManHour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateTime

	// no validation rules for ThisElapsedTime

	// no validation rules for ElapsedTime

	// no validation rules for RemainingTime

	// no validation rules for StartTime

	// no validation rules for WorkContent

	// no validation rules for IsModifiedRemainingTime

	if len(errors) > 0 {
		return IssueManHourMultiError(errors)
	}

	return nil
}

// IssueManHourMultiError is an error wrapping multiple validation errors
// returned by IssueManHour.ValidateAll() if the designated constraints aren't met.
type IssueManHourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueManHourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueManHourMultiError) AllErrors() []error { return m }

// IssueManHourValidationError is the validation error returned by
// IssueManHour.Validate if the designated constraints aren't met.
type IssueManHourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueManHourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueManHourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueManHourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueManHourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueManHourValidationError) ErrorName() string { return "IssueManHourValidationError" }

// Error satisfies the builtin error interface
func (e IssueManHourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueManHour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueManHourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueManHourValidationError{}

// Validate checks the field values on CreateAlertIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertIssueResponseMultiError, or nil if none found.
func (m *CreateAlertIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAlertIssueResponseMultiError(errors)
	}

	return nil
}

// CreateAlertIssueResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAlertIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertIssueResponseMultiError) AllErrors() []error { return m }

// CreateAlertIssueResponseValidationError is the validation error returned by
// CreateAlertIssueResponse.Validate if the designated constraints aren't met.
type CreateAlertIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertIssueResponseValidationError) ErrorName() string {
	return "CreateAlertIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertIssueResponseValidationError{}

// Validate checks the field values on UpdateAlertIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertIssueRequestMultiError, or nil if none found.
func (m *UpdateAlertIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for State

	// no validation rules for Priority

	// no validation rules for Complexity

	// no validation rules for Severity

	if all {
		switch v := interface{}(m.GetPlanStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertIssueRequestValidationError{
				field:  "PlanStartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlanFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertIssueRequestValidationError{
				field:  "PlanFinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Assignee

	// no validation rules for IterationID

	// no validation rules for Source

	// no validation rules for TaskType

	// no validation rules for BugStage

	// no validation rules for Owner

	if all {
		switch v := interface{}(m.GetIssueManHour()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueManHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertIssueRequestValidationError{
				field:  "IssueManHour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RemoveTestPlanCaseRelIDs

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for InternalClient

	// no validation rules for IssueId

	if len(errors) > 0 {
		return UpdateAlertIssueRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertIssueRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertIssueRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertIssueRequestMultiError) AllErrors() []error { return m }

// UpdateAlertIssueRequestValidationError is the validation error returned by
// UpdateAlertIssueRequest.Validate if the designated constraints aren't met.
type UpdateAlertIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertIssueRequestValidationError) ErrorName() string {
	return "UpdateAlertIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertIssueRequestValidationError{}

// Validate checks the field values on UpdateAlertIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertIssueResponseMultiError, or nil if none found.
func (m *UpdateAlertIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertIssueResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertIssueResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertIssueResponseMultiError) AllErrors() []error { return m }

// UpdateAlertIssueResponseValidationError is the validation error returned by
// UpdateAlertIssueResponse.Validate if the designated constraints aren't met.
type UpdateAlertIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertIssueResponseValidationError) ErrorName() string {
	return "UpdateAlertIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertIssueResponseValidationError{}

// Validate checks the field values on GetOrgAlertRecordAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertRecordAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertRecordAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgAlertRecordAttrRequestMultiError, or nil if none found.
func (m *GetOrgAlertRecordAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertRecordAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrgAlertRecordAttrRequestMultiError(errors)
	}

	return nil
}

// GetOrgAlertRecordAttrRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrgAlertRecordAttrRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrgAlertRecordAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertRecordAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertRecordAttrRequestMultiError) AllErrors() []error { return m }

// GetOrgAlertRecordAttrRequestValidationError is the validation error returned
// by GetOrgAlertRecordAttrRequest.Validate if the designated constraints
// aren't met.
type GetOrgAlertRecordAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertRecordAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertRecordAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertRecordAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertRecordAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertRecordAttrRequestValidationError) ErrorName() string {
	return "GetOrgAlertRecordAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertRecordAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertRecordAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertRecordAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertRecordAttrRequestValidationError{}

// Validate checks the field values on GetOrgAlertRecordAttrResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertRecordAttrResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertRecordAttrResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrgAlertRecordAttrResponseMultiError, or nil if none found.
func (m *GetOrgAlertRecordAttrResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertRecordAttrResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgAlertRecordAttrResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgAlertRecordAttrResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgAlertRecordAttrResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgAlertRecordAttrResponseMultiError(errors)
	}

	return nil
}

// GetOrgAlertRecordAttrResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrgAlertRecordAttrResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrgAlertRecordAttrResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertRecordAttrResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertRecordAttrResponseMultiError) AllErrors() []error { return m }

// GetOrgAlertRecordAttrResponseValidationError is the validation error
// returned by GetOrgAlertRecordAttrResponse.Validate if the designated
// constraints aren't met.
type GetOrgAlertRecordAttrResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertRecordAttrResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertRecordAttrResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertRecordAttrResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertRecordAttrResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertRecordAttrResponseValidationError) ErrorName() string {
	return "GetOrgAlertRecordAttrResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertRecordAttrResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertRecordAttrResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertRecordAttrResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertRecordAttrResponseValidationError{}

// Validate checks the field values on QueryOrgAlertRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertRecordRequestMultiError, or nil if none found.
func (m *QueryOrgAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNo() <= 0 {
		err := QueryOrgAlertRecordRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryOrgAlertRecordRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryOrgAlertRecordRequestMultiError(errors)
	}

	return nil
}

// QueryOrgAlertRecordRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgAlertRecordRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryOrgAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertRecordRequestMultiError) AllErrors() []error { return m }

// QueryOrgAlertRecordRequestValidationError is the validation error returned
// by QueryOrgAlertRecordRequest.Validate if the designated constraints aren't met.
type QueryOrgAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertRecordRequestValidationError) ErrorName() string {
	return "QueryOrgAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertRecordRequestValidationError{}

// Validate checks the field values on QueryOrgHostsAlertRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgHostsAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgHostsAlertRecordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryOrgHostsAlertRecordRequestMultiError, or nil if none found.
func (m *QueryOrgHostsAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgHostsAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgHostsAlertRecordRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgHostsAlertRecordRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgHostsAlertRecordRequestValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetPageNo() <= 0 {
		err := QueryOrgHostsAlertRecordRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryOrgHostsAlertRecordRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryOrgHostsAlertRecordRequestMultiError(errors)
	}

	return nil
}

// QueryOrgHostsAlertRecordRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgHostsAlertRecordRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryOrgHostsAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgHostsAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgHostsAlertRecordRequestMultiError) AllErrors() []error { return m }

// QueryOrgHostsAlertRecordRequestValidationError is the validation error
// returned by QueryOrgHostsAlertRecordRequest.Validate if the designated
// constraints aren't met.
type QueryOrgHostsAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgHostsAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgHostsAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgHostsAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgHostsAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgHostsAlertRecordRequestValidationError) ErrorName() string {
	return "QueryOrgHostsAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgHostsAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgHostsAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgHostsAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgHostsAlertRecordRequestValidationError{}

// Validate checks the field values on ClusterReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterReqMultiError, or
// nil if none found.
func (m *ClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ClusterReqMultiError(errors)
	}

	return nil
}

// ClusterReqMultiError is an error wrapping multiple validation errors
// returned by ClusterReq.ValidateAll() if the designated constraints aren't met.
type ClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterReqMultiError) AllErrors() []error { return m }

// ClusterReqValidationError is the validation error returned by
// ClusterReq.Validate if the designated constraints aren't met.
type ClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterReqValidationError) ErrorName() string { return "ClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e ClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterReqValidationError{}

// Validate checks the field values on QueryOrgAlertRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertRecordResponseMultiError, or nil if none found.
func (m *QueryOrgAlertRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrgAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrgAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrgAlertRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryOrgAlertRecordResponseMultiError(errors)
	}

	return nil
}

// QueryOrgAlertRecordResponseMultiError is an error wrapping multiple
// validation errors returned by QueryOrgAlertRecordResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryOrgAlertRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertRecordResponseMultiError) AllErrors() []error { return m }

// QueryOrgAlertRecordResponseValidationError is the validation error returned
// by QueryOrgAlertRecordResponse.Validate if the designated constraints
// aren't met.
type QueryOrgAlertRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertRecordResponseValidationError) ErrorName() string {
	return "QueryOrgAlertRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertRecordResponseValidationError{}

// Validate checks the field values on GetOrgAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgAlertRecordRequestMultiError, or nil if none found.
func (m *GetOrgAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetOrgAlertRecordRequestMultiError(errors)
	}

	return nil
}

// GetOrgAlertRecordRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrgAlertRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrgAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertRecordRequestMultiError) AllErrors() []error { return m }

// GetOrgAlertRecordRequestValidationError is the validation error returned by
// GetOrgAlertRecordRequest.Validate if the designated constraints aren't met.
type GetOrgAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertRecordRequestValidationError) ErrorName() string {
	return "GetOrgAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertRecordRequestValidationError{}

// Validate checks the field values on GetOrgAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgAlertRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgAlertRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgAlertRecordResponseMultiError, or nil if none found.
func (m *GetOrgAlertRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgAlertRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgAlertRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgAlertRecordResponseMultiError(errors)
	}

	return nil
}

// GetOrgAlertRecordResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrgAlertRecordResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrgAlertRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgAlertRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgAlertRecordResponseMultiError) AllErrors() []error { return m }

// GetOrgAlertRecordResponseValidationError is the validation error returned by
// GetOrgAlertRecordResponse.Validate if the designated constraints aren't met.
type GetOrgAlertRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgAlertRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgAlertRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgAlertRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgAlertRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgAlertRecordResponseValidationError) ErrorName() string {
	return "GetOrgAlertRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgAlertRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgAlertRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgAlertRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgAlertRecordResponseValidationError{}

// Validate checks the field values on QueryOrgAlertHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertHistoryRequestMultiError, or nil if none found.
func (m *QueryOrgAlertHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if m.GetStart() <= 0 {
		err := QueryOrgAlertHistoryRequestValidationError{
			field:  "Start",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnd() <= 0 {
		err := QueryOrgAlertHistoryRequestValidationError{
			field:  "End",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return QueryOrgAlertHistoryRequestMultiError(errors)
	}

	return nil
}

// QueryOrgAlertHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by QueryOrgAlertHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryOrgAlertHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertHistoryRequestMultiError) AllErrors() []error { return m }

// QueryOrgAlertHistoryRequestValidationError is the validation error returned
// by QueryOrgAlertHistoryRequest.Validate if the designated constraints
// aren't met.
type QueryOrgAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertHistoryRequestValidationError) ErrorName() string {
	return "QueryOrgAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertHistoryRequestValidationError{}

// Validate checks the field values on QueryOrgAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrgAlertHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrgAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrgAlertHistoryResponseMultiError, or nil if none found.
func (m *QueryOrgAlertHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrgAlertHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrgAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrgAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrgAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryOrgAlertHistoryResponseMultiError(errors)
	}

	return nil
}

// QueryOrgAlertHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by QueryOrgAlertHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryOrgAlertHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrgAlertHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrgAlertHistoryResponseMultiError) AllErrors() []error { return m }

// QueryOrgAlertHistoryResponseValidationError is the validation error returned
// by QueryOrgAlertHistoryResponse.Validate if the designated constraints
// aren't met.
type QueryOrgAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrgAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrgAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrgAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrgAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrgAlertHistoryResponseValidationError) ErrorName() string {
	return "QueryOrgAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrgAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrgAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrgAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrgAlertHistoryResponseValidationError{}

// Validate checks the field values on CreateOrgAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgAlertIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgAlertIssueRequestMultiError, or nil if none found.
func (m *CreateOrgAlertIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgAlertIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetPlanStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgAlertIssueRequestValidationError{
				field:  "PlanStartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlanFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgAlertIssueRequestValidationError{
				field:  "PlanFinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for IterationID

	// no validation rules for AppID

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Priority

	// no validation rules for Complexity

	// no validation rules for Severity

	// no validation rules for Assignee

	// no validation rules for Creator

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetIssueManHour()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueManHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgAlertIssueRequestValidationError{
				field:  "IssueManHour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskType

	// no validation rules for BugStage

	// no validation rules for Owner

	// no validation rules for UserID

	// no validation rules for InternalClient

	// no validation rules for External

	if len(errors) > 0 {
		return CreateOrgAlertIssueRequestMultiError(errors)
	}

	return nil
}

// CreateOrgAlertIssueRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrgAlertIssueRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrgAlertIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgAlertIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgAlertIssueRequestMultiError) AllErrors() []error { return m }

// CreateOrgAlertIssueRequestValidationError is the validation error returned
// by CreateOrgAlertIssueRequest.Validate if the designated constraints aren't met.
type CreateOrgAlertIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgAlertIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgAlertIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgAlertIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgAlertIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgAlertIssueRequestValidationError) ErrorName() string {
	return "CreateOrgAlertIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgAlertIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgAlertIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgAlertIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgAlertIssueRequestValidationError{}

// Validate checks the field values on CreateOrgAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgAlertIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgAlertIssueResponseMultiError, or nil if none found.
func (m *CreateOrgAlertIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgAlertIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateOrgAlertIssueResponseMultiError(errors)
	}

	return nil
}

// CreateOrgAlertIssueResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrgAlertIssueResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrgAlertIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgAlertIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgAlertIssueResponseMultiError) AllErrors() []error { return m }

// CreateOrgAlertIssueResponseValidationError is the validation error returned
// by CreateOrgAlertIssueResponse.Validate if the designated constraints
// aren't met.
type CreateOrgAlertIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgAlertIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgAlertIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgAlertIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgAlertIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgAlertIssueResponseValidationError) ErrorName() string {
	return "CreateOrgAlertIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgAlertIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgAlertIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgAlertIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgAlertIssueResponseValidationError{}

// Validate checks the field values on UpdateOrgAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertIssueRequestMultiError, or nil if none found.
func (m *UpdateOrgAlertIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for State

	// no validation rules for Priority

	// no validation rules for Complexity

	// no validation rules for Severity

	if all {
		switch v := interface{}(m.GetPlanStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "PlanStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgAlertIssueRequestValidationError{
				field:  "PlanStartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlanFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "PlanFinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgAlertIssueRequestValidationError{
				field:  "PlanFinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Assignee

	// no validation rules for IterationID

	// no validation rules for Source

	// no validation rules for TaskType

	// no validation rules for BugStage

	// no validation rules for Owner

	if all {
		switch v := interface{}(m.GetIssueManHour()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgAlertIssueRequestValidationError{
					field:  "IssueManHour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueManHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgAlertIssueRequestValidationError{
				field:  "IssueManHour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RemoveTestPlanCaseRelIDs

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return UpdateOrgAlertIssueRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertIssueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgAlertIssueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrgAlertIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertIssueRequestMultiError) AllErrors() []error { return m }

// UpdateOrgAlertIssueRequestValidationError is the validation error returned
// by UpdateOrgAlertIssueRequest.Validate if the designated constraints aren't met.
type UpdateOrgAlertIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertIssueRequestValidationError) ErrorName() string {
	return "UpdateOrgAlertIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertIssueRequestValidationError{}

// Validate checks the field values on UpdateOrgAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgAlertIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgAlertIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgAlertIssueResponseMultiError, or nil if none found.
func (m *UpdateOrgAlertIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgAlertIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrgAlertIssueResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgAlertIssueResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgAlertIssueResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrgAlertIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgAlertIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgAlertIssueResponseMultiError) AllErrors() []error { return m }

// UpdateOrgAlertIssueResponseValidationError is the validation error returned
// by UpdateOrgAlertIssueResponse.Validate if the designated constraints
// aren't met.
type UpdateOrgAlertIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgAlertIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgAlertIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgAlertIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgAlertIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgAlertIssueResponseValidationError) ErrorName() string {
	return "UpdateOrgAlertIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgAlertIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgAlertIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgAlertIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgAlertIssueResponseValidationError{}

// Validate checks the field values on GetAlertConditionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertConditionsRequestMultiError, or nil if none found.
func (m *GetAlertConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return GetAlertConditionsRequestMultiError(errors)
	}

	return nil
}

// GetAlertConditionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertConditionsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAlertConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsRequestMultiError) AllErrors() []error { return m }

// GetAlertConditionsRequestValidationError is the validation error returned by
// GetAlertConditionsRequest.Validate if the designated constraints aren't met.
type GetAlertConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsRequestValidationError) ErrorName() string {
	return "GetAlertConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsRequestValidationError{}

// Validate checks the field values on GetAlertConditionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertConditionsResponseMultiError, or nil if none found.
func (m *GetAlertConditionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsResponseMultiError(errors)
	}

	return nil
}

// GetAlertConditionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertConditionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsResponseMultiError) AllErrors() []error { return m }

// GetAlertConditionsResponseValidationError is the validation error returned
// by GetAlertConditionsResponse.Validate if the designated constraints aren't met.
type GetAlertConditionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsResponseValidationError) ErrorName() string {
	return "GetAlertConditionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsResponseValidationError{}

// Validate checks the field values on Conditions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conditions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionsMultiError, or
// nil if none found.
func (m *Conditions) ValidateAll() error {
	return m.validate(true)
}

func (m *Conditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for DisplayName

	// no validation rules for Index

	if len(errors) > 0 {
		return ConditionsMultiError(errors)
	}

	return nil
}

// ConditionsMultiError is an error wrapping multiple validation errors
// returned by Conditions.ValidateAll() if the designated constraints aren't met.
type ConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionsMultiError) AllErrors() []error { return m }

// ConditionsValidationError is the validation error returned by
// Conditions.Validate if the designated constraints aren't met.
type ConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionsValidationError) ErrorName() string { return "ConditionsValidationError" }

// Error satisfies the builtin error interface
func (e ConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionsValidationError{}

// Validate checks the field values on GetAlertConditionsValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAlertConditionsValueRequestMultiError, or nil if none found.
func (m *GetAlertConditionsValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsValueRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsValueRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsValueRequestValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsValueRequestMultiError(errors)
	}

	return nil
}

// GetAlertConditionsValueRequestMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsValueRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAlertConditionsValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsValueRequestMultiError) AllErrors() []error { return m }

// GetAlertConditionsValueRequestValidationError is the validation error
// returned by GetAlertConditionsValueRequest.Validate if the designated
// constraints aren't met.
type GetAlertConditionsValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsValueRequestValidationError) ErrorName() string {
	return "GetAlertConditionsValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsValueRequestValidationError{}

// Validate checks the field values on ConditionsValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConditionsValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConditionsValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConditionsValueRequestMultiError, or nil if none found.
func (m *ConditionsValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConditionsValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Condition

	// no validation rules for Filters

	// no validation rules for Index

	if len(errors) > 0 {
		return ConditionsValueRequestMultiError(errors)
	}

	return nil
}

// ConditionsValueRequestMultiError is an error wrapping multiple validation
// errors returned by ConditionsValueRequest.ValidateAll() if the designated
// constraints aren't met.
type ConditionsValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionsValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionsValueRequestMultiError) AllErrors() []error { return m }

// ConditionsValueRequestValidationError is the validation error returned by
// ConditionsValueRequest.Validate if the designated constraints aren't met.
type ConditionsValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionsValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionsValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionsValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionsValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionsValueRequestValidationError) ErrorName() string {
	return "ConditionsValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConditionsValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditionsValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionsValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionsValueRequestValidationError{}

// Validate checks the field values on GetAlertConditionsValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAlertConditionsValueResponseMultiError, or nil if none found.
func (m *GetAlertConditionsValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsValueResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsValueResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsValueResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsValueResponseMultiError(errors)
	}

	return nil
}

// GetAlertConditionsValueResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsValueResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAlertConditionsValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsValueResponseMultiError) AllErrors() []error { return m }

// GetAlertConditionsValueResponseValidationError is the validation error
// returned by GetAlertConditionsValueResponse.Validate if the designated
// constraints aren't met.
type GetAlertConditionsValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsValueResponseValidationError) ErrorName() string {
	return "GetAlertConditionsValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsValueResponseValidationError{}

// Validate checks the field values on AlertConditionsValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertConditionsValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertConditionsValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertConditionsValueMultiError, or nil if none found.
func (m *AlertConditionsValue) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertConditionsValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertConditionsValueValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertConditionsValueValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertConditionsValueValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AlertConditionsValueMultiError(errors)
	}

	return nil
}

// AlertConditionsValueMultiError is an error wrapping multiple validation
// errors returned by AlertConditionsValue.ValidateAll() if the designated
// constraints aren't met.
type AlertConditionsValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertConditionsValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertConditionsValueMultiError) AllErrors() []error { return m }

// AlertConditionsValueValidationError is the validation error returned by
// AlertConditionsValue.Validate if the designated constraints aren't met.
type AlertConditionsValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertConditionsValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertConditionsValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertConditionsValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertConditionsValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertConditionsValueValidationError) ErrorName() string {
	return "AlertConditionsValueValidationError"
}

// Error satisfies the builtin error interface
func (e AlertConditionsValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertConditionsValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertConditionsValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertConditionsValueValidationError{}
