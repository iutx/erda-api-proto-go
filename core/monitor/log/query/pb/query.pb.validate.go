// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: query.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LogItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogItemMultiError, or nil if none found.
func (m *LogItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LogItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Stream

	// no validation rules for Timestamp

	// no validation rules for UnixNano

	// no validation rules for Offset

	// no validation rules for Content

	// no validation rules for Level

	// no validation rules for RequestId

	// no validation rules for UniqId

	// no validation rules for Tags

	{
		sorted_keys := make([]string, len(m.GetHighlight()))
		i := 0
		for key := range m.GetHighlight() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHighlight()[key]
			_ = val

			// no validation rules for Highlight[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, LogItemValidationError{
							field:  fmt.Sprintf("Highlight[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, LogItemValidationError{
							field:  fmt.Sprintf("Highlight[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return LogItemValidationError{
						field:  fmt.Sprintf("Highlight[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return LogItemMultiError(errors)
	}

	return nil
}

// LogItemMultiError is an error wrapping multiple validation errors returned
// by LogItem.ValidateAll() if the designated constraints aren't met.
type LogItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogItemMultiError) AllErrors() []error { return m }

// LogItemValidationError is the validation error returned by LogItem.Validate
// if the designated constraints aren't met.
type LogItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogItemValidationError) ErrorName() string { return "LogItemValidationError" }

// Error satisfies the builtin error interface
func (e LogItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogItemValidationError{}

// Validate checks the field values on GetLogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogRequestMultiError, or
// nil if none found.
func (m *GetLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Stream

	// no validation rules for RequestId

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Count

	// no validation rules for Pattern

	// no validation rules for Offset

	// no validation rules for Live

	// no validation rules for Debug

	// no validation rules for ClusterName

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return GetLogRequestMultiError(errors)
	}

	return nil
}

// GetLogRequestMultiError is an error wrapping multiple validation errors
// returned by GetLogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogRequestMultiError) AllErrors() []error { return m }

// GetLogRequestValidationError is the validation error returned by
// GetLogRequest.Validate if the designated constraints aren't met.
type GetLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogRequestValidationError) ErrorName() string { return "GetLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogRequestValidationError{}

// Validate checks the field values on GetLogByRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByRuntimeRequestMultiError, or nil if none found.
func (m *GetLogByRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Stream

	// no validation rules for RequestId

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Count

	// no validation rules for ApplicationId

	// no validation rules for Pattern

	// no validation rules for Offset

	// no validation rules for Live

	// no validation rules for Debug

	// no validation rules for PodName

	// no validation rules for PodNamespace

	// no validation rules for ContainerName

	// no validation rules for ClusterName

	// no validation rules for IsFirstQuery

	if len(errors) > 0 {
		return GetLogByRuntimeRequestMultiError(errors)
	}

	return nil
}

// GetLogByRuntimeRequestMultiError is an error wrapping multiple validation
// errors returned by GetLogByRuntimeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLogByRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByRuntimeRequestMultiError) AllErrors() []error { return m }

// GetLogByRuntimeRequestValidationError is the validation error returned by
// GetLogByRuntimeRequest.Validate if the designated constraints aren't met.
type GetLogByRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByRuntimeRequestValidationError) ErrorName() string {
	return "GetLogByRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByRuntimeRequestValidationError{}

// Validate checks the field values on GetLogByOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByOrganizationRequestMultiError, or nil if none found.
func (m *GetLogByOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Stream

	// no validation rules for RequestId

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Count

	// no validation rules for ClusterName

	// no validation rules for Pattern

	// no validation rules for Offset

	// no validation rules for Live

	// no validation rules for Debug

	if len(errors) > 0 {
		return GetLogByOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetLogByOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by GetLogByOrganizationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetLogByOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByOrganizationRequestMultiError) AllErrors() []error { return m }

// GetLogByOrganizationRequestValidationError is the validation error returned
// by GetLogByOrganizationRequest.Validate if the designated constraints
// aren't met.
type GetLogByOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByOrganizationRequestValidationError) ErrorName() string {
	return "GetLogByOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByOrganizationRequestValidationError{}

// Validate checks the field values on QueryMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryMetaMultiError, or nil
// if none found.
func (m *QueryMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgName

	// no validation rules for IgnoreMaxTimeRangeLimit

	// no validation rules for Highlight

	// no validation rules for PreferredBufferSize

	// no validation rules for PreferredIterateStyle

	// no validation rules for SkipTotalStat

	if len(errors) > 0 {
		return QueryMetaMultiError(errors)
	}

	return nil
}

// QueryMetaMultiError is an error wrapping multiple validation errors returned
// by QueryMeta.ValidateAll() if the designated constraints aren't met.
type QueryMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMetaMultiError) AllErrors() []error { return m }

// QueryMetaValidationError is the validation error returned by
// QueryMeta.Validate if the designated constraints aren't met.
type QueryMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMetaValidationError) ErrorName() string { return "QueryMetaValidationError" }

// Error satisfies the builtin error interface
func (e QueryMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMetaValidationError{}

// Validate checks the field values on LogUniqueID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogUniqueID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogUniqueID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogUniqueIDMultiError, or
// nil if none found.
func (m *LogUniqueID) ValidateAll() error {
	return m.validate(true)
}

func (m *LogUniqueID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnixNano

	// no validation rules for Id

	// no validation rules for Offset

	if len(errors) > 0 {
		return LogUniqueIDMultiError(errors)
	}

	return nil
}

// LogUniqueIDMultiError is an error wrapping multiple validation errors
// returned by LogUniqueID.ValidateAll() if the designated constraints aren't met.
type LogUniqueIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogUniqueIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogUniqueIDMultiError) AllErrors() []error { return m }

// LogUniqueIDValidationError is the validation error returned by
// LogUniqueID.Validate if the designated constraints aren't met.
type LogUniqueIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogUniqueIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogUniqueIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogUniqueIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogUniqueIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogUniqueIDValidationError) ErrorName() string { return "LogUniqueIDValidationError" }

// Error satisfies the builtin error interface
func (e LogUniqueIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogUniqueID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogUniqueIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogUniqueIDValidationError{}

// Validate checks the field values on ExtraFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraFilterMultiError, or
// nil if none found.
func (m *ExtraFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtraFilterValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtraFilterValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtraFilterValidationError{
				field:  "After",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PositionOffset

	if len(errors) > 0 {
		return ExtraFilterMultiError(errors)
	}

	return nil
}

// ExtraFilterMultiError is an error wrapping multiple validation errors
// returned by ExtraFilter.ValidateAll() if the designated constraints aren't met.
type ExtraFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraFilterMultiError) AllErrors() []error { return m }

// ExtraFilterValidationError is the validation error returned by
// ExtraFilter.Validate if the designated constraints aren't met.
type ExtraFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraFilterValidationError) ErrorName() string { return "ExtraFilterValidationError" }

// Error satisfies the builtin error interface
func (e ExtraFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraFilterValidationError{}

// Validate checks the field values on GetLogByExpressionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByExpressionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByExpressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByExpressionRequestMultiError, or nil if none found.
func (m *GetLogByExpressionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByExpressionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for QueryExpression

	if all {
		switch v := interface{}(m.GetQueryMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLogByExpressionRequestValidationError{
					field:  "QueryMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLogByExpressionRequestValidationError{
					field:  "QueryMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLogByExpressionRequestValidationError{
				field:  "QueryMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtraFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLogByExpressionRequestValidationError{
					field:  "ExtraFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLogByExpressionRequestValidationError{
					field:  "ExtraFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLogByExpressionRequestValidationError{
				field:  "ExtraFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	// no validation rules for Debug

	// no validation rules for Live

	if len(errors) > 0 {
		return GetLogByExpressionRequestMultiError(errors)
	}

	return nil
}

// GetLogByExpressionRequestMultiError is an error wrapping multiple validation
// errors returned by GetLogByExpressionRequest.ValidateAll() if the
// designated constraints aren't met.
type GetLogByExpressionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByExpressionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByExpressionRequestMultiError) AllErrors() []error { return m }

// GetLogByExpressionRequestValidationError is the validation error returned by
// GetLogByExpressionRequest.Validate if the designated constraints aren't met.
type GetLogByExpressionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByExpressionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByExpressionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByExpressionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByExpressionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByExpressionRequestValidationError) ErrorName() string {
	return "GetLogByExpressionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByExpressionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByExpressionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByExpressionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByExpressionRequestValidationError{}

// Validate checks the field values on HistogramAggOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HistogramAggOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistogramAggOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistogramAggOptionsMultiError, or nil if none found.
func (m *HistogramAggOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HistogramAggOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreferredPoints

	// no validation rules for MinimumInterval

	// no validation rules for FixedInterval

	if len(errors) > 0 {
		return HistogramAggOptionsMultiError(errors)
	}

	return nil
}

// HistogramAggOptionsMultiError is an error wrapping multiple validation
// errors returned by HistogramAggOptions.ValidateAll() if the designated
// constraints aren't met.
type HistogramAggOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistogramAggOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistogramAggOptionsMultiError) AllErrors() []error { return m }

// HistogramAggOptionsValidationError is the validation error returned by
// HistogramAggOptions.Validate if the designated constraints aren't met.
type HistogramAggOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistogramAggOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistogramAggOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistogramAggOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistogramAggOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistogramAggOptionsValidationError) ErrorName() string {
	return "HistogramAggOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e HistogramAggOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistogramAggOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistogramAggOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistogramAggOptionsValidationError{}

// Validate checks the field values on TermsAggOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TermsAggOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TermsAggOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TermsAggOptionsMultiError, or nil if none found.
func (m *TermsAggOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *TermsAggOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetMissing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TermsAggOptionsValidationError{
					field:  "Missing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TermsAggOptionsValidationError{
					field:  "Missing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMissing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TermsAggOptionsValidationError{
				field:  "Missing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TermsAggOptionsMultiError(errors)
	}

	return nil
}

// TermsAggOptionsMultiError is an error wrapping multiple validation errors
// returned by TermsAggOptions.ValidateAll() if the designated constraints
// aren't met.
type TermsAggOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TermsAggOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TermsAggOptionsMultiError) AllErrors() []error { return m }

// TermsAggOptionsValidationError is the validation error returned by
// TermsAggOptions.Validate if the designated constraints aren't met.
type TermsAggOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TermsAggOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TermsAggOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TermsAggOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TermsAggOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TermsAggOptionsValidationError) ErrorName() string { return "TermsAggOptionsValidationError" }

// Error satisfies the builtin error interface
func (e TermsAggOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTermsAggOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TermsAggOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TermsAggOptionsValidationError{}

// Validate checks the field values on AggregationDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregationDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationDescriptorMultiError, or nil if none found.
func (m *AggregationDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Field

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationDescriptorValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationDescriptorValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationDescriptorValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AggregationDescriptorMultiError(errors)
	}

	return nil
}

// AggregationDescriptorMultiError is an error wrapping multiple validation
// errors returned by AggregationDescriptor.ValidateAll() if the designated
// constraints aren't met.
type AggregationDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationDescriptorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationDescriptorMultiError) AllErrors() []error { return m }

// AggregationDescriptorValidationError is the validation error returned by
// AggregationDescriptor.Validate if the designated constraints aren't met.
type AggregationDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationDescriptorValidationError) ErrorName() string {
	return "AggregationDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationDescriptorValidationError{}

// Validate checks the field values on LogAggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogAggregationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogAggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogAggregationRequestMultiError, or nil if none found.
func (m *LogAggregationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogAggregationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogAggregationRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogAggregationRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogAggregationRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogAggregationRequestValidationError{
						field:  fmt.Sprintf("Aggregations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogAggregationRequestValidationError{
						field:  fmt.Sprintf("Aggregations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogAggregationRequestValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogAggregationRequestMultiError(errors)
	}

	return nil
}

// LogAggregationRequestMultiError is an error wrapping multiple validation
// errors returned by LogAggregationRequest.ValidateAll() if the designated
// constraints aren't met.
type LogAggregationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogAggregationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogAggregationRequestMultiError) AllErrors() []error { return m }

// LogAggregationRequestValidationError is the validation error returned by
// LogAggregationRequest.Validate if the designated constraints aren't met.
type LogAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogAggregationRequestValidationError) ErrorName() string {
	return "LogAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LogAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogAggregationRequestValidationError{}

// Validate checks the field values on AggregationBucket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AggregationBucket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationBucket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationBucketMultiError, or nil if none found.
func (m *AggregationBucket) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationBucket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AggregationBucketValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AggregationBucketValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AggregationBucketValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AggregationBucketMultiError(errors)
	}

	return nil
}

// AggregationBucketMultiError is an error wrapping multiple validation errors
// returned by AggregationBucket.ValidateAll() if the designated constraints
// aren't met.
type AggregationBucketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationBucketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationBucketMultiError) AllErrors() []error { return m }

// AggregationBucketValidationError is the validation error returned by
// AggregationBucket.Validate if the designated constraints aren't met.
type AggregationBucketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationBucketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationBucketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationBucketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationBucketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationBucketValidationError) ErrorName() string {
	return "AggregationBucketValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationBucketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationBucket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationBucketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationBucketValidationError{}

// Validate checks the field values on AggregationResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AggregationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationResultMultiError, or nil if none found.
func (m *AggregationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AggregationResultValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AggregationResultValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AggregationResultValidationError{
					field:  fmt.Sprintf("Buckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AggregationResultMultiError(errors)
	}

	return nil
}

// AggregationResultMultiError is an error wrapping multiple validation errors
// returned by AggregationResult.ValidateAll() if the designated constraints
// aren't met.
type AggregationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationResultMultiError) AllErrors() []error { return m }

// AggregationResultValidationError is the validation error returned by
// AggregationResult.Validate if the designated constraints aren't met.
type AggregationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationResultValidationError) ErrorName() string {
	return "AggregationResultValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationResultValidationError{}

// Validate checks the field values on LogAggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogAggregationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogAggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogAggregationResponseMultiError, or nil if none found.
func (m *LogAggregationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogAggregationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	{
		sorted_keys := make([]string, len(m.GetAggregations()))
		i := 0
		for key := range m.GetAggregations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAggregations()[key]
			_ = val

			// no validation rules for Aggregations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, LogAggregationResponseValidationError{
							field:  fmt.Sprintf("Aggregations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, LogAggregationResponseValidationError{
							field:  fmt.Sprintf("Aggregations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return LogAggregationResponseValidationError{
						field:  fmt.Sprintf("Aggregations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return LogAggregationResponseMultiError(errors)
	}

	return nil
}

// LogAggregationResponseMultiError is an error wrapping multiple validation
// errors returned by LogAggregationResponse.ValidateAll() if the designated
// constraints aren't met.
type LogAggregationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogAggregationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogAggregationResponseMultiError) AllErrors() []error { return m }

// LogAggregationResponseValidationError is the validation error returned by
// LogAggregationResponse.Validate if the designated constraints aren't met.
type LogAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogAggregationResponseValidationError) ErrorName() string {
	return "LogAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LogAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogAggregationResponseValidationError{}

// Validate checks the field values on GetLogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogResponseMultiError,
// or nil if none found.
func (m *GetLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogResponseValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsFallBack

	if len(errors) > 0 {
		return GetLogResponseMultiError(errors)
	}

	return nil
}

// GetLogResponseMultiError is an error wrapping multiple validation errors
// returned by GetLogResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogResponseMultiError) AllErrors() []error { return m }

// GetLogResponseValidationError is the validation error returned by
// GetLogResponse.Validate if the designated constraints aren't met.
type GetLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogResponseValidationError) ErrorName() string { return "GetLogResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogResponseValidationError{}

// Validate checks the field values on GetLogByRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByRuntimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByRuntimeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByRuntimeResponseMultiError, or nil if none found.
func (m *GetLogByRuntimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByRuntimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogByRuntimeResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogByRuntimeResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogByRuntimeResponseValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsFallback

	if len(errors) > 0 {
		return GetLogByRuntimeResponseMultiError(errors)
	}

	return nil
}

// GetLogByRuntimeResponseMultiError is an error wrapping multiple validation
// errors returned by GetLogByRuntimeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLogByRuntimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByRuntimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByRuntimeResponseMultiError) AllErrors() []error { return m }

// GetLogByRuntimeResponseValidationError is the validation error returned by
// GetLogByRuntimeResponse.Validate if the designated constraints aren't met.
type GetLogByRuntimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByRuntimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByRuntimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByRuntimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByRuntimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByRuntimeResponseValidationError) ErrorName() string {
	return "GetLogByRuntimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByRuntimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByRuntimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByRuntimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByRuntimeResponseValidationError{}

// Validate checks the field values on GetLogByOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByOrganizationResponseMultiError, or nil if none found.
func (m *GetLogByOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogByOrganizationResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogByOrganizationResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogByOrganizationResponseValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLogByOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetLogByOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by GetLogByOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLogByOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByOrganizationResponseMultiError) AllErrors() []error { return m }

// GetLogByOrganizationResponseValidationError is the validation error returned
// by GetLogByOrganizationResponse.Validate if the designated constraints
// aren't met.
type GetLogByOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByOrganizationResponseValidationError) ErrorName() string {
	return "GetLogByOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByOrganizationResponseValidationError{}

// Validate checks the field values on GetLogByExpressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogByExpressionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogByExpressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogByExpressionResponseMultiError, or nil if none found.
func (m *GetLogByExpressionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogByExpressionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogByExpressionResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogByExpressionResponseValidationError{
						field:  fmt.Sprintf("Lines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogByExpressionResponseValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLogByExpressionResponseMultiError(errors)
	}

	return nil
}

// GetLogByExpressionResponseMultiError is an error wrapping multiple
// validation errors returned by GetLogByExpressionResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLogByExpressionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogByExpressionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogByExpressionResponseMultiError) AllErrors() []error { return m }

// GetLogByExpressionResponseValidationError is the validation error returned
// by GetLogByExpressionResponse.Validate if the designated constraints aren't met.
type GetLogByExpressionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogByExpressionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogByExpressionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogByExpressionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogByExpressionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogByExpressionResponseValidationError) ErrorName() string {
	return "GetLogByExpressionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogByExpressionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogByExpressionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogByExpressionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogByExpressionResponseValidationError{}
