// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrgID() <= 0 {
		err := GetSettingsRequestValidationError{
			field:  "OrgID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Workspace

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetSettingsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetSettingsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on PutSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSettingsRequestMultiError, or nil if none found.
func (m *PutSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PutSettingsRequestValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PutSettingsRequestValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PutSettingsRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.GetOrgID() <= 0 {
		err := PutSettingsRequestValidationError{
			field:  "OrgID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PutSettingsRequestMultiError(errors)
	}

	return nil
}

// PutSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by PutSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type PutSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSettingsRequestMultiError) AllErrors() []error { return m }

// PutSettingsRequestValidationError is the validation error returned by
// PutSettingsRequest.Validate if the designated constraints aren't met.
type PutSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSettingsRequestValidationError) ErrorName() string {
	return "PutSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSettingsRequestValidationError{}

// Validate checks the field values on PutSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSettingsResponseMultiError, or nil if none found.
func (m *PutSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PutSettingsResponseMultiError(errors)
	}

	return nil
}

// PutSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by PutSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type PutSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSettingsResponseMultiError) AllErrors() []error { return m }

// PutSettingsResponseValidationError is the validation error returned by
// PutSettingsResponse.Validate if the designated constraints aren't met.
type PutSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSettingsResponseValidationError) ErrorName() string {
	return "PutSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSettingsResponseValidationError{}

// Validate checks the field values on RegisterMonitorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterMonitorConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterMonitorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterMonitorConfigRequestMultiError, or nil if none found.
func (m *RegisterMonitorConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterMonitorConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterMonitorConfigRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterMonitorConfigRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterMonitorConfigRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return RegisterMonitorConfigRequestMultiError(errors)
	}

	return nil
}

// RegisterMonitorConfigRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterMonitorConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterMonitorConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterMonitorConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterMonitorConfigRequestMultiError) AllErrors() []error { return m }

// RegisterMonitorConfigRequestValidationError is the validation error returned
// by RegisterMonitorConfigRequest.Validate if the designated constraints
// aren't met.
type RegisterMonitorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterMonitorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterMonitorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterMonitorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterMonitorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterMonitorConfigRequestValidationError) ErrorName() string {
	return "RegisterMonitorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterMonitorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterMonitorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterMonitorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterMonitorConfigRequestValidationError{}

// Validate checks the field values on MonitorConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonitorConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonitorConfigMultiError, or
// nil if none found.
func (m *MonitorConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Namespace

	// no validation rules for Type

	// no validation rules for Names

	// no validation rules for Filters

	// no validation rules for Enable

	// no validation rules for Desc

	if len(errors) > 0 {
		return MonitorConfigMultiError(errors)
	}

	return nil
}

// MonitorConfigMultiError is an error wrapping multiple validation errors
// returned by MonitorConfig.ValidateAll() if the designated constraints
// aren't met.
type MonitorConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorConfigMultiError) AllErrors() []error { return m }

// MonitorConfigValidationError is the validation error returned by
// MonitorConfig.Validate if the designated constraints aren't met.
type MonitorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorConfigValidationError) ErrorName() string { return "MonitorConfigValidationError" }

// Error satisfies the builtin error interface
func (e MonitorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorConfigValidationError{}

// Validate checks the field values on RegisterMonitorConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterMonitorConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterMonitorConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterMonitorConfigResponseMultiError, or nil if none found.
func (m *RegisterMonitorConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterMonitorConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RegisterMonitorConfigResponseMultiError(errors)
	}

	return nil
}

// RegisterMonitorConfigResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterMonitorConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type RegisterMonitorConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterMonitorConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterMonitorConfigResponseMultiError) AllErrors() []error { return m }

// RegisterMonitorConfigResponseValidationError is the validation error
// returned by RegisterMonitorConfigResponse.Validate if the designated
// constraints aren't met.
type RegisterMonitorConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterMonitorConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterMonitorConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterMonitorConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterMonitorConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterMonitorConfigResponseValidationError) ErrorName() string {
	return "RegisterMonitorConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterMonitorConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterMonitorConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterMonitorConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterMonitorConfigResponseValidationError{}

// Validate checks the field values on ConfigGroups with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigGroups) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigGroups with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigGroupsMultiError, or
// nil if none found.
func (m *ConfigGroups) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigGroups) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigGroupsValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigGroupsValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigGroupsValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigGroupsMultiError(errors)
	}

	return nil
}

// ConfigGroupsMultiError is an error wrapping multiple validation errors
// returned by ConfigGroups.ValidateAll() if the designated constraints aren't met.
type ConfigGroupsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigGroupsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigGroupsMultiError) AllErrors() []error { return m }

// ConfigGroupsValidationError is the validation error returned by
// ConfigGroups.Validate if the designated constraints aren't met.
type ConfigGroupsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigGroupsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigGroupsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigGroupsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigGroupsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigGroupsValidationError) ErrorName() string { return "ConfigGroupsValidationError" }

// Error satisfies the builtin error interface
func (e ConfigGroupsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigGroups.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigGroupsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigGroupsValidationError{}

// Validate checks the field values on ConfigGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigGroupMultiError, or
// nil if none found.
func (m *ConfigGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigGroupValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigGroupValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigGroupValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigGroupMultiError(errors)
	}

	return nil
}

// ConfigGroupMultiError is an error wrapping multiple validation errors
// returned by ConfigGroup.ValidateAll() if the designated constraints aren't met.
type ConfigGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigGroupMultiError) AllErrors() []error { return m }

// ConfigGroupValidationError is the validation error returned by
// ConfigGroup.Validate if the designated constraints aren't met.
type ConfigGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigGroupValidationError) ErrorName() string { return "ConfigGroupValidationError" }

// Error satisfies the builtin error interface
func (e ConfigGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigGroupValidationError{}

// Validate checks the field values on ConfigItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigItemMultiError, or
// nil if none found.
func (m *ConfigItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigItemValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Unit

	if len(errors) > 0 {
		return ConfigItemMultiError(errors)
	}

	return nil
}

// ConfigItemMultiError is an error wrapping multiple validation errors
// returned by ConfigItem.ValidateAll() if the designated constraints aren't met.
type ConfigItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigItemMultiError) AllErrors() []error { return m }

// ConfigItemValidationError is the validation error returned by
// ConfigItem.Validate if the designated constraints aren't met.
type ConfigItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigItemValidationError) ErrorName() string { return "ConfigItemValidationError" }

// Error satisfies the builtin error interface
func (e ConfigItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigItemValidationError{}
