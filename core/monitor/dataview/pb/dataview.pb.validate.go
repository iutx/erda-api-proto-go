// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dataview.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CustomDashboardHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomDashboardHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomDashboardHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomDashboardHistoryMultiError, or nil if none found.
func (m *CustomDashboardHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomDashboardHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for OperatorId

	// no validation rules for CreatedAt

	// no validation rules for FileUuid

	// no validation rules for ErrorMessage

	// no validation rules for TargetScope

	// no validation rules for TargetScopeId

	// no validation rules for OrgId

	if len(errors) > 0 {
		return CustomDashboardHistoryMultiError(errors)
	}

	return nil
}

// CustomDashboardHistoryMultiError is an error wrapping multiple validation
// errors returned by CustomDashboardHistory.ValidateAll() if the designated
// constraints aren't met.
type CustomDashboardHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomDashboardHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomDashboardHistoryMultiError) AllErrors() []error { return m }

// CustomDashboardHistoryValidationError is the validation error returned by
// CustomDashboardHistory.Validate if the designated constraints aren't met.
type CustomDashboardHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomDashboardHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomDashboardHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomDashboardHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomDashboardHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomDashboardHistoryValidationError) ErrorName() string {
	return "CustomDashboardHistoryValidationError"
}

// Error satisfies the builtin error interface
func (e CustomDashboardHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomDashboardHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomDashboardHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomDashboardHistoryValidationError{}

// Validate checks the field values on ListCustomDashboardHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCustomDashboardHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomDashboardHistoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCustomDashboardHistoryRequestMultiError, or nil if none found.
func (m *ListCustomDashboardHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomDashboardHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return ListCustomDashboardHistoryRequestMultiError(errors)
	}

	return nil
}

// ListCustomDashboardHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCustomDashboardHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCustomDashboardHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomDashboardHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomDashboardHistoryRequestMultiError) AllErrors() []error { return m }

// ListCustomDashboardHistoryRequestValidationError is the validation error
// returned by ListCustomDashboardHistoryRequest.Validate if the designated
// constraints aren't met.
type ListCustomDashboardHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomDashboardHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomDashboardHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomDashboardHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomDashboardHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomDashboardHistoryRequestValidationError) ErrorName() string {
	return "ListCustomDashboardHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomDashboardHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomDashboardHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomDashboardHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomDashboardHistoryRequestValidationError{}

// Validate checks the field values on ListCustomDashboardHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCustomDashboardHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomDashboardHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCustomDashboardHistoryResponseMultiError, or nil if none found.
func (m *ListCustomDashboardHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomDashboardHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCustomDashboardHistoryResponseValidationError{
						field:  fmt.Sprintf("Histories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCustomDashboardHistoryResponseValidationError{
						field:  fmt.Sprintf("Histories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCustomDashboardHistoryResponseValidationError{
					field:  fmt.Sprintf("Histories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCustomDashboardHistoryResponseMultiError(errors)
	}

	return nil
}

// ListCustomDashboardHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCustomDashboardHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCustomDashboardHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomDashboardHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomDashboardHistoryResponseMultiError) AllErrors() []error { return m }

// ListCustomDashboardHistoryResponseValidationError is the validation error
// returned by ListCustomDashboardHistoryResponse.Validate if the designated
// constraints aren't met.
type ListCustomDashboardHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomDashboardHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomDashboardHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomDashboardHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomDashboardHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomDashboardHistoryResponseValidationError) ErrorName() string {
	return "ListCustomDashboardHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomDashboardHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomDashboardHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomDashboardHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomDashboardHistoryResponseValidationError{}

// Validate checks the field values on ExportCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportCustomViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportCustomViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportCustomViewRequestMultiError, or nil if none found.
func (m *ExportCustomViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportCustomViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ExportCustomViewRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeId()) < 1 {
		err := ExportCustomViewRequestValidationError{
			field:  "ScopeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExportCustomViewRequestMultiError(errors)
	}

	return nil
}

// ExportCustomViewRequestMultiError is an error wrapping multiple validation
// errors returned by ExportCustomViewRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportCustomViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportCustomViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportCustomViewRequestMultiError) AllErrors() []error { return m }

// ExportCustomViewRequestValidationError is the validation error returned by
// ExportCustomViewRequest.Validate if the designated constraints aren't met.
type ExportCustomViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportCustomViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportCustomViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportCustomViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportCustomViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportCustomViewRequestValidationError) ErrorName() string {
	return "ExportCustomViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportCustomViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportCustomViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportCustomViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportCustomViewRequestValidationError{}

// Validate checks the field values on ListSystemViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemViewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemViewsRequestMultiError, or nil if none found.
func (m *ListSystemViewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemViewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ListSystemViewsRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := ListSystemViewsRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSystemViewsRequestMultiError(errors)
	}

	return nil
}

// ListSystemViewsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSystemViewsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSystemViewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemViewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemViewsRequestMultiError) AllErrors() []error { return m }

// ListSystemViewsRequestValidationError is the validation error returned by
// ListSystemViewsRequest.Validate if the designated constraints aren't met.
type ListSystemViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemViewsRequestValidationError) ErrorName() string {
	return "ListSystemViewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemViewsRequestValidationError{}

// Validate checks the field values on ListSystemViewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemViewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemViewsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemViewsResponseMultiError, or nil if none found.
func (m *ListSystemViewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemViewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSystemViewsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSystemViewsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSystemViewsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSystemViewsResponseMultiError(errors)
	}

	return nil
}

// ListSystemViewsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSystemViewsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSystemViewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemViewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemViewsResponseMultiError) AllErrors() []error { return m }

// ListSystemViewsResponseValidationError is the validation error returned by
// ListSystemViewsResponse.Validate if the designated constraints aren't met.
type ListSystemViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemViewsResponseValidationError) ErrorName() string {
	return "ListSystemViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemViewsResponseValidationError{}

// Validate checks the field values on GetSystemViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemViewRequestMultiError, or nil if none found.
func (m *GetSystemViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetSystemViewRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSystemViewRequestMultiError(errors)
	}

	return nil
}

// GetSystemViewRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemViewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemViewRequestMultiError) AllErrors() []error { return m }

// GetSystemViewRequestValidationError is the validation error returned by
// GetSystemViewRequest.Validate if the designated constraints aren't met.
type GetSystemViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemViewRequestValidationError) ErrorName() string {
	return "GetSystemViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemViewRequestValidationError{}

// Validate checks the field values on GetSystemViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemViewResponseMultiError, or nil if none found.
func (m *GetSystemViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemViewResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemViewResponseMultiError(errors)
	}

	return nil
}

// GetSystemViewResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemViewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemViewResponseMultiError) AllErrors() []error { return m }

// GetSystemViewResponseValidationError is the validation error returned by
// GetSystemViewResponse.Validate if the designated constraints aren't met.
type GetSystemViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemViewResponseValidationError) ErrorName() string {
	return "GetSystemViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemViewResponseValidationError{}

// Validate checks the field values on ListCustomViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCustomViewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomViewsRequestMultiError, or nil if none found.
func (m *ListCustomViewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomViewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ListCustomViewsRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := ListCustomViewsRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCustomViewsRequestMultiError(errors)
	}

	return nil
}

// ListCustomViewsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCustomViewsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCustomViewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomViewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomViewsRequestMultiError) AllErrors() []error { return m }

// ListCustomViewsRequestValidationError is the validation error returned by
// ListCustomViewsRequest.Validate if the designated constraints aren't met.
type ListCustomViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomViewsRequestValidationError) ErrorName() string {
	return "ListCustomViewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomViewsRequestValidationError{}

// Validate checks the field values on GetCustomViewsCreatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomViewsCreatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomViewsCreatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomViewsCreatorRequestMultiError, or nil if none found.
func (m *GetCustomViewsCreatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomViewsCreatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := GetCustomViewsCreatorRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := GetCustomViewsCreatorRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomViewsCreatorRequestMultiError(errors)
	}

	return nil
}

// GetCustomViewsCreatorRequestMultiError is an error wrapping multiple
// validation errors returned by GetCustomViewsCreatorRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCustomViewsCreatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomViewsCreatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomViewsCreatorRequestMultiError) AllErrors() []error { return m }

// GetCustomViewsCreatorRequestValidationError is the validation error returned
// by GetCustomViewsCreatorRequest.Validate if the designated constraints
// aren't met.
type GetCustomViewsCreatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomViewsCreatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomViewsCreatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomViewsCreatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomViewsCreatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomViewsCreatorRequestValidationError) ErrorName() string {
	return "GetCustomViewsCreatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomViewsCreatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomViewsCreatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomViewsCreatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomViewsCreatorRequestValidationError{}

// Validate checks the field values on ListCustomViewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCustomViewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomViewsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomViewsResponseMultiError, or nil if none found.
func (m *ListCustomViewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomViewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCustomViewsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCustomViewsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCustomViewsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCustomViewsResponseMultiError(errors)
	}

	return nil
}

// ListCustomViewsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCustomViewsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCustomViewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomViewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomViewsResponseMultiError) AllErrors() []error { return m }

// ListCustomViewsResponseValidationError is the validation error returned by
// ListCustomViewsResponse.Validate if the designated constraints aren't met.
type ListCustomViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomViewsResponseValidationError) ErrorName() string {
	return "ListCustomViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomViewsResponseValidationError{}

// Validate checks the field values on Creator with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Creator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Creator with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreatorMultiError, or nil if none found.
func (m *Creator) ValidateAll() error {
	return m.validate(true)
}

func (m *Creator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatorMultiError(errors)
	}

	return nil
}

// CreatorMultiError is an error wrapping multiple validation errors returned
// by Creator.ValidateAll() if the designated constraints aren't met.
type CreatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatorMultiError) AllErrors() []error { return m }

// CreatorValidationError is the validation error returned by Creator.Validate
// if the designated constraints aren't met.
type CreatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatorValidationError) ErrorName() string { return "CreatorValidationError" }

// Error satisfies the builtin error interface
func (e CreatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatorValidationError{}

// Validate checks the field values on GetCustomViewsCreatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomViewsCreatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomViewsCreatorResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCustomViewsCreatorResponseMultiError, or nil if none found.
func (m *GetCustomViewsCreatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomViewsCreatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomViewsCreatorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomViewsCreatorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomViewsCreatorResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomViewsCreatorResponseMultiError(errors)
	}

	return nil
}

// GetCustomViewsCreatorResponseMultiError is an error wrapping multiple
// validation errors returned by GetCustomViewsCreatorResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCustomViewsCreatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomViewsCreatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomViewsCreatorResponseMultiError) AllErrors() []error { return m }

// GetCustomViewsCreatorResponseValidationError is the validation error
// returned by GetCustomViewsCreatorResponse.Validate if the designated
// constraints aren't met.
type GetCustomViewsCreatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomViewsCreatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomViewsCreatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomViewsCreatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomViewsCreatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomViewsCreatorResponseValidationError) ErrorName() string {
	return "GetCustomViewsCreatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomViewsCreatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomViewsCreatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomViewsCreatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomViewsCreatorResponseValidationError{}

// Validate checks the field values on GetCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomViewRequestMultiError, or nil if none found.
func (m *GetCustomViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetCustomViewRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomViewRequestMultiError(errors)
	}

	return nil
}

// GetCustomViewRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomViewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomViewRequestMultiError) AllErrors() []error { return m }

// GetCustomViewRequestValidationError is the validation error returned by
// GetCustomViewRequest.Validate if the designated constraints aren't met.
type GetCustomViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomViewRequestValidationError) ErrorName() string {
	return "GetCustomViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomViewRequestValidationError{}

// Validate checks the field values on GetCustomViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomViewResponseMultiError, or nil if none found.
func (m *GetCustomViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomViewResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomViewResponseMultiError(errors)
	}

	return nil
}

// GetCustomViewResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomViewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCustomViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomViewResponseMultiError) AllErrors() []error { return m }

// GetCustomViewResponseValidationError is the validation error returned by
// GetCustomViewResponse.Validate if the designated constraints aren't met.
type GetCustomViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomViewResponseValidationError) ErrorName() string {
	return "GetCustomViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomViewResponseValidationError{}

// Validate checks the field values on CreateCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomViewRequestMultiError, or nil if none found.
func (m *CreateCustomViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := CreateCustomViewRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := CreateCustomViewRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateCustomViewRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomViewRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomViewRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCustomViewRequestMultiError(errors)
	}

	return nil
}

// CreateCustomViewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCustomViewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomViewRequestMultiError) AllErrors() []error { return m }

// CreateCustomViewRequestValidationError is the validation error returned by
// CreateCustomViewRequest.Validate if the designated constraints aren't met.
type CreateCustomViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomViewRequestValidationError) ErrorName() string {
	return "CreateCustomViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomViewRequestValidationError{}

// Validate checks the field values on CreateCustomViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomViewResponseMultiError, or nil if none found.
func (m *CreateCustomViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCustomViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCustomViewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCustomViewResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCustomViewResponseMultiError(errors)
	}

	return nil
}

// CreateCustomViewResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCustomViewResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomViewResponseMultiError) AllErrors() []error { return m }

// CreateCustomViewResponseValidationError is the validation error returned by
// CreateCustomViewResponse.Validate if the designated constraints aren't met.
type CreateCustomViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomViewResponseValidationError) ErrorName() string {
	return "CreateCustomViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomViewResponseValidationError{}

// Validate checks the field values on UpdateCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomViewRequestMultiError, or nil if none found.
func (m *UpdateCustomViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateCustomViewRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Desc

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomViewRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomViewRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomViewRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateType

	if len(errors) > 0 {
		return UpdateCustomViewRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomViewRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomViewRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomViewRequestMultiError) AllErrors() []error { return m }

// UpdateCustomViewRequestValidationError is the validation error returned by
// UpdateCustomViewRequest.Validate if the designated constraints aren't met.
type UpdateCustomViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomViewRequestValidationError) ErrorName() string {
	return "UpdateCustomViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomViewRequestValidationError{}

// Validate checks the field values on UpdateCustomViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomViewResponseMultiError, or nil if none found.
func (m *UpdateCustomViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateCustomViewResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomViewResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomViewResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomViewResponseMultiError) AllErrors() []error { return m }

// UpdateCustomViewResponseValidationError is the validation error returned by
// UpdateCustomViewResponse.Validate if the designated constraints aren't met.
type UpdateCustomViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomViewResponseValidationError) ErrorName() string {
	return "UpdateCustomViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomViewResponseValidationError{}

// Validate checks the field values on DeleteCustomViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomViewRequestMultiError, or nil if none found.
func (m *DeleteCustomViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteCustomViewRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCustomViewRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomViewRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomViewRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomViewRequestMultiError) AllErrors() []error { return m }

// DeleteCustomViewRequestValidationError is the validation error returned by
// DeleteCustomViewRequest.Validate if the designated constraints aren't met.
type DeleteCustomViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomViewRequestValidationError) ErrorName() string {
	return "DeleteCustomViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomViewRequestValidationError{}

// Validate checks the field values on DeleteCustomViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomViewResponseMultiError, or nil if none found.
func (m *DeleteCustomViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteCustomViewResponseMultiError(errors)
	}

	return nil
}

// DeleteCustomViewResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomViewResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomViewResponseMultiError) AllErrors() []error { return m }

// DeleteCustomViewResponseValidationError is the validation error returned by
// DeleteCustomViewResponse.Validate if the designated constraints aren't met.
type DeleteCustomViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomViewResponseValidationError) ErrorName() string {
	return "DeleteCustomViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomViewResponseValidationError{}

// Validate checks the field values on ViewList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewListMultiError, or nil
// if none found.
func (m *ViewList) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewListMultiError(errors)
	}

	return nil
}

// ViewListMultiError is an error wrapping multiple validation errors returned
// by ViewList.ValidateAll() if the designated constraints aren't met.
type ViewListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewListMultiError) AllErrors() []error { return m }

// ViewListValidationError is the validation error returned by
// ViewList.Validate if the designated constraints aren't met.
type ViewListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewListValidationError) ErrorName() string { return "ViewListValidationError" }

// Error satisfies the builtin error interface
func (e ViewListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewListValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *View) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on View with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ViewMultiError, or nil if none found.
func (m *View) ValidateAll() error {
	return m.validate(true)
}

func (m *View) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Version

	// no validation rules for Name

	// no validation rules for Desc

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ViewMultiError(errors)
	}

	return nil
}

// ViewMultiError is an error wrapping multiple validation errors returned by
// View.ValidateAll() if the designated constraints aren't met.
type ViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewMultiError) AllErrors() []error { return m }

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Block) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlockMultiError, or nil if none found.
func (m *Block) ValidateAll() error {
	return m.validate(true)
}

func (m *Block) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for W

	// no validation rules for H

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for I

	if all {
		switch v := interface{}(m.GetChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockValidationError{
				field:  "Chart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlockMultiError(errors)
	}

	return nil
}

// BlockMultiError is an error wrapping multiple validation errors returned by
// Block.ValidateAll() if the designated constraints aren't met.
type BlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockMultiError) AllErrors() []error { return m }

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on Chart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChartMultiError, or nil if none found.
func (m *Chart) ValidateAll() error {
	return m.validate(true)
}

func (m *Chart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ChartType

	// no validation rules for DataSourceType

	if all {
		switch v := interface{}(m.GetStaticData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaticData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartValidationError{
				field:  "StaticData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Controls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "Controls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartValidationError{
				field:  "Controls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetI18N()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "I18N",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChartValidationError{
					field:  "I18N",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetI18N()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartValidationError{
				field:  "I18N",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChartMultiError(errors)
	}

	return nil
}

// ChartMultiError is an error wrapping multiple validation errors returned by
// Chart.ValidateAll() if the designated constraints aren't met.
type ChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChartMultiError) AllErrors() []error { return m }

// ChartValidationError is the validation error returned by Chart.Validate if
// the designated constraints aren't met.
type ChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartValidationError) ErrorName() string { return "ChartValidationError" }

// Error satisfies the builtin error interface
func (e ChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartValidationError{}

// Validate checks the field values on DataItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataItemMultiError, or nil
// if none found.
func (m *DataItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DataItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for I

	if all {
		switch v := interface{}(m.GetStaticData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataItemValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataItemValidationError{
					field:  "StaticData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaticData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataItemValidationError{
				field:  "StaticData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataItemMultiError(errors)
	}

	return nil
}

// DataItemMultiError is an error wrapping multiple validation errors returned
// by DataItem.ValidateAll() if the designated constraints aren't met.
type DataItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataItemMultiError) AllErrors() []error { return m }

// DataItemValidationError is the validation error returned by
// DataItem.Validate if the designated constraints aren't met.
type DataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataItemValidationError) ErrorName() string { return "DataItemValidationError" }

// Error satisfies the builtin error interface
func (e DataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataItemValidationError{}
