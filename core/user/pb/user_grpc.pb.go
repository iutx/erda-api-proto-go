// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: user.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error)
	FindUsersByKey(ctx context.Context, in *FindUsersByKeyRequest, opts ...grpc.CallOption) (*FindUsersByKeyResponse, error)
}

type userServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewUserServiceClient(cc grpc1.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/erda.core.user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error) {
	out := new(FindUsersResponse)
	err := c.cc.Invoke(ctx, "/erda.core.user.UserService/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUsersByKey(ctx context.Context, in *FindUsersByKeyRequest, opts ...grpc.CallOption) (*FindUsersByKeyResponse, error) {
	out := new(FindUsersByKeyResponse)
	err := c.cc.Invoke(ctx, "/erda.core.user.UserService/FindUsersByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error)
	FindUsersByKey(context.Context, *FindUsersByKeyRequest) (*FindUsersByKeyResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (*UnimplementedUserServiceServer) FindUsersByKey(context.Context, *FindUsersByKeyRequest) (*FindUsersByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsersByKey not implemented")
}

func RegisterUserServiceServer(s grpc1.ServiceRegistrar, srv UserServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_UserService_serviceDesc(srv, opts...), srv)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "user.proto",
}

func _get_UserService_serviceDesc(srv UserServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_UserService_GetUser_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetUser(ctx, req.(*GetUserRequest))
	}
	var _UserService_GetUser_info transport.ServiceInfo
	if h.Interceptor != nil {
		_UserService_GetUser_info = transport.NewServiceInfo("erda.core.user.UserService", "GetUser", srv)
		_UserService_GetUser_Handler = h.Interceptor(_UserService_GetUser_Handler)
	}

	_UserService_FindUsers_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FindUsers(ctx, req.(*FindUsersRequest))
	}
	var _UserService_FindUsers_info transport.ServiceInfo
	if h.Interceptor != nil {
		_UserService_FindUsers_info = transport.NewServiceInfo("erda.core.user.UserService", "FindUsers", srv)
		_UserService_FindUsers_Handler = h.Interceptor(_UserService_FindUsers_Handler)
	}

	_UserService_FindUsersByKey_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FindUsersByKey(ctx, req.(*FindUsersByKeyRequest))
	}
	var _UserService_FindUsersByKey_info transport.ServiceInfo
	if h.Interceptor != nil {
		_UserService_FindUsersByKey_info = transport.NewServiceInfo("erda.core.user.UserService", "FindUsersByKey", srv)
		_UserService_FindUsersByKey_Handler = h.Interceptor(_UserService_FindUsersByKey_Handler)
	}

	var serviceDesc = _UserService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetUserRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UserServiceServer).GetUser(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _UserService_GetUser_info)
				}
				if interceptor == nil {
					return _UserService_GetUser_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.user.UserService/GetUser",
				}
				return interceptor(ctx, in, info, _UserService_GetUser_Handler)
			},
		},
		{
			MethodName: "FindUsers",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FindUsersRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UserServiceServer).FindUsers(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _UserService_FindUsers_info)
				}
				if interceptor == nil {
					return _UserService_FindUsers_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.user.UserService/FindUsers",
				}
				return interceptor(ctx, in, info, _UserService_FindUsers_Handler)
			},
		},
		{
			MethodName: "FindUsersByKey",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FindUsersByKeyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UserServiceServer).FindUsersByKey(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _UserService_FindUsersByKey_info)
				}
				if interceptor == nil {
					return _UserService_FindUsersByKey_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.user.UserService/FindUsersByKey",
				}
				return interceptor(ctx, in, info, _UserService_FindUsersByKey_Handler)
			},
		},
	}
	return &serviceDesc
}
