// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: user.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetUserRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetUserResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*User)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FindUsersRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FindUsersResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FindUsersByKeyRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FindUsersByKeyResponse)(nil)

// GetUserRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetUserRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// GetUserResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetUserResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &User{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.ID = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Name = vals[0]
			case "data.nick":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Nick = vals[0]
			case "data.avatarURL":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.AvatarURL = vals[0]
			case "data.phone":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Phone = vals[0]
			case "data.email":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Email = vals[0]
			case "data.state":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.State = vals[0]
			}
		}
	}
	return nil
}

// User implement urlenc.URLValuesUnmarshaler.
func (m *User) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "nick":
				m.Nick = vals[0]
			case "avatarURL":
				m.AvatarURL = vals[0]
			case "phone":
				m.Phone = vals[0]
			case "email":
				m.Email = vals[0]
			case "state":
				m.State = vals[0]
			}
		}
	}
	return nil
}

// FindUsersRequest implement urlenc.URLValuesUnmarshaler.
func (m *FindUsersRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "IDs":
				m.IDs = vals
			}
		}
	}
	return nil
}

// FindUsersResponse implement urlenc.URLValuesUnmarshaler.
func (m *FindUsersResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// FindUsersByKeyRequest implement urlenc.URLValuesUnmarshaler.
func (m *FindUsersByKeyRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "key":
				m.Key = vals[0]
			}
		}
	}
	return nil
}

// FindUsersByKeyResponse implement urlenc.URLValuesUnmarshaler.
func (m *FindUsersByKeyResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
