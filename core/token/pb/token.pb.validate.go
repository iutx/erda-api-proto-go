// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: token.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenRequestMultiError, or nil if none found.
func (m *GetTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTokenRequestMultiError(errors)
	}

	return nil
}

// GetTokenRequestMultiError is an error wrapping multiple validation errors
// returned by GetTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenRequestMultiError) AllErrors() []error { return m }

// GetTokenRequestValidationError is the validation error returned by
// GetTokenRequest.Validate if the designated constraints aren't met.
type GetTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenRequestValidationError) ErrorName() string { return "GetTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenRequestValidationError{}

// Validate checks the field values on GetTokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenResponseMultiError, or nil if none found.
func (m *GetTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTokenResponseMultiError(errors)
	}

	return nil
}

// GetTokenResponseMultiError is an error wrapping multiple validation errors
// returned by GetTokenResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenResponseMultiError) AllErrors() []error { return m }

// GetTokenResponseValidationError is the validation error returned by
// GetTokenResponse.Validate if the designated constraints aren't met.
type GetTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenResponseValidationError) ErrorName() string { return "GetTokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenResponseValidationError{}

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SecretKey

	// no validation rules for AccessKey

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Description

	// no validation rules for Scope

	// no validation rules for ScopeId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorId

	// no validation rules for Type

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on QueryTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTokensRequestMultiError, or nil if none found.
func (m *QueryTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Type

	// no validation rules for Access

	// no validation rules for Status

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return QueryTokensRequestMultiError(errors)
	}

	return nil
}

// QueryTokensRequestMultiError is an error wrapping multiple validation errors
// returned by QueryTokensRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTokensRequestMultiError) AllErrors() []error { return m }

// QueryTokensRequestValidationError is the validation error returned by
// QueryTokensRequest.Validate if the designated constraints aren't met.
type QueryTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTokensRequestValidationError) ErrorName() string {
	return "QueryTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTokensRequestValidationError{}

// Validate checks the field values on QueryTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTokensResponseMultiError, or nil if none found.
func (m *QueryTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryTokensResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryTokensResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryTokensResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryTokensResponseMultiError(errors)
	}

	return nil
}

// QueryTokensResponseMultiError is an error wrapping multiple validation
// errors returned by QueryTokensResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTokensResponseMultiError) AllErrors() []error { return m }

// QueryTokensResponseValidationError is the validation error returned by
// QueryTokensResponse.Validate if the designated constraints aren't met.
type QueryTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTokensResponseValidationError) ErrorName() string {
	return "QueryTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTokensResponseValidationError{}

// Validate checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenRequestMultiError, or nil if none found.
func (m *CreateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return CreateTokenRequestMultiError(errors)
	}

	return nil
}

// CreateTokenRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenRequestMultiError) AllErrors() []error { return m }

// CreateTokenRequestValidationError is the validation error returned by
// CreateTokenRequest.Validate if the designated constraints aren't met.
type CreateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenRequestValidationError) ErrorName() string {
	return "CreateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenRequestValidationError{}

// Validate checks the field values on CreateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenResponseMultiError, or nil if none found.
func (m *CreateTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokenResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokenResponseMultiError(errors)
	}

	return nil
}

// CreateTokenResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenResponseMultiError) AllErrors() []error { return m }

// CreateTokenResponseValidationError is the validation error returned by
// CreateTokenResponse.Validate if the designated constraints aren't met.
type CreateTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenResponseValidationError) ErrorName() string {
	return "CreateTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenResponseValidationError{}

// Validate checks the field values on UpdateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTokenRequestMultiError, or nil if none found.
func (m *UpdateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateTokenRequestMultiError(errors)
	}

	return nil
}

// UpdateTokenRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTokenRequestMultiError) AllErrors() []error { return m }

// UpdateTokenRequestValidationError is the validation error returned by
// UpdateTokenRequest.Validate if the designated constraints aren't met.
type UpdateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTokenRequestValidationError) ErrorName() string {
	return "UpdateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTokenRequestValidationError{}

// Validate checks the field values on UpdateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTokenResponseMultiError, or nil if none found.
func (m *UpdateTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTokenResponseMultiError(errors)
	}

	return nil
}

// UpdateTokenResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTokenResponseMultiError) AllErrors() []error { return m }

// UpdateTokenResponseValidationError is the validation error returned by
// UpdateTokenResponse.Validate if the designated constraints aren't met.
type UpdateTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTokenResponseValidationError) ErrorName() string {
	return "UpdateTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTokenResponseValidationError{}

// Validate checks the field values on DeleteTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTokenRequestMultiError, or nil if none found.
func (m *DeleteTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTokenRequestMultiError(errors)
	}

	return nil
}

// DeleteTokenRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokenRequestMultiError) AllErrors() []error { return m }

// DeleteTokenRequestValidationError is the validation error returned by
// DeleteTokenRequest.Validate if the designated constraints aren't met.
type DeleteTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokenRequestValidationError) ErrorName() string {
	return "DeleteTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokenRequestValidationError{}

// Validate checks the field values on DeleteTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTokenResponseMultiError, or nil if none found.
func (m *DeleteTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTokenResponseMultiError(errors)
	}

	return nil
}

// DeleteTokenResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokenResponseMultiError) AllErrors() []error { return m }

// DeleteTokenResponseValidationError is the validation error returned by
// DeleteTokenResponse.Validate if the designated constraints aren't met.
type DeleteTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokenResponseValidationError) ErrorName() string {
	return "DeleteTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokenResponseValidationError{}

// Validate checks the field values on ScopeEnum with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeEnumMultiError, or nil
// if none found.
func (m *ScopeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScopeEnumMultiError(errors)
	}

	return nil
}

// ScopeEnumMultiError is an error wrapping multiple validation errors returned
// by ScopeEnum.ValidateAll() if the designated constraints aren't met.
type ScopeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeEnumMultiError) AllErrors() []error { return m }

// ScopeEnumValidationError is the validation error returned by
// ScopeEnum.Validate if the designated constraints aren't met.
type ScopeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeEnumValidationError) ErrorName() string { return "ScopeEnumValidationError" }

// Error satisfies the builtin error interface
func (e ScopeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeEnumValidationError{}
