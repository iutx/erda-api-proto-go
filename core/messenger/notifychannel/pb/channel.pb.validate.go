// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: channel.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNotifyChannelEnabledStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetNotifyChannelEnabledStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelEnabledStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelEnabledStatusRequestMultiError, or nil if none found.
func (m *GetNotifyChannelEnabledStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelEnabledStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return GetNotifyChannelEnabledStatusRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelEnabledStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetNotifyChannelEnabledStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelEnabledStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelEnabledStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelEnabledStatusRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelEnabledStatusRequestValidationError is the validation error
// returned by GetNotifyChannelEnabledStatusRequest.Validate if the designated
// constraints aren't met.
type GetNotifyChannelEnabledStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelEnabledStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelEnabledStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelEnabledStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelEnabledStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelEnabledStatusRequestValidationError) ErrorName() string {
	return "GetNotifyChannelEnabledStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelEnabledStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelEnabledStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelEnabledStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelEnabledStatusRequestValidationError{}

// Validate checks the field values on GetNotifyChannelEnabledStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetNotifyChannelEnabledStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelEnabledStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelEnabledStatusResponseMultiError, or nil if none found.
func (m *GetNotifyChannelEnabledStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelEnabledStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasEnable

	// no validation rules for EnableChannelName

	if len(errors) > 0 {
		return GetNotifyChannelEnabledStatusResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelEnabledStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetNotifyChannelEnabledStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelEnabledStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelEnabledStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelEnabledStatusResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelEnabledStatusResponseValidationError is the validation error
// returned by GetNotifyChannelEnabledStatusResponse.Validate if the
// designated constraints aren't met.
type GetNotifyChannelEnabledStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelEnabledStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelEnabledStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelEnabledStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelEnabledStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelEnabledStatusResponseValidationError) ErrorName() string {
	return "GetNotifyChannelEnabledStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelEnabledStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelEnabledStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelEnabledStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelEnabledStatusResponseValidationError{}

// Validate checks the field values on UpdateNotifyChannelEnabledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateNotifyChannelEnabledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyChannelEnabledRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNotifyChannelEnabledRequestMultiError, or nil if none found.
func (m *UpdateNotifyChannelEnabledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyChannelEnabledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateNotifyChannelEnabledRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyChannelEnabledRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNotifyChannelEnabledRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyChannelEnabledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyChannelEnabledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyChannelEnabledRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyChannelEnabledRequestValidationError is the validation error
// returned by UpdateNotifyChannelEnabledRequest.Validate if the designated
// constraints aren't met.
type UpdateNotifyChannelEnabledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyChannelEnabledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyChannelEnabledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyChannelEnabledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyChannelEnabledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyChannelEnabledRequestValidationError) ErrorName() string {
	return "UpdateNotifyChannelEnabledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyChannelEnabledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyChannelEnabledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyChannelEnabledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyChannelEnabledRequestValidationError{}

// Validate checks the field values on UpdateNotifyChannelEnabledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateNotifyChannelEnabledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyChannelEnabledResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNotifyChannelEnabledResponseMultiError, or nil if none found.
func (m *UpdateNotifyChannelEnabledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyChannelEnabledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateNotifyChannelEnabledResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyChannelEnabledResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNotifyChannelEnabledResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyChannelEnabledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyChannelEnabledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyChannelEnabledResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyChannelEnabledResponseValidationError is the validation error
// returned by UpdateNotifyChannelEnabledResponse.Validate if the designated
// constraints aren't met.
type UpdateNotifyChannelEnabledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyChannelEnabledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyChannelEnabledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyChannelEnabledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyChannelEnabledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyChannelEnabledResponseValidationError) ErrorName() string {
	return "UpdateNotifyChannelEnabledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyChannelEnabledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyChannelEnabledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyChannelEnabledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyChannelEnabledResponseValidationError{}

// Validate checks the field values on GetNotifyChannelEnabledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelEnabledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelEnabledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelEnabledRequestMultiError, or nil if none found.
func (m *GetNotifyChannelEnabledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelEnabledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeId

	// no validation rules for ScopeType

	// no validation rules for Type

	if len(errors) > 0 {
		return GetNotifyChannelEnabledRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelEnabledRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotifyChannelEnabledRequest.ValidateAll()
// if the designated constraints aren't met.
type GetNotifyChannelEnabledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelEnabledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelEnabledRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelEnabledRequestValidationError is the validation error
// returned by GetNotifyChannelEnabledRequest.Validate if the designated
// constraints aren't met.
type GetNotifyChannelEnabledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelEnabledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelEnabledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelEnabledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelEnabledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelEnabledRequestValidationError) ErrorName() string {
	return "GetNotifyChannelEnabledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelEnabledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelEnabledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelEnabledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelEnabledRequestValidationError{}

// Validate checks the field values on GetNotifyChannelEnabledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelEnabledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelEnabledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelEnabledResponseMultiError, or nil if none found.
func (m *GetNotifyChannelEnabledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelEnabledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyChannelEnabledResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyChannelEnabledResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyChannelEnabledResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyChannelEnabledResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelEnabledResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotifyChannelEnabledResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNotifyChannelEnabledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelEnabledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelEnabledResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelEnabledResponseValidationError is the validation error
// returned by GetNotifyChannelEnabledResponse.Validate if the designated
// constraints aren't met.
type GetNotifyChannelEnabledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelEnabledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelEnabledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelEnabledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelEnabledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelEnabledResponseValidationError) ErrorName() string {
	return "GetNotifyChannelEnabledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelEnabledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelEnabledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelEnabledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelEnabledResponseValidationError{}

// Validate checks the field values on DeleteNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyChannelRequestMultiError, or nil if none found.
func (m *DeleteNotifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNotifyChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyChannelRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNotifyChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteNotifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyChannelRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyChannelRequestValidationError is the validation error returned
// by DeleteNotifyChannelRequest.Validate if the designated constraints aren't met.
type DeleteNotifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyChannelRequestValidationError) ErrorName() string {
	return "DeleteNotifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyChannelRequestValidationError{}

// Validate checks the field values on DeleteNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyChannelResponseMultiError, or nil if none found.
func (m *DeleteNotifyChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNotifyChannelResponseMultiError(errors)
	}

	return nil
}

// DeleteNotifyChannelResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteNotifyChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteNotifyChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyChannelResponseMultiError) AllErrors() []error { return m }

// DeleteNotifyChannelResponseValidationError is the validation error returned
// by DeleteNotifyChannelResponse.Validate if the designated constraints
// aren't met.
type DeleteNotifyChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyChannelResponseValidationError) ErrorName() string {
	return "DeleteNotifyChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyChannelResponseValidationError{}

// Validate checks the field values on GetNotifyChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyChannelRequestMultiError, or nil if none found.
func (m *GetNotifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNotifyChannelRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelRequestValidationError is the validation error returned by
// GetNotifyChannelRequest.Validate if the designated constraints aren't met.
type GetNotifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelRequestValidationError) ErrorName() string {
	return "GetNotifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelRequestValidationError{}

// Validate checks the field values on GetNotifyChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyChannelResponseMultiError, or nil if none found.
func (m *GetNotifyChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyChannelResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyChannelResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelResponseValidationError is the validation error returned by
// GetNotifyChannelResponse.Validate if the designated constraints aren't met.
type GetNotifyChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelResponseValidationError) ErrorName() string {
	return "GetNotifyChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelResponseValidationError{}

// Validate checks the field values on UpdateNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyChannelRequestMultiError, or nil if none found.
func (m *UpdateNotifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ChannelProviderType

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateNotifyChannelRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateNotifyChannelRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateNotifyChannelRequestValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for ScopeId

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return UpdateNotifyChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyChannelRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNotifyChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyChannelRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyChannelRequestValidationError is the validation error returned
// by UpdateNotifyChannelRequest.Validate if the designated constraints aren't met.
type UpdateNotifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyChannelRequestValidationError) ErrorName() string {
	return "UpdateNotifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyChannelRequestValidationError{}

// Validate checks the field values on UpdateNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyChannelResponseMultiError, or nil if none found.
func (m *UpdateNotifyChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotifyChannelResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNotifyChannelResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyChannelResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNotifyChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotifyChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyChannelResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyChannelResponseValidationError is the validation error returned
// by UpdateNotifyChannelResponse.Validate if the designated constraints
// aren't met.
type UpdateNotifyChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyChannelResponseValidationError) ErrorName() string {
	return "UpdateNotifyChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyChannelResponseValidationError{}

// Validate checks the field values on GetNotifyChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyChannelsRequestMultiError, or nil if none found.
func (m *GetNotifyChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Type

	if len(errors) > 0 {
		return GetNotifyChannelsRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelsRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyChannelsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelsRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelsRequestValidationError is the validation error returned by
// GetNotifyChannelsRequest.Validate if the designated constraints aren't met.
type GetNotifyChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelsRequestValidationError) ErrorName() string {
	return "GetNotifyChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelsRequestValidationError{}

// Validate checks the field values on GetNotifyChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyChannelsResponseMultiError, or nil if none found.
func (m *GetNotifyChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotifyChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotifyChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotifyChannelsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNotifyChannelsResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyChannelsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetNotifyChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelsResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelsResponseValidationError is the validation error returned by
// GetNotifyChannelsResponse.Validate if the designated constraints aren't met.
type GetNotifyChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelsResponseValidationError) ErrorName() string {
	return "GetNotifyChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelsResponseValidationError{}

// Validate checks the field values on CreateNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyChannelRequestMultiError, or nil if none found.
func (m *CreateNotifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ChannelProviderType

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateNotifyChannelRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateNotifyChannelRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateNotifyChannelRequestValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateNotifyChannelRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNotifyChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNotifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyChannelRequestMultiError) AllErrors() []error { return m }

// CreateNotifyChannelRequestValidationError is the validation error returned
// by CreateNotifyChannelRequest.Validate if the designated constraints aren't met.
type CreateNotifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyChannelRequestValidationError) ErrorName() string {
	return "CreateNotifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyChannelRequestValidationError{}

// Validate checks the field values on CreateNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyChannelResponseMultiError, or nil if none found.
func (m *CreateNotifyChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNotifyChannelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotifyChannelResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNotifyChannelResponseMultiError(errors)
	}

	return nil
}

// CreateNotifyChannelResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNotifyChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateNotifyChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyChannelResponseMultiError) AllErrors() []error { return m }

// CreateNotifyChannelResponseValidationError is the validation error returned
// by CreateNotifyChannelResponse.Validate if the designated constraints
// aren't met.
type CreateNotifyChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyChannelResponseValidationError) ErrorName() string {
	return "CreateNotifyChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyChannelResponseValidationError{}

// Validate checks the field values on GetNotifyChannelTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyChannelTypesRequestMultiError, or nil if none found.
func (m *GetNotifyChannelTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNotifyChannelTypesRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelTypesRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotifyChannelTypesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNotifyChannelTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelTypesRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelTypesRequestValidationError is the validation error returned
// by GetNotifyChannelTypesRequest.Validate if the designated constraints
// aren't met.
type GetNotifyChannelTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelTypesRequestValidationError) ErrorName() string {
	return "GetNotifyChannelTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelTypesRequestValidationError{}

// Validate checks the field values on GetNotifyChannelTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelTypesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelTypesResponseMultiError, or nil if none found.
func (m *GetNotifyChannelTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotifyChannelTypesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotifyChannelTypesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotifyChannelTypesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNotifyChannelTypesResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelTypesResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotifyChannelTypesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNotifyChannelTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelTypesResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelTypesResponseValidationError is the validation error
// returned by GetNotifyChannelTypesResponse.Validate if the designated
// constraints aren't met.
type GetNotifyChannelTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelTypesResponseValidationError) ErrorName() string {
	return "GetNotifyChannelTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelTypesResponseValidationError{}

// Validate checks the field values on NotifyChannelTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyChannelTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyChannelTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyChannelTypeResponseMultiError, or nil if none found.
func (m *NotifyChannelTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyChannelTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyChannelTypeResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyChannelTypeResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyChannelTypeResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyChannelTypeResponseMultiError(errors)
	}

	return nil
}

// NotifyChannelTypeResponseMultiError is an error wrapping multiple validation
// errors returned by NotifyChannelTypeResponse.ValidateAll() if the
// designated constraints aren't met.
type NotifyChannelTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyChannelTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyChannelTypeResponseMultiError) AllErrors() []error { return m }

// NotifyChannelTypeResponseValidationError is the validation error returned by
// NotifyChannelTypeResponse.Validate if the designated constraints aren't met.
type NotifyChannelTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyChannelTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyChannelTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyChannelTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyChannelTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyChannelTypeResponseValidationError) ErrorName() string {
	return "NotifyChannelTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyChannelTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyChannelTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyChannelTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyChannelTypeResponseValidationError{}

// Validate checks the field values on NotifyChannelType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotifyChannelType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyChannelType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyChannelTypeMultiError, or nil if none found.
func (m *NotifyChannelType) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyChannelType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return NotifyChannelTypeMultiError(errors)
	}

	return nil
}

// NotifyChannelTypeMultiError is an error wrapping multiple validation errors
// returned by NotifyChannelType.ValidateAll() if the designated constraints
// aren't met.
type NotifyChannelTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyChannelTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyChannelTypeMultiError) AllErrors() []error { return m }

// NotifyChannelTypeValidationError is the validation error returned by
// NotifyChannelType.Validate if the designated constraints aren't met.
type NotifyChannelTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyChannelTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyChannelTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyChannelTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyChannelTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyChannelTypeValidationError) ErrorName() string {
	return "NotifyChannelTypeValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyChannelTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyChannelType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyChannelTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyChannelTypeValidationError{}

// Validate checks the field values on NotifyChannelProviderType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyChannelProviderType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyChannelProviderType with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyChannelProviderTypeMultiError, or nil if none found.
func (m *NotifyChannelProviderType) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyChannelProviderType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return NotifyChannelProviderTypeMultiError(errors)
	}

	return nil
}

// NotifyChannelProviderTypeMultiError is an error wrapping multiple validation
// errors returned by NotifyChannelProviderType.ValidateAll() if the
// designated constraints aren't met.
type NotifyChannelProviderTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyChannelProviderTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyChannelProviderTypeMultiError) AllErrors() []error { return m }

// NotifyChannelProviderTypeValidationError is the validation error returned by
// NotifyChannelProviderType.Validate if the designated constraints aren't met.
type NotifyChannelProviderTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyChannelProviderTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyChannelProviderTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyChannelProviderTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyChannelProviderTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyChannelProviderTypeValidationError) ErrorName() string {
	return "NotifyChannelProviderTypeValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyChannelProviderTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyChannelProviderType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyChannelProviderTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyChannelProviderTypeValidationError{}

// Validate checks the field values on NotifyChannel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyChannelMultiError, or
// nil if none found.
func (m *NotifyChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyChannelValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyChannelValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyChannelValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, NotifyChannelValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, NotifyChannelValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return NotifyChannelValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for ScopeId

	// no validation rules for ScopeType

	// no validation rules for CreatorName

	// no validation rules for CreateAt

	// no validation rules for UpdateAt

	if all {
		switch v := interface{}(m.GetChannelProviderType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyChannelValidationError{
					field:  "ChannelProviderType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyChannelValidationError{
					field:  "ChannelProviderType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelProviderType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyChannelValidationError{
				field:  "ChannelProviderType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return NotifyChannelMultiError(errors)
	}

	return nil
}

// NotifyChannelMultiError is an error wrapping multiple validation errors
// returned by NotifyChannel.ValidateAll() if the designated constraints
// aren't met.
type NotifyChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyChannelMultiError) AllErrors() []error { return m }

// NotifyChannelValidationError is the validation error returned by
// NotifyChannel.Validate if the designated constraints aren't met.
type NotifyChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyChannelValidationError) ErrorName() string { return "NotifyChannelValidationError" }

// Error satisfies the builtin error interface
func (e NotifyChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyChannelValidationError{}

// Validate checks the field values on GetNotifyChannelsEnabledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyChannelsEnabledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelsEnabledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelsEnabledRequestMultiError, or nil if none found.
func (m *GetNotifyChannelsEnabledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelsEnabledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNotifyChannelsEnabledRequestMultiError(errors)
	}

	return nil
}

// GetNotifyChannelsEnabledRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotifyChannelsEnabledRequest.ValidateAll()
// if the designated constraints aren't met.
type GetNotifyChannelsEnabledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelsEnabledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelsEnabledRequestMultiError) AllErrors() []error { return m }

// GetNotifyChannelsEnabledRequestValidationError is the validation error
// returned by GetNotifyChannelsEnabledRequest.Validate if the designated
// constraints aren't met.
type GetNotifyChannelsEnabledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelsEnabledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelsEnabledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelsEnabledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelsEnabledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelsEnabledRequestValidationError) ErrorName() string {
	return "GetNotifyChannelsEnabledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelsEnabledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelsEnabledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelsEnabledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelsEnabledRequestValidationError{}

// Validate checks the field values on GetNotifyChannelsEnabledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNotifyChannelsEnabledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyChannelsEnabledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotifyChannelsEnabledResponseMultiError, or nil if none found.
func (m *GetNotifyChannelsEnabledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyChannelsEnabledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetNotifyChannelsEnabledResponseMultiError(errors)
	}

	return nil
}

// GetNotifyChannelsEnabledResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetNotifyChannelsEnabledResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyChannelsEnabledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyChannelsEnabledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyChannelsEnabledResponseMultiError) AllErrors() []error { return m }

// GetNotifyChannelsEnabledResponseValidationError is the validation error
// returned by GetNotifyChannelsEnabledResponse.Validate if the designated
// constraints aren't met.
type GetNotifyChannelsEnabledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyChannelsEnabledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyChannelsEnabledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyChannelsEnabledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyChannelsEnabledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyChannelsEnabledResponseValidationError) ErrorName() string {
	return "GetNotifyChannelsEnabledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyChannelsEnabledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyChannelsEnabledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyChannelsEnabledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyChannelsEnabledResponseValidationError{}
