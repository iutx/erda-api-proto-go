// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify_group.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyGroupRequestMultiError, or nil if none found.
func (m *CreateNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyGroupRequestValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyGroupRequestValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyGroupRequestValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for Label

	// no validation rules for ClusterName

	// no validation rules for AutoCreate

	// no validation rules for OrgId

	if len(errors) > 0 {
		return CreateNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyGroupRequestMultiError) AllErrors() []error { return m }

// CreateNotifyGroupRequestValidationError is the validation error returned by
// CreateNotifyGroupRequest.Validate if the designated constraints aren't met.
type CreateNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyGroupRequestValidationError) ErrorName() string {
	return "CreateNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyGroupRequestValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyTargetValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Secret

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on CreateNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyGroupResponseMultiError, or nil if none found.
func (m *CreateNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// CreateNotifyGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyGroupResponseMultiError) AllErrors() []error { return m }

// CreateNotifyGroupResponseValidationError is the validation error returned by
// CreateNotifyGroupResponse.Validate if the designated constraints aren't met.
type CreateNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyGroupResponseValidationError) ErrorName() string {
	return "CreateNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyGroupResponseValidationError{}

// Validate checks the field values on NotifyGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyGroupMultiError, or
// nil if none found.
func (m *NotifyGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyGroupValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyGroupValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyGroupValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Label

	if len(errors) > 0 {
		return NotifyGroupMultiError(errors)
	}

	return nil
}

// NotifyGroupMultiError is an error wrapping multiple validation errors
// returned by NotifyGroup.ValidateAll() if the designated constraints aren't met.
type NotifyGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyGroupMultiError) AllErrors() []error { return m }

// NotifyGroupValidationError is the validation error returned by
// NotifyGroup.Validate if the designated constraints aren't met.
type NotifyGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyGroupValidationError) ErrorName() string { return "NotifyGroupValidationError" }

// Error satisfies the builtin error interface
func (e NotifyGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyGroupValidationError{}

// Validate checks the field values on QueryNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyGroupRequestMultiError, or nil if none found.
func (m *QueryNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	// no validation rules for Label

	// no validation rules for Name

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return QueryNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// QueryNotifyGroupRequestMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyGroupRequestMultiError) AllErrors() []error { return m }

// QueryNotifyGroupRequestValidationError is the validation error returned by
// QueryNotifyGroupRequest.Validate if the designated constraints aren't met.
type QueryNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyGroupRequestValidationError) ErrorName() string {
	return "QueryNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyGroupRequestValidationError{}

// Validate checks the field values on QueryNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyGroupResponseMultiError, or nil if none found.
func (m *QueryNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotifyGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotifyGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotifyGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// QueryNotifyGroupResponseMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyGroupResponseMultiError) AllErrors() []error { return m }

// QueryNotifyGroupResponseValidationError is the validation error returned by
// QueryNotifyGroupResponse.Validate if the designated constraints aren't met.
type QueryNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyGroupResponseValidationError) ErrorName() string {
	return "QueryNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyGroupResponseValidationError{}

// Validate checks the field values on QueryNotifyGroupData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyGroupData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyGroupData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyGroupDataMultiError, or nil if none found.
func (m *QueryNotifyGroupData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyGroupData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotifyGroupDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotifyGroupDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotifyGroupDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryNotifyGroupDataMultiError(errors)
	}

	return nil
}

// QueryNotifyGroupDataMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyGroupData.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyGroupDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyGroupDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyGroupDataMultiError) AllErrors() []error { return m }

// QueryNotifyGroupDataValidationError is the validation error returned by
// QueryNotifyGroupData.Validate if the designated constraints aren't met.
type QueryNotifyGroupDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyGroupDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyGroupDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyGroupDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyGroupDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyGroupDataValidationError) ErrorName() string {
	return "QueryNotifyGroupDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyGroupDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyGroupData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyGroupDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyGroupDataValidationError{}

// Validate checks the field values on GetNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyGroupRequestMultiError, or nil if none found.
func (m *GetNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// GetNotifyGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyGroupRequestMultiError) AllErrors() []error { return m }

// GetNotifyGroupRequestValidationError is the validation error returned by
// GetNotifyGroupRequest.Validate if the designated constraints aren't met.
type GetNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyGroupRequestValidationError) ErrorName() string {
	return "GetNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyGroupRequestValidationError{}

// Validate checks the field values on GetNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyGroupResponseMultiError, or nil if none found.
func (m *GetNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// GetNotifyGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyGroupResponseMultiError) AllErrors() []error { return m }

// GetNotifyGroupResponseValidationError is the validation error returned by
// GetNotifyGroupResponse.Validate if the designated constraints aren't met.
type GetNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyGroupResponseValidationError) ErrorName() string {
	return "GetNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyGroupResponseValidationError{}

// Validate checks the field values on UpdateNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyGroupRequestMultiError, or nil if none found.
func (m *UpdateNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for Name

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNotifyGroupRequestValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNotifyGroupRequestValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNotifyGroupRequestValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyGroupRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyGroupRequestValidationError is the validation error returned by
// UpdateNotifyGroupRequest.Validate if the designated constraints aren't met.
type UpdateNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyGroupRequestValidationError) ErrorName() string {
	return "UpdateNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyGroupRequestValidationError{}

// Validate checks the field values on UpdateNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyGroupResponseMultiError, or nil if none found.
func (m *UpdateNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyGroupResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyGroupResponseValidationError is the validation error returned by
// UpdateNotifyGroupResponse.Validate if the designated constraints aren't met.
type UpdateNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyGroupResponseValidationError) ErrorName() string {
	return "UpdateNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyGroupResponseValidationError{}

// Validate checks the field values on GetNotifyGroupDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyGroupDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyGroupDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyGroupDetailRequestMultiError, or nil if none found.
func (m *GetNotifyGroupDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyGroupDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetNotifyGroupDetailRequestMultiError(errors)
	}

	return nil
}

// GetNotifyGroupDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotifyGroupDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNotifyGroupDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyGroupDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyGroupDetailRequestMultiError) AllErrors() []error { return m }

// GetNotifyGroupDetailRequestValidationError is the validation error returned
// by GetNotifyGroupDetailRequest.Validate if the designated constraints
// aren't met.
type GetNotifyGroupDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyGroupDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyGroupDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyGroupDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyGroupDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyGroupDetailRequestValidationError) ErrorName() string {
	return "GetNotifyGroupDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyGroupDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyGroupDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyGroupDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyGroupDetailRequestValidationError{}

// Validate checks the field values on GetNotifyGroupDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyGroupDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyGroupDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyGroupDetailResponseMultiError, or nil if none found.
func (m *GetNotifyGroupDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyGroupDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyGroupDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyGroupDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyGroupDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyGroupDetailResponseMultiError(errors)
	}

	return nil
}

// GetNotifyGroupDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotifyGroupDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNotifyGroupDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyGroupDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyGroupDetailResponseMultiError) AllErrors() []error { return m }

// GetNotifyGroupDetailResponseValidationError is the validation error returned
// by GetNotifyGroupDetailResponse.Validate if the designated constraints
// aren't met.
type GetNotifyGroupDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyGroupDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyGroupDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyGroupDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyGroupDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyGroupDetailResponseValidationError) ErrorName() string {
	return "GetNotifyGroupDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyGroupDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyGroupDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyGroupDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyGroupDetailResponseValidationError{}

// Validate checks the field values on NotifyGroupDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotifyGroupDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyGroupDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyGroupDetailMultiError, or nil if none found.
func (m *NotifyGroupDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyGroupDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupDetailValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("Targets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupDetailValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDingdingList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("DingdingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("DingdingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupDetailValidationError{
					field:  fmt.Sprintf("DingdingList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDingdingWorknoticeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("DingdingWorknoticeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyGroupDetailValidationError{
						field:  fmt.Sprintf("DingdingWorknoticeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyGroupDetailValidationError{
					field:  fmt.Sprintf("DingdingWorknoticeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyGroupDetailMultiError(errors)
	}

	return nil
}

// NotifyGroupDetailMultiError is an error wrapping multiple validation errors
// returned by NotifyGroupDetail.ValidateAll() if the designated constraints
// aren't met.
type NotifyGroupDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyGroupDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyGroupDetailMultiError) AllErrors() []error { return m }

// NotifyGroupDetailValidationError is the validation error returned by
// NotifyGroupDetail.Validate if the designated constraints aren't met.
type NotifyGroupDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyGroupDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyGroupDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyGroupDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyGroupDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyGroupDetailValidationError) ErrorName() string {
	return "NotifyGroupDetailValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyGroupDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyGroupDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyGroupDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyGroupDetailValidationError{}

// Validate checks the field values on NotifyUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyUserMultiError, or
// nil if none found.
func (m *NotifyUser) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Type

	if len(errors) > 0 {
		return NotifyUserMultiError(errors)
	}

	return nil
}

// NotifyUserMultiError is an error wrapping multiple validation errors
// returned by NotifyUser.ValidateAll() if the designated constraints aren't met.
type NotifyUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyUserMultiError) AllErrors() []error { return m }

// NotifyUserValidationError is the validation error returned by
// NotifyUser.Validate if the designated constraints aren't met.
type NotifyUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyUserValidationError) ErrorName() string { return "NotifyUserValidationError" }

// Error satisfies the builtin error interface
func (e NotifyUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyUserValidationError{}

// Validate checks the field values on DeleteNotifyGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyGroupRequestMultiError, or nil if none found.
func (m *DeleteNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return DeleteNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyGroupRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyGroupRequestValidationError is the validation error returned by
// DeleteNotifyGroupRequest.Validate if the designated constraints aren't met.
type DeleteNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyGroupRequestValidationError) ErrorName() string {
	return "DeleteNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyGroupRequestValidationError{}

// Validate checks the field values on DeleteNotifyGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyGroupResponseMultiError, or nil if none found.
func (m *DeleteNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteNotifyGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyGroupResponseMultiError) AllErrors() []error { return m }

// DeleteNotifyGroupResponseValidationError is the validation error returned by
// DeleteNotifyGroupResponse.Validate if the designated constraints aren't met.
type DeleteNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyGroupResponseValidationError) ErrorName() string {
	return "DeleteNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyGroupResponseValidationError{}

// Validate checks the field values on BatchGetNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetNotifyGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetNotifyGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetNotifyGroupRequestMultiError, or nil if none found.
func (m *BatchGetNotifyGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetNotifyGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ids

	if len(errors) > 0 {
		return BatchGetNotifyGroupRequestMultiError(errors)
	}

	return nil
}

// BatchGetNotifyGroupRequestMultiError is an error wrapping multiple
// validation errors returned by BatchGetNotifyGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchGetNotifyGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetNotifyGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetNotifyGroupRequestMultiError) AllErrors() []error { return m }

// BatchGetNotifyGroupRequestValidationError is the validation error returned
// by BatchGetNotifyGroupRequest.Validate if the designated constraints aren't met.
type BatchGetNotifyGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetNotifyGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetNotifyGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetNotifyGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetNotifyGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetNotifyGroupRequestValidationError) ErrorName() string {
	return "BatchGetNotifyGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetNotifyGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetNotifyGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetNotifyGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetNotifyGroupRequestValidationError{}

// Validate checks the field values on BatchGetNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetNotifyGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetNotifyGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetNotifyGroupResponseMultiError, or nil if none found.
func (m *BatchGetNotifyGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetNotifyGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchGetNotifyGroupResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchGetNotifyGroupResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetNotifyGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchGetNotifyGroupResponseMultiError(errors)
	}

	return nil
}

// BatchGetNotifyGroupResponseMultiError is an error wrapping multiple
// validation errors returned by BatchGetNotifyGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchGetNotifyGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetNotifyGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetNotifyGroupResponseMultiError) AllErrors() []error { return m }

// BatchGetNotifyGroupResponseValidationError is the validation error returned
// by BatchGetNotifyGroupResponse.Validate if the designated constraints
// aren't met.
type BatchGetNotifyGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetNotifyGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetNotifyGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetNotifyGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetNotifyGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetNotifyGroupResponseValidationError) ErrorName() string {
	return "BatchGetNotifyGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetNotifyGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetNotifyGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetNotifyGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetNotifyGroupResponseValidationError{}
