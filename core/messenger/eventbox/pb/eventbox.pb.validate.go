// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventbox.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageRequestMultiError, or nil if none found.
func (m *CreateMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sender

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMessageRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMessageRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMessageRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			// no validation rules for Labels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateMessageRequestValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateMessageRequestValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateMessageRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Time

	if all {
		switch v := interface{}(m.GetOriginContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMessageRequestValidationError{
					field:  "OriginContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMessageRequestValidationError{
					field:  "OriginContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMessageRequestValidationError{
				field:  "OriginContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMessageRequestMultiError(errors)
	}

	return nil
}

// CreateMessageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageRequestMultiError) AllErrors() []error { return m }

// CreateMessageRequestValidationError is the validation error returned by
// CreateMessageRequest.Validate if the designated constraints aren't met.
type CreateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageRequestValidationError) ErrorName() string {
	return "CreateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageRequestValidationError{}

// Validate checks the field values on CreateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageResponseMultiError, or nil if none found.
func (m *CreateMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateMessageResponseMultiError(errors)
	}

	return nil
}

// CreateMessageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageResponseMultiError) AllErrors() []error { return m }

// CreateMessageResponseValidationError is the validation error returned by
// CreateMessageResponse.Validate if the designated constraints aren't met.
type CreateMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageResponseValidationError) ErrorName() string {
	return "CreateMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageResponseValidationError{}

// Validate checks the field values on PrefixGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrefixGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrefixGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrefixGetRequestMultiError, or nil if none found.
func (m *PrefixGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrefixGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return PrefixGetRequestMultiError(errors)
	}

	return nil
}

// PrefixGetRequestMultiError is an error wrapping multiple validation errors
// returned by PrefixGetRequest.ValidateAll() if the designated constraints
// aren't met.
type PrefixGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrefixGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrefixGetRequestMultiError) AllErrors() []error { return m }

// PrefixGetRequestValidationError is the validation error returned by
// PrefixGetRequest.Validate if the designated constraints aren't met.
type PrefixGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrefixGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrefixGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrefixGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrefixGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrefixGetRequestValidationError) ErrorName() string { return "PrefixGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e PrefixGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrefixGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrefixGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrefixGetRequestValidationError{}

// Validate checks the field values on PrefixGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrefixGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrefixGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrefixGetResponseMultiError, or nil if none found.
func (m *PrefixGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrefixGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PrefixGetResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PrefixGetResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PrefixGetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PrefixGetResponseMultiError(errors)
	}

	return nil
}

// PrefixGetResponseMultiError is an error wrapping multiple validation errors
// returned by PrefixGetResponse.ValidateAll() if the designated constraints
// aren't met.
type PrefixGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrefixGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrefixGetResponseMultiError) AllErrors() []error { return m }

// PrefixGetResponseValidationError is the validation error returned by
// PrefixGetResponse.Validate if the designated constraints aren't met.
type PrefixGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrefixGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrefixGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrefixGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrefixGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrefixGetResponseValidationError) ErrorName() string {
	return "PrefixGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrefixGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrefixGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrefixGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrefixGetResponseValidationError{}

// Validate checks the field values on PrefixValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrefixValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrefixValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrefixValueMultiError, or
// nil if none found.
func (m *PrefixValue) ValidateAll() error {
	return m.validate(true)
}

func (m *PrefixValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValue()))
		i := 0
		for key := range m.GetValue() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValue()[key]
			_ = val

			// no validation rules for Value[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PrefixValueValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PrefixValueValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PrefixValueValidationError{
						field:  fmt.Sprintf("Value[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PrefixValueMultiError(errors)
	}

	return nil
}

// PrefixValueMultiError is an error wrapping multiple validation errors
// returned by PrefixValue.ValidateAll() if the designated constraints aren't met.
type PrefixValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrefixValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrefixValueMultiError) AllErrors() []error { return m }

// PrefixValueValidationError is the validation error returned by
// PrefixValue.Validate if the designated constraints aren't met.
type PrefixValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrefixValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrefixValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrefixValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrefixValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrefixValueValidationError) ErrorName() string { return "PrefixValueValidationError" }

// Error satisfies the builtin error interface
func (e PrefixValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrefixValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrefixValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrefixValueValidationError{}

// Validate checks the field values on PutRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutRequestMultiError, or
// nil if none found.
func (m *PutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			// no validation rules for Labels[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PutRequestValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PutRequestValidationError{
							field:  fmt.Sprintf("Labels[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PutRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PutRequestMultiError(errors)
	}

	return nil
}

// PutRequestMultiError is an error wrapping multiple validation errors
// returned by PutRequest.ValidateAll() if the designated constraints aren't met.
type PutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRequestMultiError) AllErrors() []error { return m }

// PutRequestValidationError is the validation error returned by
// PutRequest.Validate if the designated constraints aren't met.
type PutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRequestValidationError) ErrorName() string { return "PutRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRequestValidationError{}

// Validate checks the field values on PutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutResponseMultiError, or
// nil if none found.
func (m *PutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PutResponseMultiError(errors)
	}

	return nil
}

// PutResponseMultiError is an error wrapping multiple validation errors
// returned by PutResponse.ValidateAll() if the designated constraints aren't met.
type PutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutResponseMultiError) AllErrors() []error { return m }

// PutResponseValidationError is the validation error returned by
// PutResponse.Validate if the designated constraints aren't met.
type PutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutResponseValidationError) ErrorName() string { return "PutResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutResponseValidationError{}

// Validate checks the field values on DelRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRequestMultiError, or
// nil if none found.
func (m *DelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DelRequestMultiError(errors)
	}

	return nil
}

// DelRequestMultiError is an error wrapping multiple validation errors
// returned by DelRequest.ValidateAll() if the designated constraints aren't met.
type DelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRequestMultiError) AllErrors() []error { return m }

// DelRequestValidationError is the validation error returned by
// DelRequest.Validate if the designated constraints aren't met.
type DelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRequestValidationError) ErrorName() string { return "DelRequestValidationError" }

// Error satisfies the builtin error interface
func (e DelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRequestValidationError{}

// Validate checks the field values on DelResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelResponseMultiError, or
// nil if none found.
func (m *DelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DelResponseMultiError(errors)
	}

	return nil
}

// DelResponseMultiError is an error wrapping multiple validation errors
// returned by DelResponse.ValidateAll() if the designated constraints aren't met.
type DelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelResponseMultiError) AllErrors() []error { return m }

// DelResponseValidationError is the validation error returned by
// DelResponse.Validate if the designated constraints aren't met.
type DelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelResponseValidationError) ErrorName() string { return "DelResponseValidationError" }

// Error satisfies the builtin error interface
func (e DelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelResponseValidationError{}

// Validate checks the field values on GetVersionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionRequestMultiError, or nil if none found.
func (m *GetVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionRequestMultiError(errors)
	}

	return nil
}

// GetVersionRequestMultiError is an error wrapping multiple validation errors
// returned by GetVersionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionRequestMultiError) AllErrors() []error { return m }

// GetVersionRequestValidationError is the validation error returned by
// GetVersionRequest.Validate if the designated constraints aren't met.
type GetVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionRequestValidationError) ErrorName() string {
	return "GetVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionRequestValidationError{}

// Validate checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionResponseMultiError, or nil if none found.
func (m *GetVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetVersionResponseMultiError(errors)
	}

	return nil
}

// GetVersionResponseMultiError is an error wrapping multiple validation errors
// returned by GetVersionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionResponseMultiError) AllErrors() []error { return m }

// GetVersionResponseValidationError is the validation error returned by
// GetVersionResponse.Validate if the designated constraints aren't met.
type GetVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionResponseValidationError) ErrorName() string {
	return "GetVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionResponseValidationError{}

// Validate checks the field values on GetSMTPInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSMTPInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSMTPInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSMTPInfoRequestMultiError, or nil if none found.
func (m *GetSMTPInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSMTPInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSMTPInfoRequestMultiError(errors)
	}

	return nil
}

// GetSMTPInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetSMTPInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSMTPInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSMTPInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSMTPInfoRequestMultiError) AllErrors() []error { return m }

// GetSMTPInfoRequestValidationError is the validation error returned by
// GetSMTPInfoRequest.Validate if the designated constraints aren't met.
type GetSMTPInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMTPInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMTPInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMTPInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMTPInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMTPInfoRequestValidationError) ErrorName() string {
	return "GetSMTPInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMTPInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMTPInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMTPInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMTPInfoRequestValidationError{}

// Validate checks the field values on GetSMTPInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSMTPInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSMTPInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSMTPInfoResponseMultiError, or nil if none found.
func (m *GetSMTPInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSMTPInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSMTPInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSMTPInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSMTPInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSMTPInfoResponseMultiError(errors)
	}

	return nil
}

// GetSMTPInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetSMTPInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSMTPInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSMTPInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSMTPInfoResponseMultiError) AllErrors() []error { return m }

// GetSMTPInfoResponseValidationError is the validation error returned by
// GetSMTPInfoResponse.Validate if the designated constraints aren't met.
type GetSMTPInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMTPInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMTPInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMTPInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMTPInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMTPInfoResponseValidationError) ErrorName() string {
	return "GetSMTPInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMTPInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMTPInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMTPInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMTPInfoResponseValidationError{}

// Validate checks the field values on MailSubscriberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MailSubscriberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailSubscriberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MailSubscriberInfoMultiError, or nil if none found.
func (m *MailSubscriberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MailSubscriberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for DisplayUser

	// no validation rules for IsSSL

	// no validation rules for InsecureSkipVerify

	if len(errors) > 0 {
		return MailSubscriberInfoMultiError(errors)
	}

	return nil
}

// MailSubscriberInfoMultiError is an error wrapping multiple validation errors
// returned by MailSubscriberInfo.ValidateAll() if the designated constraints
// aren't met.
type MailSubscriberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailSubscriberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailSubscriberInfoMultiError) AllErrors() []error { return m }

// MailSubscriberInfoValidationError is the validation error returned by
// MailSubscriberInfo.Validate if the designated constraints aren't met.
type MailSubscriberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailSubscriberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailSubscriberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailSubscriberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailSubscriberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailSubscriberInfoValidationError) ErrorName() string {
	return "MailSubscriberInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MailSubscriberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailSubscriberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailSubscriberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailSubscriberInfoValidationError{}

// Validate checks the field values on ListHooksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHooksRequestMultiError, or nil if none found.
func (m *ListHooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	// no validation rules for Env

	if len(errors) > 0 {
		return ListHooksRequestMultiError(errors)
	}

	return nil
}

// ListHooksRequestMultiError is an error wrapping multiple validation errors
// returned by ListHooksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHooksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHooksRequestMultiError) AllErrors() []error { return m }

// ListHooksRequestValidationError is the validation error returned by
// ListHooksRequest.Validate if the designated constraints aren't met.
type ListHooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHooksRequestValidationError) ErrorName() string { return "ListHooksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHooksRequestValidationError{}

// Validate checks the field values on ListHooksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHooksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHooksResponseMultiError, or nil if none found.
func (m *ListHooksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHooksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHooksResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHooksResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHooksResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHooksResponseMultiError(errors)
	}

	return nil
}

// ListHooksResponseMultiError is an error wrapping multiple validation errors
// returned by ListHooksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListHooksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHooksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHooksResponseMultiError) AllErrors() []error { return m }

// ListHooksResponseValidationError is the validation error returned by
// ListHooksResponse.Validate if the designated constraints aren't met.
type ListHooksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHooksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHooksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHooksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHooksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHooksResponseValidationError) ErrorName() string {
	return "ListHooksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHooksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHooksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHooksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHooksResponseValidationError{}

// Validate checks the field values on InspectHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectHookRequestMultiError, or nil if none found.
func (m *InspectHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	// no validation rules for Id

	if len(errors) > 0 {
		return InspectHookRequestMultiError(errors)
	}

	return nil
}

// InspectHookRequestMultiError is an error wrapping multiple validation errors
// returned by InspectHookRequest.ValidateAll() if the designated constraints
// aren't met.
type InspectHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectHookRequestMultiError) AllErrors() []error { return m }

// InspectHookRequestValidationError is the validation error returned by
// InspectHookRequest.Validate if the designated constraints aren't met.
type InspectHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectHookRequestValidationError) ErrorName() string {
	return "InspectHookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InspectHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectHookRequestValidationError{}

// Validate checks the field values on InspectHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectHookResponseMultiError, or nil if none found.
func (m *InspectHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InspectHookResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InspectHookResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InspectHookResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InspectHookResponseMultiError(errors)
	}

	return nil
}

// InspectHookResponseMultiError is an error wrapping multiple validation
// errors returned by InspectHookResponse.ValidateAll() if the designated
// constraints aren't met.
type InspectHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectHookResponseMultiError) AllErrors() []error { return m }

// InspectHookResponseValidationError is the validation error returned by
// InspectHookResponse.Validate if the designated constraints aren't met.
type InspectHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectHookResponseValidationError) ErrorName() string {
	return "InspectHookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InspectHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectHookResponseValidationError{}

// Validate checks the field values on CreateHookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHookRequestMultiError, or nil if none found.
func (m *CreateHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Active

	// no validation rules for Org

	// no validation rules for Project

	// no validation rules for Application

	if len(errors) > 0 {
		return CreateHookRequestMultiError(errors)
	}

	return nil
}

// CreateHookRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHookRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHookRequestMultiError) AllErrors() []error { return m }

// CreateHookRequestValidationError is the validation error returned by
// CreateHookRequest.Validate if the designated constraints aren't met.
type CreateHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHookRequestValidationError) ErrorName() string {
	return "CreateHookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHookRequestValidationError{}

// Validate checks the field values on CreateHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHookResponseMultiError, or nil if none found.
func (m *CreateHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateHookResponseMultiError(errors)
	}

	return nil
}

// CreateHookResponseMultiError is an error wrapping multiple validation errors
// returned by CreateHookResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHookResponseMultiError) AllErrors() []error { return m }

// CreateHookResponseValidationError is the validation error returned by
// CreateHookResponse.Validate if the designated constraints aren't met.
type CreateHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHookResponseValidationError) ErrorName() string {
	return "CreateHookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHookResponseValidationError{}

// Validate checks the field values on EditHookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditHookRequestMultiError, or nil if none found.
func (m *EditHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Active

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return EditHookRequestMultiError(errors)
	}

	return nil
}

// EditHookRequestMultiError is an error wrapping multiple validation errors
// returned by EditHookRequest.ValidateAll() if the designated constraints
// aren't met.
type EditHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditHookRequestMultiError) AllErrors() []error { return m }

// EditHookRequestValidationError is the validation error returned by
// EditHookRequest.Validate if the designated constraints aren't met.
type EditHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditHookRequestValidationError) ErrorName() string { return "EditHookRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditHookRequestValidationError{}

// Validate checks the field values on EditHookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditHookResponseMultiError, or nil if none found.
func (m *EditHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return EditHookResponseMultiError(errors)
	}

	return nil
}

// EditHookResponseMultiError is an error wrapping multiple validation errors
// returned by EditHookResponse.ValidateAll() if the designated constraints
// aren't met.
type EditHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditHookResponseMultiError) AllErrors() []error { return m }

// EditHookResponseValidationError is the validation error returned by
// EditHookResponse.Validate if the designated constraints aren't met.
type EditHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditHookResponseValidationError) ErrorName() string { return "EditHookResponseValidationError" }

// Error satisfies the builtin error interface
func (e EditHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditHookResponseValidationError{}

// Validate checks the field values on PingHookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingHookRequestMultiError, or nil if none found.
func (m *PingHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	// no validation rules for Id

	if len(errors) > 0 {
		return PingHookRequestMultiError(errors)
	}

	return nil
}

// PingHookRequestMultiError is an error wrapping multiple validation errors
// returned by PingHookRequest.ValidateAll() if the designated constraints
// aren't met.
type PingHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingHookRequestMultiError) AllErrors() []error { return m }

// PingHookRequestValidationError is the validation error returned by
// PingHookRequest.Validate if the designated constraints aren't met.
type PingHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingHookRequestValidationError) ErrorName() string { return "PingHookRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingHookRequestValidationError{}

// Validate checks the field values on PingHookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingHookResponseMultiError, or nil if none found.
func (m *PingHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PingHookResponseMultiError(errors)
	}

	return nil
}

// PingHookResponseMultiError is an error wrapping multiple validation errors
// returned by PingHookResponse.ValidateAll() if the designated constraints
// aren't met.
type PingHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingHookResponseMultiError) AllErrors() []error { return m }

// PingHookResponseValidationError is the validation error returned by
// PingHookResponse.Validate if the designated constraints aren't met.
type PingHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingHookResponseValidationError) ErrorName() string { return "PingHookResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingHookResponseValidationError{}

// Validate checks the field values on DeleteHookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHookRequestMultiError, or nil if none found.
func (m *DeleteHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteHookRequestMultiError(errors)
	}

	return nil
}

// DeleteHookRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteHookRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHookRequestMultiError) AllErrors() []error { return m }

// DeleteHookRequestValidationError is the validation error returned by
// DeleteHookRequest.Validate if the designated constraints aren't met.
type DeleteHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHookRequestValidationError) ErrorName() string {
	return "DeleteHookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHookRequestValidationError{}

// Validate checks the field values on DeleteHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHookResponseMultiError, or nil if none found.
func (m *DeleteHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteHookResponseMultiError(errors)
	}

	return nil
}

// DeleteHookResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteHookResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHookResponseMultiError) AllErrors() []error { return m }

// DeleteHookResponseValidationError is the validation error returned by
// DeleteHookResponse.Validate if the designated constraints aren't met.
type DeleteHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHookResponseValidationError) ErrorName() string {
	return "DeleteHookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHookResponseValidationError{}

// Validate checks the field values on ListHookEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHookEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHookEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHookEventsRequestMultiError, or nil if none found.
func (m *ListHookEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHookEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return ListHookEventsRequestMultiError(errors)
	}

	return nil
}

// ListHookEventsRequestMultiError is an error wrapping multiple validation
// errors returned by ListHookEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListHookEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHookEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHookEventsRequestMultiError) AllErrors() []error { return m }

// ListHookEventsRequestValidationError is the validation error returned by
// ListHookEventsRequest.Validate if the designated constraints aren't met.
type ListHookEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHookEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHookEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHookEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHookEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHookEventsRequestValidationError) ErrorName() string {
	return "ListHookEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHookEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHookEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHookEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHookEventsRequestValidationError{}

// Validate checks the field values on ListHookEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHookEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHookEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHookEventsResponseMultiError, or nil if none found.
func (m *ListHookEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHookEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHookEventsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHookEventsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHookEventsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHookEventsResponseMultiError(errors)
	}

	return nil
}

// ListHookEventsResponseMultiError is an error wrapping multiple validation
// errors returned by ListHookEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListHookEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHookEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHookEventsResponseMultiError) AllErrors() []error { return m }

// ListHookEventsResponseValidationError is the validation error returned by
// ListHookEventsResponse.Validate if the designated constraints aren't met.
type ListHookEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHookEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHookEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHookEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHookEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHookEventsResponseValidationError) ErrorName() string {
	return "ListHookEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHookEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHookEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHookEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHookEventsResponseValidationError{}

// Validate checks the field values on HookEvents with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HookEvents) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HookEvents with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HookEventsMultiError, or
// nil if none found.
func (m *HookEvents) ValidateAll() error {
	return m.validate(true)
}

func (m *HookEvents) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Title

	// no validation rules for Desc

	if len(errors) > 0 {
		return HookEventsMultiError(errors)
	}

	return nil
}

// HookEventsMultiError is an error wrapping multiple validation errors
// returned by HookEvents.ValidateAll() if the designated constraints aren't met.
type HookEventsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HookEventsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HookEventsMultiError) AllErrors() []error { return m }

// HookEventsValidationError is the validation error returned by
// HookEvents.Validate if the designated constraints aren't met.
type HookEventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HookEventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HookEventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HookEventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HookEventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HookEventsValidationError) ErrorName() string { return "HookEventsValidationError" }

// Error satisfies the builtin error interface
func (e HookEventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHookEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HookEventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HookEventsValidationError{}

// Validate checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatRequestMultiError, or
// nil if none found.
func (m *StatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatRequestMultiError(errors)
	}

	return nil
}

// StatRequestMultiError is an error wrapping multiple validation errors
// returned by StatRequest.ValidateAll() if the designated constraints aren't met.
type StatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatRequestMultiError) AllErrors() []error { return m }

// StatRequestValidationError is the validation error returned by
// StatRequest.Validate if the designated constraints aren't met.
type StatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatRequestValidationError) ErrorName() string { return "StatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatRequestValidationError{}

// Validate checks the field values on StatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatResponseMultiError, or
// nil if none found.
func (m *StatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return StatResponseMultiError(errors)
	}

	return nil
}

// StatResponseMultiError is an error wrapping multiple validation errors
// returned by StatResponse.ValidateAll() if the designated constraints aren't met.
type StatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatResponseMultiError) AllErrors() []error { return m }

// StatResponseValidationError is the validation error returned by
// StatResponse.Validate if the designated constraints aren't met.
type StatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatResponseValidationError) ErrorName() string { return "StatResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatResponseValidationError{}

// Validate checks the field values on Hook with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hook) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hook with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HookMultiError, or nil if none found.
func (m *Hook) ValidateAll() error {
	return m.validate(true)
}

func (m *Hook) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for Secret

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Active

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	if len(errors) > 0 {
		return HookMultiError(errors)
	}

	return nil
}

// HookMultiError is an error wrapping multiple validation errors returned by
// Hook.ValidateAll() if the designated constraints aren't met.
type HookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HookMultiError) AllErrors() []error { return m }

// HookValidationError is the validation error returned by Hook.Validate if the
// designated constraints aren't met.
type HookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HookValidationError) ErrorName() string { return "HookValidationError" }

// Error satisfies the builtin error interface
func (e HookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HookValidationError{}
