// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateNotifyHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyHistoryRequestMultiError, or nil if none found.
func (m *CreateNotifyHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyName

	// no validation rules for NotifyItemDisplayName

	// no validation rules for Channel

	for idx, item := range m.GetNotifyTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyHistoryRequestValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyHistoryRequestValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyHistoryRequestValidationError{
					field:  fmt.Sprintf("NotifyTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNotifySource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNotifyHistoryRequestValidationError{
					field:  "NotifySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNotifyHistoryRequestValidationError{
					field:  "NotifySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifySource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotifyHistoryRequestValidationError{
				field:  "NotifySource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for ErrorMsg

	// no validation rules for OrgID

	{
		sorted_keys := make([]string, len(m.GetNotifyTags()))
		i := 0
		for key := range m.GetNotifyTags() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNotifyTags()[key]
			_ = val

			// no validation rules for NotifyTags[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateNotifyHistoryRequestValidationError{
							field:  fmt.Sprintf("NotifyTags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateNotifyHistoryRequestValidationError{
							field:  fmt.Sprintf("NotifyTags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateNotifyHistoryRequestValidationError{
						field:  fmt.Sprintf("NotifyTags[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Label

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return CreateNotifyHistoryRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNotifyHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNotifyHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyHistoryRequestMultiError) AllErrors() []error { return m }

// CreateNotifyHistoryRequestValidationError is the validation error returned
// by CreateNotifyHistoryRequest.Validate if the designated constraints aren't met.
type CreateNotifyHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyHistoryRequestValidationError) ErrorName() string {
	return "CreateNotifyHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyHistoryRequestValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyTargetValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Secret

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on NotifySource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifySource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifySource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifySourceMultiError, or
// nil if none found.
func (m *NotifySource) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifySource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for SourceType

	// no validation rules for SourceID

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifySourceValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifySourceValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifySourceValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifySourceMultiError(errors)
	}

	return nil
}

// NotifySourceMultiError is an error wrapping multiple validation errors
// returned by NotifySource.ValidateAll() if the designated constraints aren't met.
type NotifySourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifySourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifySourceMultiError) AllErrors() []error { return m }

// NotifySourceValidationError is the validation error returned by
// NotifySource.Validate if the designated constraints aren't met.
type NotifySourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifySourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifySourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifySourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifySourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifySourceValidationError) ErrorName() string { return "NotifySourceValidationError" }

// Error satisfies the builtin error interface
func (e NotifySourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifySource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifySourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifySourceValidationError{}

// Validate checks the field values on CreateNotifyHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyHistoryResponseMultiError, or nil if none found.
func (m *CreateNotifyHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateNotifyHistoryResponseMultiError(errors)
	}

	return nil
}

// CreateNotifyHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNotifyHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateNotifyHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyHistoryResponseMultiError) AllErrors() []error { return m }

// CreateNotifyHistoryResponseValidationError is the validation error returned
// by CreateNotifyHistoryResponse.Validate if the designated constraints
// aren't met.
type CreateNotifyHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyHistoryResponseValidationError) ErrorName() string {
	return "CreateNotifyHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyHistoryResponseValidationError{}

// Validate checks the field values on QueryNotifyHistoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoriesRequestMultiError, or nil if none found.
func (m *QueryNotifyHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Channel

	// no validation rules for NotifyName

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Label

	// no validation rules for ClusterName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return QueryNotifyHistoriesRequestMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoriesRequestMultiError is an error wrapping multiple
// validation errors returned by QueryNotifyHistoriesRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryNotifyHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoriesRequestMultiError) AllErrors() []error { return m }

// QueryNotifyHistoriesRequestValidationError is the validation error returned
// by QueryNotifyHistoriesRequest.Validate if the designated constraints
// aren't met.
type QueryNotifyHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoriesRequestValidationError) ErrorName() string {
	return "QueryNotifyHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoriesRequestValidationError{}

// Validate checks the field values on QueryNotifyHistoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoriesResponseMultiError, or nil if none found.
func (m *QueryNotifyHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotifyHistoriesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotifyHistoriesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotifyHistoriesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotifyHistoriesResponseMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoriesResponseMultiError is an error wrapping multiple
// validation errors returned by QueryNotifyHistoriesResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryNotifyHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoriesResponseMultiError) AllErrors() []error { return m }

// QueryNotifyHistoriesResponseValidationError is the validation error returned
// by QueryNotifyHistoriesResponse.Validate if the designated constraints
// aren't met.
type QueryNotifyHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoriesResponseValidationError) ErrorName() string {
	return "QueryNotifyHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoriesResponseValidationError{}

// Validate checks the field values on QueryNotifyHistoryData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoryData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoryData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoryDataMultiError, or nil if none found.
func (m *QueryNotifyHistoryData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoryData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotifyHistoryDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotifyHistoryDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotifyHistoryDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryNotifyHistoryDataMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoryDataMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyHistoryData.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyHistoryDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoryDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoryDataMultiError) AllErrors() []error { return m }

// QueryNotifyHistoryDataValidationError is the validation error returned by
// QueryNotifyHistoryData.Validate if the designated constraints aren't met.
type QueryNotifyHistoryDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoryDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoryDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoryDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoryDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoryDataValidationError) ErrorName() string {
	return "QueryNotifyHistoryDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoryDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoryData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoryDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoryDataValidationError{}

// Validate checks the field values on NotifyHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyHistoryMultiError, or
// nil if none found.
func (m *NotifyHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotifyName

	// no validation rules for NotifyItemDisplayName

	// no validation rules for Channel

	for idx, item := range m.GetNotifyTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyHistoryValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyHistoryValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyHistoryValidationError{
					field:  fmt.Sprintf("NotifyTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNotifySource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyHistoryValidationError{
					field:  "NotifySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyHistoryValidationError{
					field:  "NotifySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifySource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyHistoryValidationError{
				field:  "NotifySource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for ErrorMsg

	// no validation rules for Label

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyHistoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyHistoryMultiError(errors)
	}

	return nil
}

// NotifyHistoryMultiError is an error wrapping multiple validation errors
// returned by NotifyHistory.ValidateAll() if the designated constraints
// aren't met.
type NotifyHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyHistoryMultiError) AllErrors() []error { return m }

// NotifyHistoryValidationError is the validation error returned by
// NotifyHistory.Validate if the designated constraints aren't met.
type NotifyHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyHistoryValidationError) ErrorName() string { return "NotifyHistoryValidationError" }

// Error satisfies the builtin error interface
func (e NotifyHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyHistoryValidationError{}

// Validate checks the field values on GetNotifyStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyStatusRequestMultiError, or nil if none found.
func (m *GetNotifyStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return GetNotifyStatusRequestMultiError(errors)
	}

	return nil
}

// GetNotifyStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyStatusRequestMultiError) AllErrors() []error { return m }

// GetNotifyStatusRequestValidationError is the validation error returned by
// GetNotifyStatusRequest.Validate if the designated constraints aren't met.
type GetNotifyStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyStatusRequestValidationError) ErrorName() string {
	return "GetNotifyStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyStatusRequestValidationError{}

// Validate checks the field values on GetNotifyStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyStatusResponseMultiError, or nil if none found.
func (m *GetNotifyStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetNotifyStatusResponseMultiError(errors)
	}

	return nil
}

// GetNotifyStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyStatusResponseMultiError) AllErrors() []error { return m }

// GetNotifyStatusResponseValidationError is the validation error returned by
// GetNotifyStatusResponse.Validate if the designated constraints aren't met.
type GetNotifyStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyStatusResponseValidationError) ErrorName() string {
	return "GetNotifyStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyStatusResponseValidationError{}

// Validate checks the field values on GetNotifyHistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyHistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyHistogramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyHistogramRequestMultiError, or nil if none found.
func (m *GetNotifyHistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyHistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for ScopeId

	// no validation rules for Points

	// no validation rules for Statistic

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return GetNotifyHistogramRequestMultiError(errors)
	}

	return nil
}

// GetNotifyHistogramRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyHistogramRequest.ValidateAll() if the
// designated constraints aren't met.
type GetNotifyHistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyHistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyHistogramRequestMultiError) AllErrors() []error { return m }

// GetNotifyHistogramRequestValidationError is the validation error returned by
// GetNotifyHistogramRequest.Validate if the designated constraints aren't met.
type GetNotifyHistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyHistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyHistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyHistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyHistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyHistogramRequestValidationError) ErrorName() string {
	return "GetNotifyHistogramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyHistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyHistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyHistogramRequestValidationError{}

// Validate checks the field values on GetNotifyHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyHistogramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyHistogramResponseMultiError, or nil if none found.
func (m *GetNotifyHistogramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyHistogramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyHistogramResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyHistogramResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyHistogramResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyHistogramResponseMultiError(errors)
	}

	return nil
}

// GetNotifyHistogramResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotifyHistogramResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNotifyHistogramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyHistogramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyHistogramResponseMultiError) AllErrors() []error { return m }

// GetNotifyHistogramResponseValidationError is the validation error returned
// by GetNotifyHistogramResponse.Validate if the designated constraints aren't met.
type GetNotifyHistogramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyHistogramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyHistogramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyHistogramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyHistogramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyHistogramResponseValidationError) ErrorName() string {
	return "GetNotifyHistogramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyHistogramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyHistogramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyHistogramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyHistogramResponseValidationError{}

// Validate checks the field values on NotifyHistogramData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyHistogramData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyHistogramData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyHistogramDataMultiError, or nil if none found.
func (m *NotifyHistogramData) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyHistogramData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValue()))
		i := 0
		for key := range m.GetValue() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValue()[key]
			_ = val

			// no validation rules for Value[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, NotifyHistogramDataValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, NotifyHistogramDataValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return NotifyHistogramDataValidationError{
						field:  fmt.Sprintf("Value[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return NotifyHistogramDataMultiError(errors)
	}

	return nil
}

// NotifyHistogramDataMultiError is an error wrapping multiple validation
// errors returned by NotifyHistogramData.ValidateAll() if the designated
// constraints aren't met.
type NotifyHistogramDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyHistogramDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyHistogramDataMultiError) AllErrors() []error { return m }

// NotifyHistogramDataValidationError is the validation error returned by
// NotifyHistogramData.Validate if the designated constraints aren't met.
type NotifyHistogramDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyHistogramDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyHistogramDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyHistogramDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyHistogramDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyHistogramDataValidationError) ErrorName() string {
	return "NotifyHistogramDataValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyHistogramDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyHistogramData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyHistogramDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyHistogramDataValidationError{}

// Validate checks the field values on StatisticValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatisticValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatisticValueMultiError,
// or nil if none found.
func (m *StatisticValue) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatisticValueMultiError(errors)
	}

	return nil
}

// StatisticValueMultiError is an error wrapping multiple validation errors
// returned by StatisticValue.ValidateAll() if the designated constraints
// aren't met.
type StatisticValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticValueMultiError) AllErrors() []error { return m }

// StatisticValueValidationError is the validation error returned by
// StatisticValue.Validate if the designated constraints aren't met.
type StatisticValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticValueValidationError) ErrorName() string { return "StatisticValueValidationError" }

// Error satisfies the builtin error interface
func (e StatisticValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticValueValidationError{}

// Validate checks the field values on QueryAlertNotifyHistoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryAlertNotifyHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertNotifyHistoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryAlertNotifyHistoriesRequestMultiError, or nil if none found.
func (m *QueryAlertNotifyHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertNotifyHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for NotifyName

	// no validation rules for Status

	// no validation rules for Channel

	// no validation rules for AlertID

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for TimeOrder

	if len(errors) > 0 {
		return QueryAlertNotifyHistoriesRequestMultiError(errors)
	}

	return nil
}

// QueryAlertNotifyHistoriesRequestMultiError is an error wrapping multiple
// validation errors returned by
// QueryAlertNotifyHistoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertNotifyHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertNotifyHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertNotifyHistoriesRequestMultiError) AllErrors() []error { return m }

// QueryAlertNotifyHistoriesRequestValidationError is the validation error
// returned by QueryAlertNotifyHistoriesRequest.Validate if the designated
// constraints aren't met.
type QueryAlertNotifyHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertNotifyHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertNotifyHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertNotifyHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertNotifyHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertNotifyHistoriesRequestValidationError) ErrorName() string {
	return "QueryAlertNotifyHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertNotifyHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertNotifyHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertNotifyHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertNotifyHistoriesRequestValidationError{}

// Validate checks the field values on QueryAlertNotifyHistoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryAlertNotifyHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertNotifyHistoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryAlertNotifyHistoriesResponseMultiError, or nil if none found.
func (m *QueryAlertNotifyHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertNotifyHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertNotifyHistoriesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertNotifyHistoriesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertNotifyHistoriesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertNotifyHistoriesResponseMultiError(errors)
	}

	return nil
}

// QueryAlertNotifyHistoriesResponseMultiError is an error wrapping multiple
// validation errors returned by
// QueryAlertNotifyHistoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertNotifyHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertNotifyHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertNotifyHistoriesResponseMultiError) AllErrors() []error { return m }

// QueryAlertNotifyHistoriesResponseValidationError is the validation error
// returned by QueryAlertNotifyHistoriesResponse.Validate if the designated
// constraints aren't met.
type QueryAlertNotifyHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertNotifyHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertNotifyHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertNotifyHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertNotifyHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertNotifyHistoriesResponseValidationError) ErrorName() string {
	return "QueryAlertNotifyHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertNotifyHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertNotifyHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertNotifyHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertNotifyHistoriesResponseValidationError{}

// Validate checks the field values on AlertNotifyHistories with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertNotifyHistories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotifyHistories with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertNotifyHistoriesMultiError, or nil if none found.
func (m *AlertNotifyHistories) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotifyHistories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlertNotifyHistoriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlertNotifyHistoriesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertNotifyHistoriesValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return AlertNotifyHistoriesMultiError(errors)
	}

	return nil
}

// AlertNotifyHistoriesMultiError is an error wrapping multiple validation
// errors returned by AlertNotifyHistories.ValidateAll() if the designated
// constraints aren't met.
type AlertNotifyHistoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyHistoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyHistoriesMultiError) AllErrors() []error { return m }

// AlertNotifyHistoriesValidationError is the validation error returned by
// AlertNotifyHistories.Validate if the designated constraints aren't met.
type AlertNotifyHistoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyHistoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyHistoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyHistoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyHistoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyHistoriesValidationError) ErrorName() string {
	return "AlertNotifyHistoriesValidationError"
}

// Error satisfies the builtin error interface
func (e AlertNotifyHistoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotifyHistories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyHistoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyHistoriesValidationError{}

// Validate checks the field values on AlertNotifyIndex with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertNotifyIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotifyIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertNotifyIndexMultiError, or nil if none found.
func (m *AlertNotifyIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotifyIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotifyID

	// no validation rules for NotifyName

	// no validation rules for Status

	// no validation rules for Channel

	// no validation rules for Attributes

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertNotifyIndexValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertNotifyIndexValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertNotifyIndexValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlertNotifyIndexMultiError(errors)
	}

	return nil
}

// AlertNotifyIndexMultiError is an error wrapping multiple validation errors
// returned by AlertNotifyIndex.ValidateAll() if the designated constraints
// aren't met.
type AlertNotifyIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyIndexMultiError) AllErrors() []error { return m }

// AlertNotifyIndexValidationError is the validation error returned by
// AlertNotifyIndex.Validate if the designated constraints aren't met.
type AlertNotifyIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyIndexValidationError) ErrorName() string { return "AlertNotifyIndexValidationError" }

// Error satisfies the builtin error interface
func (e AlertNotifyIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotifyIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyIndexValidationError{}

// Validate checks the field values on GetAlertNotifyDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertNotifyDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertNotifyDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertNotifyDetailRequestMultiError, or nil if none found.
func (m *GetAlertNotifyDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertNotifyDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAlertNotifyDetailRequestMultiError(errors)
	}

	return nil
}

// GetAlertNotifyDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetAlertNotifyDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAlertNotifyDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertNotifyDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertNotifyDetailRequestMultiError) AllErrors() []error { return m }

// GetAlertNotifyDetailRequestValidationError is the validation error returned
// by GetAlertNotifyDetailRequest.Validate if the designated constraints
// aren't met.
type GetAlertNotifyDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertNotifyDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertNotifyDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertNotifyDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertNotifyDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertNotifyDetailRequestValidationError) ErrorName() string {
	return "GetAlertNotifyDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertNotifyDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertNotifyDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertNotifyDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertNotifyDetailRequestValidationError{}

// Validate checks the field values on GetAlertNotifyDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertNotifyDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertNotifyDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertNotifyDetailResponseMultiError, or nil if none found.
func (m *GetAlertNotifyDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertNotifyDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertNotifyDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertNotifyDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertNotifyDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertNotifyDetailResponseMultiError(errors)
	}

	return nil
}

// GetAlertNotifyDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertNotifyDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertNotifyDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertNotifyDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertNotifyDetailResponseMultiError) AllErrors() []error { return m }

// GetAlertNotifyDetailResponseValidationError is the validation error returned
// by GetAlertNotifyDetailResponse.Validate if the designated constraints
// aren't met.
type GetAlertNotifyDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertNotifyDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertNotifyDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertNotifyDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertNotifyDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertNotifyDetailResponseValidationError) ErrorName() string {
	return "GetAlertNotifyDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertNotifyDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertNotifyDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertNotifyDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertNotifyDetailResponseValidationError{}

// Validate checks the field values on AlertNotifyDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertNotifyDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertNotifyDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertNotifyDetailMultiError, or nil if none found.
func (m *AlertNotifyDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertNotifyDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Status

	// no validation rules for NotifyGroup

	// no validation rules for NotifyRule

	// no validation rules for NotifyContent

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertNotifyDetailValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertNotifyDetailValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertNotifyDetailValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AlertName

	if len(errors) > 0 {
		return AlertNotifyDetailMultiError(errors)
	}

	return nil
}

// AlertNotifyDetailMultiError is an error wrapping multiple validation errors
// returned by AlertNotifyDetail.ValidateAll() if the designated constraints
// aren't met.
type AlertNotifyDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertNotifyDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertNotifyDetailMultiError) AllErrors() []error { return m }

// AlertNotifyDetailValidationError is the validation error returned by
// AlertNotifyDetail.Validate if the designated constraints aren't met.
type AlertNotifyDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertNotifyDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertNotifyDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertNotifyDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertNotifyDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertNotifyDetailValidationError) ErrorName() string {
	return "AlertNotifyDetailValidationError"
}

// Error satisfies the builtin error interface
func (e AlertNotifyDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertNotifyDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertNotifyDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertNotifyDetailValidationError{}

// Validate checks the field values on GetTypeNotifyHistogramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTypeNotifyHistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypeNotifyHistogramRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTypeNotifyHistogramRequestMultiError, or nil if none found.
func (m *GetTypeNotifyHistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypeNotifyHistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for ScopeId

	// no validation rules for Statistic

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return GetTypeNotifyHistogramRequestMultiError(errors)
	}

	return nil
}

// GetTypeNotifyHistogramRequestMultiError is an error wrapping multiple
// validation errors returned by GetTypeNotifyHistogramRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTypeNotifyHistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypeNotifyHistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypeNotifyHistogramRequestMultiError) AllErrors() []error { return m }

// GetTypeNotifyHistogramRequestValidationError is the validation error
// returned by GetTypeNotifyHistogramRequest.Validate if the designated
// constraints aren't met.
type GetTypeNotifyHistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypeNotifyHistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypeNotifyHistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypeNotifyHistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypeNotifyHistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypeNotifyHistogramRequestValidationError) ErrorName() string {
	return "GetTypeNotifyHistogramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTypeNotifyHistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypeNotifyHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypeNotifyHistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypeNotifyHistogramRequestValidationError{}

// Validate checks the field values on GetTypeNotifyHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTypeNotifyHistogramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypeNotifyHistogramResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTypeNotifyHistogramResponseMultiError, or nil if none found.
func (m *GetTypeNotifyHistogramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypeNotifyHistogramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTypeNotifyHistogramResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTypeNotifyHistogramResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTypeNotifyHistogramResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTypeNotifyHistogramResponseMultiError(errors)
	}

	return nil
}

// GetTypeNotifyHistogramResponseMultiError is an error wrapping multiple
// validation errors returned by GetTypeNotifyHistogramResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTypeNotifyHistogramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypeNotifyHistogramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypeNotifyHistogramResponseMultiError) AllErrors() []error { return m }

// GetTypeNotifyHistogramResponseValidationError is the validation error
// returned by GetTypeNotifyHistogramResponse.Validate if the designated
// constraints aren't met.
type GetTypeNotifyHistogramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypeNotifyHistogramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypeNotifyHistogramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypeNotifyHistogramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypeNotifyHistogramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypeNotifyHistogramResponseValidationError) ErrorName() string {
	return "GetTypeNotifyHistogramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTypeNotifyHistogramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypeNotifyHistogramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypeNotifyHistogramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypeNotifyHistogramResponseValidationError{}

// Validate checks the field values on TypeNotifyHistogram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TypeNotifyHistogram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeNotifyHistogram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TypeNotifyHistogramMultiError, or nil if none found.
func (m *TypeNotifyHistogram) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeNotifyHistogram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValue()))
		i := 0
		for key := range m.GetValue() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValue()[key]
			_ = val

			// no validation rules for Value[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TypeNotifyHistogramValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TypeNotifyHistogramValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TypeNotifyHistogramValidationError{
						field:  fmt.Sprintf("Value[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return TypeNotifyHistogramMultiError(errors)
	}

	return nil
}

// TypeNotifyHistogramMultiError is an error wrapping multiple validation
// errors returned by TypeNotifyHistogram.ValidateAll() if the designated
// constraints aren't met.
type TypeNotifyHistogramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeNotifyHistogramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeNotifyHistogramMultiError) AllErrors() []error { return m }

// TypeNotifyHistogramValidationError is the validation error returned by
// TypeNotifyHistogram.Validate if the designated constraints aren't met.
type TypeNotifyHistogramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeNotifyHistogramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeNotifyHistogramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeNotifyHistogramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeNotifyHistogramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeNotifyHistogramValidationError) ErrorName() string {
	return "TypeNotifyHistogramValidationError"
}

// Error satisfies the builtin error interface
func (e TypeNotifyHistogramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeNotifyHistogram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeNotifyHistogramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeNotifyHistogramValidationError{}
