// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: autotest-plan.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestPlanUpdateByHookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanUpdateByHookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanUpdateByHookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanUpdateByHookRequestMultiError, or nil if none found.
func (m *TestPlanUpdateByHookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanUpdateByHookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Action

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for Env

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestPlanUpdateByHookRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestPlanUpdateByHookRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestPlanUpdateByHookRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestPlanUpdateByHookRequestMultiError(errors)
	}

	return nil
}

// TestPlanUpdateByHookRequestMultiError is an error wrapping multiple
// validation errors returned by TestPlanUpdateByHookRequest.ValidateAll() if
// the designated constraints aren't met.
type TestPlanUpdateByHookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanUpdateByHookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanUpdateByHookRequestMultiError) AllErrors() []error { return m }

// TestPlanUpdateByHookRequestValidationError is the validation error returned
// by TestPlanUpdateByHookRequest.Validate if the designated constraints
// aren't met.
type TestPlanUpdateByHookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanUpdateByHookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanUpdateByHookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanUpdateByHookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanUpdateByHookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanUpdateByHookRequestValidationError) ErrorName() string {
	return "TestPlanUpdateByHookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanUpdateByHookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanUpdateByHookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanUpdateByHookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanUpdateByHookRequestValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	// no validation rules for ExecuteTime

	// no validation rules for PassRate

	// no validation rules for ApiTotalNum

	// no validation rules for CostTimeSec

	// no validation rules for ApiSuccessNum

	// no validation rules for ApiExecNum

	// no validation rules for PipelineYml

	// no validation rules for StepAPIType

	// no validation rules for Status

	// no validation rules for SceneID

	// no validation rules for SceneSetID

	// no validation rules for ParentID

	// no validation rules for ProjectID

	// no validation rules for CreatorID

	// no validation rules for IterationID

	// no validation rules for StepID

	// no validation rules for ExecuteRate

	// no validation rules for ExecuteDuration

	// no validation rules for TimeBegin

	// no validation rules for TimeEnd

	// no validation rules for PipelineID

	// no validation rules for ApiRefSuccessNum

	// no validation rules for ApiRefExecNum

	for idx, item := range m.GetSubContents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  fmt.Sprintf("SubContents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  fmt.Sprintf("SubContents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  fmt.Sprintf("SubContents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on TestPlanUpdateByHookResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanUpdateByHookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanUpdateByHookResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanUpdateByHookResponseMultiError, or nil if none found.
func (m *TestPlanUpdateByHookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanUpdateByHookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TestPlanUpdateByHookResponseMultiError(errors)
	}

	return nil
}

// TestPlanUpdateByHookResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanUpdateByHookResponse.ValidateAll() if
// the designated constraints aren't met.
type TestPlanUpdateByHookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanUpdateByHookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanUpdateByHookResponseMultiError) AllErrors() []error { return m }

// TestPlanUpdateByHookResponseValidationError is the validation error returned
// by TestPlanUpdateByHookResponse.Validate if the designated constraints
// aren't met.
type TestPlanUpdateByHookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanUpdateByHookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanUpdateByHookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanUpdateByHookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanUpdateByHookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanUpdateByHookResponseValidationError) ErrorName() string {
	return "TestPlanUpdateByHookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanUpdateByHookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanUpdateByHookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanUpdateByHookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanUpdateByHookResponseValidationError{}
