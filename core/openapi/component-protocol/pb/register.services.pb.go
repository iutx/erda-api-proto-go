// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: cp.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterOpenapiComponentProtocolImp cp.proto
func RegisterOpenapiComponentProtocolImp(regester transport.Register, srv OpenapiComponentProtocolServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterOpenapiComponentProtocolHandler(regester, OpenapiComponentProtocolHandler(srv), _ops.HTTP...)
	RegisterOpenapiComponentProtocolServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.openapi.component_protocol.OpenapiComponentProtocol",
	)
}

var (
	openapiComponentProtocolClientType  = reflect.TypeOf((*OpenapiComponentProtocolClient)(nil)).Elem()
	openapiComponentProtocolServerType  = reflect.TypeOf((*OpenapiComponentProtocolServer)(nil)).Elem()
	openapiComponentProtocolHandlerType = reflect.TypeOf((*OpenapiComponentProtocolHandler)(nil)).Elem()
)

// OpenapiComponentProtocolClientType .
func OpenapiComponentProtocolClientType() reflect.Type { return openapiComponentProtocolClientType }

// OpenapiComponentProtocolServerType .
func OpenapiComponentProtocolServerType() reflect.Type { return openapiComponentProtocolServerType }

// OpenapiComponentProtocolHandlerType .
func OpenapiComponentProtocolHandlerType() reflect.Type { return openapiComponentProtocolHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		openapiComponentProtocolClientType,
		// server types
		openapiComponentProtocolServerType,
		// handler types
		openapiComponentProtocolHandlerType,
	}
}
