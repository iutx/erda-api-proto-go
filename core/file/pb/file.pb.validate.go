// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: file.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UUID

	// no validation rules for DisplayName

	// no validation rules for ByteSize

	// no validation rules for DownloadURL

	// no validation rules for FileType

	// no validation rules for From

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on FilePart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilePart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilePart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilePartMultiError, or nil
// if none found.
func (m *FilePart) ValidateAll() error {
	return m.validate(true)
}

func (m *FilePart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Part

	if len(errors) > 0 {
		return FilePartMultiError(errors)
	}

	return nil
}

// FilePartMultiError is an error wrapping multiple validation errors returned
// by FilePart.ValidateAll() if the designated constraints aren't met.
type FilePartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilePartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilePartMultiError) AllErrors() []error { return m }

// FilePartValidationError is the validation error returned by
// FilePart.Validate if the designated constraints aren't met.
type FilePartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilePartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilePartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilePartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilePartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilePartValidationError) ErrorName() string { return "FilePartValidationError" }

// Error satisfies the builtin error interface
func (e FilePartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilePart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilePartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilePartValidationError{}

// Validate checks the field values on FileDownloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDownloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDownloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDownloadRequestMultiError, or nil if none found.
func (m *FileDownloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDownloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return FileDownloadRequestMultiError(errors)
	}

	return nil
}

// FileDownloadRequestMultiError is an error wrapping multiple validation
// errors returned by FileDownloadRequest.ValidateAll() if the designated
// constraints aren't met.
type FileDownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDownloadRequestMultiError) AllErrors() []error { return m }

// FileDownloadRequestValidationError is the validation error returned by
// FileDownloadRequest.Validate if the designated constraints aren't met.
type FileDownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDownloadRequestValidationError) ErrorName() string {
	return "FileDownloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileDownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDownloadRequestValidationError{}

// Validate checks the field values on FileUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadRequestMultiError, or nil if none found.
func (m *FileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileUploadRequestValidationError{
					field:  "Part",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileUploadRequestValidationError{
					field:  "Part",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileUploadRequestValidationError{
				field:  "Part",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileUploadRequestMultiError(errors)
	}

	return nil
}

// FileUploadRequestMultiError is an error wrapping multiple validation errors
// returned by FileUploadRequest.ValidateAll() if the designated constraints
// aren't met.
type FileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadRequestMultiError) AllErrors() []error { return m }

// FileUploadRequestValidationError is the validation error returned by
// FileUploadRequest.Validate if the designated constraints aren't met.
type FileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadRequestValidationError) ErrorName() string {
	return "FileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadRequestValidationError{}

// Validate checks the field values on FileUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadResponseMultiError, or nil if none found.
func (m *FileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileUploadResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileUploadResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileUploadResponseMultiError(errors)
	}

	return nil
}

// FileUploadResponseMultiError is an error wrapping multiple validation errors
// returned by FileUploadResponse.ValidateAll() if the designated constraints
// aren't met.
type FileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadResponseMultiError) AllErrors() []error { return m }

// FileUploadResponseValidationError is the validation error returned by
// FileUploadResponse.Validate if the designated constraints aren't met.
type FileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadResponseValidationError) ErrorName() string {
	return "FileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadResponseValidationError{}

// Validate checks the field values on FileDownloadFailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDownloadFailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDownloadFailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDownloadFailResponseMultiError, or nil if none found.
func (m *FileDownloadFailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDownloadFailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDownloadFailResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDownloadFailResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDownloadFailResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileDownloadFailResponseMultiError(errors)
	}

	return nil
}

// FileDownloadFailResponseMultiError is an error wrapping multiple validation
// errors returned by FileDownloadFailResponse.ValidateAll() if the designated
// constraints aren't met.
type FileDownloadFailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDownloadFailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDownloadFailResponseMultiError) AllErrors() []error { return m }

// FileDownloadFailResponseValidationError is the validation error returned by
// FileDownloadFailResponse.Validate if the designated constraints aren't met.
type FileDownloadFailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDownloadFailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDownloadFailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDownloadFailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDownloadFailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDownloadFailResponseValidationError) ErrorName() string {
	return "FileDownloadFailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileDownloadFailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDownloadFailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDownloadFailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDownloadFailResponseValidationError{}

// Validate checks the field values on FileHeadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileHeadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileHeadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileHeadRequestMultiError, or nil if none found.
func (m *FileHeadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileHeadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return FileHeadRequestMultiError(errors)
	}

	return nil
}

// FileHeadRequestMultiError is an error wrapping multiple validation errors
// returned by FileHeadRequest.ValidateAll() if the designated constraints
// aren't met.
type FileHeadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileHeadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileHeadRequestMultiError) AllErrors() []error { return m }

// FileHeadRequestValidationError is the validation error returned by
// FileHeadRequest.Validate if the designated constraints aren't met.
type FileHeadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileHeadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileHeadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileHeadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileHeadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileHeadRequestValidationError) ErrorName() string { return "FileHeadRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileHeadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileHeadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileHeadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileHeadRequestValidationError{}
