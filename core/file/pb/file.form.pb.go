// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: file.proto

package pb

import (
	base64 "encoding/base64"
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*File)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FilePart)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FileDownloadRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FileUploadRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FileUploadResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FileDownloadFailResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FileHeadRequest)(nil)

// File implement urlenc.URLValuesUnmarshaler.
func (m *File) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "UUID":
				m.UUID = vals[0]
			case "DisplayName":
				m.DisplayName = vals[0]
			case "byteSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ByteSize = val
			case "downloadURL":
				m.DownloadURL = vals[0]
			case "fileType":
			case "from":
				m.From = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "expiredAt":
				if m.ExpiredAt == nil {
					m.ExpiredAt = &timestamppb.Timestamp{}
				}
			case "expiredAt.seconds":
				if m.ExpiredAt == nil {
					m.ExpiredAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ExpiredAt.Seconds = val
			case "expiredAt.nanos":
				if m.ExpiredAt == nil {
					m.ExpiredAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ExpiredAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// FilePart implement urlenc.URLValuesUnmarshaler.
func (m *FilePart) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "part":
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Part = val
			}
		}
	}
	return nil
}

// FileDownloadRequest implement urlenc.URLValuesUnmarshaler.
func (m *FileDownloadRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "uuid":
				m.Uuid = vals[0]
			}
		}
	}
	return nil
}

// FileUploadRequest implement urlenc.URLValuesUnmarshaler.
func (m *FileUploadRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "part":
				if m.Part == nil {
					m.Part = &FilePart{}
				}
			case "part.part":
				if m.Part == nil {
					m.Part = &FilePart{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Part.Part = val
			}
		}
	}
	return nil
}

// FileUploadResponse implement urlenc.URLValuesUnmarshaler.
func (m *FileUploadResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "error":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
			case "error.code":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				m.Error.Code = vals[0]
			case "error.msg":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				m.Error.Msg = vals[0]
			case "error.ctx":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.null_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.number_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.string_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.bool_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.struct_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.list_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "data":
				if m.Data == nil {
					m.Data = &File{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &File{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.UUID":
				if m.Data == nil {
					m.Data = &File{}
				}
				m.Data.UUID = vals[0]
			case "data.DisplayName":
				if m.Data == nil {
					m.Data = &File{}
				}
				m.Data.DisplayName = vals[0]
			case "data.byteSize":
				if m.Data == nil {
					m.Data = &File{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ByteSize = val
			case "data.downloadURL":
				if m.Data == nil {
					m.Data = &File{}
				}
				m.Data.DownloadURL = vals[0]
			case "data.fileType":
				if m.Data == nil {
					m.Data = &File{}
				}
			case "data.from":
				if m.Data == nil {
					m.Data = &File{}
				}
				m.Data.From = vals[0]
			case "data.creator":
				if m.Data == nil {
					m.Data = &File{}
				}
				m.Data.Creator = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.expiredAt":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.ExpiredAt == nil {
					m.Data.ExpiredAt = &timestamppb.Timestamp{}
				}
			case "data.expiredAt.seconds":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.ExpiredAt == nil {
					m.Data.ExpiredAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ExpiredAt.Seconds = val
			case "data.expiredAt.nanos":
				if m.Data == nil {
					m.Data = &File{}
				}
				if m.Data.ExpiredAt == nil {
					m.Data.ExpiredAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.ExpiredAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// FileDownloadFailResponse implement urlenc.URLValuesUnmarshaler.
func (m *FileDownloadFailResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "error":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
			case "error.code":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				m.Error.Code = vals[0]
			case "error.msg":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				m.Error.Msg = vals[0]
			case "error.ctx":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.null_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.number_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.string_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.bool_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.struct_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.list_value":
				if m.Error == nil {
					m.Error = &pb.ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// FileHeadRequest implement urlenc.URLValuesUnmarshaler.
func (m *FileHeadRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "uuid":
				m.Uuid = vals[0]
			}
		}
	}
	return nil
}
