// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllNotifyTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllNotifyTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllNotifyTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllNotifyTemplatesRequestMultiError, or nil if none found.
func (m *GetAllNotifyTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllNotifyTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllNotifyTemplatesRequestMultiError(errors)
	}

	return nil
}

// GetAllNotifyTemplatesRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllNotifyTemplatesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllNotifyTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllNotifyTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllNotifyTemplatesRequestMultiError) AllErrors() []error { return m }

// GetAllNotifyTemplatesRequestValidationError is the validation error returned
// by GetAllNotifyTemplatesRequest.Validate if the designated constraints
// aren't met.
type GetAllNotifyTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllNotifyTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllNotifyTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllNotifyTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllNotifyTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllNotifyTemplatesRequestValidationError) ErrorName() string {
	return "GetAllNotifyTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllNotifyTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllNotifyTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllNotifyTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllNotifyTemplatesRequestValidationError{}

// Validate checks the field values on GetAllNotifyTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllNotifyTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllNotifyTemplatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllNotifyTemplatesResponseMultiError, or nil if none found.
func (m *GetAllNotifyTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllNotifyTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllNotifyTemplatesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllNotifyTemplatesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllNotifyTemplatesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllNotifyTemplatesResponseMultiError(errors)
	}

	return nil
}

// GetAllNotifyTemplatesResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllNotifyTemplatesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllNotifyTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllNotifyTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllNotifyTemplatesResponseMultiError) AllErrors() []error { return m }

// GetAllNotifyTemplatesResponseValidationError is the validation error
// returned by GetAllNotifyTemplatesResponse.Validate if the designated
// constraints aren't met.
type GetAllNotifyTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllNotifyTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllNotifyTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllNotifyTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllNotifyTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllNotifyTemplatesResponseValidationError) ErrorName() string {
	return "GetAllNotifyTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllNotifyTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllNotifyTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllNotifyTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllNotifyTemplatesResponseValidationError{}

// Validate checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModelMultiError, or nil if none found.
func (m *Model) ValidateAll() error {
	return m.validate(true)
}

func (m *Model) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBehavior()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Behavior",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Behavior",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBehavior()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "Behavior",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModelMultiError(errors)
	}

	return nil
}

// ModelMultiError is an error wrapping multiple validation errors returned by
// Model.ValidateAll() if the designated constraints aren't met.
type ModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMultiError) AllErrors() []error { return m }

// ModelValidationError is the validation error returned by Model.Validate if
// the designated constraints aren't met.
type ModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelValidationError) ErrorName() string { return "ModelValidationError" }

// Error satisfies the builtin error interface
func (e ModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Module

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Behavior with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Behavior) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Behavior with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BehaviorMultiError, or nil
// if none found.
func (m *Behavior) ValidateAll() error {
	return m.validate(true)
}

func (m *Behavior) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Group

	if len(errors) > 0 {
		return BehaviorMultiError(errors)
	}

	return nil
}

// BehaviorMultiError is an error wrapping multiple validation errors returned
// by Behavior.ValidateAll() if the designated constraints aren't met.
type BehaviorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BehaviorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BehaviorMultiError) AllErrors() []error { return m }

// BehaviorValidationError is the validation error returned by
// Behavior.Validate if the designated constraints aren't met.
type BehaviorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BehaviorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BehaviorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BehaviorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BehaviorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BehaviorValidationError) ErrorName() string { return "BehaviorValidationError" }

// Error satisfies the builtin error interface
func (e BehaviorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBehavior.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BehaviorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BehaviorValidationError{}

// Validate checks the field values on Templates with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Templates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Templates with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplatesMultiError, or nil
// if none found.
func (m *Templates) ValidateAll() error {
	return m.validate(true)
}

func (m *Templates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplatesValidationError{
					field:  "Render",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplatesValidationError{
					field:  "Render",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplatesValidationError{
				field:  "Render",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TemplatesMultiError(errors)
	}

	return nil
}

// TemplatesMultiError is an error wrapping multiple validation errors returned
// by Templates.ValidateAll() if the designated constraints aren't met.
type TemplatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplatesMultiError) AllErrors() []error { return m }

// TemplatesValidationError is the validation error returned by
// Templates.Validate if the designated constraints aren't met.
type TemplatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplatesValidationError) ErrorName() string { return "TemplatesValidationError" }

// Error satisfies the builtin error interface
func (e TemplatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplatesValidationError{}

// Validate checks the field values on Render with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Render) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Render with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RenderMultiError, or nil if none found.
func (m *Render) ValidateAll() error {
	return m.validate(true)
}

func (m *Render) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Formats

	// no validation rules for Title

	// no validation rules for Template

	if len(errors) > 0 {
		return RenderMultiError(errors)
	}

	return nil
}

// RenderMultiError is an error wrapping multiple validation errors returned by
// Render.ValidateAll() if the designated constraints aren't met.
type RenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderMultiError) AllErrors() []error { return m }

// RenderValidationError is the validation error returned by Render.Validate if
// the designated constraints aren't met.
type RenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderValidationError) ErrorName() string { return "RenderValidationError" }

// Error satisfies the builtin error interface
func (e RenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderValidationError{}

// Validate checks the field values on GetNotifyTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyTemplateRequestMultiError, or nil if none found.
func (m *GetNotifyTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return GetNotifyTemplateRequestMultiError(errors)
	}

	return nil
}

// GetNotifyTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyTemplateRequestMultiError) AllErrors() []error { return m }

// GetNotifyTemplateRequestValidationError is the validation error returned by
// GetNotifyTemplateRequest.Validate if the designated constraints aren't met.
type GetNotifyTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyTemplateRequestValidationError) ErrorName() string {
	return "GetNotifyTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyTemplateRequestValidationError{}

// Validate checks the field values on GetNotifyTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyTemplateResponseMultiError, or nil if none found.
func (m *GetNotifyTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotifyTemplateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotifyTemplateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotifyTemplateResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNotifyTemplateResponseMultiError(errors)
	}

	return nil
}

// GetNotifyTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type GetNotifyTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyTemplateResponseMultiError) AllErrors() []error { return m }

// GetNotifyTemplateResponseValidationError is the validation error returned by
// GetNotifyTemplateResponse.Validate if the designated constraints aren't met.
type GetNotifyTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyTemplateResponseValidationError) ErrorName() string {
	return "GetNotifyTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyTemplateResponseValidationError{}

// Validate checks the field values on GetNotifyRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNotifyRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNotifyResMultiError, or
// nil if none found.
func (m *GetNotifyRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetNotifyResMultiError(errors)
	}

	return nil
}

// GetNotifyResMultiError is an error wrapping multiple validation errors
// returned by GetNotifyRes.ValidateAll() if the designated constraints aren't met.
type GetNotifyResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyResMultiError) AllErrors() []error { return m }

// GetNotifyResValidationError is the validation error returned by
// GetNotifyRes.Validate if the designated constraints aren't met.
type GetNotifyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyResValidationError) ErrorName() string { return "GetNotifyResValidationError" }

// Error satisfies the builtin error interface
func (e GetNotifyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyResValidationError{}

// Validate checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyRequestMultiError, or nil if none found.
func (m *CreateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeId

	// no validation rules for Scope

	// no validation rules for NotifyName

	// no validation rules for NotifyGroupId

	// no validation rules for Attribute

	if len(errors) > 0 {
		return CreateNotifyRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyRequestMultiError) AllErrors() []error { return m }

// CreateNotifyRequestValidationError is the validation error returned by
// CreateNotifyRequest.Validate if the designated constraints aren't met.
type CreateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyRequestValidationError) ErrorName() string {
	return "CreateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyRequestValidationError{}

// Validate checks the field values on CreateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyResponseMultiError, or nil if none found.
func (m *CreateNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateNotifyResponseMultiError(errors)
	}

	return nil
}

// CreateNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyResponseMultiError) AllErrors() []error { return m }

// CreateNotifyResponseValidationError is the validation error returned by
// CreateNotifyResponse.Validate if the designated constraints aren't met.
type CreateNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyResponseValidationError) ErrorName() string {
	return "CreateNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyResponseValidationError{}

// Validate checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyRequestMultiError, or nil if none found.
func (m *DeleteNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return DeleteNotifyRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyRequestValidationError is the validation error returned by
// DeleteNotifyRequest.Validate if the designated constraints aren't met.
type DeleteNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyRequestValidationError) ErrorName() string {
	return "DeleteNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyRequestValidationError{}

// Validate checks the field values on DeleteNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyResponseMultiError, or nil if none found.
func (m *DeleteNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteNotifyResponseMultiError(errors)
	}

	return nil
}

// DeleteNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyResponseMultiError) AllErrors() []error { return m }

// DeleteNotifyResponseValidationError is the validation error returned by
// DeleteNotifyResponse.Validate if the designated constraints aren't met.
type DeleteNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyResponseValidationError) ErrorName() string {
	return "DeleteNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyResponseValidationError{}

// Validate checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyRequestMultiError, or nil if none found.
func (m *UpdateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for NotifyGroupId

	// no validation rules for Attribute

	if len(errors) > 0 {
		return UpdateNotifyRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyRequestValidationError is the validation error returned by
// UpdateNotifyRequest.Validate if the designated constraints aren't met.
type UpdateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyRequestValidationError) ErrorName() string {
	return "UpdateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyRequestValidationError{}

// Validate checks the field values on UpdateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyResponseMultiError, or nil if none found.
func (m *UpdateNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateNotifyResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyResponseValidationError is the validation error returned by
// UpdateNotifyResponse.Validate if the designated constraints aren't met.
type UpdateNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyResponseValidationError) ErrorName() string {
	return "UpdateNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyResponseValidationError{}

// Validate checks the field values on GetUserNotifyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNotifyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNotifyListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNotifyListRequestMultiError, or nil if none found.
func (m *GetUserNotifyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNotifyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return GetUserNotifyListRequestMultiError(errors)
	}

	return nil
}

// GetUserNotifyListRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserNotifyListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserNotifyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNotifyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNotifyListRequestMultiError) AllErrors() []error { return m }

// GetUserNotifyListRequestValidationError is the validation error returned by
// GetUserNotifyListRequest.Validate if the designated constraints aren't met.
type GetUserNotifyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNotifyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNotifyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNotifyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNotifyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNotifyListRequestValidationError) ErrorName() string {
	return "GetUserNotifyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNotifyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNotifyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNotifyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNotifyListRequestValidationError{}

// Validate checks the field values on GetUserNotifyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNotifyListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNotifyListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNotifyListResponseMultiError, or nil if none found.
func (m *GetUserNotifyListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNotifyListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserNotifyListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserNotifyListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserNotifyListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserNotifyListResponseMultiError(errors)
	}

	return nil
}

// GetUserNotifyListResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserNotifyListResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUserNotifyListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNotifyListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNotifyListResponseMultiError) AllErrors() []error { return m }

// GetUserNotifyListResponseValidationError is the validation error returned by
// GetUserNotifyListResponse.Validate if the designated constraints aren't met.
type GetUserNotifyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNotifyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNotifyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNotifyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNotifyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNotifyListResponseValidationError) ErrorName() string {
	return "GetUserNotifyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNotifyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNotifyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNotifyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNotifyListResponseValidationError{}

// Validate checks the field values on NotifyRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyResMultiError, or nil
// if none found.
func (m *NotifyRes) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyResValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyResValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyResValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for NotifyId

	// no validation rules for NotifyName

	// no validation rules for Target

	for idx, item := range m.GetGroupInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyResValidationError{
						field:  fmt.Sprintf("GroupInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyResValidationError{
						field:  fmt.Sprintf("GroupInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyResValidationError{
					field:  fmt.Sprintf("GroupInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Enable

	if len(errors) > 0 {
		return NotifyResMultiError(errors)
	}

	return nil
}

// NotifyResMultiError is an error wrapping multiple validation errors returned
// by NotifyRes.ValidateAll() if the designated constraints aren't met.
type NotifyResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyResMultiError) AllErrors() []error { return m }

// NotifyResValidationError is the validation error returned by
// NotifyRes.Validate if the designated constraints aren't met.
type NotifyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyResValidationError) ErrorName() string { return "NotifyResValidationError" }

// Error satisfies the builtin error interface
func (e NotifyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyResValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyTargetValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on TargetValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TargetValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TargetValueMultiError, or
// nil if none found.
func (m *TargetValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Secret

	if len(errors) > 0 {
		return TargetValueMultiError(errors)
	}

	return nil
}

// TargetValueMultiError is an error wrapping multiple validation errors
// returned by TargetValue.ValidateAll() if the designated constraints aren't met.
type TargetValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetValueMultiError) AllErrors() []error { return m }

// TargetValueValidationError is the validation error returned by
// TargetValue.Validate if the designated constraints aren't met.
type TargetValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValueValidationError) ErrorName() string { return "TargetValueValidationError" }

// Error satisfies the builtin error interface
func (e TargetValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValueValidationError{}

// Validate checks the field values on NotifyEnableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyEnableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyEnableRequestMultiError, or nil if none found.
func (m *NotifyEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ScopeId

	// no validation rules for Scope

	if len(errors) > 0 {
		return NotifyEnableRequestMultiError(errors)
	}

	return nil
}

// NotifyEnableRequestMultiError is an error wrapping multiple validation
// errors returned by NotifyEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type NotifyEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyEnableRequestMultiError) AllErrors() []error { return m }

// NotifyEnableRequestValidationError is the validation error returned by
// NotifyEnableRequest.Validate if the designated constraints aren't met.
type NotifyEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyEnableRequestValidationError) ErrorName() string {
	return "NotifyEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyEnableRequestValidationError{}

// Validate checks the field values on NotifyEnableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyEnableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyEnableResponseMultiError, or nil if none found.
func (m *NotifyEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyEnableResponseMultiError(errors)
	}

	return nil
}

// NotifyEnableResponseMultiError is an error wrapping multiple validation
// errors returned by NotifyEnableResponse.ValidateAll() if the designated
// constraints aren't met.
type NotifyEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyEnableResponseMultiError) AllErrors() []error { return m }

// NotifyEnableResponseValidationError is the validation error returned by
// NotifyEnableResponse.Validate if the designated constraints aren't met.
type NotifyEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyEnableResponseValidationError) ErrorName() string {
	return "NotifyEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyEnableResponseValidationError{}

// Validate checks the field values on CreateUserDefineNotifyTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUserDefineNotifyTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDefineNotifyTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserDefineNotifyTemplateRequestMultiError, or nil if none found.
func (m *CreateUserDefineNotifyTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDefineNotifyTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Formats

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return CreateUserDefineNotifyTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateUserDefineNotifyTemplateRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateUserDefineNotifyTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDefineNotifyTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDefineNotifyTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDefineNotifyTemplateRequestMultiError) AllErrors() []error { return m }

// CreateUserDefineNotifyTemplateRequestValidationError is the validation error
// returned by CreateUserDefineNotifyTemplateRequest.Validate if the
// designated constraints aren't met.
type CreateUserDefineNotifyTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDefineNotifyTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDefineNotifyTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDefineNotifyTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDefineNotifyTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDefineNotifyTemplateRequestValidationError) ErrorName() string {
	return "CreateUserDefineNotifyTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDefineNotifyTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDefineNotifyTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDefineNotifyTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDefineNotifyTemplateRequestValidationError{}

// Validate checks the field values on CreateUserDefineNotifyTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUserDefineNotifyTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateUserDefineNotifyTemplateResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateUserDefineNotifyTemplateResponseMultiError, or nil if none found.
func (m *CreateUserDefineNotifyTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDefineNotifyTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateUserDefineNotifyTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateUserDefineNotifyTemplateResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateUserDefineNotifyTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDefineNotifyTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDefineNotifyTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDefineNotifyTemplateResponseMultiError) AllErrors() []error { return m }

// CreateUserDefineNotifyTemplateResponseValidationError is the validation
// error returned by CreateUserDefineNotifyTemplateResponse.Validate if the
// designated constraints aren't met.
type CreateUserDefineNotifyTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDefineNotifyTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDefineNotifyTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDefineNotifyTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDefineNotifyTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDefineNotifyTemplateResponseValidationError) ErrorName() string {
	return "CreateUserDefineNotifyTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDefineNotifyTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDefineNotifyTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDefineNotifyTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDefineNotifyTemplateResponseValidationError{}

// Validate checks the field values on GetNotifyDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyDetailRequestMultiError, or nil if none found.
func (m *GetNotifyDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNotifyDetailRequestMultiError(errors)
	}

	return nil
}

// GetNotifyDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotifyDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyDetailRequestMultiError) AllErrors() []error { return m }

// GetNotifyDetailRequestValidationError is the validation error returned by
// GetNotifyDetailRequest.Validate if the designated constraints aren't met.
type GetNotifyDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyDetailRequestValidationError) ErrorName() string {
	return "GetNotifyDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyDetailRequestValidationError{}

// Validate checks the field values on GetNotifyDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyDetailResponseMultiError, or nil if none found.
func (m *GetNotifyDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyDetailResponseMultiError(errors)
	}

	return nil
}

// GetNotifyDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotifyDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotifyDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyDetailResponseMultiError) AllErrors() []error { return m }

// GetNotifyDetailResponseValidationError is the validation error returned by
// GetNotifyDetailResponse.Validate if the designated constraints aren't met.
type GetNotifyDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyDetailResponseValidationError) ErrorName() string {
	return "GetNotifyDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotifyDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyDetailResponseValidationError{}

// Validate checks the field values on NotifyDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyDetailResponseMultiError, or nil if none found.
func (m *NotifyDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotifyId

	// no validation rules for NotifyName

	// no validation rules for Target

	// no validation rules for GroupType

	if len(errors) > 0 {
		return NotifyDetailResponseMultiError(errors)
	}

	return nil
}

// NotifyDetailResponseMultiError is an error wrapping multiple validation
// errors returned by NotifyDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type NotifyDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyDetailResponseMultiError) AllErrors() []error { return m }

// NotifyDetailResponseValidationError is the validation error returned by
// NotifyDetailResponse.Validate if the designated constraints aren't met.
type NotifyDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyDetailResponseValidationError) ErrorName() string {
	return "NotifyDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyDetailResponseValidationError{}

// Validate checks the field values on GetAllGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllGroupsRequestMultiError, or nil if none found.
func (m *GetAllGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return GetAllGroupsRequestMultiError(errors)
	}

	return nil
}

// GetAllGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllGroupsRequestMultiError) AllErrors() []error { return m }

// GetAllGroupsRequestValidationError is the validation error returned by
// GetAllGroupsRequest.Validate if the designated constraints aren't met.
type GetAllGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllGroupsRequestValidationError) ErrorName() string {
	return "GetAllGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllGroupsRequestValidationError{}

// Validate checks the field values on GetAllGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllGroupsResponseMultiError, or nil if none found.
func (m *GetAllGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllGroupsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllGroupsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllGroupsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllGroupsResponseMultiError(errors)
	}

	return nil
}

// GetAllGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllGroupsResponseMultiError) AllErrors() []error { return m }

// GetAllGroupsResponseValidationError is the validation error returned by
// GetAllGroupsResponse.Validate if the designated constraints aren't met.
type GetAllGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllGroupsResponseValidationError) ErrorName() string {
	return "GetAllGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllGroupsResponseValidationError{}

// Validate checks the field values on GetAllGroupData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllGroupData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllGroupData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllGroupDataMultiError, or nil if none found.
func (m *GetAllGroupData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllGroupData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Type

	if len(errors) > 0 {
		return GetAllGroupDataMultiError(errors)
	}

	return nil
}

// GetAllGroupDataMultiError is an error wrapping multiple validation errors
// returned by GetAllGroupData.ValidateAll() if the designated constraints
// aren't met.
type GetAllGroupDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllGroupDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllGroupDataMultiError) AllErrors() []error { return m }

// GetAllGroupDataValidationError is the validation error returned by
// GetAllGroupData.Validate if the designated constraints aren't met.
type GetAllGroupDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllGroupDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllGroupDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllGroupDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllGroupDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllGroupDataValidationError) ErrorName() string { return "GetAllGroupDataValidationError" }

// Error satisfies the builtin error interface
func (e GetAllGroupDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllGroupData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllGroupDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllGroupDataValidationError{}
