// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: extension.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExtensionSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionSearchRequestMultiError, or nil if none found.
func (m *ExtensionSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for YamlFormat

	if len(errors) > 0 {
		return ExtensionSearchRequestMultiError(errors)
	}

	return nil
}

// ExtensionSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ExtensionSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type ExtensionSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionSearchRequestMultiError) AllErrors() []error { return m }

// ExtensionSearchRequestValidationError is the validation error returned by
// ExtensionSearchRequest.Validate if the designated constraints aren't met.
type ExtensionSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionSearchRequestValidationError) ErrorName() string {
	return "ExtensionSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionSearchRequestValidationError{}

// Validate checks the field values on ExtensionSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionSearchResponseMultiError, or nil if none found.
func (m *ExtensionSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExtensionSearchResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExtensionSearchResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExtensionSearchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ExtensionSearchResponseMultiError(errors)
	}

	return nil
}

// ExtensionSearchResponseMultiError is an error wrapping multiple validation
// errors returned by ExtensionSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type ExtensionSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionSearchResponseMultiError) AllErrors() []error { return m }

// ExtensionSearchResponseValidationError is the validation error returned by
// ExtensionSearchResponse.Validate if the designated constraints aren't met.
type ExtensionSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionSearchResponseValidationError) ErrorName() string {
	return "ExtensionSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionSearchResponseValidationError{}

// Validate checks the field values on ExtensionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionCreateRequestMultiError, or nil if none found.
func (m *ExtensionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Category

	// no validation rules for LogoUrl

	// no validation rules for Public

	// no validation rules for Labels

	if len(errors) > 0 {
		return ExtensionCreateRequestMultiError(errors)
	}

	return nil
}

// ExtensionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ExtensionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExtensionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionCreateRequestMultiError) AllErrors() []error { return m }

// ExtensionCreateRequestValidationError is the validation error returned by
// ExtensionCreateRequest.Validate if the designated constraints aren't met.
type ExtensionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionCreateRequestValidationError) ErrorName() string {
	return "ExtensionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionCreateRequestValidationError{}

// Validate checks the field values on ExtensionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionCreateResponseMultiError, or nil if none found.
func (m *ExtensionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtensionCreateResponseMultiError(errors)
	}

	return nil
}

// ExtensionCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ExtensionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ExtensionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionCreateResponseMultiError) AllErrors() []error { return m }

// ExtensionCreateResponseValidationError is the validation error returned by
// ExtensionCreateResponse.Validate if the designated constraints aren't met.
type ExtensionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionCreateResponseValidationError) ErrorName() string {
	return "ExtensionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionCreateResponseValidationError{}

// Validate checks the field values on QueryExtensionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExtensionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExtensionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExtensionsRequestMultiError, or nil if none found.
func (m *QueryExtensionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExtensionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	// no validation rules for Type

	// no validation rules for Labels

	// no validation rules for Menu

	if len(errors) > 0 {
		return QueryExtensionsRequestMultiError(errors)
	}

	return nil
}

// QueryExtensionsRequestMultiError is an error wrapping multiple validation
// errors returned by QueryExtensionsRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryExtensionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExtensionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExtensionsRequestMultiError) AllErrors() []error { return m }

// QueryExtensionsRequestValidationError is the validation error returned by
// QueryExtensionsRequest.Validate if the designated constraints aren't met.
type QueryExtensionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExtensionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExtensionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExtensionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExtensionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExtensionsRequestValidationError) ErrorName() string {
	return "QueryExtensionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExtensionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExtensionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExtensionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExtensionsRequestValidationError{}

// Validate checks the field values on QueryExtensionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExtensionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExtensionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExtensionsResponseMultiError, or nil if none found.
func (m *QueryExtensionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExtensionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryExtensionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryExtensionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryExtensionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryExtensionsResponseMultiError(errors)
	}

	return nil
}

// QueryExtensionsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryExtensionsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryExtensionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExtensionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExtensionsResponseMultiError) AllErrors() []error { return m }

// QueryExtensionsResponseValidationError is the validation error returned by
// QueryExtensionsResponse.Validate if the designated constraints aren't met.
type QueryExtensionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExtensionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExtensionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExtensionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExtensionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExtensionsResponseValidationError) ErrorName() string {
	return "QueryExtensionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExtensionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExtensionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExtensionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExtensionsResponseValidationError{}

// Validate checks the field values on QueryExtensionsMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExtensionsMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExtensionsMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExtensionsMenuRequestMultiError, or nil if none found.
func (m *QueryExtensionsMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExtensionsMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	// no validation rules for Type

	// no validation rules for Labels

	if len(errors) > 0 {
		return QueryExtensionsMenuRequestMultiError(errors)
	}

	return nil
}

// QueryExtensionsMenuRequestMultiError is an error wrapping multiple
// validation errors returned by QueryExtensionsMenuRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryExtensionsMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExtensionsMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExtensionsMenuRequestMultiError) AllErrors() []error { return m }

// QueryExtensionsMenuRequestValidationError is the validation error returned
// by QueryExtensionsMenuRequest.Validate if the designated constraints aren't met.
type QueryExtensionsMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExtensionsMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExtensionsMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExtensionsMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExtensionsMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExtensionsMenuRequestValidationError) ErrorName() string {
	return "QueryExtensionsMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExtensionsMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExtensionsMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExtensionsMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExtensionsMenuRequestValidationError{}

// Validate checks the field values on QueryExtensionsMenuResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryExtensionsMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExtensionsMenuResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryExtensionsMenuResponseMultiError, or nil if none found.
func (m *QueryExtensionsMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExtensionsMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QueryExtensionsMenuResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QueryExtensionsMenuResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QueryExtensionsMenuResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return QueryExtensionsMenuResponseMultiError(errors)
	}

	return nil
}

// QueryExtensionsMenuResponseMultiError is an error wrapping multiple
// validation errors returned by QueryExtensionsMenuResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryExtensionsMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExtensionsMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExtensionsMenuResponseMultiError) AllErrors() []error { return m }

// QueryExtensionsMenuResponseValidationError is the validation error returned
// by QueryExtensionsMenuResponse.Validate if the designated constraints
// aren't met.
type QueryExtensionsMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExtensionsMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExtensionsMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExtensionsMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExtensionsMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExtensionsMenuResponseValidationError) ErrorName() string {
	return "QueryExtensionsMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryExtensionsMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExtensionsMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExtensionsMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExtensionsMenuResponseValidationError{}

// Validate checks the field values on Spec with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Spec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Spec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpecMultiError, or nil if none found.
func (m *Spec) ValidateAll() error {
	return m.validate(true)
}

func (m *Spec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Version

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for Desc

	// no validation rules for Labels

	// no validation rules for LogoUrl

	// no validation rules for Public

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return SpecMultiError(errors)
	}

	return nil
}

// SpecMultiError is an error wrapping multiple validation errors returned by
// Spec.ValidateAll() if the designated constraints aren't met.
type SpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecMultiError) AllErrors() []error { return m }

// SpecValidationError is the validation error returned by Spec.Validate if the
// designated constraints aren't met.
type SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecValidationError) ErrorName() string { return "SpecValidationError" }

// Error satisfies the builtin error interface
func (e SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecValidationError{}

// Validate checks the field values on ExtensionVersionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExtensionVersionCreateRequestMultiError, or nil if none found.
func (m *ExtensionVersionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for SpecYml

	// no validation rules for DiceYml

	// no validation rules for SwaggerYml

	// no validation rules for Readme

	// no validation rules for Public

	// no validation rules for ForceUpdate

	// no validation rules for All

	// no validation rules for IsDefault

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtensionVersionCreateRequestValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtensionVersionCreateRequestValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtensionVersionCreateRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtensionVersionCreateRequestMultiError(errors)
	}

	return nil
}

// ExtensionVersionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type ExtensionVersionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionCreateRequestMultiError) AllErrors() []error { return m }

// ExtensionVersionCreateRequestValidationError is the validation error
// returned by ExtensionVersionCreateRequest.Validate if the designated
// constraints aren't met.
type ExtensionVersionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionCreateRequestValidationError) ErrorName() string {
	return "ExtensionVersionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionCreateRequestValidationError{}

// Validate checks the field values on ExtensionVersionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExtensionVersionCreateResponseMultiError, or nil if none found.
func (m *ExtensionVersionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtensionVersionCreateResponseMultiError(errors)
	}

	return nil
}

// ExtensionVersionCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type ExtensionVersionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionCreateResponseMultiError) AllErrors() []error { return m }

// ExtensionVersionCreateResponseValidationError is the validation error
// returned by ExtensionVersionCreateResponse.Validate if the designated
// constraints aren't met.
type ExtensionVersionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionCreateResponseValidationError) ErrorName() string {
	return "ExtensionVersionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionCreateResponseValidationError{}

// Validate checks the field values on GetExtensionVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExtensionVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExtensionVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExtensionVersionRequestMultiError, or nil if none found.
func (m *GetExtensionVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExtensionVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for YamlFormat

	if len(errors) > 0 {
		return GetExtensionVersionRequestMultiError(errors)
	}

	return nil
}

// GetExtensionVersionRequestMultiError is an error wrapping multiple
// validation errors returned by GetExtensionVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetExtensionVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExtensionVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExtensionVersionRequestMultiError) AllErrors() []error { return m }

// GetExtensionVersionRequestValidationError is the validation error returned
// by GetExtensionVersionRequest.Validate if the designated constraints aren't met.
type GetExtensionVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExtensionVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExtensionVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExtensionVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExtensionVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExtensionVersionRequestValidationError) ErrorName() string {
	return "GetExtensionVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExtensionVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExtensionVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExtensionVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExtensionVersionRequestValidationError{}

// Validate checks the field values on GetExtensionVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExtensionVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExtensionVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExtensionVersionResponseMultiError, or nil if none found.
func (m *GetExtensionVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExtensionVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExtensionVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExtensionVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExtensionVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExtensionVersionResponseMultiError(errors)
	}

	return nil
}

// GetExtensionVersionResponseMultiError is an error wrapping multiple
// validation errors returned by GetExtensionVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type GetExtensionVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExtensionVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExtensionVersionResponseMultiError) AllErrors() []error { return m }

// GetExtensionVersionResponseValidationError is the validation error returned
// by GetExtensionVersionResponse.Validate if the designated constraints
// aren't met.
type GetExtensionVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExtensionVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExtensionVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExtensionVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExtensionVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExtensionVersionResponseValidationError) ErrorName() string {
	return "GetExtensionVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExtensionVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExtensionVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExtensionVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExtensionVersionResponseValidationError{}

// Validate checks the field values on ExtensionQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionQueryRequestMultiError, or nil if none found.
func (m *ExtensionQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	// no validation rules for Type

	// no validation rules for Labels

	if len(errors) > 0 {
		return ExtensionQueryRequestMultiError(errors)
	}

	return nil
}

// ExtensionQueryRequestMultiError is an error wrapping multiple validation
// errors returned by ExtensionQueryRequest.ValidateAll() if the designated
// constraints aren't met.
type ExtensionQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionQueryRequestMultiError) AllErrors() []error { return m }

// ExtensionQueryRequestValidationError is the validation error returned by
// ExtensionQueryRequest.Validate if the designated constraints aren't met.
type ExtensionQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionQueryRequestValidationError) ErrorName() string {
	return "ExtensionQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionQueryRequestValidationError{}

// Validate checks the field values on ExtensionQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionQueryResponseMultiError, or nil if none found.
func (m *ExtensionQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtensionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtensionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtensionQueryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtensionQueryResponseMultiError(errors)
	}

	return nil
}

// ExtensionQueryResponseMultiError is an error wrapping multiple validation
// errors returned by ExtensionQueryResponse.ValidateAll() if the designated
// constraints aren't met.
type ExtensionQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionQueryResponseMultiError) AllErrors() []error { return m }

// ExtensionQueryResponseValidationError is the validation error returned by
// ExtensionQueryResponse.Validate if the designated constraints aren't met.
type ExtensionQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionQueryResponseValidationError) ErrorName() string {
	return "ExtensionQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionQueryResponseValidationError{}

// Validate checks the field values on ExtensionVersionGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionVersionGetRequestMultiError, or nil if none found.
func (m *ExtensionVersionGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for YamlFormat

	if len(errors) > 0 {
		return ExtensionVersionGetRequestMultiError(errors)
	}

	return nil
}

// ExtensionVersionGetRequestMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionGetRequest.ValidateAll() if
// the designated constraints aren't met.
type ExtensionVersionGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionGetRequestMultiError) AllErrors() []error { return m }

// ExtensionVersionGetRequestValidationError is the validation error returned
// by ExtensionVersionGetRequest.Validate if the designated constraints aren't met.
type ExtensionVersionGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionGetRequestValidationError) ErrorName() string {
	return "ExtensionVersionGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionGetRequestValidationError{}

// Validate checks the field values on ExtensionVersionQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionVersionQueryRequestMultiError, or nil if none found.
func (m *ExtensionVersionQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for YamlFormat

	// no validation rules for All

	// no validation rules for OrderByVersionDesc

	if len(errors) > 0 {
		return ExtensionVersionQueryRequestMultiError(errors)
	}

	return nil
}

// ExtensionVersionQueryRequestMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionQueryRequest.ValidateAll() if
// the designated constraints aren't met.
type ExtensionVersionQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionQueryRequestMultiError) AllErrors() []error { return m }

// ExtensionVersionQueryRequestValidationError is the validation error returned
// by ExtensionVersionQueryRequest.Validate if the designated constraints
// aren't met.
type ExtensionVersionQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionQueryRequestValidationError) ErrorName() string {
	return "ExtensionVersionQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionQueryRequestValidationError{}

// Validate checks the field values on ExtensionVersionGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionVersionGetResponseMultiError, or nil if none found.
func (m *ExtensionVersionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtensionVersionGetResponseMultiError(errors)
	}

	return nil
}

// ExtensionVersionGetResponseMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionGetResponse.ValidateAll() if
// the designated constraints aren't met.
type ExtensionVersionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionGetResponseMultiError) AllErrors() []error { return m }

// ExtensionVersionGetResponseValidationError is the validation error returned
// by ExtensionVersionGetResponse.Validate if the designated constraints
// aren't met.
type ExtensionVersionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionGetResponseValidationError) ErrorName() string {
	return "ExtensionVersionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionGetResponseValidationError{}

// Validate checks the field values on ExtensionVersionQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersionQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersionQueryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExtensionVersionQueryResponseMultiError, or nil if none found.
func (m *ExtensionVersionQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersionQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtensionVersionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtensionVersionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtensionVersionQueryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtensionVersionQueryResponseMultiError(errors)
	}

	return nil
}

// ExtensionVersionQueryResponseMultiError is an error wrapping multiple
// validation errors returned by ExtensionVersionQueryResponse.ValidateAll()
// if the designated constraints aren't met.
type ExtensionVersionQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionQueryResponseMultiError) AllErrors() []error { return m }

// ExtensionVersionQueryResponseValidationError is the validation error
// returned by ExtensionVersionQueryResponse.Validate if the designated
// constraints aren't met.
type ExtensionVersionQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionQueryResponseValidationError) ErrorName() string {
	return "ExtensionVersionQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionVersionQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersionQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionQueryResponseValidationError{}

// Validate checks the field values on ExtensionMenu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtensionMenu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionMenu with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtensionMenuMultiError, or
// nil if none found.
func (m *ExtensionMenu) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionMenu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtensionMenuValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtensionMenuValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtensionMenuValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtensionMenuMultiError(errors)
	}

	return nil
}

// ExtensionMenuMultiError is an error wrapping multiple validation errors
// returned by ExtensionMenu.ValidateAll() if the designated constraints
// aren't met.
type ExtensionMenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionMenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionMenuMultiError) AllErrors() []error { return m }

// ExtensionMenuValidationError is the validation error returned by
// ExtensionMenu.Validate if the designated constraints aren't met.
type ExtensionMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionMenuValidationError) ErrorName() string { return "ExtensionMenuValidationError" }

// Error satisfies the builtin error interface
func (e ExtensionMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionMenuValidationError{}

// Validate checks the field values on Extension with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extension with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtensionMultiError, or nil
// if none found.
func (m *Extension) ValidateAll() error {
	return m.validate(true)
}

func (m *Extension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for DisplayName

	// no validation rules for Category

	// no validation rules for LogoUrl

	// no validation rules for Public

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtensionMultiError(errors)
	}

	return nil
}

// ExtensionMultiError is an error wrapping multiple validation errors returned
// by Extension.ValidateAll() if the designated constraints aren't met.
type ExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionMultiError) AllErrors() []error { return m }

// ExtensionValidationError is the validation error returned by
// Extension.Validate if the designated constraints aren't met.
type ExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionValidationError) ErrorName() string { return "ExtensionValidationError" }

// Error satisfies the builtin error interface
func (e ExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionValidationError{}

// Validate checks the field values on ExtensionVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExtensionVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionVersionMultiError, or nil if none found.
func (m *ExtensionVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Dice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Dice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionValidationError{
				field:  "Dice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSwagger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Swagger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "Swagger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSwagger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionValidationError{
				field:  "Swagger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Readme

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionVersionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	// no validation rules for Public

	if len(errors) > 0 {
		return ExtensionVersionMultiError(errors)
	}

	return nil
}

// ExtensionVersionMultiError is an error wrapping multiple validation errors
// returned by ExtensionVersion.ValidateAll() if the designated constraints
// aren't met.
type ExtensionVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionVersionMultiError) AllErrors() []error { return m }

// ExtensionVersionValidationError is the validation error returned by
// ExtensionVersion.Validate if the designated constraints aren't met.
type ExtensionVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionVersionValidationError) ErrorName() string { return "ExtensionVersionValidationError" }

// Error satisfies the builtin error interface
func (e ExtensionVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionVersionValidationError{}
