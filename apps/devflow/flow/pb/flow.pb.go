// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: flow.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	pb "github.com/erda-project/erda-proto-go/openapiv1/gittar/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueRelationExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID       uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	RepoMergeID uint64 `protobuf:"varint,2,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
}

func (x *IssueRelationExtra) Reset() {
	*x = IssueRelationExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueRelationExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueRelationExtra) ProtoMessage() {}

func (x *IssueRelationExtra) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueRelationExtra.ProtoReflect.Descriptor instead.
func (*IssueRelationExtra) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

func (x *IssueRelationExtra) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *IssueRelationExtra) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

type DevFlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoMergeID          uint64               `protobuf:"varint,1,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
	AppID                uint64               `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	TargetBranch         string               `protobuf:"bytes,3,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	SourceBranch         string               `protobuf:"bytes,4,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	IsJoinTempBranch     bool                 `protobuf:"varint,5,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
	JoinTempBranchStatus string               `protobuf:"bytes,6,opt,name=joinTempBranchStatus,proto3" json:"joinTempBranchStatus,omitempty"`
	TempBranch           string               `protobuf:"bytes,7,opt,name=tempBranch,proto3" json:"tempBranch,omitempty"`
	IssueID              uint64               `protobuf:"varint,8,opt,name=issueID,proto3" json:"issueID,omitempty"`
	MergeID              uint64               `protobuf:"varint,9,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
	AppName              string               `protobuf:"bytes,10,opt,name=appName,proto3" json:"appName,omitempty"`
	Commit               *Commit              `protobuf:"bytes,11,opt,name=commit,proto3" json:"commit,omitempty"`
	BaseCommit           *Commit              `protobuf:"bytes,12,opt,name=baseCommit,proto3" json:"baseCommit,omitempty"`
	CanJoin              bool                 `protobuf:"varint,13,opt,name=canJoin,proto3" json:"canJoin,omitempty"`
	MergeRequestInfo     *pb.MergeRequestInfo `protobuf:"bytes,14,opt,name=mergeRequestInfo,proto3" json:"mergeRequestInfo,omitempty"`
}

func (x *DevFlowNode) Reset() {
	*x = DevFlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlowNode) ProtoMessage() {}

func (x *DevFlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlowNode.ProtoReflect.Descriptor instead.
func (*DevFlowNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{1}
}

func (x *DevFlowNode) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

func (x *DevFlowNode) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *DevFlowNode) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *DevFlowNode) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *DevFlowNode) GetIsJoinTempBranch() bool {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return false
}

func (x *DevFlowNode) GetJoinTempBranchStatus() string {
	if x != nil {
		return x.JoinTempBranchStatus
	}
	return ""
}

func (x *DevFlowNode) GetTempBranch() string {
	if x != nil {
		return x.TempBranch
	}
	return ""
}

func (x *DevFlowNode) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *DevFlowNode) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

func (x *DevFlowNode) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DevFlowNode) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *DevFlowNode) GetBaseCommit() *Commit {
	if x != nil {
		return x.BaseCommit
	}
	return nil
}

func (x *DevFlowNode) GetCanJoin() bool {
	if x != nil {
		return x.CanJoin
	}
	return false
}

func (x *DevFlowNode) GetMergeRequestInfo() *pb.MergeRequestInfo {
	if x != nil {
		return x.MergeRequestInfo
	}
	return nil
}

// CreateFlow
type CreateFlowNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID       uint64 `protobuf:"varint,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	AppID         uint64 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	FlowRuleName  string `protobuf:"bytes,3,opt,name=flowRuleName,proto3" json:"flowRuleName,omitempty"`
	CurrentBranch string `protobuf:"bytes,4,opt,name=currentBranch,proto3" json:"currentBranch,omitempty"`
}

func (x *CreateFlowNodeRequest) Reset() {
	*x = CreateFlowNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowNodeRequest) ProtoMessage() {}

func (x *CreateFlowNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowNodeRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFlowNodeRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *CreateFlowNodeRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreateFlowNodeRequest) GetFlowRuleName() string {
	if x != nil {
		return x.FlowRuleName
	}
	return ""
}

func (x *CreateFlowNodeRequest) GetCurrentBranch() string {
	if x != nil {
		return x.CurrentBranch
	}
	return ""
}

type CreateFlowNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DevFlow `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateFlowNodeResponse) Reset() {
	*x = CreateFlowNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowNodeResponse) ProtoMessage() {}

func (x *CreateFlowNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowNodeResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFlowNodeResponse) GetData() *DevFlow {
	if x != nil {
		return x.Data
	}
	return nil
}

type DevFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	OrgID                uint64                 `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName              string                 `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	Creator              string                 `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Branch               string                 `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	IssueID              uint64                 `protobuf:"varint,6,opt,name=issueID,proto3" json:"issueID,omitempty"`
	FlowRuleName         string                 `protobuf:"bytes,7,opt,name=flowRuleName,proto3" json:"flowRuleName,omitempty"`
	AppID                uint64                 `protobuf:"varint,8,opt,name=appID,proto3" json:"appID,omitempty"`
	AppName              string                 `protobuf:"bytes,9,opt,name=appName,proto3" json:"appName,omitempty"`
	JoinTempBranchStatus string                 `protobuf:"bytes,10,opt,name=joinTempBranchStatus,proto3" json:"joinTempBranchStatus,omitempty"`
	IsJoinTempBranch     bool                   `protobuf:"varint,11,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *DevFlow) Reset() {
	*x = DevFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlow) ProtoMessage() {}

func (x *DevFlow) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlow.ProtoReflect.Descriptor instead.
func (*DevFlow) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{4}
}

func (x *DevFlow) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DevFlow) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *DevFlow) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *DevFlow) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *DevFlow) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *DevFlow) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *DevFlow) GetFlowRuleName() string {
	if x != nil {
		return x.FlowRuleName
	}
	return ""
}

func (x *DevFlow) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *DevFlow) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DevFlow) GetJoinTempBranchStatus() string {
	if x != nil {
		return x.JoinTempBranchStatus
	}
	return ""
}

func (x *DevFlow) GetIsJoinTempBranch() bool {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return false
}

func (x *DevFlow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DevFlow) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type OperationMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevFlowID string                `protobuf:"bytes,1,opt,name=devFlowID,proto3" json:"devFlowID,omitempty"`
	Enable    *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *OperationMergeRequest) Reset() {
	*x = OperationMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMergeRequest) ProtoMessage() {}

func (x *OperationMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMergeRequest.ProtoReflect.Descriptor instead.
func (*OperationMergeRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{5}
}

func (x *OperationMergeRequest) GetDevFlowID() string {
	if x != nil {
		return x.DevFlowID
	}
	return ""
}

func (x *OperationMergeRequest) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type OperationMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationMergeResponse) Reset() {
	*x = OperationMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMergeResponse) ProtoMessage() {}

func (x *OperationMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMergeResponse.ProtoReflect.Descriptor instead.
func (*OperationMergeResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{6}
}

// DeleteFlowNode
type DeleteFlowNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevFlowID    string `protobuf:"bytes,1,opt,name=devFlowID,proto3" json:"devFlowID,omitempty"`
	DeleteBranch bool   `protobuf:"varint,2,opt,name=deleteBranch,proto3" json:"deleteBranch,omitempty"`
}

func (x *DeleteFlowNodeRequest) Reset() {
	*x = DeleteFlowNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowNodeRequest) ProtoMessage() {}

func (x *DeleteFlowNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowNodeRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFlowNodeRequest) GetDevFlowID() string {
	if x != nil {
		return x.DevFlowID
	}
	return ""
}

func (x *DeleteFlowNodeRequest) GetDeleteBranch() bool {
	if x != nil {
		return x.DeleteBranch
	}
	return false
}

type DeleteFlowNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFlowNodeResponse) Reset() {
	*x = DeleteFlowNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowNodeResponse) ProtoMessage() {}

func (x *DeleteFlowNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlowNodeResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{8}
}

// reconstruction
type ReconstructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeID uint64 `protobuf:"varint,1,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
}

func (x *ReconstructionRequest) Reset() {
	*x = ReconstructionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconstructionRequest) ProtoMessage() {}

func (x *ReconstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconstructionRequest.ProtoReflect.Descriptor instead.
func (*ReconstructionRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{9}
}

func (x *ReconstructionRequest) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

type ReconstructionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconstructionResponse) Reset() {
	*x = ReconstructionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconstructionResponse) ProtoMessage() {}

func (x *ReconstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconstructionResponse.ProtoReflect.Descriptor instead.
func (*ReconstructionResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{10}
}

type PipelineStepInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PipelineID      uint64 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	YmlName         string `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	HasOnPushBranch bool   `protobuf:"varint,4,opt,name=hasOnPushBranch,proto3" json:"hasOnPushBranch,omitempty"`
	Inode           string `protobuf:"bytes,5,opt,name=inode,proto3" json:"inode,omitempty"`
	PInode          string `protobuf:"bytes,6,opt,name=pInode,proto3" json:"pInode,omitempty"`
}

func (x *PipelineStepInfo) Reset() {
	*x = PipelineStepInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStepInfo) ProtoMessage() {}

func (x *PipelineStepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStepInfo.ProtoReflect.Descriptor instead.
func (*PipelineStepInfo) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{11}
}

func (x *PipelineStepInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStepInfo) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStepInfo) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineStepInfo) GetHasOnPushBranch() bool {
	if x != nil {
		return x.HasOnPushBranch
	}
	return false
}

func (x *PipelineStepInfo) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *PipelineStepInfo) GetPInode() string {
	if x != nil {
		return x.PInode
	}
	return ""
}

type GetDevFlowInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID uint64 `protobuf:"varint,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	AppID   uint64 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch  string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GetDevFlowInfoRequest) Reset() {
	*x = GetDevFlowInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowInfoRequest) ProtoMessage() {}

func (x *GetDevFlowInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDevFlowInfoRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{12}
}

func (x *GetDevFlowInfoRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *GetDevFlowInfoRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *GetDevFlowInfoRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ChangeBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit     *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	BranchName string  `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Status     string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeBranch) Reset() {
	*x = ChangeBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBranch) ProtoMessage() {}

func (x *ChangeBranch) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBranch.ProtoReflect.Descriptor instead.
func (*ChangeBranch) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeBranch) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ChangeBranch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ChangeBranch) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DevFlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevFlow          *DevFlow          `protobuf:"bytes,1,opt,name=devFlow,proto3" json:"devFlow,omitempty"`
	HasPermission    bool              `protobuf:"varint,2,opt,name=hasPermission,proto3" json:"hasPermission,omitempty"`
	CodeNode         *CodeNode         `protobuf:"bytes,3,opt,name=codeNode,proto3" json:"codeNode,omitempty"`
	TempMergeNode    *TempMergeNode    `protobuf:"bytes,4,opt,name=tempMergeNode,proto3" json:"tempMergeNode,omitempty"`
	PipelineNode     *PipelineNode     `protobuf:"bytes,5,opt,name=pipelineNode,proto3" json:"pipelineNode,omitempty"`
	MergeRequestNode *MergeRequestNode `protobuf:"bytes,6,opt,name=mergeRequestNode,proto3" json:"mergeRequestNode,omitempty"`
}

func (x *DevFlowInfo) Reset() {
	*x = DevFlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlowInfo) ProtoMessage() {}

func (x *DevFlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlowInfo.ProtoReflect.Descriptor instead.
func (*DevFlowInfo) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{14}
}

func (x *DevFlowInfo) GetDevFlow() *DevFlow {
	if x != nil {
		return x.DevFlow
	}
	return nil
}

func (x *DevFlowInfo) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

func (x *DevFlowInfo) GetCodeNode() *CodeNode {
	if x != nil {
		return x.CodeNode
	}
	return nil
}

func (x *DevFlowInfo) GetTempMergeNode() *TempMergeNode {
	if x != nil {
		return x.TempMergeNode
	}
	return nil
}

func (x *DevFlowInfo) GetPipelineNode() *PipelineNode {
	if x != nil {
		return x.PipelineNode
	}
	return nil
}

func (x *DevFlowInfo) GetMergeRequestNode() *MergeRequestNode {
	if x != nil {
		return x.MergeRequestNode
	}
	return nil
}

type CodeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentBranch        string  `protobuf:"bytes,1,opt,name=currentBranch,proto3" json:"currentBranch,omitempty"`
	Commit               *Commit `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	IsJoinTempBranch     bool    `protobuf:"varint,3,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
	JoinTempBranchStatus string  `protobuf:"bytes,4,opt,name=joinTempBranchStatus,proto3" json:"joinTempBranchStatus,omitempty"`
	CanJoin              bool    `protobuf:"varint,5,opt,name=canJoin,proto3" json:"canJoin,omitempty"`
	Exist                bool    `protobuf:"varint,6,opt,name=exist,proto3" json:"exist,omitempty"`
	SourceBranch         string  `protobuf:"bytes,7,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
}

func (x *CodeNode) Reset() {
	*x = CodeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeNode) ProtoMessage() {}

func (x *CodeNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeNode.ProtoReflect.Descriptor instead.
func (*CodeNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{15}
}

func (x *CodeNode) GetCurrentBranch() string {
	if x != nil {
		return x.CurrentBranch
	}
	return ""
}

func (x *CodeNode) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *CodeNode) GetIsJoinTempBranch() bool {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return false
}

func (x *CodeNode) GetJoinTempBranchStatus() string {
	if x != nil {
		return x.JoinTempBranchStatus
	}
	return ""
}

func (x *CodeNode) GetCanJoin() bool {
	if x != nil {
		return x.CanJoin
	}
	return false
}

func (x *CodeNode) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *CodeNode) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

type TempMergeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TempBranch   string          `protobuf:"bytes,1,opt,name=tempBranch,proto3" json:"tempBranch,omitempty"`
	BaseCommit   *Commit         `protobuf:"bytes,2,opt,name=baseCommit,proto3" json:"baseCommit,omitempty"`
	ChangeBranch []*ChangeBranch `protobuf:"bytes,3,rep,name=changeBranch,proto3" json:"changeBranch,omitempty"`
}

func (x *TempMergeNode) Reset() {
	*x = TempMergeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempMergeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempMergeNode) ProtoMessage() {}

func (x *TempMergeNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempMergeNode.ProtoReflect.Descriptor instead.
func (*TempMergeNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{16}
}

func (x *TempMergeNode) GetTempBranch() string {
	if x != nil {
		return x.TempBranch
	}
	return ""
}

func (x *TempMergeNode) GetBaseCommit() *Commit {
	if x != nil {
		return x.BaseCommit
	}
	return nil
}

func (x *TempMergeNode) GetChangeBranch() []*ChangeBranch {
	if x != nil {
		return x.ChangeBranch
	}
	return nil
}

type PipelineNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineStepInfos []*PipelineStepInfo `protobuf:"bytes,1,rep,name=pipelineStepInfos,proto3" json:"pipelineStepInfos,omitempty"`
}

func (x *PipelineNode) Reset() {
	*x = PipelineNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineNode) ProtoMessage() {}

func (x *PipelineNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineNode.ProtoReflect.Descriptor instead.
func (*PipelineNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{17}
}

func (x *PipelineNode) GetPipelineStepInfos() []*PipelineStepInfo {
	if x != nil {
		return x.PipelineStepInfos
	}
	return nil
}

type MergeRequestNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentBranch    string               `protobuf:"bytes,1,opt,name=currentBranch,proto3" json:"currentBranch,omitempty"`
	TargetBranch     string               `protobuf:"bytes,2,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	Title            string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc             string               `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	MergeRequestInfo *pb.MergeRequestInfo `protobuf:"bytes,5,opt,name=mergeRequestInfo,proto3" json:"mergeRequestInfo,omitempty"`
}

func (x *MergeRequestNode) Reset() {
	*x = MergeRequestNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRequestNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestNode) ProtoMessage() {}

func (x *MergeRequestNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestNode.ProtoReflect.Descriptor instead.
func (*MergeRequestNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{18}
}

func (x *MergeRequestNode) GetCurrentBranch() string {
	if x != nil {
		return x.CurrentBranch
	}
	return ""
}

func (x *MergeRequestNode) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeRequestNode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MergeRequestNode) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MergeRequestNode) GetMergeRequestInfo() *pb.MergeRequestInfo {
	if x != nil {
		return x.MergeRequestInfo
	}
	return nil
}

type GetDevFlowInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevFlowInfos []*DevFlowInfo `protobuf:"bytes,1,rep,name=devFlowInfos,proto3" json:"devFlowInfos,omitempty"`
}

func (x *GetDevFlowInfoResponse) Reset() {
	*x = GetDevFlowInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowInfoResponse) ProtoMessage() {}

func (x *GetDevFlowInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDevFlowInfoResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{19}
}

func (x *GetDevFlowInfoResponse) GetDevFlowInfos() []*DevFlowInfo {
	if x != nil {
		return x.DevFlowInfos
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string     `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Author        *Signature `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Committer     *Signature `protobuf:"bytes,3,opt,name=committer,proto3" json:"committer,omitempty"`
	CommitMessage string     `protobuf:"bytes,4,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
	ParentSha     string     `protobuf:"bytes,5,opt,name=parentSha,proto3" json:"parentSha,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{20}
}

func (x *Commit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Commit) GetAuthor() *Signature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *Signature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *Commit) GetParentSha() string {
	if x != nil {
		return x.ParentSha
	}
	return ""
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	When  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=When,proto3" json:"When,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{21}
}

func (x *Signature) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Signature) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

type FlowCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       *FlowEventData `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ProjectID     string         `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	OrgID         string         `protobuf:"bytes,3,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ApplicationID string         `protobuf:"bytes,4,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
}

func (x *FlowCallbackRequest) Reset() {
	*x = FlowCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCallbackRequest) ProtoMessage() {}

func (x *FlowCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCallbackRequest.ProtoReflect.Descriptor instead.
func (*FlowCallbackRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{22}
}

func (x *FlowCallbackRequest) GetContent() *FlowEventData {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *FlowCallbackRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *FlowCallbackRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *FlowCallbackRequest) GetApplicationID() string {
	if x != nil {
		return x.ApplicationID
	}
	return ""
}

type FlowEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params           map[string]*structpb.Value `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IssueID          uint64                     `protobuf:"varint,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	Operator         string                     `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	TempBranch       string                     `protobuf:"bytes,4,opt,name=tempBranch,proto3" json:"tempBranch,omitempty"`
	SourceBranch     string                     `protobuf:"bytes,5,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch     string                     `protobuf:"bytes,6,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	AppName          string                     `protobuf:"bytes,7,opt,name=appName,proto3" json:"appName,omitempty"`
	ProjectName      string                     `protobuf:"bytes,8,opt,name=projectName,proto3" json:"projectName,omitempty"`
	IsJoinTempBranch string                     `protobuf:"bytes,9,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
}

func (x *FlowEventData) Reset() {
	*x = FlowEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEventData) ProtoMessage() {}

func (x *FlowEventData) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEventData.ProtoReflect.Descriptor instead.
func (*FlowEventData) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{23}
}

func (x *FlowEventData) GetParams() map[string]*structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FlowEventData) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *FlowEventData) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *FlowEventData) GetTempBranch() string {
	if x != nil {
		return x.TempBranch
	}
	return ""
}

func (x *FlowEventData) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *FlowEventData) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *FlowEventData) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FlowEventData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *FlowEventData) GetIsJoinTempBranch() string {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return ""
}

type FlowCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowCallbackResponse) Reset() {
	*x = FlowCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCallbackResponse) ProtoMessage() {}

func (x *FlowCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCallbackResponse.ProtoReflect.Descriptor instead.
func (*FlowCallbackResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{24}
}

var File_flow_proto protoreflect.FileDescriptor

var file_flow_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0xc2, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20,
	0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbd, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x7c, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x18, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x4f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4f, 0x6e, 0x50, 0x75, 0x73,
	0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x7e, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x66, 0x0a,
	0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a,
	0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x53,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x76,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x22, 0x65, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xb3, 0x03, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x51,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe1, 0x08, 0x0a, 0x0b, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x0e, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0xe0, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x1a, 0x30,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x2a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x7b, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x1a,
	0x0a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b,
	0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0xfa, 0x81, 0xf9, 0x1b, 0x1b, 0x0a, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x10, 0xc2, 0xc4, 0xcb,
	0x1c, 0x0b, 0x22, 0x03, 0x64, 0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_flow_proto_rawDescOnce sync.Once
	file_flow_proto_rawDescData = file_flow_proto_rawDesc
)

func file_flow_proto_rawDescGZIP() []byte {
	file_flow_proto_rawDescOnce.Do(func() {
		file_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_proto_rawDescData)
	})
	return file_flow_proto_rawDescData
}

var file_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_flow_proto_goTypes = []interface{}{
	(*IssueRelationExtra)(nil),     // 0: erda.apps.devflow.flow.IssueRelationExtra
	(*DevFlowNode)(nil),            // 1: erda.apps.devflow.flow.DevFlowNode
	(*CreateFlowNodeRequest)(nil),  // 2: erda.apps.devflow.flow.CreateFlowNodeRequest
	(*CreateFlowNodeResponse)(nil), // 3: erda.apps.devflow.flow.CreateFlowNodeResponse
	(*DevFlow)(nil),                // 4: erda.apps.devflow.flow.DevFlow
	(*OperationMergeRequest)(nil),  // 5: erda.apps.devflow.flow.OperationMergeRequest
	(*OperationMergeResponse)(nil), // 6: erda.apps.devflow.flow.OperationMergeResponse
	(*DeleteFlowNodeRequest)(nil),  // 7: erda.apps.devflow.flow.DeleteFlowNodeRequest
	(*DeleteFlowNodeResponse)(nil), // 8: erda.apps.devflow.flow.DeleteFlowNodeResponse
	(*ReconstructionRequest)(nil),  // 9: erda.apps.devflow.flow.ReconstructionRequest
	(*ReconstructionResponse)(nil), // 10: erda.apps.devflow.flow.ReconstructionResponse
	(*PipelineStepInfo)(nil),       // 11: erda.apps.devflow.flow.PipelineStepInfo
	(*GetDevFlowInfoRequest)(nil),  // 12: erda.apps.devflow.flow.GetDevFlowInfoRequest
	(*ChangeBranch)(nil),           // 13: erda.apps.devflow.flow.ChangeBranch
	(*DevFlowInfo)(nil),            // 14: erda.apps.devflow.flow.DevFlowInfo
	(*CodeNode)(nil),               // 15: erda.apps.devflow.flow.CodeNode
	(*TempMergeNode)(nil),          // 16: erda.apps.devflow.flow.TempMergeNode
	(*PipelineNode)(nil),           // 17: erda.apps.devflow.flow.PipelineNode
	(*MergeRequestNode)(nil),       // 18: erda.apps.devflow.flow.MergeRequestNode
	(*GetDevFlowInfoResponse)(nil), // 19: erda.apps.devflow.flow.GetDevFlowInfoResponse
	(*Commit)(nil),                 // 20: erda.apps.devflow.flow.Commit
	(*Signature)(nil),              // 21: erda.apps.devflow.flow.Signature
	(*FlowCallbackRequest)(nil),    // 22: erda.apps.devflow.flow.FlowCallbackRequest
	(*FlowEventData)(nil),          // 23: erda.apps.devflow.flow.FlowEventData
	(*FlowCallbackResponse)(nil),   // 24: erda.apps.devflow.flow.FlowCallbackResponse
	nil,                            // 25: erda.apps.devflow.flow.FlowEventData.ParamsEntry
	(*pb.MergeRequestInfo)(nil),    // 26: erda.openapiv1.gittar.MergeRequestInfo
	(*timestamppb.Timestamp)(nil),  // 27: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 28: google.protobuf.BoolValue
	(*structpb.Value)(nil),         // 29: google.protobuf.Value
}
var file_flow_proto_depIdxs = []int32{
	20, // 0: erda.apps.devflow.flow.DevFlowNode.commit:type_name -> erda.apps.devflow.flow.Commit
	20, // 1: erda.apps.devflow.flow.DevFlowNode.baseCommit:type_name -> erda.apps.devflow.flow.Commit
	26, // 2: erda.apps.devflow.flow.DevFlowNode.mergeRequestInfo:type_name -> erda.openapiv1.gittar.MergeRequestInfo
	4,  // 3: erda.apps.devflow.flow.CreateFlowNodeResponse.data:type_name -> erda.apps.devflow.flow.DevFlow
	27, // 4: erda.apps.devflow.flow.DevFlow.createdAt:type_name -> google.protobuf.Timestamp
	27, // 5: erda.apps.devflow.flow.DevFlow.updatedAt:type_name -> google.protobuf.Timestamp
	28, // 6: erda.apps.devflow.flow.OperationMergeRequest.enable:type_name -> google.protobuf.BoolValue
	20, // 7: erda.apps.devflow.flow.ChangeBranch.commit:type_name -> erda.apps.devflow.flow.Commit
	4,  // 8: erda.apps.devflow.flow.DevFlowInfo.devFlow:type_name -> erda.apps.devflow.flow.DevFlow
	15, // 9: erda.apps.devflow.flow.DevFlowInfo.codeNode:type_name -> erda.apps.devflow.flow.CodeNode
	16, // 10: erda.apps.devflow.flow.DevFlowInfo.tempMergeNode:type_name -> erda.apps.devflow.flow.TempMergeNode
	17, // 11: erda.apps.devflow.flow.DevFlowInfo.pipelineNode:type_name -> erda.apps.devflow.flow.PipelineNode
	18, // 12: erda.apps.devflow.flow.DevFlowInfo.mergeRequestNode:type_name -> erda.apps.devflow.flow.MergeRequestNode
	20, // 13: erda.apps.devflow.flow.CodeNode.commit:type_name -> erda.apps.devflow.flow.Commit
	20, // 14: erda.apps.devflow.flow.TempMergeNode.baseCommit:type_name -> erda.apps.devflow.flow.Commit
	13, // 15: erda.apps.devflow.flow.TempMergeNode.changeBranch:type_name -> erda.apps.devflow.flow.ChangeBranch
	11, // 16: erda.apps.devflow.flow.PipelineNode.pipelineStepInfos:type_name -> erda.apps.devflow.flow.PipelineStepInfo
	26, // 17: erda.apps.devflow.flow.MergeRequestNode.mergeRequestInfo:type_name -> erda.openapiv1.gittar.MergeRequestInfo
	14, // 18: erda.apps.devflow.flow.GetDevFlowInfoResponse.devFlowInfos:type_name -> erda.apps.devflow.flow.DevFlowInfo
	21, // 19: erda.apps.devflow.flow.Commit.author:type_name -> erda.apps.devflow.flow.Signature
	21, // 20: erda.apps.devflow.flow.Commit.committer:type_name -> erda.apps.devflow.flow.Signature
	27, // 21: erda.apps.devflow.flow.Signature.When:type_name -> google.protobuf.Timestamp
	23, // 22: erda.apps.devflow.flow.FlowCallbackRequest.content:type_name -> erda.apps.devflow.flow.FlowEventData
	25, // 23: erda.apps.devflow.flow.FlowEventData.params:type_name -> erda.apps.devflow.flow.FlowEventData.ParamsEntry
	29, // 24: erda.apps.devflow.flow.FlowEventData.ParamsEntry.value:type_name -> google.protobuf.Value
	2,  // 25: erda.apps.devflow.flow.FlowService.CreateFlowNode:input_type -> erda.apps.devflow.flow.CreateFlowNodeRequest
	5,  // 26: erda.apps.devflow.flow.FlowService.OperationMerge:input_type -> erda.apps.devflow.flow.OperationMergeRequest
	7,  // 27: erda.apps.devflow.flow.FlowService.DeleteFlowNode:input_type -> erda.apps.devflow.flow.DeleteFlowNodeRequest
	9,  // 28: erda.apps.devflow.flow.FlowService.Reconstruction:input_type -> erda.apps.devflow.flow.ReconstructionRequest
	12, // 29: erda.apps.devflow.flow.FlowService.GetDevFlowInfo:input_type -> erda.apps.devflow.flow.GetDevFlowInfoRequest
	22, // 30: erda.apps.devflow.flow.FlowService.FlowCallBack:input_type -> erda.apps.devflow.flow.FlowCallbackRequest
	3,  // 31: erda.apps.devflow.flow.FlowService.CreateFlowNode:output_type -> erda.apps.devflow.flow.CreateFlowNodeResponse
	6,  // 32: erda.apps.devflow.flow.FlowService.OperationMerge:output_type -> erda.apps.devflow.flow.OperationMergeResponse
	8,  // 33: erda.apps.devflow.flow.FlowService.DeleteFlowNode:output_type -> erda.apps.devflow.flow.DeleteFlowNodeResponse
	10, // 34: erda.apps.devflow.flow.FlowService.Reconstruction:output_type -> erda.apps.devflow.flow.ReconstructionResponse
	19, // 35: erda.apps.devflow.flow.FlowService.GetDevFlowInfo:output_type -> erda.apps.devflow.flow.GetDevFlowInfoResponse
	24, // 36: erda.apps.devflow.flow.FlowService.FlowCallBack:output_type -> erda.apps.devflow.flow.FlowCallbackResponse
	31, // [31:37] is the sub-list for method output_type
	25, // [25:31] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_flow_proto_init() }
func file_flow_proto_init() {
	if File_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueRelationExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconstructionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconstructionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStepInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempMergeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRequestNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flow_proto_goTypes,
		DependencyIndexes: file_flow_proto_depIdxs,
		MessageInfos:      file_flow_proto_msgTypes,
	}.Build()
	File_flow_proto = out.File
	file_flow_proto_rawDesc = nil
	file_flow_proto_goTypes = nil
	file_flow_proto_depIdxs = nil
}
